/**
 * openchemlib - Manipulate molecules
 * @version v5.6.1
 * @date 2018-12-01T14:24:39.986Z
 * @link https://github.com/cheminfo/openchemlib-js
 * @license BSD-3-Clause
*/
(function (root) {
    'use strict';

    function getExports($wnd) {

        var $doc = $wnd.document;
        var $gwt = {};
        var navigator = {
            userAgent: 'webkit'
        };

        function noop(){}

        var __gwtModuleFunction = noop;
        __gwtModuleFunction.__moduleStartupDone = noop;
        var $sendStats = noop;
        var $moduleName, $moduleBase;

        // Start GWT code 

var cggl = {};
var jl = {};
var cggcc = {};
var ji = {};
var cggcci = {};
var jlr = {};
var ju = {};
var ji2 = {};
var carc = {};
var carcc = {};
var carcc2 = {};
var carci = {};
var cargm = {};
var caru = {};
var cggccp = {};
var cggcs = {};
var cggcsi = {};
var cggdc = {};
var cgggc = {};
var cggis = {};
var cggic = {};
var jla = {};
var cggicc = {};
var cggici = {};
var cggts = {};
var cggtc = {};
var cgguc = {};
var cgguc2 = {};
var ja = {};
var jaf = {};
var jag = {};
var jai = {};
var juf = {};
var jnc = {};
var jt = {};
var jus = {};
var _;
var prototypesByTypeId_0;
var initFnList_0;
var PERMUTATION_NOT_SET = -1;
var permutationId = -1;
function getPermutationId(){
  return permutationId;
}

function setGwtProperty(propertyName, propertyValue){
  if (typeof window === 'object' && typeof window['$gwt'] === 'object') {
    window['$gwt'][propertyName] = propertyValue;
  }
}

function registerEntry_0(){
  return registerEntry();
}

function gwtOnLoad_0(errFn, modName, modBase, softPermutationId){
  cggl.ensureModuleInit();
  var initFnList = initFnList_0;
  $moduleName = modName;
  $moduleBase = modBase;
  permutationId = softPermutationId;
  function initializeModules(){
    for (var i = 0; i < initFnList.length; i++) {
      initFnList[i]();
    }
  }

  if (errFn) {
    try {
      $entry(initializeModules)();
    }
     catch (e) {
      errFn(modName, e);
    }
  }
   else {
    $entry(initializeModules)();
  }
}

cggl.ensureModuleInit = function ensureModuleInit(){
  if (initFnList_0 == null) {
    initFnList_0 = [];
  }
}
;
function addInitFunctions(){
  cggl.ensureModuleInit();
  var initFnList = initFnList_0;
  for (var i = 0; i < arguments.length; i++) {
    initFnList.push(arguments[i]);
  }
}

function uniqueId(id_0){
  return jsinterop.closure.getUniqueId(id_0);
}

function typeMarkerFn(){
}

function toString_12(object){
  if (Array.isArray(object) && hasTypeMarker(object)) {
    return jl.toString_1(object);
  }
  return object.toString();
}

function provide(namespace, optCtor){
  var cur = $wnd;
  if (namespace === '') {
    return cur;
  }
  var parts = namespace.split('.');
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript('var ' + parts[0]);
  }
  if (optCtor) {
    var clazz = optCtor.prototype.___clazz;
    clazz.jsConstructor = optCtor;
  }
  for (var part; parts.length && (part = parts.shift());) {
    cur = cur[part] = cur[part] || (!parts.length && optCtor || {});
  }
  return cur;
}

cggl.portableObjCreate = function portableObjCreate(obj){
  function F(){
  }

  ;
  F.prototype = obj || {};
  return new F;
}
;
cggl.maybeGetClassLiteralFromPlaceHolder = function maybeGetClassLiteralFromPlaceHolder(entry){
  return entry instanceof Array?entry[0]:null;
}
;
function makeLambdaFunction(samMethod, ctor, ctorArguments){
  var lambda = function(){
    return samMethod.apply(lambda, arguments);
  }
  ;
  ctor.apply(lambda, ctorArguments);
  return lambda;
}

function getClassPrototype(typeId){
  return prototypesByTypeId_0[typeId];
}

function emptyMethod(){
}

function defineProperties(proto, propertyDefinition){
  for (var key in propertyDefinition) {
    propertyDefinition[key]['configurable'] = true;
  }
  Object.defineProperties(proto, propertyDefinition);
}

function defineClass(typeId, superTypeIdOrPrototype, castableTypeMap){
  var prototypesByTypeId = prototypesByTypeId_0;
  var prototype_0 = prototypesByTypeId[typeId];
  var clazz = cggl.maybeGetClassLiteralFromPlaceHolder(prototype_0);
  if (prototype_0 && !clazz) {
    _ = prototype_0;
  }
   else {
    _ = cggl.createSubclassPrototype(superTypeIdOrPrototype);
    _.castableTypeMap = castableTypeMap;
    if (!superTypeIdOrPrototype) {
      _.typeMarker = typeMarkerFn;
    }
    prototypesByTypeId[typeId] = _;
  }
  for (var i = 3; i < arguments.length; ++i) {
    arguments[i].prototype = _;
  }
  if (clazz) {
    _.___clazz = clazz;
  }
}

cggl.createSubclassPrototype = function createSubclassPrototype(superTypeIdOrPrototype){
  var superPrototype = superTypeIdOrPrototype && superTypeIdOrPrototype.prototype;
  if (!superPrototype) {
    superPrototype = prototypesByTypeId_0[superTypeIdOrPrototype];
  }
  return cggl.portableObjCreate(superPrototype);
}
;
function copyObjectProperties(from, to){
  for (var property in from) {
    if (to[property] === undefined) {
      to[property] = from[property];
    }
  }
}

function bootstrap(){
  prototypesByTypeId_0 = {};
  if (!Array.isArray) {
    Array.isArray = function(vArg){
      return Object.prototype.toString.call(vArg) === '[object Array]';
    }
    ;
  }
  function now_0(){
    return (new Date).getTime();
  }

  if (!Date.now) {
    Date.now = now_0;
  }
}

bootstrap();
jl.$clinit_Object = function $clinit_Object(){
  jl.$clinit_Object = emptyMethod;
}
;
jl.$$init = function $$init(this$static){
}
;
jl.$equals = function $equals(this$static, other){
  return this$static === other;
}
;
jl.$finalize = function $finalize(this$static){
}
;
jl.$getClass = function $getClass(this$static){
  return this$static.___clazz;
}
;
jl.$hashCode = function $hashCode(this$static){
  return ji2.getObjectIdentityHashCode(this$static);
}
;
jl.$init__V__devirtual$ = function $init__V__devirtual$(this$static){
  return instanceOfString(this$static)?jl.$$init_2(this$static):instanceOfDouble(this$static)?jl.$$init_1(this$static):instanceOfBoolean(this$static)?jl.$$init_0(this$static):hasJavaObjectVirtualDispatch(this$static)?this$static.$init():jl.$$init(this$static);
}
;
function Object_0(){
  jl.$clinit_Object();
  jl.$init__V__devirtual$(this);
}

jl.equals_Ljava_lang_Object__Z__devirtual$ = function equals_Ljava_lang_Object__Z__devirtual$(this$static, other){
  jl.$clinit_Object();
  return instanceOfString(this$static)?jl.$equals_3(this$static, other):instanceOfDouble(this$static)?jl.$equals_2(this$static, other):instanceOfBoolean(this$static)?jl.$equals_1(this$static, other):hasJavaObjectVirtualDispatch(this$static)?this$static.equals_0(other):isJavaArray(this$static)?jl.$equals(this$static, other):cggcc.$equals_0(this$static, other);
}
;
jl.finalize__V__devirtual$ = function finalize__V__devirtual$(this$static){
  return instanceOfString(this$static)?jl.$finalize(this$static):instanceOfDouble(this$static)?jl.$finalize(this$static):instanceOfBoolean(this$static)?jl.$finalize(this$static):hasJavaObjectVirtualDispatch(this$static)?this$static.finalize():jl.$finalize(this$static);
}
;
jl.getClass__Ljava_lang_Class___devirtual$ = function getClass__Ljava_lang_Class___devirtual$(this$static){
  jl.$clinit_Object();
  return instanceOfString(this$static)?jl.$getClass_3(this$static):instanceOfDouble(this$static)?jl.$getClass_2(this$static):instanceOfBoolean(this$static)?jl.$getClass_1(this$static):hasJavaObjectVirtualDispatch(this$static)?this$static.___clazz:isJavaArray(this$static)?jl.$getClass(this$static):cggcc.$getClass_0(this$static);
}
;
jl.hashCode__I__devirtual$ = function hashCode__I__devirtual$(this$static){
  jl.$clinit_Object();
  return instanceOfString(this$static)?jl.$hashCode_3(this$static):instanceOfDouble(this$static)?jl.$hashCode_2(this$static):instanceOfBoolean(this$static)?jl.$hashCode_1(this$static):hasJavaObjectVirtualDispatch(this$static)?this$static.hashCode_0():isJavaArray(this$static)?jl.$hashCode(this$static):cggcc.$hashCode_0(this$static);
}
;
jl.toString_1 = function toString_1(object){
  jl.$clinit_Object();
  return jl.getClass__Ljava_lang_Class___devirtual$(object).getName_0() + '@' + toHexString(jl.hashCode__I__devirtual$(object));
}
;
defineClass(1, null, {1:1}, Object_0);
_.$init = function $init(){
  jl.$$init(this);
}
;
_.equals_0 = function equals(other){
  return jl.$equals(this, other);
}
;
_.finalize = function finalize(){
  jl.$finalize(this);
}
;
_.getClass_0 = function getClass_0(){
  return jl.$getClass(this);
}
;
_.hashCode_0 = function hashCode_0(){
  return jl.$hashCode(this);
}
;
_.toString_0 = function toString_0(){
  return jl.toString_1(this);
}
;
_.equals = function(other){
  return this.equals_0(other);
}
;
_.hashCode = function(){
  return this.hashCode_0();
}
;
_.toString = function(){
  return this.toString_0();
}
;
cggcc.$clinit_GWT = function $clinit_GWT(){
  cggcc.$clinit_GWT = emptyMethod;
  jl.$clinit_Object();
}
;
function create(classLiteral){
  cggcc.$clinit_GWT();
  return cggcs.createImpl(classLiteral);
}

function getModuleName(){
  cggcc.$clinit_GWT();
  return getModuleName_0();
}

function getUncaughtExceptionHandler(){
  cggcc.$clinit_GWT();
  return uncaughtExceptionHandler;
}

function isClient(){
  cggcc.$clinit_GWT();
  return true;
}

function isScript(){
  cggcc.$clinit_GWT();
  return true;
}

cggcc.log_0 = function log_0(message){
  cggcc.$clinit_GWT();
  cggcs.log_1(message);
}
;
function reportUncaughtException(e){
  cggcc.$clinit_GWT();
  reportUncaughtException_0(e);
}

defineClass(303, 1, {1:1});
var HOSTED_MODE_PERMUTATION_STRONG_NAME = 'HostedMode';
var uncaughtExceptionHandler = null;
ji.$clinit_Serializable = function $clinit_Serializable(){
  ji.$clinit_Serializable = emptyMethod;
}
;
jl.$clinit_Throwable = function $clinit_Throwable(){
  jl.$clinit_Throwable = emptyMethod;
  jl.$clinit_Object();
}
;
jl.Throwable = function Throwable(){
  jl.$clinit_Throwable();
  Object_0.call(this);
  this.$init_65();
  this.fillInStackTrace();
  this.initializeBackingError();
}
;
function Throwable_0(backingJsObject){
  jl.$clinit_Throwable();
  Object_0.call(this);
  this.$init_65();
  this.fillInStackTrace();
  this.setBackingJsObject(backingJsObject);
  this.detailMessage = valueOf_17(backingJsObject);
}

jl.Throwable_1 = function Throwable_1(message){
  jl.$clinit_Throwable();
  Object_0.call(this);
  this.$init_65();
  this.detailMessage = message;
  this.fillInStackTrace();
  this.initializeBackingError();
}
;
jl.Throwable_2 = function Throwable_2(message, cause){
  jl.$clinit_Throwable();
  Object_0.call(this);
  this.$init_65();
  this.cause = cause;
  this.detailMessage = message;
  this.fillInStackTrace();
  this.initializeBackingError();
}
;
jl.Throwable_3 = function Throwable_3(message, cause, enableSuppression, writetableStackTrace){
  Object_0.call(this);
  this.$init_65();
  this.cause = cause;
  this.detailMessage = message;
  this.writetableStackTrace = writetableStackTrace;
  this.disableSuppression = !enableSuppression;
  if (writetableStackTrace) {
    this.fillInStackTrace();
  }
  this.initializeBackingError();
}
;
jl.Throwable_4 = function Throwable_4(cause){
  jl.$clinit_Throwable();
  Object_0.call(this);
  this.$init_65();
  this.detailMessage = isNull(cause)?null:cause.toString_0();
  this.cause = cause;
  this.fillInStackTrace();
  this.initializeBackingError();
}
;
jl.fixIE = function fixIE(e){
  if (!('stack' in e)) {
    try {
      throw e;
    }
     catch (ignored) {
    }
  }
  return e;
}
;
function of(e){
  jl.$clinit_Throwable();
  var throwable;
  if (jsNotEquals(e, null)) {
    throwable = ji2.getProperty(e, '__java$exception');
    if (isNotNull(throwable)) {
      return throwable;
    }
  }
  return instanceOfNative(e, TypeError)?new jl.NullPointerException_0(e):new jl.JsException_0(e);
}

defineClass(13, 1, {4:1, 1:1, 13:1});
_.$init_65 = function $init_65(){
  this.stackTrace = initUnidimensionalArray(cggl.Ljava_lang_StackTraceElement_2_classLit, {4:1, 1:1, 8:1}, 42, 0, 0, 1);
  this.writetableStackTrace = true;
  this.backingJsObject = UNINITIALIZED;
}
;
_.addSuppressed = function addSuppressed(exception){
  ji2.checkNotNull_1(exception, 'Cannot suppress a null exception.');
  ji2.checkCriticalArgument_1(jsNotEquals(exception, this), 'Exception can not suppress itself.');
  if (this.disableSuppression) {
    return;
  }
  if (jsEquals(this.suppressedExceptions, null)) {
    this.suppressedExceptions = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_Throwable_2_classLit, 1), {4:1, 1:1, 8:1}, 13, 0, [exception]);
  }
   else {
    setCheck(this.suppressedExceptions, this.suppressedExceptions.length, exception);
  }
}
;
_.captureStackTrace = function captureStackTrace(){
  cggcci.captureStackTrace_0(this);
}
;
_.constructJavaStackTrace = function constructJavaStackTrace(){
  return cggcci.constructJavaStackTrace_0(this);
}
;
_.createError = function createError(msg){
  return new Error(msg);
}
;
_.fillInStackTrace = function fillInStackTrace(){
  if (this.writetableStackTrace) {
    if (maskUndefined(this.backingJsObject) !== maskUndefined(UNINITIALIZED)) {
      this.initializeBackingError();
    }
    this.stackTrace = null;
  }
  return this;
}
;
_.getBackingJsObject = function getBackingJsObject(){
  return this.backingJsObject;
}
;
_.getCause = function getCause(){
  return this.cause;
}
;
_.getLocalizedMessage = function getLocalizedMessage(){
  return this.getMessage();
}
;
_.getMessage = function getMessage(){
  return this.detailMessage;
}
;
_.getStackTrace = function getStackTrace(){
  if (jsEquals(this.stackTrace, null)) {
    this.stackTrace = this.constructJavaStackTrace();
  }
  return this.stackTrace;
}
;
_.getSuppressed = function getSuppressed(){
  if (jsEquals(this.suppressedExceptions, null)) {
    this.suppressedExceptions = initUnidimensionalArray(cggl.Ljava_lang_Throwable_2_classLit, {4:1, 1:1, 8:1}, 13, 0, 0, 1);
  }
  return this.suppressedExceptions;
}
;
_.initCause = function initCause(cause){
  ji2.checkState_0(isNull(this.cause), "Can't overwrite cause");
  ji2.checkCriticalArgument_1(jsNotEquals(cause, this), 'Self-causation not permitted');
  this.cause = cause;
  return this;
}
;
_.initializeBackingError = function initializeBackingError(){
  var errorMessage, message;
  message = jsEquals(this.detailMessage, null)?null:jl.nativeReplaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(this.detailMessage, '\n', ' ');
  errorMessage = this.toString_1(message);
  this.setBackingJsObject(jl.fixIE(this.createError(errorMessage)));
  this.captureStackTrace();
}
;
_.linkBack = function linkBack(error){
  if (jsNotEquals(error, null)) {
    ji2.setPropertySafe(error, '__java$exception', this);
  }
}
;
_.printStackTrace = function printStackTrace(){
  this.printStackTrace_0((jl.$clinit_System() , jl.err));
}
;
_.printStackTrace_0 = function printStackTrace_0(out){
  this.printStackTraceImpl(out, '', '');
}
;
_.printStackTraceImpl = function printStackTraceImpl(out, prefix, ident){
  var t, t$array, t$index, t$max, theCause;
  out.println(ident + ('' + prefix) + this);
  this.printStackTraceItems(out, ident);
  for (t$array = this.getSuppressed() , t$index = 0 , t$max = t$array.length; t$index < t$max; ++t$index) {
    t = t$array[t$index];
    t.printStackTraceImpl(out, 'Suppressed: ', '\t' + ident);
  }
  theCause = this.getCause();
  if (isNotNull(theCause)) {
    theCause.printStackTraceImpl(out, 'Caused by: ', ident);
  }
}
;
_.printStackTraceItems = function printStackTraceItems(out, ident){
  var element, element$array, element$index, element$max;
  for (element$array = this.getStackTrace() , element$index = 0 , element$max = element$array.length; element$index < element$max; ++element$index) {
    element = element$array[element$index];
    out.println(ident + '\tat ' + element);
  }
}
;
_.setBackingJsObject = function setBackingJsObject(backingJsObject){
  this.backingJsObject = backingJsObject;
  this.linkBack(backingJsObject);
}
;
_.setStackTrace = function setStackTrace(stackTrace){
  var copy, i, length_0;
  length_0 = stackTrace.length;
  copy = initUnidimensionalArray(cggl.Ljava_lang_StackTraceElement_2_classLit, {4:1, 1:1, 8:1}, 42, length_0, 0, 1);
  for (i = 0; i < length_0; ++i) {
    copy[i] = castTo(ji2.checkNotNull_0(stackTrace[i]), 42);
  }
  this.stackTrace = copy;
}
;
_.toString_0 = function toString_6(){
  return this.toString_1(this.getLocalizedMessage());
}
;
_.toString_1 = function toString_7(message){
  var className;
  className = jl.getClass__Ljava_lang_Class___devirtual$(this).getName_0();
  return jsEquals(message, null)?className:className + ': ' + message;
}
;
_.disableSuppression = false;
_.writetableStackTrace = false;
var UNINITIALIZED = '__noinit__';
jl.$clinit_Exception = function $clinit_Exception(){
  jl.$clinit_Exception = emptyMethod;
  jl.$clinit_Throwable();
}
;
jl.Exception = function Exception(){
  jl.$clinit_Exception();
  jl.Throwable.call(this);
  this.$init_66();
}
;
jl.Exception_0 = function Exception_0(backingJsObject){
  jl.$clinit_Exception();
  Throwable_0.call(this, backingJsObject);
  this.$init_66();
}
;
jl.Exception_1 = function Exception_1(message){
  jl.$clinit_Exception();
  jl.Throwable_1.call(this, message);
  this.$init_66();
}
;
jl.Exception_2 = function Exception_2(message, cause){
  jl.$clinit_Exception();
  jl.Throwable_2.call(this, message, cause);
  this.$init_66();
}
;
jl.Exception_3 = function Exception_3(cause){
  jl.$clinit_Exception();
  jl.Throwable_4.call(this, cause);
  this.$init_66();
}
;
defineClass(11, 13, {4:1, 11:1, 1:1, 13:1}, jl.Exception_1);
_.$init_66 = function $init_66(){
}
;
jl.$clinit_RuntimeException = function $clinit_RuntimeException(){
  jl.$clinit_RuntimeException = emptyMethod;
  jl.$clinit_Exception();
}
;
jl.RuntimeException = function RuntimeException(){
  jl.$clinit_RuntimeException();
  jl.Exception.call(this);
  this.$init_67();
}
;
jl.RuntimeException_0 = function RuntimeException_0(backingJsObject){
  jl.$clinit_RuntimeException();
  jl.Exception_0.call(this, backingJsObject);
  this.$init_67();
}
;
jl.RuntimeException_1 = function RuntimeException_1(message){
  jl.$clinit_RuntimeException();
  jl.Exception_1.call(this, message);
  this.$init_67();
}
;
jl.RuntimeException_2 = function RuntimeException_2(message, cause){
  jl.$clinit_RuntimeException();
  jl.Exception_2.call(this, message, cause);
  this.$init_67();
}
;
defineClass(16, 11, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.RuntimeException_1);
_.$init_67 = function $init_67(){
}
;
jl.$clinit_JsException = function $clinit_JsException(){
  jl.$clinit_JsException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.JsException = function JsException(){
  jl.$clinit_JsException();
  jl.RuntimeException.call(this);
  this.$init_72();
}
;
jl.JsException_0 = function JsException_0(backingJsObject){
  jl.$clinit_JsException();
  jl.RuntimeException_0.call(this, backingJsObject);
  this.$init_72();
}
;
jl.JsException_1 = function JsException_1(msg){
  jl.$clinit_JsException();
  jl.RuntimeException_1.call(this, msg);
  this.$init_72();
}
;
defineClass(72, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.JsException_0);
_.$init_72 = function $init_72(){
}
;
cggcci.$clinit_JavaScriptExceptionBase = function $clinit_JavaScriptExceptionBase(){
  cggcci.$clinit_JavaScriptExceptionBase = emptyMethod;
  jl.$clinit_JsException();
}
;
cggcci.JavaScriptExceptionBase = function JavaScriptExceptionBase(e){
  cggcci.$clinit_JavaScriptExceptionBase();
  jl.JsException_0.call(this, e);
  this.$init_73();
}
;
defineClass(227, 72, {4:1, 11:1, 1:1, 16:1, 13:1});
_.$init_73 = function $init_73(){
}
;
cggcc.$clinit_JavaScriptException = function $clinit_JavaScriptException(){
  cggcc.$clinit_JavaScriptException = emptyMethod;
  cggcci.$clinit_JavaScriptExceptionBase();
  cggcc.NOT_SET = new Object_0;
}
;
cggcc.JavaScriptException = function JavaScriptException(e){
  cggcc.$clinit_JavaScriptException();
  cggcc.JavaScriptException_0.call(this, e, '');
}
;
cggcc.JavaScriptException_0 = function JavaScriptException_0(e, description){
  cggcci.JavaScriptExceptionBase.call(this, e);
  this.$init_74();
  this.e = e;
  this.description = description;
}
;
cggcc.getExceptionDescription = function getExceptionDescription(e){
  if (instanceOfJso(e)) {
    return cggcc.getExceptionDescription0(castToJso(e));
  }
   else {
    return e + '';
  }
}
;
cggcc.getExceptionDescription0 = function getExceptionDescription0(e){
  return e == null?null:e.message;
}
;
cggcc.getExceptionName = function getExceptionName(e){
  if (jsEquals(e, null)) {
    return 'null';
  }
   else if (instanceOfJso(e)) {
    return cggcc.getExceptionName0(castToJso(e));
  }
   else if (instanceOfString(e)) {
    return 'String';
  }
   else {
    return jl.getClass__Ljava_lang_Class___devirtual$(e).getName_0();
  }
}
;
cggcc.getExceptionName0 = function getExceptionName0(e){
  return e == null?null:e.name;
}
;
defineClass(75, 227, {75:1, 4:1, 11:1, 1:1, 16:1, 13:1}, cggcc.JavaScriptException);
_.$init_74 = function $init_74(){
  this.description = '';
}
;
_.ensureInit = function ensureInit(){
  var exception;
  if (jsEquals(this.message_0, null)) {
    exception = this.getThrown();
    this.name_0 = cggcc.getExceptionName(exception);
    this.description = this.description + ': ' + cggcc.getExceptionDescription(exception);
    this.message_0 = '(' + this.name_0 + ') ' + this.description;
  }
}
;
_.getMessage = function getMessage_0(){
  this.ensureInit();
  return this.message_0;
}
;
_.getName_0 = function getName_1(){
  this.ensureInit();
  return this.name_0;
}
;
_.getThrown = function getThrown(){
  return maskUndefined(this.e) === maskUndefined(cggcc.NOT_SET)?null:this.e;
}
;
cggcc.$clinit_JavaScriptObject = function $clinit_JavaScriptObject(){
  cggcc.$clinit_JavaScriptObject = emptyMethod;
  jl.$clinit_Object();
}
;
cggcc.$cast = function $cast(this$static){
  cggcc.$clinit_JavaScriptObject();
  return this$static;
}
;
cggcc.$equals_0 = function $equals_0(this$static, other){
  cggcc.$clinit_JavaScriptObject();
  if (!isClient()) {
    return getClassPrototype(1).equals_0.call(this$static, other);
  }
  return cggcc.hasEquals(this$static)?cggcc.callEquals(this$static, other):getClassPrototype(1).equals_0.call(this$static, other);
}
;
cggcc.$getClass_0 = function $getClass_0(this$static){
  cggcc.$clinit_JavaScriptObject();
  return getClass_1(this$static);
}
;
cggcc.$hashCode_0 = function $hashCode_0(this$static){
  cggcc.$clinit_JavaScriptObject();
  if (!isClient()) {
    return getClassPrototype(1).hashCode_0.call(this$static);
  }
  return cggcc.hasHashCode(this$static)?cggcc.callHashCode(this$static):getClassPrototype(1).hashCode_0.call(this$static);
}
;
cggcc.callEquals = function callEquals(thisObject, thatObject){
  return thisObject.equals(thatObject);
}
;
cggcc.callHashCode = function callHashCode(object){
  return object.hashCode();
}
;
cggcc.createArray = function createArray(){
  cggcc.$clinit_JavaScriptObject();
  return [];
}
;
function createObject(){
  cggcc.$clinit_JavaScriptObject();
  return {};
}

cggcc.hasEquals = function hasEquals(object){
  return !!object && !!object.equals;
}
;
cggcc.hasHashCode = function hasHashCode(object){
  return !!object && !!object.hashCode;
}
;
cggcc.toStringSimple = function toStringSimple(obj){
  return obj.toString?obj.toString():'[JavaScriptObject]';
}
;
cggcc.toStringVerbose = function toStringVerbose(obj){
  var defined = function(m){
    return typeof m != 'undefined';
  }
  ;
  var strip = function(s){
    return s.replace(/\r\n/g, '');
  }
  ;
  if (defined(obj.outerHTML))
    return strip(obj.outerHTML);
  if (defined(obj.innerHTML) && obj.cloneNode) {
    $doc.createElement('div').appendChild(obj.cloneNode(true)).innerHTML;
  }
  if (defined(obj.nodeType) && obj.nodeType == 3) {
    return "'" + obj.data.replace(/ /g, '\u25AB').replace(/\u00A0/, '\u25AA') + "'";
  }
  if (typeof defined(obj.htmlText) && obj.collapse) {
    var html = obj.htmlText;
    if (html) {
      return 'IETextRange [' + strip(html) + ']';
    }
     else {
      var dup = obj.duplicate();
      dup.pasteHTML('|');
      var out = 'IETextRange ' + strip(obj.parentElement().outerHTML);
      dup.moveStart('character', -1);
      dup.pasteHTML('');
      return out;
    }
  }
  return obj.toString?obj.toString():'[JavaScriptObject]';
}
;
cggcci.$clinit_StackTraceCreator = function $clinit_StackTraceCreator(){
  cggcci.$clinit_StackTraceCreator = emptyMethod;
  var c, enforceLegacy;
  jl.$clinit_Object();
  cggcci.LINE_NUMBER_UNKNOWN = -1;
  {
    enforceLegacy = !cggcci.supportsErrorStack();
    c = castTo(new cggcci.StackTraceCreator$CollectorModernNoSourceMap, 98);
    cggcci.collector_1 = instanceOf(c, 99) && enforceLegacy?new cggcci.StackTraceCreator$CollectorLegacy:c;
  }
}
;
cggcci.captureStackTrace_0 = function captureStackTrace_0(error){
  cggcci.$clinit_StackTraceCreator();
  cggcci.collector_1.collect(error);
}
;
cggcci.constructJavaStackTrace_0 = function constructJavaStackTrace_0(thrown){
  cggcci.$clinit_StackTraceCreator();
  var stackTrace;
  stackTrace = cggcci.collector_1.getStackTrace_0(thrown);
  return cggcci.dropInternalFrames(stackTrace);
}
;
cggcci.dropInternalFrames = function dropInternalFrames(stackTrace){
  var dropFrameUntilFnName, dropFrameUntilFnName2, i, numberOfFramesToSearch;
  dropFrameUntilFnName = 'captureStackTrace_0';
  dropFrameUntilFnName2 = 'initializeBackingError';
  numberOfFramesToSearch = $wnd.Math.min(stackTrace.length, 5);
  for (i = numberOfFramesToSearch - 1; i >= 0; i--) {
    if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(stackTrace[i].getMethodName(), dropFrameUntilFnName) || jl.equals_Ljava_lang_Object__Z__devirtual$_2(stackTrace[i].getMethodName(), dropFrameUntilFnName2)) {
      cggcci.splice(stackTrace, i + 1);
      break;
    }
  }
  return stackTrace;
}
;
cggcci.extractFunctionName = function extractFunctionName(fnName){
  var fnRE = /function(?:\s+([\w$]+))?\s*\(/;
  var match_0 = fnRE.exec(fnName);
  return match_0 && match_0[1] || 'anonymous';
}
;
cggcci.getFnStack = function getFnStack(e){
  cggcci.$clinit_StackTraceCreator();
  return e && e['fnStack']?e['fnStack']:[];
}
;
cggcci.getFunctionName = function getFunctionName(fn){
  cggcci.$clinit_StackTraceCreator();
  return fn.name || (fn.name = cggcci.extractFunctionName(fn.toString()));
}
;
cggcci.parseInt_0 = function parseInt_0(number){
  cggcci.$clinit_StackTraceCreator();
  return parseInt(number) || -1;
}
;
cggcci.splice = function splice(arr, length_0){
  if (arr.length >= length_0) {
    ji2.removeFrom(arr, 0, length_0);
  }
}
;
cggcci.split_0 = function split_0(t){
  cggcci.$clinit_StackTraceCreator();
  var e = t.backingJsObject;
  return e && e.stack?e.stack.split('\n'):[];
}
;
cggcci.supportsErrorStack = function supportsErrorStack(){
  if (Error.stackTraceLimit > 0) {
    $wnd.Error.stackTraceLimit = Error.stackTraceLimit = 64;
    return true;
  }
  return 'stack' in new Error;
}
;
defineClass(392, 1, {1:1});
cggcci.ANONYMOUS = 'anonymous';
cggcci.DROP_FRAME_LIMIT = 5;
cggcci.LINE_NUMBER_UNKNOWN = 0;
cggcci.UNKNOWN = 'Unknown';
cggcci.$clinit_StackTraceCreator$Collector = function $clinit_StackTraceCreator$Collector(){
  cggcci.$clinit_StackTraceCreator$Collector = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.StackTraceCreator$Collector = function StackTraceCreator$Collector(){
  cggcci.$clinit_StackTraceCreator$Collector();
  Object_0.call(this);
  this.$init_94();
}
;
defineClass(98, 1, {1:1});
_.$init_94 = function $init_94(){
}
;
cggcci.$clinit_StackTraceCreator$CollectorLegacy = function $clinit_StackTraceCreator$CollectorLegacy(){
  cggcci.$clinit_StackTraceCreator$CollectorLegacy = emptyMethod;
  cggcci.$clinit_StackTraceCreator$Collector();
}
;
cggcci.StackTraceCreator$CollectorLegacy = function StackTraceCreator$CollectorLegacy(){
  cggcci.$clinit_StackTraceCreator$CollectorLegacy();
  cggcci.StackTraceCreator$Collector.call(this);
  this.$init_95();
}
;
defineClass(219, 98, {1:1}, cggcci.StackTraceCreator$CollectorLegacy);
_.$init_95 = function $init_95(){
}
;
_.collect = function collect(error){
  var seen = {};
  var fnStack = [];
  error['fnStack'] = fnStack;
  var callee = arguments.callee.caller;
  while (callee) {
    var name_0 = cggcci.getFunctionName(callee);
    fnStack.push(name_0);
    var keyName = ':' + name_0;
    var withThisName = seen[keyName];
    if (withThisName) {
      var i, j;
      for (i = 0 , j = withThisName.length; i < j; i++) {
        if (withThisName[i] === callee) {
          return;
        }
      }
    }
    (withThisName || (seen[keyName] = [])).push(callee);
    callee = callee.caller;
  }
}
;
_.getStackTrace_0 = function getStackTrace_0(t){
  var i, length_0, stack_0, stackTrace;
  stack_0 = cggcci.getFnStack(t);
  length_0 = cggcc.$length_0(stack_0);
  stackTrace = initUnidimensionalArray(cggl.Ljava_lang_StackTraceElement_2_classLit, {4:1, 1:1, 8:1}, 42, length_0, 0, 1);
  for (i = 0; i < length_0; i++) {
    stackTrace[i] = new jl.StackTraceElement('Unknown', cggcc.$get_0(stack_0, i), null, -1);
  }
  return stackTrace;
}
;
cggcci.$clinit_StackTraceCreator$CollectorModern = function $clinit_StackTraceCreator$CollectorModern(){
  cggcci.$clinit_StackTraceCreator$CollectorModern = emptyMethod;
  cggcci.$clinit_StackTraceCreator$Collector();
}
;
cggcci.StackTraceCreator$CollectorModern = function StackTraceCreator$CollectorModern(){
  cggcci.$clinit_StackTraceCreator$CollectorModern();
  cggcci.StackTraceCreator$Collector.call(this);
  this.$init_96();
}
;
defineClass(99, 98, {99:1, 1:1});
_.$init_96 = function $init_96(){
}
;
_.collect = function collect_0(error){
}
;
_.createSte = function createSte(fileName, method, line, col){
  return new jl.StackTraceElement('Unknown', method, fileName + '@' + col, line < 0?-1:line);
}
;
_.getStackTrace_0 = function getStackTrace_1(t){
  var addIndex, i, length_0, stack_0, stackTrace, ste;
  stack_0 = cggcci.split_0(t);
  stackTrace = initUnidimensionalArray(cggl.Ljava_lang_StackTraceElement_2_classLit, {4:1, 1:1, 8:1}, 42, 0, 0, 1);
  addIndex = 0;
  length_0 = cggcc.$length_0(stack_0);
  if (length_0 == 0) {
    return stackTrace;
  }
  ste = this.parse_3(cggcc.$get_0(stack_0, 0));
  if (!jl.equals_Ljava_lang_Object__Z__devirtual$_2(ste.getMethodName(), 'anonymous')) {
    stackTrace[addIndex++] = ste;
  }
  for (i = 1; i < length_0; i++) {
    stackTrace[addIndex++] = this.parse_3(cggcc.$get_0(stack_0, i));
  }
  return stackTrace;
}
;
_.parse_3 = function parse_3(stString){
  var closeParen, col, endFileUrlIndex, fileName, ieAnonymousFunctionName, index_0, lastColonIndex, line, location_0, toReturn;
  location_0 = '';
  if (jl.isEmpty__Z__devirtual$(stString)) {
    return this.createSte('Unknown', 'anonymous', -1, -1);
  }
  toReturn = jl.trim__Ljava_lang_String___devirtual$(stString);
  if (jl.startsWith_Ljava_lang_String__Z__devirtual$(toReturn, 'at ')) {
    toReturn = jl.substring_I_Ljava_lang_String___devirtual$(toReturn, 3);
  }
  toReturn = this.stripSquareBrackets(toReturn);
  index_0 = jl.indexOf_Ljava_lang_String__I__devirtual$(toReturn, '(');
  if (index_0 == -1) {
    index_0 = jl.indexOf_Ljava_lang_String__I__devirtual$(toReturn, '@');
    if (index_0 == -1) {
      location_0 = toReturn;
      toReturn = '';
    }
     else {
      location_0 = jl.trim__Ljava_lang_String___devirtual$(jl.substring_I_Ljava_lang_String___devirtual$(toReturn, index_0 + 1));
      toReturn = jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(toReturn, 0, index_0));
    }
  }
   else {
    closeParen = jl.indexOf_Ljava_lang_String_I_I__devirtual$(toReturn, ')', index_0);
    location_0 = jl.substring_II_Ljava_lang_String___devirtual$(toReturn, index_0 + 1, closeParen);
    toReturn = jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(toReturn, 0, index_0));
  }
  index_0 = jl.indexOf_I_I__devirtual$(toReturn, 46);
  if (index_0 != -1) {
    toReturn = jl.substring_I_Ljava_lang_String___devirtual$(toReturn, index_0 + 1);
  }
  ieAnonymousFunctionName = 'Anonymous function';
  if (jl.isEmpty__Z__devirtual$(toReturn) || jl.equals_Ljava_lang_Object__Z__devirtual$_2(toReturn, 'Anonymous function')) {
    toReturn = 'anonymous';
  }
  lastColonIndex = jl.lastIndexOf_I_I__devirtual$(location_0, 58);
  endFileUrlIndex = jl.lastIndexOf_II_I__devirtual$(location_0, 58, lastColonIndex - 1);
  line = -1;
  col = -1;
  fileName = 'Unknown';
  if (lastColonIndex != -1 && endFileUrlIndex != -1) {
    fileName = jl.substring_II_Ljava_lang_String___devirtual$(location_0, 0, endFileUrlIndex);
    line = cggcci.parseInt_0(jl.substring_II_Ljava_lang_String___devirtual$(location_0, endFileUrlIndex + 1, lastColonIndex));
    col = cggcci.parseInt_0(jl.substring_I_Ljava_lang_String___devirtual$(location_0, lastColonIndex + 1));
  }
  return this.createSte(fileName, toReturn, line, col);
}
;
_.stripSquareBrackets = function stripSquareBrackets(toReturn){
  return toReturn.replace(/\[.*?\]/g, '');
}
;
cggcci.$clinit_StackTraceCreator$CollectorModernNoSourceMap = function $clinit_StackTraceCreator$CollectorModernNoSourceMap(){
  cggcci.$clinit_StackTraceCreator$CollectorModernNoSourceMap = emptyMethod;
  cggcci.$clinit_StackTraceCreator$CollectorModern();
}
;
cggcci.StackTraceCreator$CollectorModernNoSourceMap = function StackTraceCreator$CollectorModernNoSourceMap(){
  cggcci.$clinit_StackTraceCreator$CollectorModernNoSourceMap();
  cggcci.StackTraceCreator$CollectorModern.call(this);
  this.$init_97();
}
;
defineClass(220, 99, {98:1, 99:1, 1:1}, cggcci.StackTraceCreator$CollectorModernNoSourceMap);
_.$init_97 = function $init_97(){
}
;
_.createSte = function createSte_0(fileName, method, line, col){
  return new jl.StackTraceElement('Unknown', method, fileName, -1);
}
;
cggl.$clinit_Array = function $clinit_Array(){
  cggl.$clinit_Array = emptyMethod;
  jl.$clinit_Object();
}
;
cggl.Array_0 = function Array_0(){
  Object_0.call(this);
  this.$init_110();
}
;
cggl.asArray = function asArray(array){
  return array;
}
;
cggl.canSet = function canSet(array, value_0){
  switch (cggl.getElementTypeCategory(array)) {
    case 6:
      return instanceOfString(value_0);
    case 7:
      return instanceOfDouble(value_0);
    case 8:
      return instanceOfBoolean(value_0);
    case 3:
      return instanceOfArray(value_0);
    case 11:
      return instanceOfFunction(value_0);
    case 12:
      return instanceOfJsObject(value_0);
    case 0:
      return canCast(value_0, cggl.getElementTypeId(array));
    case 2:
      return isJavaScriptObject(value_0);
    case 1:
      return isJavaScriptObject(value_0) || canCast(value_0, cggl.getElementTypeId(array));
    default:return true;
  }
}
;
function ensureNotNull(array){
  cggl.$clinit_Array();
  return ji2.checkNotNull_0(array);
}

function getClassLiteralForArray(clazz, dimensions){
  cggl.$clinit_Array();
  return cggl.getClassLiteralForArrayImpl(clazz, dimensions);
}

cggl.getClassLiteralForArrayImpl = function getClassLiteralForArrayImpl(clazz, dimensions){
  return jl.getClassLiteralForArray_0(clazz, dimensions);
}
;
cggl.getElementTypeCategory = function getElementTypeCategory(array){
  return array.__elementTypeCategory$ == null?10:array.__elementTypeCategory$;
}
;
cggl.getElementTypeId = function getElementTypeId(array){
  return array.__elementTypeId$;
}
;
function initMultidimensionalArray(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, count){
  cggl.$clinit_Array();
  return cggl.initMultidimensionalArray_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, 0, count);
}

cggl.initMultidimensionalArray_0 = function initMultidimensionalArray_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, index_0, count){
  var elementTypeCategory, i, isLastDimension, length_0, result;
  length_0 = dimExprs[index_0];
  isLastDimension = index_0 == count - 1;
  elementTypeCategory = isLastDimension?leafElementTypeCategory:0;
  result = cggl.initializeArrayElementsWithDefaults(elementTypeCategory, length_0);
  if (leafElementTypeCategory != 10) {
    stampJavaTypeInfo(getClassLiteralForArray(leafClassLiteral, count - index_0), castableTypeMapExprs[index_0], elementTypeIds[index_0], elementTypeCategory, result);
  }
  if (!isLastDimension) {
    ++index_0;
    for (i = 0; i < length_0; ++i) {
      cggl.set_5(result, i, cggl.initMultidimensionalArray_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, index_0, count));
    }
  }
  return result;
}
;
function initUnidimensionalArray(leafClassLiteral, castableTypeMap, elementTypeId, length_0, elementTypeCategory, dimensions){
  cggl.$clinit_Array();
  var result;
  result = cggl.initializeArrayElementsWithDefaults(elementTypeCategory, length_0);
  if (elementTypeCategory != 10) {
    stampJavaTypeInfo(getClassLiteralForArray(leafClassLiteral, dimensions), castableTypeMap, elementTypeId, elementTypeCategory, result);
  }
  return result;
}

cggl.initializeArrayElementsWithDefaults = function initializeArrayElementsWithDefaults(elementTypeCategory, length_0){
  var array = new Array(length_0);
  var initValue;
  switch (elementTypeCategory) {
    case 14:
    case 15:
      initValue = 0;
      break;
    case 16:
      initValue = false;
      break;
    default:return array;
  }
  for (var i = 0; i < length_0; ++i) {
    array[i] = initValue;
  }
  return array;
}
;
function isJavaArray(src_0){
  cggl.$clinit_Array();
  return isArray(src_0) && hasTypeMarker(src_0);
}

function isPrimitiveArray(array){
  cggl.$clinit_Array();
  var elementTypeCategory;
  elementTypeCategory = cggl.getElementTypeCategory(array);
  return elementTypeCategory >= 14 && elementTypeCategory <= 16;
}

function newArray_0(size_0){
  cggl.$clinit_Array();
  return new Array(size_0);
}

cggl.set_5 = function set_5(array, index_0, value_0){
  return array[index_0] = value_0;
}
;
function setCheck(array, index_0, value_0){
  cggl.$clinit_Array();
  ji2.checkArrayType(jsEquals(value_0, null) || cggl.canSet(array, value_0));
  return cggl.set_5(array, index_0, value_0);
}

cggl.setClass = function setClass(o, clazz){
  o.___clazz = clazz;
}
;
cggl.setElementTypeCategory = function setElementTypeCategory(array, elementTypeCategory){
  array.__elementTypeCategory$ = elementTypeCategory;
}
;
cggl.setElementTypeId = function setElementTypeId(array, elementTypeId){
  array.__elementTypeId$ = elementTypeId;
}
;
function stampJavaTypeInfo(arrayClass, castableTypeMap, elementTypeId, elementTypeCategory, array){
  cggl.$clinit_Array();
  cggl.setClass(array, arrayClass);
  setCastableTypeMap(array, castableTypeMap);
  setTypeMarker(array);
  cggl.setElementTypeId(array, elementTypeId);
  cggl.setElementTypeCategory(array, elementTypeCategory);
  return array;
}

cggl.stampJavaTypeInfo_0 = function stampJavaTypeInfo_0(array, referenceType){
  cggl.$clinit_Array();
  if (cggl.getElementTypeCategory(referenceType) != 10) {
    stampJavaTypeInfo(jl.getClass__Ljava_lang_Class___devirtual$(referenceType), getCastableTypeMap(referenceType), cggl.getElementTypeId(referenceType), cggl.getElementTypeCategory(referenceType), array);
  }
  return cggl.asArray(array);
}
;
defineClass(359, 1, {1:1});
_.$init_110 = function $init_110(){
}
;
var TYPE_ARRAY = 3;
var TYPE_JAVA_LANG_BOOLEAN = 8;
var TYPE_JAVA_LANG_DOUBLE = 7;
var TYPE_JAVA_LANG_OBJECT = 5;
var TYPE_JAVA_LANG_STRING = 6;
var TYPE_JAVA_OBJECT = 0;
var TYPE_JAVA_OBJECT_OR_JSO = 1;
var TYPE_JSO = 2;
var TYPE_JSO_ARRAY = 4;
var TYPE_JS_ARRAY = 13;
var TYPE_JS_FUNCTION = 11;
var TYPE_JS_NATIVE = 9;
var TYPE_JS_OBJECT = 12;
var TYPE_JS_UNKNOWN_NATIVE = 10;
var TYPE_PRIMITIVE_BOOLEAN = 16;
var TYPE_PRIMITIVE_LONG = 14;
var TYPE_PRIMITIVE_NUMBER = 15;
cggl.$clinit_Cast = function $clinit_Cast(){
  cggl.$clinit_Cast = emptyMethod;
  jl.$clinit_Object();
}
;
function Cast(){
  Object_0.call(this);
  this.$init_112();
}

function canCast(src_0, dstId){
  cggl.$clinit_Cast();
  if (instanceOfString(src_0)) {
    return !!stringCastMap[dstId];
  }
   else if (src_0.castableTypeMap) {
    return !!src_0.castableTypeMap[dstId];
  }
   else if (instanceOfDouble(src_0)) {
    return !!doubleCastMap[dstId];
  }
   else if (instanceOfBoolean(src_0)) {
    return !!booleanCastMap[dstId];
  }
  return false;
}

function canCastClass(srcClazz, dstClass){
  cggl.$clinit_Cast();
  var srcTypeId = srcClazz.typeId;
  var dstTypeId = dstClass.typeId;
  var prototype_0 = prototypesByTypeId_0[srcTypeId];
  return canCast(prototype_0, dstTypeId);
}

function castTo(src_0, dstId){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || canCast(src_0, dstId));
  return src_0;
}

function castToAllowJso(src_0, dstId){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || isJavaScriptObject(src_0) || canCast(src_0, dstId));
  return src_0;
}

function castToArray(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || instanceOfArray(src_0));
  return src_0;
}

function castToBoolean(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || instanceOfBoolean(src_0));
  return src_0;
}

function castToDouble(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || instanceOfDouble(src_0));
  return src_0;
}

function castToFunction(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || cggl.isFunction(src_0));
  return src_0;
}

function castToJsArray(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || instanceOfJsArray(src_0));
  return src_0;
}

function castToJsObject(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || cggl.isJsObject(src_0));
  return src_0;
}

function castToJso(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || isJavaScriptObject(src_0));
  return src_0;
}

function castToJsoArray(src_0, dstId){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || instanceOfJsoArray(src_0, dstId));
  return src_0;
}

function castToNative(src_0, jsType){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || cggl.jsinstanceOf(src_0, jsType));
  return src_0;
}

function castToString(src_0){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(src_0, null) || instanceOfString(src_0));
  return src_0;
}

function castToUnknownNative(src_0){
  cggl.$clinit_Cast();
  return src_0;
}

function charToString(x_0){
  cggl.$clinit_Cast();
  return String.fromCharCode(x_0);
}

function getClass_1(array){
  cggl.$clinit_Cast();
  return array.___clazz || (Array.isArray(array) && getClassLiteralForArray(cggl.Lcom_google_gwt_core_client_JavaScriptObject_2_classLit, 1) || cggl.Lcom_google_gwt_core_client_JavaScriptObject_2_classLit);
}

function hasJavaObjectVirtualDispatch(src_0){
  cggl.$clinit_Cast();
  return !isArray(src_0) && hasTypeMarker(src_0);
}

function instanceOf(src_0, dstId){
  cggl.$clinit_Cast();
  return jsNotEquals(src_0, null) && canCast(src_0, dstId);
}

function instanceOfAllowJso(src_0, dstId){
  cggl.$clinit_Cast();
  return jsNotEquals(src_0, null) && (isJavaScriptObject(src_0) || canCast(src_0, dstId));
}

function instanceOfArray(src_0){
  cggl.$clinit_Cast();
  return isArray(src_0) && !isPrimitiveArray(src_0);
}

function instanceOfBoolean(src_0){
  cggl.$clinit_Cast();
  return typeof src_0 === 'boolean';
}

function instanceOfDouble(src_0){
  cggl.$clinit_Cast();
  return typeof src_0 === 'number';
}

function instanceOfFunction(src_0){
  cggl.$clinit_Cast();
  return jsNotEquals(src_0, null) && cggl.isFunction(src_0);
}

function instanceOfJsArray(src_0){
  cggl.$clinit_Cast();
  return isArray(src_0);
}

function instanceOfJsObject(src_0){
  cggl.$clinit_Cast();
  return jsNotEquals(src_0, null) && cggl.isJsObject(src_0);
}

function instanceOfJso(src_0){
  cggl.$clinit_Cast();
  return jsNotEquals(src_0, null) && isJavaScriptObject(src_0);
}

function instanceOfJsoArray(src_0, dstId){
  cggl.$clinit_Cast();
  return canCast(src_0, dstId) || !hasTypeMarker(src_0) && isArray(src_0);
}

function instanceOfNative(src_0, jsType){
  cggl.$clinit_Cast();
  return cggl.jsinstanceOf(src_0, jsType);
}

function instanceOfString(src_0){
  cggl.$clinit_Cast();
  return typeof src_0 === 'string';
}

function instanceOfUnknownNative(src_0){
  cggl.$clinit_Cast();
  return jsNotEquals(src_0, null);
}

function isArray(src_0){
  cggl.$clinit_Cast();
  return Array.isArray(src_0);
}

cggl.isFunction = function isFunction(src_0){
  return typeof src_0 === 'function';
}
;
function isJavaScriptObject(src_0){
  cggl.$clinit_Cast();
  return cggl.isJsObjectOrFunction(src_0) && !hasTypeMarker(src_0);
}

cggl.isJsObject = function isJsObject(src_0){
  return typeof src_0 === 'object' || typeof src_0 == 'function';
}
;
cggl.isJsObjectOrFunction = function isJsObjectOrFunction(src_0){
  return typeof src_0 === 'object' || typeof src_0 === 'function';
}
;
function isNotNull(src_0){
  cggl.$clinit_Cast();
  return !!src_0;
}

function isNull(src_0){
  cggl.$clinit_Cast();
  return !src_0;
}

function jsEquals(a, b){
  cggl.$clinit_Cast();
  return a == b;
}

function jsNotEquals(a, b){
  cggl.$clinit_Cast();
  return a != b;
}

cggl.jsinstanceOf = function jsinstanceOf(obj, jsType){
  return obj && (jsType && obj instanceof jsType);
}
;
function maskUndefined(src_0){
  cggl.$clinit_Cast();
  return src_0 == null?null:src_0;
}

function narrow_byte(x_0){
  cggl.$clinit_Cast();
  return x_0 << 24 >> 24;
}

function narrow_char(x_0){
  cggl.$clinit_Cast();
  return x_0 & 65535;
}

function narrow_int(x_0){
  cggl.$clinit_Cast();
  return x_0 | 0;
}

function narrow_short(x_0){
  cggl.$clinit_Cast();
  return x_0 << 16 >> 16;
}

function round_byte(x_0){
  cggl.$clinit_Cast();
  return narrow_byte(round_int(x_0));
}

function round_char(x_0){
  cggl.$clinit_Cast();
  return narrow_char(round_int(x_0));
}

function round_int(x_0){
  cggl.$clinit_Cast();
  return Math.max(Math.min(x_0, 2147483647), -2147483648) | 0;
}

function round_short(x_0){
  cggl.$clinit_Cast();
  return narrow_short(round_int(x_0));
}

function throwClassCastExceptionUnlessNull(o){
  cggl.$clinit_Cast();
  ji2.checkType(jsEquals(o, null));
  return o;
}

defineClass(360, 1, {1:1});
_.$init_112 = function $init_112(){
}
;
var booleanCastMap;
var doubleCastMap;
var stringCastMap;
cggl.$clinit_Exceptions = function $clinit_Exceptions(){
  cggl.$clinit_Exceptions = emptyMethod;
  jl.$clinit_Object();
}
;
function Exceptions(){
  Object_0.call(this);
  this.$init_113();
}

function checkNotNull(arg){
  cggl.$clinit_Exceptions();
  if (arg == null) {
    throw new TypeError('null pointer');
  }
  return arg;
}

cggl.getJavaException = function getJavaException(e){
  return e && e['__java$exception'];
}
;
function makeAssertionError(){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError;
}

function makeAssertionError_Object(message){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError_5(message);
}

function makeAssertionError_boolean(message){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError_7(message);
}

function makeAssertionError_char(message){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError_0(message);
}

function makeAssertionError_double(message){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError_1(message);
}

function makeAssertionError_float(message){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError_2(message);
}

function makeAssertionError_int(message){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError_3(message);
}

function makeAssertionError_long(message){
  cggl.$clinit_Exceptions();
  return new jl.AssertionError_4(message);
}

function safeClose(resource, mainException){
  cggl.$clinit_Exceptions();
  var e;
  if (isNull(resource)) {
    return mainException;
  }
  try {
    resource.close_0();
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      e = $e0;
      if (isNull(mainException)) {
        return e;
      }
      mainException.addSuppressed(e);
    }
     else 
      throw toJs($e0);
  }
  return mainException;
}

function toJava(e){
  cggl.$clinit_Exceptions();
  var javaException;
  if (instanceOf(e, 13)) {
    return e;
  }
  javaException = cggl.getJavaException(e);
  if (isNull(javaException)) {
    javaException = new cggcc.JavaScriptException(e);
    cggcci.captureStackTrace_0(javaException);
  }
  return javaException;
}

function toJs(t){
  cggl.$clinit_Exceptions();
  return t.backingJsObject;
}

defineClass(362, 1, {1:1});
_.$init_113 = function $init_113(){
}
;
cggl.$clinit_Util_0 = function $clinit_Util_0(){
  cggl.$clinit_Util_0 = emptyMethod;
  jl.$clinit_Object();
}
;
function Util(){
  Object_0.call(this);
  this.$init_118();
}

function getCastableTypeMap(o){
  cggl.$clinit_Util_0();
  return o.castableTypeMap;
}

function hasTypeMarker(o){
  cggl.$clinit_Util_0();
  return o.typeMarker === typeMarkerFn;
}

function makeEnumName(enumName){
  cggl.$clinit_Util_0();
  return enumName;
}

function setCastableTypeMap(o, castableTypeMap){
  cggl.$clinit_Util_0();
  o.castableTypeMap = castableTypeMap;
}

function setTypeMarker(o){
  cggl.$clinit_Util_0();
  o.typeMarker = typeMarkerFn;
}

defineClass(367, 1, {1:1});
_.$init_118 = function $init_118(){
}
;
jl.$clinit_Error = function $clinit_Error(){
  jl.$clinit_Error = emptyMethod;
  jl.$clinit_Throwable();
}
;
jl.Error_0 = function Error_0(){
  jl.$clinit_Error();
  jl.Throwable.call(this);
  this.$init_123();
}
;
jl.Error_1 = function Error_1(message){
  jl.$clinit_Error();
  jl.Throwable_1.call(this, message);
  this.$init_123();
}
;
jl.Error_2 = function Error_2(message, cause){
  jl.$clinit_Error();
  jl.Throwable_2.call(this, message, cause);
  this.$init_123();
}
;
defineClass(50, 13, {4:1, 50:1, 1:1, 13:1});
_.$init_123 = function $init_123(){
}
;
jl.$clinit_AssertionError = function $clinit_AssertionError(){
  jl.$clinit_AssertionError = emptyMethod;
  jl.$clinit_Error();
}
;
jl.AssertionError = function AssertionError(){
  jl.$clinit_AssertionError();
  jl.Error_0.call(this);
  this.$init_124();
}
;
jl.AssertionError_0 = function AssertionError_0(message){
  jl.$clinit_AssertionError();
  jl.AssertionError_6.call(this, jl.valueOf_12(message));
}
;
jl.AssertionError_1 = function AssertionError_1(message){
  jl.$clinit_AssertionError();
  jl.AssertionError_6.call(this, jl.valueOf_13(message));
}
;
jl.AssertionError_2 = function AssertionError_2(message){
  jl.$clinit_AssertionError();
  jl.AssertionError_6.call(this, jl.valueOf_14(message));
}
;
jl.AssertionError_3 = function AssertionError_3(message){
  jl.$clinit_AssertionError();
  jl.AssertionError_6.call(this, jl.valueOf_15(message));
}
;
jl.AssertionError_4 = function AssertionError_4(message){
  jl.$clinit_AssertionError();
  jl.AssertionError_6.call(this, jl.valueOf_16(message));
}
;
jl.AssertionError_5 = function AssertionError_5(message){
  jl.$clinit_AssertionError();
  jl.Error_2.call(this, valueOf_17(message), instanceOf(message, 13)?castTo(message, 13):null);
  this.$init_124();
}
;
jl.AssertionError_6 = function AssertionError_6(message){
  jl.Error_1.call(this, message);
  this.$init_124();
}
;
jl.AssertionError_7 = function AssertionError_7(message){
  jl.$clinit_AssertionError();
  jl.AssertionError_6.call(this, jl.valueOf_18(message));
}
;
defineClass(21, 50, {4:1, 50:1, 1:1, 13:1}, jl.AssertionError, jl.AssertionError_0, jl.AssertionError_1, jl.AssertionError_2, jl.AssertionError_3, jl.AssertionError_4, jl.AssertionError_5, jl.AssertionError_7);
_.$init_124 = function $init_124(){
}
;
jl.$clinit_Comparable = function $clinit_Comparable(){
  jl.$clinit_Comparable = emptyMethod;
}
;
function $isInstance_2(instance){
  jl.$clinit_Comparable();
  var type_0;
  type_0 = typeof(instance);
  if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(type_0, 'boolean') || jl.equals_Ljava_lang_Object__Z__devirtual$_2(type_0, 'number') || jl.equals_Ljava_lang_Object__Z__devirtual$_2(type_0, 'string')) {
    return true;
  }
  return jsNotEquals(instance, null) && instance.$implements__java_lang_Comparable == true;
}

jl.$clinit_Boolean = function $clinit_Boolean(){
  jl.$clinit_Boolean = emptyMethod;
  jl.$clinit_Object();
  FALSE = jl.valueOf_3(false);
  TRUE = jl.valueOf_3(true);
  TYPE = cggl.Z_classLit;
}
;
jl.$$init_0 = function $$init_0(this$static){
}
;
jl.$booleanValue = function $booleanValue(this$static){
  return ji2.unsafeCastToBoolean(ji2.checkNotNull_0(this$static));
}
;
jl.$compareTo = function $compareTo(this$static, b){
  return compare_18(jl.booleanValue__Z__devirtual$(this$static), jl.booleanValue__Z__devirtual$(b));
}
;
jl.$compareTo_0 = function $compareTo_0(this$static, b){
  return jl.compareTo_Ljava_lang_Boolean__I__devirtual$(this$static, castToBoolean(b));
}
;
function $create(x_0){
  jl.$clinit_Boolean();
  return ji2.uncheckedCast(parseBoolean(x_0));
}

jl.$create_0 = function $create_0(x_0){
  return ji2.uncheckedCast(x_0);
}
;
jl.$equals_1 = function $equals_1(this$static, o){
  return maskUndefined(ji2.checkNotNull_0(this$static)) === maskUndefined(o);
}
;
jl.$getClass_1 = function $getClass_1(this$static){
  return cggl.Ljava_lang_Boolean_2_classLit;
}
;
jl.$hashCode_1 = function $hashCode_1(this$static){
  return jl.hashCode_5(jl.booleanValue__Z__devirtual$(this$static));
}
;
jl.$init__V__devirtual$_0 = function $init__V__devirtual$_0(this$static){
  return jl.$$init_0(this$static);
}
;
function $isInstance(instance){
  jl.$clinit_Boolean();
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2('boolean', typeof(instance));
}

function Boolean_0(s){
  Object_0.call(this);
  jl.$init__V__devirtual$_0(this);
  $create(s);
}

jl.Boolean_1 = function Boolean_1(value_0){
  Object_0.call(this);
  jl.$init__V__devirtual$_0(this);
  jl.$create_0(value_0);
}
;
jl.booleanValue__Z__devirtual$ = function booleanValue__Z__devirtual$(this$static){
  return jl.$booleanValue(this$static);
}
;
function compare_18(x_0, y_0){
  jl.$clinit_Boolean();
  return x_0 == y_0?0:x_0?1:-1;
}

jl.compareTo_Ljava_lang_Boolean__I__devirtual$ = function compareTo_Ljava_lang_Boolean__I__devirtual$(this$static, b){
  return jl.$compareTo(this$static, b);
}
;
jl.compareTo_Ljava_lang_Object__I__devirtual$ = function compareTo_Ljava_lang_Object__I__devirtual$(this$static, b){
  return jl.$compareTo_0(this$static, b);
}
;
jl.compareTo_Ljava_lang_Object__I__devirtual$_0 = function compareTo_Ljava_lang_Object__I__devirtual$_0(this$static, other){
  jl.$clinit_Boolean();
  return instanceOfString(this$static)?jl.$compareTo_3(this$static, other):instanceOfDouble(this$static)?jl.$compareTo_2(this$static, other):instanceOfBoolean(this$static)?jl.$compareTo_0(this$static, other):this$static.compareTo_1(other);
}
;
jl.equals_Ljava_lang_Object__Z__devirtual$_0 = function equals_Ljava_lang_Object__Z__devirtual$_0(this$static, o){
  return jl.$equals_1(this$static, o);
}
;
jl.getClass__Ljava_lang_Class___devirtual$_0 = function getClass__Ljava_lang_Class___devirtual$_0(this$static){
  return jl.$getClass_1(this$static);
}
;
jl.hashCode_5 = function hashCode_5(value_0){
  return value_0?1231:1237;
}
;
jl.hashCode__I__devirtual$_0 = function hashCode__I__devirtual$_0(this$static){
  return jl.$hashCode_1(this$static);
}
;
function logicalAnd(a, b){
  jl.$clinit_Boolean();
  return a && b;
}

function logicalOr(a, b){
  jl.$clinit_Boolean();
  return a || b;
}

function logicalXor(a, b){
  jl.$clinit_Boolean();
  return a ^ b;
}

function parseBoolean(s){
  jl.$clinit_Boolean();
  return jl.equalsIgnoreCase_Ljava_lang_String__Z__devirtual$('true', s);
}

jl.toString_14 = function toString_14(x_0){
  return jl.valueOf_18(x_0);
}
;
function valueOf_2(s){
  jl.$clinit_Boolean();
  return jl.valueOf_3(parseBoolean(s));
}

jl.valueOf_3 = function valueOf_3(b){
  return b?jl.$create_0(true):jl.$create_0(false);
}
;
booleanCastMap = {4:1, 211:1, 20:1, 1:1};
var FALSE;
var TRUE;
var TYPE;
jl.$clinit_CharSequence = function $clinit_CharSequence(){
  jl.$clinit_CharSequence = emptyMethod;
}
;
jl.$chars = function $chars(this$static){
  return jus.intStream_0(new jl.CharSequence$lambda$0$Type(this$static), 64 | 16384 | 16, false);
}
;
function $isInstance_1(instance){
  jl.$clinit_CharSequence();
  if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(typeof(instance), 'string')) {
    return true;
  }
  return jsNotEquals(instance, null) && instance.$implements__java_lang_CharSequence == true;
}

jl.$lambda$0 = function $lambda$0(this$static){
  var it;
  {
    it = new jl.CharSequence$1(this$static);
    return ju.spliterator_11(it, fromInt_0(jl.length__I__devirtual$(this$static)), 16);
  }
}
;
jlr.$clinit_Type = function $clinit_Type(){
  jlr.$clinit_Type = emptyMethod;
}
;
jl.$clinit_Class = function $clinit_Class(){
  jl.$clinit_Class = emptyMethod;
  jl.$clinit_Object();
}
;
jl.Class = function Class(){
  Object_0.call(this);
  this.$init_152();
  this.typeName = null;
  this.simpleName = null;
  this.packageName = null;
  this.compoundName = null;
  this.canonicalName = null;
  this.typeId = null;
  this.arrayLiterals = null;
}
;
jl.createClassObject = function createClassObject(packageName, compoundClassName, typeId){
  var clazz;
  clazz = new jl.Class;
  if (isClassMetadataEnabled()) {
    clazz.packageName = packageName;
    clazz.compoundName = compoundClassName;
  }
   else {
    synthesizeClassNamesFromTypeId(clazz, typeId);
  }
  return clazz;
}
;
function createForClass(packageName, compoundClassName, typeId, superclass){
  jl.$clinit_Class();
  var clazz;
  clazz = jl.createClassObject(packageName, compoundClassName, typeId);
  jl.maybeSetClassLiteral(typeId, clazz);
  clazz.superclass = superclass;
  return clazz;
}

function createForEnum(packageName, compoundClassName, typeId, superclass, enumConstantsFunc, enumValueOfFunc){
  jl.$clinit_Class();
  var clazz;
  clazz = jl.createClassObject(packageName, compoundClassName, typeId);
  jl.maybeSetClassLiteral(typeId, clazz);
  clazz.modifiers = isNotNull(enumConstantsFunc)?8:0;
  clazz.superclass = clazz.enumSuperclass = superclass;
  clazz.enumConstantsFunc = enumConstantsFunc;
  clazz.enumValueOfFunc = enumValueOfFunc;
  return clazz;
}

function createForInterface(packageName, compoundClassName){
  jl.$clinit_Class();
  var clazz;
  clazz = jl.createClassObject(packageName, compoundClassName, null);
  clazz.modifiers = 2;
  return clazz;
}

function createForPrimitive(className, primitiveTypeId){
  jl.$clinit_Class();
  var clazz;
  clazz = jl.createClassObject('', className, primitiveTypeId);
  clazz.typeId = primitiveTypeId;
  clazz.modifiers = 1;
  return clazz;
}

jl.getClassLiteralForArray_0 = function getClassLiteralForArray_0(leafClass, dimensions){
  jl.$clinit_Class();
  var arrayLiterals = leafClass.arrayLiterals = leafClass.arrayLiterals || [];
  return arrayLiterals[dimensions] || (arrayLiterals[dimensions] = leafClass.createClassLiteralForArray(dimensions));
}
;
function getPrototypeForClass(clazz){
  jl.$clinit_Class();
  if (clazz.isPrimitive()) {
    return null;
  }
  var typeId = clazz.typeId;
  return prototypesByTypeId_0[typeId];
}

jl.initializeNames = function initializeNames(clazz){
  if (clazz.isArray_0()) {
    var componentType = clazz.componentType;
    if (componentType.isPrimitive()) {
      clazz.typeName = '[' + componentType.typeId;
    }
     else if (!componentType.isArray_0()) {
      clazz.typeName = '[L' + componentType.getName_0() + ';';
    }
     else {
      clazz.typeName = '[' + componentType.getName_0();
    }
    clazz.canonicalName = componentType.getCanonicalName() + '[]';
    clazz.simpleName = componentType.getSimpleName() + '[]';
    return;
  }
  var packageName = clazz.packageName;
  var compoundName = clazz.compoundName;
  compoundName = compoundName.split('/');
  clazz.typeName = jl.join_0('.', [packageName, jl.join_0('$', compoundName)]);
  clazz.canonicalName = jl.join_0('.', [packageName, jl.join_0('.', compoundName)]);
  clazz.simpleName = compoundName[compoundName.length - 1];
}
;
function isClassMetadataEnabled(){
  jl.$clinit_Class();
  return false;
}

jl.join_0 = function join_0(separator, strings){
  var i = 0;
  while (!strings[i] || strings[i] == '') {
    i++;
  }
  var result = strings[i++];
  for (; i < strings.length; i++) {
    if (!strings[i] || strings[i] == '') {
      continue;
    }
    result += separator + strings[i];
  }
  return result;
}
;
jl.maybeSetClassLiteral = function maybeSetClassLiteral(typeId, clazz){
  var proto;
  if (!typeId) {
    return;
  }
  clazz.typeId = typeId;
  var prototype_0 = getPrototypeForClass(clazz);
  if (!prototype_0) {
    prototypesByTypeId_0[typeId] = [clazz];
    return;
  }
  prototype_0.___clazz = clazz;
}
;
function synthesizeClassNamesFromTypeId(clazz, typeId){
  jl.$clinit_Class();
  clazz.typeName = 'Class$' + (!!typeId?'S' + typeId:'' + clazz.sequentialId);
  clazz.canonicalName = clazz.typeName;
  clazz.simpleName = clazz.typeName;
}

defineClass(132, 1, {1:1}, jl.Class);
_.$init_152 = function $init_152(){
  this.sequentialId = nextSequentialId++;
}
;
_.createClassLiteralForArray = function createClassLiteralForArray(dimensions){
  var clazz;
  clazz = new jl.Class;
  clazz.modifiers = 4;
  clazz.superclass = cggl.Ljava_lang_Object_2_classLit;
  if (dimensions > 1) {
    clazz.componentType = jl.getClassLiteralForArray_0(this, dimensions - 1);
  }
   else {
    clazz.componentType = this;
  }
  return clazz;
}
;
_.desiredAssertionStatus = function desiredAssertionStatus(){
  return false;
}
;
_.ensureNamesAreInitialized = function ensureNamesAreInitialized(){
  if (jsNotEquals(this.typeName, null)) {
    return;
  }
  jl.initializeNames(this);
}
;
_.getCanonicalName = function getCanonicalName(){
  this.ensureNamesAreInitialized();
  return this.canonicalName;
}
;
_.getComponentType = function getComponentType(){
  return this.componentType;
}
;
_.getName_0 = function getName_3(){
  this.ensureNamesAreInitialized();
  return this.typeName;
}
;
_.getSimpleName = function getSimpleName(){
  this.ensureNamesAreInitialized();
  return this.simpleName;
}
;
_.isArray_0 = function isArray_0(){
  return (this.modifiers & 4) != 0;
}
;
_.isInterface = function isInterface(){
  return (this.modifiers & 2) != 0;
}
;
_.isPrimitive = function isPrimitive(){
  return (this.modifiers & 1) != 0;
}
;
_.toString_0 = function toString_18(){
  return (this.isInterface()?'interface ':this.isPrimitive()?'':'class ') + ('' + this.getName_0());
}
;
_.modifiers = 0;
_.sequentialId = 0;
var ARRAY = 4;
var ENUM = 8;
var INTERFACE = 2;
var PRIMITIVE = 1;
var nextSequentialId = 1;
jl.$clinit_ClassCastException = function $clinit_ClassCastException(){
  jl.$clinit_ClassCastException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.ClassCastException = function ClassCastException(message){
  jl.$clinit_ClassCastException();
  jl.RuntimeException_1.call(this, message);
  this.$init_153();
}
;
defineClass(214, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.ClassCastException);
_.$init_153 = function $init_153(){
}
;
jl.$clinit_Number = function $clinit_Number(){
  jl.$clinit_Number = emptyMethod;
  jl.$clinit_Object();
}
;
jl.$init__V__devirtual$_1 = function $init__V__devirtual$_1(this$static){
  return instanceOfDouble(this$static)?jl.$$init_1(this$static):this$static.$init_148();
}
;
jl.$isInstance_0 = function $isInstance_0(instance){
  jl.$clinit_Number();
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2('number', typeof(instance)) || instanceOfNative(instance, $wnd.java.lang.Number$impl);
}
;
jl.Number_0 = function Number_0(){
  jl.$clinit_Number();
  Object_0.call(this);
  jl.$init__V__devirtual$_1(this);
}
;
jl.__decodeAndValidateInt = function __decodeAndValidateInt(s, lowerBound, upperBound){
  var decode;
  decode = jl.__decodeNumberString(s);
  return jl.__parseAndValidateInt(decode.payload, decode.radix, lowerBound, upperBound);
}
;
jl.__decodeNumberString = function __decodeNumberString(s){
  var negative, radix;
  if (jl.startsWith_Ljava_lang_String__Z__devirtual$(s, '-')) {
    negative = true;
    s = jl.substring_I_Ljava_lang_String___devirtual$(s, 1);
  }
   else {
    negative = false;
    if (jl.startsWith_Ljava_lang_String__Z__devirtual$(s, '+')) {
      s = jl.substring_I_Ljava_lang_String___devirtual$(s, 1);
    }
  }
  if (jl.startsWith_Ljava_lang_String__Z__devirtual$(s, '0x') || jl.startsWith_Ljava_lang_String__Z__devirtual$(s, '0X')) {
    s = jl.substring_I_Ljava_lang_String___devirtual$(s, 2);
    radix = 16;
  }
   else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(s, '#')) {
    s = jl.substring_I_Ljava_lang_String___devirtual$(s, 1);
    radix = 16;
  }
   else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(s, '0')) {
    radix = 8;
  }
   else {
    radix = 10;
  }
  if (negative) {
    s = '-' + s;
  }
  return new jl.Number$__Decode(radix, s);
}
;
jl.__isValidDouble = function __isValidDouble(str){
  if (jsEquals(jl.floatRegex, null)) {
    jl.floatRegex = new RegExp('^\\s*[+-]?(NaN|Infinity|((\\d+\\.?\\d*)|(\\.\\d+))([eE][+-]?\\d+)?[dDfF]?)\\s*$');
  }
  return jl.floatRegex.test(str);
}
;
jl.__parseAndValidateDouble = function __parseAndValidateDouble(s){
  jl.$clinit_Number();
  if (!jl.__isValidDouble(s)) {
    throw toJs(jl.forInputString(s));
  }
  return parseFloat(s);
}
;
jl.__parseAndValidateInt = function __parseAndValidateInt(s, radix, lowerBound, upperBound){
  jl.$clinit_Number();
  var i, isTooLow, length_0, startIndex, toReturn;
  if (jsEquals(s, null)) {
    throw toJs(jl.forNullInputString());
  }
  if (radix < 2 || radix > 36) {
    throw toJs(jl.forRadix(radix));
  }
  length_0 = jl.length__I__devirtual$_0(s);
  startIndex = length_0 > 0 && (jl.charAt_I_C__devirtual$_0(s, 0) == 45 || jl.charAt_I_C__devirtual$_0(s, 0) == 43)?1:0;
  for (i = startIndex; i < length_0; i++) {
    if (digit_0(jl.charAt_I_C__devirtual$_0(s, i), radix) == -1) {
      throw toJs(jl.forInputString(s));
    }
  }
  toReturn = parseInt(s, radix);
  isTooLow = toReturn < lowerBound;
  if (isNaN(toReturn)) {
    throw toJs(jl.forInputString(s));
  }
   else if (isTooLow || toReturn > upperBound) {
    throw toJs(jl.forInputString(s));
  }
  return toReturn;
}
;
jl.__parseAndValidateLong = function __parseAndValidateLong(s, radix){
  var c, firstTime, head, i, length_0, maxDigits, minValue, negative, orig, radixPower, toReturn;
  if (jsEquals(s, null)) {
    throw toJs(jl.forNullInputString());
  }
  if (radix < 2 || radix > 36) {
    throw toJs(jl.forRadix(radix));
  }
  orig = s;
  length_0 = jl.length__I__devirtual$_0(s);
  negative = false;
  if (length_0 > 0) {
    c = jl.charAt_I_C__devirtual$_0(s, 0);
    if (c == 45 || c == 43) {
      s = jl.substring_I_Ljava_lang_String___devirtual$(s, 1);
      length_0--;
      negative = c == 45;
    }
  }
  if (length_0 == 0) {
    throw toJs(jl.forInputString(orig));
  }
  while (jl.length__I__devirtual$_0(s) > 0 && jl.charAt_I_C__devirtual$_0(s, 0) == 48) {
    s = jl.substring_I_Ljava_lang_String___devirtual$(s, 1);
    length_0--;
  }
  if (length_0 > (jl.$clinit_Number$__ParseLong() , jl.maxLengthForRadix)[radix]) {
    throw toJs(jl.forInputString(orig));
  }
  for (i = 0; i < length_0; i++) {
    if (digit_0(jl.charAt_I_C__devirtual$_0(s, i), radix) == -1) {
      throw toJs(jl.forInputString(orig));
    }
  }
  toReturn = 0;
  maxDigits = (jl.$clinit_Number$__ParseLong() , jl.maxDigitsForRadix)[radix];
  radixPower = fromInt_0((jl.$clinit_Number$__ParseLong() , jl.maxDigitsRadixPower)[radix]);
  minValue = neg_0((jl.$clinit_Number$__ParseLong() , jl.maxValueForRadix)[radix]);
  firstTime = true;
  head = length_0 % maxDigits;
  if (head > 0) {
    toReturn = fromInt_0(-parseInt(jl.substring_II_Ljava_lang_String___devirtual$(s, 0, head), radix));
    s = jl.substring_I_Ljava_lang_String___devirtual$(s, head);
    length_0 -= head;
    firstTime = false;
  }
  while (length_0 >= maxDigits) {
    head = parseInt(jl.substring_II_Ljava_lang_String___devirtual$(s, 0, maxDigits), radix);
    s = jl.substring_I_Ljava_lang_String___devirtual$(s, maxDigits);
    length_0 -= maxDigits;
    if (!firstTime) {
      if (lt(toReturn, minValue)) {
        throw toJs(jl.forInputString(orig));
      }
      toReturn = mul_0(toReturn, radixPower);
    }
     else {
      firstTime = false;
    }
    toReturn = sub_1(toReturn, fromInt_0(head));
  }
  if (gt(toReturn, 0)) {
    throw toJs(jl.forInputString(orig));
  }
  if (!negative) {
    toReturn = neg_0(toReturn);
    if (lt(toReturn, 0)) {
      throw toJs(jl.forInputString(orig));
    }
  }
  return toReturn;
}
;
jl.byteValue__B__devirtual$ = function byteValue__B__devirtual$(this$static){
  return instanceOfDouble(this$static)?jl.$byteValue(this$static):this$static.byteValue();
}
;
jl.doubleValue__D__devirtual$ = function doubleValue__D__devirtual$(this$static){
  return instanceOfDouble(this$static)?jl.$doubleValue(this$static):this$static.doubleValue();
}
;
jl.floatValue__F__devirtual$ = function floatValue__F__devirtual$(this$static){
  return instanceOfDouble(this$static)?jl.$floatValue(this$static):this$static.floatValue();
}
;
jl.getClass__Ljava_lang_Class___devirtual$_1 = function getClass__Ljava_lang_Class___devirtual$_1(this$static){
  return instanceOfDouble(this$static)?jl.$getClass_2(this$static):this$static.___clazz;
}
;
jl.intValue__I__devirtual$ = function intValue__I__devirtual$(this$static){
  return instanceOfDouble(this$static)?jl.$intValue(this$static):this$static.intValue();
}
;
jl.longValue__J__devirtual$ = function longValue__J__devirtual$(this$static){
  return instanceOfDouble(this$static)?jl.$longValue(this$static):this$static.longValue();
}
;
jl.shortValue__S__devirtual$ = function shortValue__S__devirtual$(this$static){
  return instanceOfDouble(this$static)?jl.$shortValue(this$static):this$static.shortValue();
}
;
defineClass(59, 1, {4:1, 1:1});
_.$init_148 = function $init_148(){
}
;
_.byteValue = function byteValue(){
  return narrow_byte(jl.intValue__I__devirtual$(this));
}
;
_.shortValue = function shortValue(){
  return narrow_short(jl.intValue__I__devirtual$(this));
}
;
jl.$clinit_Double = function $clinit_Double(){
  jl.$clinit_Double = emptyMethod;
  jl.$clinit_Number();
  MIN_EXPONENT = -1022;
  NaN_0 = 0 / 0;
  NEGATIVE_INFINITY = -1 / 0;
  POSITIVE_INFINITY = 1 / 0;
  BYTES_0 = narrow_int(64 / 8);
  TYPE_2 = cggl.D_classLit;
}
;
jl.$$init_1 = function $$init_1(this$static){
}
;
jl.$byteValue = function $byteValue(this$static){
  return round_byte(jl.doubleValue__D__devirtual$_0(this$static));
}
;
jl.$compareTo_1 = function $compareTo_1(this$static, b){
  return compare_21(jl.doubleValue__D__devirtual$_0(this$static), jl.doubleValue__D__devirtual$_0(b));
}
;
jl.$compareTo_2 = function $compareTo_2(this$static, b){
  return jl.compareTo_Ljava_lang_Double__I__devirtual$(this$static, castToDouble(b));
}
;
jl.$create_1 = function $create_1(x_0){
  return ji2.uncheckedCast(x_0);
}
;
function $create_2(s){
  jl.$clinit_Double();
  return ji2.uncheckedCast(parseDouble(s));
}

jl.$doubleValue = function $doubleValue(this$static){
  return ji2.unsafeCastToDouble(ji2.checkNotNull_0(this$static));
}
;
jl.$equals_2 = function $equals_2(this$static, o){
  return maskUndefined(ji2.checkNotNull_0(this$static)) === maskUndefined(o);
}
;
jl.$floatValue = function $floatValue(this$static){
  return jl.doubleValue__D__devirtual$_0(this$static);
}
;
jl.$getClass_2 = function $getClass_2(this$static){
  return cggl.Ljava_lang_Double_2_classLit;
}
;
jl.$hashCode_2 = function $hashCode_2(this$static){
  return jl.hashCode_10(jl.doubleValue__D__devirtual$_0(this$static));
}
;
jl.$init__V__devirtual$_2 = function $init__V__devirtual$_2(this$static){
  return jl.$$init_1(this$static);
}
;
jl.$intValue = function $intValue(this$static){
  return round_int(jl.doubleValue__D__devirtual$_0(this$static));
}
;
jl.$isInfinite = function $isInfinite(this$static){
  return jl.isInfinite(jl.doubleValue__D__devirtual$_0(this$static));
}
;
function $isInstance_3(instance){
  jl.$clinit_Double();
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2('number', typeof(instance));
}

jl.$isNaN = function $isNaN(this$static){
  return isNaN(jl.doubleValue__D__devirtual$_0(this$static));
}
;
jl.$longValue = function $longValue(this$static){
  return fromDouble_0(jl.doubleValue__D__devirtual$_0(this$static));
}
;
jl.$shortValue = function $shortValue(this$static){
  return round_short(jl.doubleValue__D__devirtual$_0(this$static));
}
;
jl.Double = function Double(value_0){
  jl.Number_0.call(this);
  jl.$init__V__devirtual$_2(this);
  jl.$create_1(value_0);
}
;
function Double_0(s){
  jl.Number_0.call(this);
  jl.$init__V__devirtual$_2(this);
  $create_2(s);
}

jl.byteValue__B__devirtual$_0 = function byteValue__B__devirtual$_0(this$static){
  return jl.$byteValue(this$static);
}
;
function compare_21(x_0, y_0){
  jl.$clinit_Double();
  if (x_0 < y_0) {
    return -1;
  }
  if (x_0 > y_0) {
    return 1;
  }
  if (x_0 == y_0) {
    return 0;
  }
  if (isNaN(x_0)) {
    if (isNaN(y_0)) {
      return 0;
    }
     else {
      return 1;
    }
  }
   else {
    return -1;
  }
}

jl.compareTo_Ljava_lang_Double__I__devirtual$ = function compareTo_Ljava_lang_Double__I__devirtual$(this$static, b){
  return jl.$compareTo_1(this$static, b);
}
;
jl.compareTo_Ljava_lang_Object__I__devirtual$_1 = function compareTo_Ljava_lang_Object__I__devirtual$_1(this$static, b){
  return jl.$compareTo_2(this$static, b);
}
;
function doubleToLongBits(value_0){
  jl.$clinit_Double();
  var bit, exp_0, i, ihi, ilo, negative;
  if (isNaN(value_0)) {
    return {l:0, m:0, h:524160};
  }
  negative = false;
  if (value_0 == 0) {
    if (1 / value_0 == -Infinity) {
      return {l:0, m:0, h:524288};
    }
     else {
      return 0;
    }
  }
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  if (jl.isInfinite(value_0)) {
    if (negative) {
      return {l:0, m:0, h:1048320};
    }
     else {
      return {l:0, m:0, h:524032};
    }
  }
  exp_0 = 0;
  if (value_0 < 1) {
    bit = 512;
    for (i = 0; i < 10; i++ , bit >>= 1) {
      if (value_0 < (jl.$clinit_Double$PowersTable() , jl.invPowers)[i] && exp_0 - bit >= -1023) {
        value_0 *= (jl.$clinit_Double$PowersTable() , jl.powers)[i];
        exp_0 -= bit;
      }
    }
    if (value_0 < 1 && exp_0 - 1 >= -1023) {
      value_0 *= 2;
      exp_0--;
    }
  }
   else if (value_0 >= 2) {
    bit = 512;
    for (i = 0; i < 10; i++ , bit >>= 1) {
      if (value_0 >= (jl.$clinit_Double$PowersTable() , jl.powers)[i]) {
        value_0 *= (jl.$clinit_Double$PowersTable() , jl.invPowers)[i];
        exp_0 += bit;
      }
    }
  }
  if (exp_0 > -1023) {
    value_0 -= 1;
  }
   else {
    value_0 *= 0.5;
  }
  ihi = fromDouble_0(value_0 * 1048576);
  value_0 -= toDouble_0(ihi) * 9.5367431640625E-7;
  ilo = fromDouble_0(value_0 * 4503599627370496);
  ihi = or_0(ihi, fromInt_0(exp_0 + 1023 << 20));
  if (negative) {
    ihi = or_0(ihi, 2147483648);
  }
  return or_0(shl_0(ihi, 32), ilo);
}

jl.doubleValue__D__devirtual$_0 = function doubleValue__D__devirtual$_0(this$static){
  return jl.$doubleValue(this$static);
}
;
jl.equals_Ljava_lang_Object__Z__devirtual$_1 = function equals_Ljava_lang_Object__Z__devirtual$_1(this$static, o){
  return jl.$equals_2(this$static, o);
}
;
jl.floatValue__F__devirtual$_0 = function floatValue__F__devirtual$_0(this$static){
  return jl.$floatValue(this$static);
}
;
jl.getClass__Ljava_lang_Class___devirtual$_2 = function getClass__Ljava_lang_Class___devirtual$_2(this$static){
  return jl.$getClass_2(this$static);
}
;
jl.hashCode_10 = function hashCode_10(d){
  return round_int(d);
}
;
jl.hashCode__I__devirtual$_1 = function hashCode__I__devirtual$_1(this$static){
  return jl.$hashCode_2(this$static);
}
;
jl.intValue__I__devirtual$_0 = function intValue__I__devirtual$_0(this$static){
  jl.$clinit_Double();
  return jl.$intValue(this$static);
}
;
jl.isInfinite = function isInfinite(x_0){
  jl.$clinit_Double();
  return !isNaN(x_0) && !isFinite(x_0);
}
;
jl.isInfinite__Z__devirtual$ = function isInfinite__Z__devirtual$(this$static){
  return jl.$isInfinite(this$static);
}
;
jl.isNaN__Z__devirtual$ = function isNaN__Z__devirtual$(this$static){
  return jl.$isNaN(this$static);
}
;
function longBitsToDouble(bits){
  jl.$clinit_Double();
  var bit, d, d0, exp_0, i, ihi, ilo, negative;
  ihi = shr_0(bits, 32);
  ilo = and_0(bits, 4294967295);
  if (lt(ihi, 0)) {
    ihi = add_10(ihi, 4294967296);
  }
  if (lt(ilo, 0)) {
    ilo = add_10(ilo, 4294967296);
  }
  negative = neq(and_0(ihi, -2147483648), 0);
  exp_0 = toInt_0(and_0(shr_0(ihi, 20), 2047));
  ihi = and_0(ihi, 1048575);
  if (exp_0 == 0) {
    d0 = toDouble_0(ihi) * 9.5367431640625E-7 + toDouble_0(ilo) * 2.220446049250313E-16;
    d0 *= 2.2250738585072014E-308;
    return negative?d0 == 0?-0:-d0:d0;
  }
   else if (exp_0 == 2047) {
    if (eq(ihi, 0) && eq(ilo, 0)) {
      return negative?-Infinity:Infinity;
    }
     else {
      return NaN;
    }
  }
  exp_0 -= 1023;
  d = 1 + toDouble_0(ihi) * 9.5367431640625E-7 + toDouble_0(ilo) * 2.220446049250313E-16;
  if (exp_0 > 0) {
    bit = 512;
    for (i = 0; i < 10; i++ , bit >>= 1) {
      if (exp_0 >= bit) {
        d *= (jl.$clinit_Double$PowersTable() , jl.powers)[i];
        exp_0 -= bit;
      }
    }
  }
   else if (exp_0 < 0) {
    while (exp_0 < 0) {
      bit = 512;
      for (i = 0; i < 10; i++ , bit >>= 1) {
        if (exp_0 <= -bit) {
          d *= (jl.$clinit_Double$PowersTable() , jl.invPowers)[i];
          exp_0 += bit;
        }
      }
    }
  }
  return negative?-d:d;
}

jl.longValue__J__devirtual$_0 = function longValue__J__devirtual$_0(this$static){
  return jl.$longValue(this$static);
}
;
function max_1(a, b){
  jl.$clinit_Double();
  return $wnd.Math.max(a, b);
}

function min_1(a, b){
  jl.$clinit_Double();
  return $wnd.Math.min(a, b);
}

function parseDouble(s){
  jl.$clinit_Double();
  return jl.__parseAndValidateDouble(s);
}

jl.shortValue__S__devirtual$_0 = function shortValue__S__devirtual$_0(this$static){
  return jl.$shortValue(this$static);
}
;
function sum_0(a, b){
  jl.$clinit_Double();
  return a + b;
}

jl.toString_19 = function toString_19(b){
  return jl.valueOf_13(b);
}
;
jl.valueOf_6 = function valueOf_6(d){
  jl.$clinit_Double();
  return jl.$create_1(d);
}
;
function valueOf_7(s){
  jl.$clinit_Double();
  return $create_2(s);
}

doubleCastMap = {4:1, 20:1, 213:1, 1:1};
var BYTES_0 = 0;
var MAX_EXPONENT = 1023;
var MAX_VALUE_2 = 1.7976931348623157E308;
var MIN_EXPONENT = 0;
var MIN_NORMAL = 2.2250738585072014E-308;
var MIN_VALUE_2 = 4.9E-324;
var NEGATIVE_INFINITY = 0;
var NaN_0 = 0;
var POSITIVE_INFINITY = 0;
var POWER_1 = 2;
var POWER_128 = 3.4028236692093846E38;
var POWER_16 = 65536;
var POWER_2 = 4;
var POWER_20 = 1048576;
var POWER_256 = 1.157920892373162E77;
var POWER_31 = 2147483648;
var POWER_32 = 4294967296;
var POWER_4 = 16;
var POWER_512 = 1.3407807929942597E154;
var POWER_52 = 4503599627370496;
var POWER_64 = 1.8446744073709552E19;
var POWER_8 = 256;
var POWER_MINUS_1 = 0.5;
var POWER_MINUS_1022 = 2.2250738585072014E-308;
var POWER_MINUS_128 = 2.9387358770557188E-39;
var POWER_MINUS_16 = 1.52587890625E-5;
var POWER_MINUS_2 = 0.25;
var POWER_MINUS_20 = 9.5367431640625E-7;
var POWER_MINUS_256 = 8.636168555094445E-78;
var POWER_MINUS_32 = 2.3283064365386963E-10;
var POWER_MINUS_4 = 0.0625;
var POWER_MINUS_512 = 7.458340731200207E-155;
var POWER_MINUS_52 = 2.220446049250313E-16;
var POWER_MINUS_64 = 5.421010862427522E-20;
var POWER_MINUS_8 = 0.00390625;
var SIZE_1 = 64;
var TYPE_2;
jl.$clinit_IllegalStateException = function $clinit_IllegalStateException(){
  jl.$clinit_IllegalStateException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.IllegalStateException = function IllegalStateException(){
  jl.$clinit_IllegalStateException();
  jl.RuntimeException.call(this);
  this.$init_156();
}
;
jl.IllegalStateException_0 = function IllegalStateException_0(s){
  jl.$clinit_IllegalStateException();
  jl.RuntimeException_1.call(this, s);
  this.$init_156();
}
;
defineClass(79, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.IllegalStateException, jl.IllegalStateException_0);
_.$init_156 = function $init_156(){
}
;
jl.$clinit_IndexOutOfBoundsException = function $clinit_IndexOutOfBoundsException(){
  jl.$clinit_IndexOutOfBoundsException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.IndexOutOfBoundsException = function IndexOutOfBoundsException(){
  jl.$clinit_IndexOutOfBoundsException();
  jl.RuntimeException.call(this);
  this.$init_145();
}
;
jl.IndexOutOfBoundsException_0 = function IndexOutOfBoundsException_0(message){
  jl.$clinit_IndexOutOfBoundsException();
  jl.RuntimeException_1.call(this, message);
  this.$init_145();
}
;
defineClass(54, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.IndexOutOfBoundsException, jl.IndexOutOfBoundsException_0);
_.$init_145 = function $init_145(){
}
;
jl.$clinit_Integer = function $clinit_Integer(){
  jl.$clinit_Integer = emptyMethod;
  jl.$clinit_Number();
  BYTES_2 = narrow_int(32 / 8);
  TYPE_4 = cggl.I_classLit;
}
;
jl.Integer = function Integer(value_0){
  jl.$clinit_Integer();
  jl.Number_0.call(this);
  this.$init_157();
  this.value_0 = value_0;
}
;
function bitCount_0(x_0){
  jl.$clinit_Integer();
  x_0 -= x_0 >> 1 & 1431655765;
  x_0 = (x_0 >> 2 & 858993459) + (x_0 & 858993459);
  x_0 = (x_0 >> 4) + x_0 & 252645135;
  x_0 += x_0 >> 8;
  x_0 += x_0 >> 16;
  return x_0 & 63;
}

function compare_23(x_0, y_0){
  jl.$clinit_Integer();
  if (x_0 < y_0) {
    return -1;
  }
   else if (x_0 > y_0) {
    return 1;
  }
   else {
    return 0;
  }
}

jl.hashCode_14 = function hashCode_14(i){
  return i;
}
;
function numberOfLeadingZeros_0(i){
  jl.$clinit_Integer();
  var m, n, y_0;
  if (i < 0) {
    return 0;
  }
   else if (i == 0) {
    return 32;
  }
   else {
    y_0 = -(i >> 16);
    m = y_0 >> 16 & 16;
    n = 16 - m;
    i = i >> m;
    y_0 = i - 256;
    m = y_0 >> 16 & 8;
    n += m;
    i <<= m;
    y_0 = i - 4096;
    m = y_0 >> 16 & 4;
    n += m;
    i <<= m;
    y_0 = i - 16384;
    m = y_0 >> 16 & 2;
    n += m;
    i <<= m;
    y_0 = i >> 14;
    m = y_0 & ~(y_0 >> 1);
    return n + 2 - m;
  }
}

function numberOfTrailingZeros(i){
  jl.$clinit_Integer();
  var r, rtn;
  if (i == 0) {
    return 32;
  }
   else {
    rtn = 0;
    for (r = 1; (r & i) == 0; r <<= 1) {
      rtn++;
    }
    return rtn;
  }
}

jl.parseInt_1 = function parseInt_1(s){
  jl.$clinit_Integer();
  return parseInt_2(s, 10);
}
;
function parseInt_2(s, radix){
  jl.$clinit_Integer();
  return jl.__parseAndValidateInt(s, radix, -2147483648, 2147483647);
}

function toHexString(value_0){
  jl.$clinit_Integer();
  return jl.toUnsignedString(value_0, 16);
}

jl.toRadixString = function toRadixString(value_0, radix){
  var number;
  number = ji2.uncheckedCast(value_0);
  return number.toString(radix);
}
;
jl.toString_23 = function toString_23(value_0){
  jl.$clinit_Integer();
  return jl.valueOf_15(value_0);
}
;
jl.toUnsigned = function toUnsigned(value_0){
  return value_0 >>> 0;
}
;
jl.toUnsignedString = function toUnsignedString(value_0, radix){
  return jl.toRadixString(jl.toUnsigned(value_0), radix);
}
;
jl.valueOf_9 = function valueOf_9(i){
  jl.$clinit_Integer();
  var rebase, result;
  if (i > -129 && i < 128) {
    rebase = i + 128;
    result = (jl.$clinit_Integer$BoxedValues() , jl.boxedValues_1)[rebase];
    if (isNull(result)) {
      result = (jl.$clinit_Integer$BoxedValues() , jl.boxedValues_1)[rebase] = new jl.Integer(i);
    }
    return result;
  }
  return new jl.Integer(i);
}
;
defineClass(33, 59, {4:1, 20:1, 33:1, 1:1}, jl.Integer);
_.$init_157 = function $init_157(){
}
;
_.compareTo_1 = function compareTo_12(b){
  return this.compareTo_6(castTo(b, 33));
}
;
_.byteValue = function byteValue_2(){
  return narrow_byte(this.value_0);
}
;
_.compareTo_6 = function compareTo_11(b){
  return compare_23(this.value_0, b.value_0);
}
;
_.doubleValue = function doubleValue_2(){
  return this.value_0;
}
;
_.equals_0 = function equals_16(o){
  return instanceOf(o, 33) && castTo(o, 33).value_0 == this.value_0;
}
;
_.floatValue = function floatValue_1(){
  return this.value_0;
}
;
_.hashCode_0 = function hashCode_13(){
  return jl.hashCode_14(this.value_0);
}
;
_.intValue = function intValue_2(){
  return this.value_0;
}
;
_.longValue = function longValue_2(){
  return fromInt_0(this.value_0);
}
;
_.shortValue = function shortValue_2(){
  return narrow_short(this.value_0);
}
;
_.toString_0 = function toString_22(){
  return jl.toString_23(this.value_0);
}
;
_.value_0 = 0;
var BYTES_2 = 0;
var MAX_VALUE_4 = 2147483647;
var MIN_VALUE_4 = -2147483648;
var SIZE_3 = 32;
var TYPE_4;
jl.$clinit_NullPointerException = function $clinit_NullPointerException(){
  jl.$clinit_NullPointerException = emptyMethod;
  jl.$clinit_JsException();
}
;
jl.NullPointerException = function NullPointerException(){
  jl.$clinit_NullPointerException();
  jl.JsException.call(this);
  this.$init_160();
}
;
jl.NullPointerException_0 = function NullPointerException_0(typeError){
  jl.$clinit_NullPointerException();
  jl.JsException_0.call(this, typeError);
  this.$init_160();
}
;
jl.NullPointerException_1 = function NullPointerException_1(message){
  jl.$clinit_NullPointerException();
  jl.JsException_1.call(this, message);
  this.$init_160();
}
;
defineClass(106, 72, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.NullPointerException, jl.NullPointerException_0, jl.NullPointerException_1);
_.$init_160 = function $init_160(){
}
;
_.createError = function createError_0(msg){
  return new TypeError(msg);
}
;
jl.$clinit_NullPointerException$NativeTypeError = function $clinit_NullPointerException$NativeTypeError(){
  jl.$clinit_NullPointerException$NativeTypeError = emptyMethod;
  jl.$clinit_Object();
}
;
jl.$clinit_Number$JavaLangNumber = function $clinit_Number$JavaLangNumber(){
  jl.$clinit_Number$JavaLangNumber = emptyMethod;
  jl.$clinit_Object();
}
;
jl.$clinit_String = function $clinit_String(){
  jl.$clinit_String = emptyMethod;
  jl.$clinit_Object();
  jl.$clinit_CharSequence();
  CASE_INSENSITIVE_ORDER = new jl.String$1;
}
;
jl.$$init_2 = function $$init_2(this$static){
}
;
jl.$asNativeString = function $asNativeString(this$static){
  return ji2.uncheckedCast(this$static);
}
;
jl.$charAt = function $charAt(this$static, index_0){
  ji2.checkStringElementIndex(index_0, jl.length__I__devirtual$_0(this$static));
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).charCodeAt(index_0);
}
;
jl.$chars_0 = function $chars_0(this$static){
  return jl.$chars(this$static);
}
;
jl.$codePointAt = function $codePointAt(this$static, index_0){
  return codePointAt(this$static, index_0, jl.length__I__devirtual$_0(this$static));
}
;
jl.$codePointBefore = function $codePointBefore(this$static, index_0){
  return codePointBefore(this$static, index_0, 0);
}
;
jl.$codePointCount = function $codePointCount(this$static, beginIndex, endIndex){
  return codePointCount(this$static, beginIndex, endIndex);
}
;
jl.$compareTo_3 = function $compareTo_3(this$static, other){
  return jl.compareTo_Ljava_lang_String__I__devirtual$(this$static, castToString(other));
}
;
jl.$compareTo_4 = function $compareTo_4(this$static, other){
  var a, b;
  a = ji2.unsafeCastToDouble(ji2.checkNotNull_0(this$static));
  b = ji2.unsafeCastToDouble(ji2.checkNotNull_0(other));
  return a == b?0:a < b?-1:1;
}
;
jl.$compareToIgnoreCase = function $compareToIgnoreCase(this$static, other){
  return jl.compareTo_Ljava_lang_String__I__devirtual$(jl.toLowerCase__Ljava_lang_String___devirtual$(this$static), jl.toLowerCase__Ljava_lang_String___devirtual$(other));
}
;
jl.$concat = function $concat(this$static, str){
  return castToString(ji2.checkNotNull_0(this$static)) + ('' + castToString(ji2.checkNotNull_0(str)));
}
;
jl.$contains = function $contains(this$static, s){
  return jl.indexOf_Ljava_lang_String__I__devirtual$(this$static, toString_12(s)) != -1;
}
;
jl.$contentEquals = function $contentEquals(this$static, cs){
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2(this$static, toString_12(cs));
}
;
jl.$contentEquals_0 = function $contentEquals_0(this$static, sb){
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2(this$static, sb.toString_0());
}
;
jl.$create_3 = function $create_3(){
  return '';
}
;
jl.$create_4 = function $create_4(other){
  jl.$clinit_String();
  return castToString(ji2.checkNotNull_0(other));
}
;
jl.$create_5 = function $create_5(sb){
  return sb.toString_0();
}
;
function $create_6(sb){
  jl.$clinit_String();
  return sb.toString_0();
}

jl.$create_7 = function $create_7(bytes){
  jl.$clinit_String();
  return jl.$create_8(bytes, 0, bytes.length);
}
;
jl.$create_8 = function $create_8(bytes, ofs, len){
  jl.$clinit_String();
  return jl.$create_10(bytes, ofs, len, (ji2.$clinit_EmulatedCharset() , ji2.UTF_8));
}
;
jl.$create_9 = function $create_9(bytes, ofs, len, charsetName){
  return jl.$create_10(bytes, ofs, len, jl.getCharset(charsetName));
}
;
jl.$create_10 = function $create_10(bytes, ofs, len, charset){
  return jl.valueOf_19(castTo(charset, 57).decodeString(bytes, ofs, len));
}
;
jl.$create_11 = function $create_11(bytes, charsetName){
  return jl.$create_9(bytes, 0, bytes.length, charsetName);
}
;
jl.$create_12 = function $create_12(bytes, charset){
  return jl.$create_10(bytes, 0, bytes.length, charset);
}
;
jl.$create_13 = function $create_13(value_0){
  return jl.valueOf_19(value_0);
}
;
jl.$create_14 = function $create_14(value_0, offset, count){
  return jl.valueOf_20(value_0, offset, count);
}
;
jl.$create_15 = function $create_15(codePoints, offset, count){
  var charIdx, chars;
  chars = initUnidimensionalArray(cggl.C_classLit, {4:1, 1:1}, 5, count * 2, 15, 1);
  charIdx = 0;
  while (count-- > 0) {
    charIdx += toChars(codePoints[offset++], chars, charIdx);
  }
  return jl.valueOf_20(chars, 0, charIdx);
}
;
jl.$endsWith = function $endsWith(this$static, suffix){
  var suffixlength;
  suffixlength = jl.length__I__devirtual$_0(suffix);
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2(jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).substr(jl.length__I__devirtual$_0(this$static) - suffixlength, suffixlength), suffix);
}
;
jl.$equals_3 = function $equals_3(this$static, other){
  return maskUndefined(ji2.checkNotNull_0(this$static)) === maskUndefined(other);
}
;
jl.$equalsIgnoreCase = function $equalsIgnoreCase(this$static, other){
  ji2.checkNotNull_0(this$static);
  if (jsEquals(other, null)) {
    return false;
  }
  if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(this$static, other)) {
    return true;
  }
  return jl.length__I__devirtual$_0(this$static) == jl.length__I__devirtual$_0(other) && jl.equals_Ljava_lang_Object__Z__devirtual$_2(jl.toLowerCase__Ljava_lang_String___devirtual$(this$static), jl.toLowerCase__Ljava_lang_String___devirtual$(other));
}
;
jl.$getBytes = function $getBytes(this$static){
  return jl.getBytes_Ljava_nio_charset_Charset___B__devirtual$(this$static, (ji2.$clinit_EmulatedCharset() , ji2.UTF_8));
}
;
jl.$getBytes_0 = function $getBytes_0(this$static, charsetName){
  return jl.getBytes_Ljava_nio_charset_Charset___B__devirtual$(this$static, jl.getCharset(charsetName));
}
;
jl.$getBytes_1 = function $getBytes_1(this$static, charset){
  return castTo(charset, 57).getBytes(this$static);
}
;
jl.$getChars = function $getChars(this$static, srcBegin, srcEnd, dst, dstBegin){
  ji2.checkCriticalStringBounds(srcBegin, srcEnd, jl.length__I__devirtual$_0(this$static));
  ji2.checkCriticalStringBounds(dstBegin, dstBegin + (srcEnd - srcBegin), dst.length);
  jl.getChars0_II_CI_V__devirtual$(this$static, srcBegin, srcEnd, dst, dstBegin);
}
;
jl.$getChars0 = function $getChars0(this$static, srcBegin, srcEnd, dst, dstBegin){
  while (srcBegin < srcEnd) {
    dst[dstBegin++] = jl.charAt_I_C__devirtual$_0(this$static, srcBegin++);
  }
}
;
jl.$getClass_3 = function $getClass_3(this$static){
  return cggl.Ljava_lang_String_2_classLit;
}
;
jl.$hashCode_3 = function $hashCode_3(this$static){
  return ji2.getStringHashCode(this$static);
}
;
jl.$indexOf = function $indexOf(this$static, codePoint){
  return jl.indexOf_Ljava_lang_String__I__devirtual$(this$static, fromCodePoint(codePoint));
}
;
jl.$indexOf_0 = function $indexOf_0(this$static, codePoint, startIndex){
  return jl.indexOf_Ljava_lang_String_I_I__devirtual$(this$static, fromCodePoint(codePoint), startIndex);
}
;
jl.$indexOf_1 = function $indexOf_1(this$static, str){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).indexOf(str);
}
;
jl.$indexOf_2 = function $indexOf_2(this$static, str, startIndex){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).indexOf(str, startIndex);
}
;
jl.$init__V__devirtual$_3 = function $init__V__devirtual$_3(this$static){
  return jl.$$init_2(this$static);
}
;
jl.$intern = function $intern(this$static){
  return castToString(ji2.checkNotNull_0(this$static));
}
;
jl.$isEmpty = function $isEmpty(this$static){
  return jl.length__I__devirtual$_0(this$static) == 0;
}
;
function $isInstance_4(instance){
  jl.$clinit_String();
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2('string', typeof(instance));
}

jl.$lastIndexOf = function $lastIndexOf(this$static, codePoint){
  return jl.lastIndexOf_Ljava_lang_String__I__devirtual$(this$static, fromCodePoint(codePoint));
}
;
jl.$lastIndexOf_0 = function $lastIndexOf_0(this$static, codePoint, startIndex){
  return jl.lastIndexOf_Ljava_lang_String_I_I__devirtual$(this$static, fromCodePoint(codePoint), startIndex);
}
;
jl.$lastIndexOf_1 = function $lastIndexOf_1(this$static, str){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).lastIndexOf(str);
}
;
jl.$lastIndexOf_2 = function $lastIndexOf_2(this$static, str, start_0){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).lastIndexOf(str, start_0);
}
;
jl.$length_9 = function $length_9(this$static){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).length;
}
;
jl.$matches = function $matches(this$static, regex){
  return (new RegExp('^(' + regex + ')$')).test(this$static);
}
;
jl.$nativeReplaceAll = function $nativeReplaceAll(this$static, regex, replace){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).replace(new RegExp(regex, 'g'), replace);
}
;
jl.$offsetByCodePoints = function $offsetByCodePoints(this$static, index_0, codePointOffset){
  return offsetByCodePoints(this$static, index_0, codePointOffset);
}
;
jl.$regionMatches = function $regionMatches(this$static, toffset, other, ooffset, len){
  return jl.regionMatches_ZILjava_lang_String_II_Z__devirtual$(this$static, false, toffset, other, ooffset, len);
}
;
jl.$regionMatches_0 = function $regionMatches_0(this$static, ignoreCase, toffset, other, ooffset, len){
  var left, right;
  ji2.checkNotNull_0(other);
  if (toffset < 0 || ooffset < 0 || len <= 0) {
    return false;
  }
  if (toffset + len > jl.length__I__devirtual$_0(this$static) || ooffset + len > jl.length__I__devirtual$_0(other)) {
    return false;
  }
  left = jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).substr(toffset, len);
  right = jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(other).substr(ooffset, len);
  return ignoreCase?jl.equalsIgnoreCase_Ljava_lang_String__Z__devirtual$(left, right):jl.equals_Ljava_lang_Object__Z__devirtual$_2(left, right);
}
;
jl.$replace = function $replace(this$static, from, to){
  var hex, regex, replace;
  hex = toHexString(from);
  regex = '\\u' + jl.substring_I_Ljava_lang_String___devirtual$('0000', jl.length__I__devirtual$_0(hex)) + hex;
  replace = String.fromCharCode(to);
  return jl.nativeReplaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(this$static, regex, replace);
}
;
jl.$replace_0 = function $replace_0(this$static, from, to){
  var regex, replacement;
  regex = jl.replaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(toString_12(from), '([/\\\\\\.\\*\\+\\?\\|\\(\\)\\[\\]\\{\\}$^])', '\\\\$1');
  replacement = jl.replaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(jl.replaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(toString_12(to), '\\\\', '\\\\\\\\'), '\\$', '\\\\$');
  return jl.replaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(this$static, regex, replacement);
}
;
jl.$replaceAll = function $replaceAll(this$static, regex, replace){
  replace = jl.translateReplaceString(replace);
  return jl.nativeReplaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(this$static, regex, replace);
}
;
jl.$replaceFirst = function $replaceFirst(this$static, regex, replace){
  var jsRegEx;
  replace = jl.translateReplaceString(replace);
  jsRegEx = new RegExp(regex);
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).replace(jsRegEx, replace);
}
;
jl.$split = function $split(this$static, regex){
  return jl.split_Ljava_lang_String_I__Ljava_lang_String___devirtual$(this$static, regex, 0);
}
;
jl.$split_0 = function $split_0(this$static, regex, maxMatch){
  var compiled, count, lastNonEmpty, lastTrail, matchIndex, matchObj, out, trail;
  compiled = new RegExp(regex, 'g');
  out = initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, 0, 6, 1);
  count = 0;
  trail = this$static;
  lastTrail = null;
  while (true) {
    matchObj = compiled.exec(trail);
    if (jsEquals(matchObj, null) || jsEquals(trail, '') || count == maxMatch - 1 && maxMatch > 0) {
      out[count] = trail;
      break;
    }
     else {
      matchIndex = matchObj.index;
      out[count] = jl.substring_II_Ljava_lang_String___devirtual$(trail, 0, matchIndex);
      trail = jl.substring_II_Ljava_lang_String___devirtual$(trail, matchIndex + jl.length__I__devirtual$_0(ji2.$asArray(matchObj)[0]), jl.length__I__devirtual$_0(trail));
      compiled.lastIndex = 0;
      if (jsEquals(lastTrail, trail)) {
        out[count] = jl.substring_II_Ljava_lang_String___devirtual$(trail, 0, 1);
        trail = jl.substring_I_Ljava_lang_String___devirtual$(trail, 1);
      }
      lastTrail = trail;
      count++;
    }
  }
  if (maxMatch == 0 && jl.length__I__devirtual$_0(this$static) > 0) {
    lastNonEmpty = out.length;
    while (lastNonEmpty > 0 && jsEquals(out[lastNonEmpty - 1], '')) {
      --lastNonEmpty;
    }
    if (lastNonEmpty < out.length) {
      ji2.setLength_0(out, lastNonEmpty);
    }
  }
  return out;
}
;
jl.$startsWith = function $startsWith(this$static, prefix){
  return jl.startsWith_Ljava_lang_String_I_Z__devirtual$(this$static, prefix, 0);
}
;
jl.$startsWith_0 = function $startsWith_0(this$static, prefix, toffset){
  return toffset >= 0 && jl.equals_Ljava_lang_Object__Z__devirtual$_2(jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).substr(toffset, jl.length__I__devirtual$_0(prefix)), prefix);
}
;
jl.$subSequence = function $subSequence(this$static, beginIndex, endIndex){
  return jl.substring_II_Ljava_lang_String___devirtual$(this$static, beginIndex, endIndex);
}
;
jl.$substring = function $substring(this$static, beginIndex){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).substr(beginIndex);
}
;
jl.$substring_0 = function $substring_0(this$static, beginIndex, endIndex){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).substr(beginIndex, endIndex - beginIndex);
}
;
jl.$toCharArray = function $toCharArray(this$static){
  var charArr, n;
  n = jl.length__I__devirtual$_0(this$static);
  charArr = initUnidimensionalArray(cggl.C_classLit, {4:1, 1:1}, 5, n, 15, 1);
  jl.getChars0_II_CI_V__devirtual$(this$static, 0, n, charArr, 0);
  return charArr;
}
;
jl.$toLowerCase = function $toLowerCase(this$static){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).toLowerCase();
}
;
jl.$toLowerCase_0 = function $toLowerCase_0(this$static, locale){
  return jsEquals(locale, ju.getDefault_0())?jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).toLocaleLowerCase():jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).toLowerCase();
}
;
jl.$toUpperCase = function $toUpperCase(this$static){
  return jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).toUpperCase();
}
;
jl.$toUpperCase_0 = function $toUpperCase_0(this$static, locale){
  return jsEquals(locale, ju.getDefault_0())?jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).toLocaleUpperCase():jl.asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static).toUpperCase();
}
;
jl.$trim = function $trim(this$static){
  var end, length_0, start_0;
  length_0 = jl.length__I__devirtual$_0(this$static);
  start_0 = 0;
  while (start_0 < length_0 && jl.charAt_I_C__devirtual$_0(this$static, start_0) <= 32) {
    start_0++;
  }
  end = length_0;
  while (end > start_0 && jl.charAt_I_C__devirtual$_0(this$static, end - 1) <= 32) {
    end--;
  }
  return start_0 > 0 || end < length_0?jl.substring_II_Ljava_lang_String___devirtual$(this$static, start_0, end):this$static;
}
;
jl.String_0 = function String_0(){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_3();
}
;
jl.String_1 = function String_1(other){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_4(other);
}
;
jl.String_2 = function String_2(sb){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_5(sb);
}
;
function String_3(sb){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  $create_6(sb);
}

jl.String_4 = function String_4(bytes){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_7(bytes);
}
;
jl.String_5 = function String_5(bytes, ofs, len){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_8(bytes, ofs, len);
}
;
jl.String_6 = function String_6(bytes, ofs, len, charsetName){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_9(bytes, ofs, len, charsetName);
}
;
jl.String_7 = function String_7(bytes, ofs, len, charset){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_10(bytes, ofs, len, charset);
}
;
jl.String_8 = function String_8(bytes, charsetName){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_11(bytes, charsetName);
}
;
jl.String_9 = function String_9(bytes, charset){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_12(bytes, charset);
}
;
jl.String_10 = function String_10(value_0){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_13(value_0);
}
;
jl.String_11 = function String_11(value_0, offset, count){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_14(value_0, offset, count);
}
;
jl.String_12 = function String_12(codePoints, offset, count){
  Object_0.call(this);
  jl.$init__V__devirtual$_3(this);
  jl.$create_15(codePoints, offset, count);
}
;
jl.asNativeString__Ljava_lang_String$NativeString___devirtual$ = function asNativeString__Ljava_lang_String$NativeString___devirtual$(this$static){
  return jl.$asNativeString(this$static);
}
;
jl.charAt_I_C__devirtual$ = function charAt_I_C__devirtual$(this$static, index_0){
  jl.$clinit_String();
  return instanceOfString(this$static)?jl.$charAt(this$static, index_0):this$static.charAt(index_0);
}
;
jl.charAt_I_C__devirtual$_0 = function charAt_I_C__devirtual$_0(this$static, index_0){
  jl.$clinit_String();
  return jl.$charAt(this$static, index_0);
}
;
jl.chars__Ljava_util_stream_IntStream___devirtual$ = function chars__Ljava_util_stream_IntStream___devirtual$(this$static){
  return instanceOfString(this$static)?jl.$chars_0(this$static):this$static.chars();
}
;
jl.chars__Ljava_util_stream_IntStream___devirtual$_0 = function chars__Ljava_util_stream_IntStream___devirtual$_0(this$static){
  return jl.$chars_0(this$static);
}
;
jl.codePointAt_I_I__devirtual$ = function codePointAt_I_I__devirtual$(this$static, index_0){
  jl.$clinit_String();
  return jl.$codePointAt(this$static, index_0);
}
;
jl.codePointBefore_I_I__devirtual$ = function codePointBefore_I_I__devirtual$(this$static, index_0){
  return jl.$codePointBefore(this$static, index_0);
}
;
jl.codePointCount_II_I__devirtual$ = function codePointCount_II_I__devirtual$(this$static, beginIndex, endIndex){
  return jl.$codePointCount(this$static, beginIndex, endIndex);
}
;
jl.compareToIgnoreCase_Ljava_lang_String__I__devirtual$ = function compareToIgnoreCase_Ljava_lang_String__I__devirtual$(this$static, other){
  jl.$clinit_String();
  return jl.$compareToIgnoreCase(this$static, other);
}
;
jl.compareTo_Ljava_lang_Object__I__devirtual$_2 = function compareTo_Ljava_lang_Object__I__devirtual$_2(this$static, other){
  return jl.$compareTo_3(this$static, other);
}
;
jl.compareTo_Ljava_lang_String__I__devirtual$ = function compareTo_Ljava_lang_String__I__devirtual$(this$static, other){
  jl.$clinit_String();
  return jl.$compareTo_4(this$static, other);
}
;
jl.concat_Ljava_lang_String__Ljava_lang_String___devirtual$ = function concat_Ljava_lang_String__Ljava_lang_String___devirtual$(this$static, str){
  jl.$clinit_String();
  return jl.$concat(this$static, str);
}
;
jl.contains_Ljava_lang_CharSequence__Z__devirtual$ = function contains_Ljava_lang_CharSequence__Z__devirtual$(this$static, s){
  jl.$clinit_String();
  return jl.$contains(this$static, s);
}
;
jl.contentEquals_Ljava_lang_CharSequence__Z__devirtual$ = function contentEquals_Ljava_lang_CharSequence__Z__devirtual$(this$static, cs){
  return jl.$contentEquals(this$static, cs);
}
;
jl.contentEquals_Ljava_lang_StringBuffer__Z__devirtual$ = function contentEquals_Ljava_lang_StringBuffer__Z__devirtual$(this$static, sb){
  return jl.$contentEquals_0(this$static, sb);
}
;
jl.copyValueOf = function copyValueOf(v){
  return jl.valueOf_19(v);
}
;
function copyValueOf_0(v, offset, count){
  jl.$clinit_String();
  return jl.valueOf_20(v, offset, count);
}

jl.endsWith_Ljava_lang_String__Z__devirtual$ = function endsWith_Ljava_lang_String__Z__devirtual$(this$static, suffix){
  jl.$clinit_String();
  return jl.$endsWith(this$static, suffix);
}
;
jl.equalsIgnoreCase_Ljava_lang_String__Z__devirtual$ = function equalsIgnoreCase_Ljava_lang_String__Z__devirtual$(this$static, other){
  jl.$clinit_String();
  return jl.$equalsIgnoreCase(this$static, other);
}
;
jl.equals_Ljava_lang_Object__Z__devirtual$_2 = function equals_Ljava_lang_Object__Z__devirtual$_2(this$static, other){
  jl.$clinit_String();
  return jl.$equals_3(this$static, other);
}
;
jl.fromCharCode = function fromCharCode(array){
  return String.fromCharCode.apply(null, array);
}
;
function fromCodePoint(codePoint){
  jl.$clinit_String();
  var hiSurrogate, loSurrogate;
  if (codePoint >= 65536) {
    hiSurrogate = getHighSurrogate(codePoint);
    loSurrogate = getLowSurrogate(codePoint);
    return jl.valueOf_12(hiSurrogate) + ('' + jl.valueOf_12(loSurrogate));
  }
   else {
    return jl.valueOf_12(narrow_char(codePoint));
  }
}

jl.getBytes_Ljava_lang_String___B__devirtual$ = function getBytes_Ljava_lang_String___B__devirtual$(this$static, charsetName){
  return jl.$getBytes_0(this$static, charsetName);
}
;
jl.getBytes_Ljava_nio_charset_Charset___B__devirtual$ = function getBytes_Ljava_nio_charset_Charset___B__devirtual$(this$static, charset){
  return jl.$getBytes_1(this$static, charset);
}
;
jl.getBytes___B__devirtual$ = function getBytes___B__devirtual$(this$static){
  jl.$clinit_String();
  return jl.$getBytes(this$static);
}
;
jl.getChars0_II_CI_V__devirtual$ = function getChars0_II_CI_V__devirtual$(this$static, srcBegin, srcEnd, dst, dstBegin){
  return jl.$getChars0(this$static, srcBegin, srcEnd, dst, dstBegin);
}
;
jl.getChars_II_CI_V__devirtual$ = function getChars_II_CI_V__devirtual$(this$static, srcBegin, srcEnd, dst, dstBegin){
  jl.$clinit_String();
  return jl.$getChars(this$static, srcBegin, srcEnd, dst, dstBegin);
}
;
jl.getCharset = function getCharset(charsetName){
  var e;
  try {
    return jnc.forName(charsetName);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 107)) {
      e = $e0;
      throw toJs(new ji.UnsupportedEncodingException(charsetName));
    }
     else 
      throw toJs($e0);
  }
}
;
jl.getClass__Ljava_lang_Class___devirtual$_3 = function getClass__Ljava_lang_Class___devirtual$_3(this$static){
  return jl.$getClass_3(this$static);
}
;
jl.hashCode__I__devirtual$_2 = function hashCode__I__devirtual$_2(this$static){
  jl.$clinit_String();
  return jl.$hashCode_3(this$static);
}
;
jl.indexOf_II_I__devirtual$ = function indexOf_II_I__devirtual$(this$static, codePoint, startIndex){
  jl.$clinit_String();
  return jl.$indexOf_0(this$static, codePoint, startIndex);
}
;
jl.indexOf_I_I__devirtual$ = function indexOf_I_I__devirtual$(this$static, codePoint){
  jl.$clinit_String();
  return jl.$indexOf(this$static, codePoint);
}
;
jl.indexOf_Ljava_lang_String_I_I__devirtual$ = function indexOf_Ljava_lang_String_I_I__devirtual$(this$static, str, startIndex){
  jl.$clinit_String();
  return jl.$indexOf_2(this$static, str, startIndex);
}
;
jl.indexOf_Ljava_lang_String__I__devirtual$ = function indexOf_Ljava_lang_String__I__devirtual$(this$static, str){
  jl.$clinit_String();
  return jl.$indexOf_1(this$static, str);
}
;
jl.intern__Ljava_lang_String___devirtual$ = function intern__Ljava_lang_String___devirtual$(this$static){
  return jl.$intern(this$static);
}
;
jl.isEmpty__Z__devirtual$ = function isEmpty__Z__devirtual$(this$static){
  jl.$clinit_String();
  return jl.$isEmpty(this$static);
}
;
function join_1(delimiter, elements){
  jl.$clinit_String();
  var e, e$iterator, joiner;
  joiner = new ju.StringJoiner(delimiter);
  for (e$iterator = elements.iterator(); e$iterator.hasNext_0();) {
    e = castTo(e$iterator.next_3(), 84);
    joiner.add_4(e);
  }
  return joiner.toString_0();
}

jl.join_2 = function join_2(delimiter, elements){
  var e, e$array, e$index, e$max, joiner;
  joiner = new ju.StringJoiner(delimiter);
  for (e$array = elements , e$index = 0 , e$max = e$array.length; e$index < e$max; ++e$index) {
    e = e$array[e$index];
    joiner.add_4(e);
  }
  return joiner.toString_0();
}
;
jl.lastIndexOf_II_I__devirtual$ = function lastIndexOf_II_I__devirtual$(this$static, codePoint, startIndex){
  jl.$clinit_String();
  return jl.$lastIndexOf_0(this$static, codePoint, startIndex);
}
;
jl.lastIndexOf_I_I__devirtual$ = function lastIndexOf_I_I__devirtual$(this$static, codePoint){
  jl.$clinit_String();
  return jl.$lastIndexOf(this$static, codePoint);
}
;
jl.lastIndexOf_Ljava_lang_String_I_I__devirtual$ = function lastIndexOf_Ljava_lang_String_I_I__devirtual$(this$static, str, start_0){
  jl.$clinit_String();
  return jl.$lastIndexOf_2(this$static, str, start_0);
}
;
jl.lastIndexOf_Ljava_lang_String__I__devirtual$ = function lastIndexOf_Ljava_lang_String__I__devirtual$(this$static, str){
  jl.$clinit_String();
  return jl.$lastIndexOf_1(this$static, str);
}
;
jl.length__I__devirtual$ = function length__I__devirtual$(this$static){
  jl.$clinit_String();
  return instanceOfString(this$static)?jl.$length_9(this$static):this$static.length_0();
}
;
jl.length__I__devirtual$_0 = function length__I__devirtual$_0(this$static){
  jl.$clinit_String();
  return jl.$length_9(this$static);
}
;
jl.matches_Ljava_lang_String__Z__devirtual$ = function matches_Ljava_lang_String__Z__devirtual$(this$static, regex){
  return jl.$matches(this$static, regex);
}
;
jl.nativeReplaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$ = function nativeReplaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(this$static, regex, replace){
  jl.$clinit_String();
  return jl.$nativeReplaceAll(this$static, regex, replace);
}
;
jl.offsetByCodePoints_II_I__devirtual$ = function offsetByCodePoints_II_I__devirtual$(this$static, index_0, codePointOffset){
  return jl.$offsetByCodePoints(this$static, index_0, codePointOffset);
}
;
jl.regionMatches_ILjava_lang_String_II_Z__devirtual$ = function regionMatches_ILjava_lang_String_II_Z__devirtual$(this$static, toffset, other, ooffset, len){
  return jl.$regionMatches(this$static, toffset, other, ooffset, len);
}
;
jl.regionMatches_ZILjava_lang_String_II_Z__devirtual$ = function regionMatches_ZILjava_lang_String_II_Z__devirtual$(this$static, ignoreCase, toffset, other, ooffset, len){
  return jl.$regionMatches_0(this$static, ignoreCase, toffset, other, ooffset, len);
}
;
jl.replaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$ = function replaceAll_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(this$static, regex, replace){
  return jl.$replaceAll(this$static, regex, replace);
}
;
jl.replaceFirst_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$ = function replaceFirst_Ljava_lang_String_Ljava_lang_String__Ljava_lang_String___devirtual$(this$static, regex, replace){
  return jl.$replaceFirst(this$static, regex, replace);
}
;
jl.replace_CC_Ljava_lang_String___devirtual$ = function replace_CC_Ljava_lang_String___devirtual$(this$static, from, to){
  return jl.$replace(this$static, from, to);
}
;
jl.replace_Ljava_lang_CharSequence_Ljava_lang_CharSequence__Ljava_lang_String___devirtual$ = function replace_Ljava_lang_CharSequence_Ljava_lang_CharSequence__Ljava_lang_String___devirtual$(this$static, from, to){
  return jl.$replace_0(this$static, from, to);
}
;
jl.split_Ljava_lang_String_I__Ljava_lang_String___devirtual$ = function split_Ljava_lang_String_I__Ljava_lang_String___devirtual$(this$static, regex, maxMatch){
  return jl.$split_0(this$static, regex, maxMatch);
}
;
jl.split_Ljava_lang_String___Ljava_lang_String___devirtual$ = function split_Ljava_lang_String___Ljava_lang_String___devirtual$(this$static, regex){
  return jl.$split(this$static, regex);
}
;
jl.startsWith_Ljava_lang_String_I_Z__devirtual$ = function startsWith_Ljava_lang_String_I_Z__devirtual$(this$static, prefix, toffset){
  return jl.$startsWith_0(this$static, prefix, toffset);
}
;
jl.startsWith_Ljava_lang_String__Z__devirtual$ = function startsWith_Ljava_lang_String__Z__devirtual$(this$static, prefix){
  jl.$clinit_String();
  return jl.$startsWith(this$static, prefix);
}
;
jl.subSequence_II_Ljava_lang_CharSequence___devirtual$ = function subSequence_II_Ljava_lang_CharSequence___devirtual$(this$static, start_0, end){
  return instanceOfString(this$static)?jl.$subSequence(this$static, start_0, end):this$static.subSequence(start_0, end);
}
;
jl.subSequence_II_Ljava_lang_CharSequence___devirtual$_0 = function subSequence_II_Ljava_lang_CharSequence___devirtual$_0(this$static, beginIndex, endIndex){
  return jl.$subSequence(this$static, beginIndex, endIndex);
}
;
jl.substring_II_Ljava_lang_String___devirtual$ = function substring_II_Ljava_lang_String___devirtual$(this$static, beginIndex, endIndex){
  jl.$clinit_String();
  return jl.$substring_0(this$static, beginIndex, endIndex);
}
;
jl.substring_I_Ljava_lang_String___devirtual$ = function substring_I_Ljava_lang_String___devirtual$(this$static, beginIndex){
  jl.$clinit_String();
  return jl.$substring(this$static, beginIndex);
}
;
jl.toCharArray___C__devirtual$ = function toCharArray___C__devirtual$(this$static){
  return jl.$toCharArray(this$static);
}
;
jl.toLowerCase_Ljava_util_Locale__Ljava_lang_String___devirtual$ = function toLowerCase_Ljava_util_Locale__Ljava_lang_String___devirtual$(this$static, locale){
  return jl.$toLowerCase_0(this$static, locale);
}
;
jl.toLowerCase__Ljava_lang_String___devirtual$ = function toLowerCase__Ljava_lang_String___devirtual$(this$static){
  return jl.$toLowerCase(this$static);
}
;
jl.toUpperCase_Ljava_util_Locale__Ljava_lang_String___devirtual$ = function toUpperCase_Ljava_util_Locale__Ljava_lang_String___devirtual$(this$static, locale){
  return jl.$toUpperCase_0(this$static, locale);
}
;
jl.toUpperCase__Ljava_lang_String___devirtual$ = function toUpperCase__Ljava_lang_String___devirtual$(this$static){
  jl.$clinit_String();
  return jl.$toUpperCase(this$static);
}
;
jl.translateReplaceString = function translateReplaceString(replaceStr){
  var pos;
  pos = 0;
  while (0 <= (pos = jl.indexOf_Ljava_lang_String_I_I__devirtual$(replaceStr, '\\', pos))) {
    if (jl.charAt_I_C__devirtual$_0(replaceStr, pos + 1) == 36) {
      replaceStr = jl.substring_II_Ljava_lang_String___devirtual$(replaceStr, 0, pos) + '$' + jl.substring_I_Ljava_lang_String___devirtual$(replaceStr, ++pos);
    }
     else {
      replaceStr = jl.substring_II_Ljava_lang_String___devirtual$(replaceStr, 0, pos) + ('' + jl.substring_I_Ljava_lang_String___devirtual$(replaceStr, ++pos));
    }
  }
  return replaceStr;
}
;
jl.trim__Ljava_lang_String___devirtual$ = function trim__Ljava_lang_String___devirtual$(this$static){
  jl.$clinit_String();
  return jl.$trim(this$static);
}
;
jl.valueOf_12 = function valueOf_12(x_0){
  jl.$clinit_String();
  return String.fromCharCode(x_0);
}
;
jl.valueOf_13 = function valueOf_13(x_0){
  jl.$clinit_String();
  return '' + x_0;
}
;
jl.valueOf_14 = function valueOf_14(x_0){
  jl.$clinit_String();
  return '' + x_0;
}
;
jl.valueOf_15 = function valueOf_15(x_0){
  jl.$clinit_String();
  return '' + x_0;
}
;
jl.valueOf_16 = function valueOf_16(x_0){
  jl.$clinit_String();
  return '' + toString_11(x_0);
}
;
function valueOf_17(x_0){
  jl.$clinit_String();
  return jsEquals(x_0, null)?'null':toString_12(x_0);
}

jl.valueOf_18 = function valueOf_18(x_0){
  jl.$clinit_String();
  return '' + x_0;
}
;
jl.valueOf_19 = function valueOf_19(x_0){
  jl.$clinit_String();
  return jl.valueOf_20(x_0, 0, x_0.length);
}
;
jl.valueOf_20 = function valueOf_20(x_0, offset, count){
  var batchEnd, batchSize, batchStart, end, s;
  end = offset + count;
  ji2.checkCriticalStringBounds(offset, end, x_0.length);
  batchSize = 10000;
  s = '';
  for (batchStart = offset; batchStart < end;) {
    batchEnd = $wnd.Math.min(batchStart + batchSize, end);
    s += '' + jl.fromCharCode(ji2.unsafeClone(x_0, batchStart, batchEnd));
    batchStart = batchEnd;
  }
  return s;
}
;
stringCastMap = {4:1, 84:1, 20:1, 1:1, 2:1};
var CASE_INSENSITIVE_ORDER;
ju.$clinit_Comparator = function $clinit_Comparator(){
  ju.$clinit_Comparator = emptyMethod;
}
;
jl.$clinit_String$1 = function $clinit_String$1(){
  jl.$clinit_String$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
jl.String$1 = function String$1(){
  jl.$clinit_String$1();
  Object_0.call(this);
  this.$init_165();
}
;
defineClass(171, 1, {1:1, 26:1}, jl.String$1);
_.$init_165 = function $init_165(){
}
;
_.compare_0 = function compare_26(a, b){
  return this.compare_4(castToString(a), castToString(b));
}
;
_.equals_0 = function equals_20(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_4 = function compare_27(a, b){
  return jl.compareToIgnoreCase_Ljava_lang_String__I__devirtual$(a, b);
}
;
jl.$clinit_StringIndexOutOfBoundsException = function $clinit_StringIndexOutOfBoundsException(){
  jl.$clinit_StringIndexOutOfBoundsException = emptyMethod;
  jl.$clinit_IndexOutOfBoundsException();
}
;
jl.StringIndexOutOfBoundsException = function StringIndexOutOfBoundsException(message){
  jl.$clinit_StringIndexOutOfBoundsException();
  jl.IndexOutOfBoundsException_0.call(this, message);
  this.$init_168();
}
;
defineClass(149, 54, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.StringIndexOutOfBoundsException);
_.$init_168 = function $init_168(){
}
;
jl.$clinit_Throwable$NativeError = function $clinit_Throwable$NativeError(){
  jl.$clinit_Throwable$NativeError = emptyMethod;
  jl.$clinit_Object();
}
;
jl.$clinit_Throwable$NativeTypeError = function $clinit_Throwable$NativeTypeError(){
  jl.$clinit_Throwable$NativeTypeError = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.$clinit_Coercions = function $clinit_Coercions(){
  ji2.$clinit_Coercions = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.ensureInt = function ensureInt(value_0){
  ji2.$clinit_Coercions();
  return value_0 | 0;
}
;
defineClass(442, 1, {1:1});
ji2.$clinit_HashCodes = function $clinit_HashCodes(){
  ji2.$clinit_HashCodes = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.getObjectIdentityHashCode = function getObjectIdentityHashCode(o){
  ji2.$clinit_HashCodes();
  return ji2.getHashCode_0(o);
}
;
ji2.getStringHashCode = function getStringHashCode(s){
  ji2.$clinit_HashCodes();
  return ji2.getHashCode_1(s);
}
;
defineClass(391, 1, {1:1});
ji2.$clinit_InternalPreconditions = function $clinit_InternalPreconditions(){
  ji2.$clinit_InternalPreconditions = emptyMethod;
  jl.$clinit_Object();
  ji2.LEVEL_NORMAL_OR_HIGHER = jsEquals('NORMAL', 'NORMAL');
  ji2.LEVEL_OPT_OR_HIGHER = jsEquals('NORMAL', 'OPTIMIZED') || jsEquals('NORMAL', 'NORMAL');
  ji2.LEVEL_MINIMAL_OR_HIGHER = jsEquals('NORMAL', 'MINIMAL') || jsEquals('NORMAL', 'OPTIMIZED') || jsEquals('NORMAL', 'NORMAL');
  {
    if (!ji2.LEVEL_MINIMAL_OR_HIGHER) {
      throw toJs(new jl.IllegalStateException_0('Incorrect level: ' + 'NORMAL'));
    }
  }
  ji2.IS_TYPE_CHECKED = jsEquals(ji2.CHECK_TYPE, 'AUTO') && ji2.LEVEL_OPT_OR_HIGHER || jsEquals(ji2.CHECK_TYPE, 'ENABLED');
  ji2.IS_BOUNDS_CHECKED = jsEquals(ji2.CHECK_BOUNDS, 'AUTO') && ji2.LEVEL_NORMAL_OR_HIGHER || jsEquals(ji2.CHECK_BOUNDS, 'ENABLED');
  ji2.IS_API_CHECKED = jsEquals(ji2.CHECK_API, 'AUTO') && ji2.LEVEL_NORMAL_OR_HIGHER || jsEquals(ji2.CHECK_API, 'ENABLED');
  ji2.IS_NUMERIC_CHECKED = jsEquals(ji2.CHECK_NUMERIC, 'AUTO') && ji2.LEVEL_NORMAL_OR_HIGHER || jsEquals(ji2.CHECK_NUMERIC, 'ENABLED');
  ji2.IS_ASSERTED = jsEquals('DISABLED', 'ENABLED');
}
;
ji2.checkArgument = function checkArgument(expression, errorMessage){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_API_CHECKED) {
    ji2.checkCriticalArgument_1(expression, errorMessage);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalArgument_1(expression, errorMessage);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkArraySize = function checkArraySize(size_0){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_API_CHECKED) {
    ji2.checkCriticalArraySize(size_0);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalArraySize(size_0);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkArrayType = function checkArrayType(expression){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_TYPE_CHECKED) {
    ji2.checkCriticalArrayType(expression);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalArrayType(expression);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkArrayType_0 = function checkArrayType_0(expression, errorMessage){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_TYPE_CHECKED) {
    ji2.checkCriticalArrayType_0(expression, errorMessage);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalArrayType_0(expression, errorMessage);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkCriticalArgument_0 = function checkCriticalArgument_0(expression){
  ji2.$clinit_InternalPreconditions();
  if (!expression) {
    throw toJs(new jl.IllegalArgumentException);
  }
}
;
ji2.checkCriticalArgument_1 = function checkCriticalArgument_1(expression, errorMessage){
  ji2.$clinit_InternalPreconditions();
  if (!expression) {
    throw toJs(new jl.IllegalArgumentException_0(valueOf_17(errorMessage)));
  }
}
;
ji2.checkCriticalArgument_2 = function checkCriticalArgument_2(expression, errorMessageTemplate, errorMessageArgs){
  ji2.$clinit_InternalPreconditions();
  if (!expression) {
    throw toJs(new jl.IllegalArgumentException_0(ji2.format_2(errorMessageTemplate, errorMessageArgs)));
  }
}
;
ji2.checkCriticalArrayBounds = function checkCriticalArrayBounds(start_0, end, length_0){
  ji2.$clinit_InternalPreconditions();
  if (start_0 > end) {
    throw toJs(new jl.IllegalArgumentException_0('fromIndex: ' + start_0 + ' > toIndex: ' + end));
  }
  if (start_0 < 0 || end > length_0) {
    throw toJs(new jl.ArrayIndexOutOfBoundsException_0('fromIndex: ' + start_0 + ', toIndex: ' + end + ', length: ' + length_0));
  }
}
;
ji2.checkCriticalArraySize = function checkCriticalArraySize(size_0){
  if (size_0 < 0) {
    throw toJs(new jl.NegativeArraySizeException('Negative array size: ' + size_0));
  }
}
;
ji2.checkCriticalArrayType = function checkCriticalArrayType(expression){
  if (!expression) {
    throw toJs(new jl.ArrayStoreException);
  }
}
;
ji2.checkCriticalArrayType_0 = function checkCriticalArrayType_0(expression, errorMessage){
  if (!expression) {
    throw toJs(new jl.ArrayStoreException_0(valueOf_17(errorMessage)));
  }
}
;
ji2.checkCriticalElement = function checkCriticalElement(expression){
  ji2.$clinit_InternalPreconditions();
  if (!expression) {
    throw toJs(new ju.NoSuchElementException);
  }
}
;
ji2.checkCriticalElementIndex = function checkCriticalElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw toJs(new jl.IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0));
  }
}
;
ji2.checkCriticalNotNull = function checkCriticalNotNull(reference){
  if (jsEquals(reference, null)) {
    throw toJs(new jl.NullPointerException);
  }
  return reference;
}
;
ji2.checkCriticalNotNull_0 = function checkCriticalNotNull_0(reference, errorMessage){
  if (jsEquals(reference, null)) {
    throw toJs(new jl.NullPointerException_1(valueOf_17(errorMessage)));
  }
}
;
ji2.checkCriticalPositionIndex = function checkCriticalPositionIndex(index_0, size_0){
  if (index_0 < 0 || index_0 > size_0) {
    throw toJs(new jl.IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0));
  }
}
;
ji2.checkCriticalPositionIndexes = function checkCriticalPositionIndexes(start_0, end, size_0){
  ji2.$clinit_InternalPreconditions();
  if (start_0 < 0 || end > size_0) {
    throw toJs(new jl.IndexOutOfBoundsException_0('fromIndex: ' + start_0 + ', toIndex: ' + end + ', size: ' + size_0));
  }
  if (start_0 > end) {
    throw toJs(new jl.IllegalArgumentException_0('fromIndex: ' + start_0 + ' > toIndex: ' + end));
  }
}
;
ji2.checkCriticalState = function checkCriticalState(expression){
  if (!expression) {
    throw toJs(new jl.IllegalStateException);
  }
}
;
ji2.checkCriticalState_0 = function checkCriticalState_0(expression, errorMessage){
  if (!expression) {
    throw toJs(new jl.IllegalStateException_0(valueOf_17(errorMessage)));
  }
}
;
ji2.checkCriticalStringBounds = function checkCriticalStringBounds(start_0, end, length_0){
  ji2.$clinit_InternalPreconditions();
  if (start_0 < 0 || end > length_0 || end < start_0) {
    throw toJs(new jl.StringIndexOutOfBoundsException('fromIndex: ' + start_0 + ', toIndex: ' + end + ', length: ' + length_0));
  }
}
;
ji2.checkCriticalStringElementIndex = function checkCriticalStringElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw toJs(new jl.StringIndexOutOfBoundsException('Index: ' + index_0 + ', Size: ' + size_0));
  }
}
;
ji2.checkCriticalType = function checkCriticalType(expression, message){
  if (!expression) {
    throw toJs(new jl.ClassCastException(message));
  }
}
;
ji2.checkElement = function checkElement(expression){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_API_CHECKED) {
    ji2.checkCriticalElement(expression);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalElement(expression);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkElementIndex = function checkElementIndex(index_0, size_0){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_BOUNDS_CHECKED) {
    ji2.checkCriticalElementIndex(index_0, size_0);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalElementIndex(index_0, size_0);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkNotNull_0 = function checkNotNull_0(reference){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_API_CHECKED) {
    ji2.checkCriticalNotNull(reference);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalNotNull(reference);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
  return reference;
}
;
ji2.checkNotNull_1 = function checkNotNull_1(reference, errorMessage){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_API_CHECKED) {
    ji2.checkCriticalNotNull_0(reference, errorMessage);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalNotNull_0(reference, errorMessage);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkPositionIndex = function checkPositionIndex(index_0, size_0){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_BOUNDS_CHECKED) {
    ji2.checkCriticalPositionIndex(index_0, size_0);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalPositionIndex(index_0, size_0);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkPositionIndexes = function checkPositionIndexes(start_0, end, size_0){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_BOUNDS_CHECKED) {
    ji2.checkCriticalPositionIndexes(start_0, end, size_0);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalPositionIndexes(start_0, end, size_0);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkState = function checkState(expression){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_API_CHECKED) {
    ji2.checkCriticalState(expression);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalState(expression);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkState_0 = function checkState_0(expression, errorMessage){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_API_CHECKED) {
    ji2.checkCriticalState_0(expression, errorMessage);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalState_0(expression, errorMessage);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkStringElementIndex = function checkStringElementIndex(index_0, size_0){
  ji2.$clinit_InternalPreconditions();
  var e;
  if (ji2.IS_BOUNDS_CHECKED) {
    ji2.checkCriticalStringElementIndex(index_0, size_0);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalStringElementIndex(index_0, size_0);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.checkType = function checkType(expression){
  ji2.$clinit_InternalPreconditions();
  ji2.checkType_0(expression, null);
}
;
ji2.checkType_0 = function checkType_0(expression, message){
  var e;
  if (ji2.IS_TYPE_CHECKED) {
    ji2.checkCriticalType(expression, message);
  }
   else if (ji2.IS_ASSERTED) {
    try {
      ji2.checkCriticalType(expression, message);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        throw toJs(new jl.AssertionError_5(e));
      }
       else 
        throw toJs($e0);
    }
  }
}
;
ji2.format_2 = function format_2(template, args){
  var builder, i, placeholderStart, templateStart;
  template = valueOf_17(template);
  builder = new jl.StringBuilder_0(jl.length__I__devirtual$_0(template) + 16 * args.length);
  templateStart = 0;
  i = 0;
  while (i < args.length) {
    placeholderStart = jl.indexOf_Ljava_lang_String_I_I__devirtual$(template, '%s', templateStart);
    if (placeholderStart == -1) {
      break;
    }
    builder.append_5(jl.substring_II_Ljava_lang_String___devirtual$(template, templateStart, placeholderStart));
    builder.append_4(args[i++]);
    templateStart = placeholderStart + 2;
  }
  builder.append_5(jl.substring_I_Ljava_lang_String___devirtual$(template, templateStart));
  if (i < args.length) {
    builder.append_5(' [');
    builder.append_4(args[i++]);
    while (i < args.length) {
      builder.append_5(', ');
      builder.append_4(args[i++]);
    }
    builder.append_1(93);
  }
  return builder.toString_0();
}
;
ji2.isApiChecked = function isApiChecked(){
  ji2.$clinit_InternalPreconditions();
  return ji2.IS_API_CHECKED || ji2.IS_ASSERTED;
}
;
ji2.isTypeChecked = function isTypeChecked(){
  ji2.$clinit_InternalPreconditions();
  return ji2.IS_TYPE_CHECKED || ji2.IS_ASSERTED;
}
;
defineClass(388, 1, {1:1});
ji2.CHECK_API = 'AUTO';
ji2.CHECK_BOUNDS = 'AUTO';
ji2.CHECK_NUMERIC = 'AUTO';
ji2.CHECK_TYPE = 'ENABLED';
ji2.IS_API_CHECKED = false;
ji2.IS_ASSERTED = false;
ji2.IS_BOUNDS_CHECKED = false;
ji2.IS_NUMERIC_CHECKED = false;
ji2.IS_TYPE_CHECKED = false;
ji2.LEVEL_MINIMAL_OR_HIGHER = false;
ji2.LEVEL_NORMAL_OR_HIGHER = false;
ji2.LEVEL_OPT_OR_HIGHER = false;
ji2.$clinit_JsUtils = function $clinit_JsUtils(){
  ji2.$clinit_JsUtils = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.getProperty = function getProperty(map_0, key){
  ji2.$clinit_JsUtils();
  return map_0[key];
}
;
ji2.isUndefined = function isUndefined(value_0){
  ji2.$clinit_JsUtils();
  return value_0 === undefined;
}
;
ji2.setProperty = function setProperty(map_0, key, value_0){
  ji2.$clinit_JsUtils();
  map_0[key] = value_0;
}
;
ji2.setPropertySafe = function setPropertySafe(map_0, key, value_0){
  ji2.$clinit_JsUtils();
  try {
    map_0[key] = value_0;
  }
   catch (ignored) {
  }
}
;
ji2.uncheckedCast = function uncheckedCast(o){
  ji2.$clinit_JsUtils();
  return o;
}
;
ji2.unsafeCastToBoolean = function unsafeCastToBoolean(bool){
  ji2.$clinit_JsUtils();
  return bool;
}
;
ji2.unsafeCastToDouble = function unsafeCastToDouble(number){
  ji2.$clinit_JsUtils();
  return number;
}
;
defineClass(378, 1, {1:1});
ji2.$clinit_NativeRegExp = function $clinit_NativeRegExp(){
  ji2.$clinit_NativeRegExp = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.$clinit_ObjectHashing = function $clinit_ObjectHashing(){
  ji2.$clinit_ObjectHashing = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.getHashCode_0 = function getHashCode_0(o){
  ji2.$clinit_ObjectHashing();
  return o.$H || (o.$H = ji2.getNextHashId());
}
;
ji2.getNextHashId = function getNextHashId(){
  return ++ji2.nextHashId;
}
;
defineClass(412, 1, {1:1});
ji2.HASH_CODE_PROPERTY = '$H';
ji2.nextHashId = 0;
ji2.$clinit_StringHashCache = function $clinit_StringHashCache(){
  ji2.$clinit_StringHashCache = emptyMethod;
  jl.$clinit_Object();
  ji2.back_0 = new Object_0;
  ji2.front = new Object_0;
}
;
ji2.compute = function compute(str){
  var hashCode, i, n, nBatch;
  hashCode = 0;
  n = jl.length__I__devirtual$_0(str);
  nBatch = n - 4;
  i = 0;
  while (i < nBatch) {
    hashCode = jl.charAt_I_C__devirtual$_0(str, i + 3) + 31 * (jl.charAt_I_C__devirtual$_0(str, i + 2) + 31 * (jl.charAt_I_C__devirtual$_0(str, i + 1) + 31 * (jl.charAt_I_C__devirtual$_0(str, i) + 31 * hashCode)));
    hashCode = ji2.ensureInt(hashCode);
    i += 4;
  }
  while (i < n) {
    hashCode = hashCode * 31 + jl.charAt_I_C__devirtual$_0(str, i++);
  }
  hashCode = ji2.ensureInt(hashCode);
  return hashCode;
}
;
ji2.getHashCode_1 = function getHashCode_1(str){
  ji2.$clinit_StringHashCache();
  var hashCode, key, result;
  key = ':' + str;
  result = ji2.getProperty(ji2.front, key);
  if (jsNotEquals(result, null)) {
    return jl.intValue__I__devirtual$_0(result);
  }
  result = ji2.getProperty(ji2.back_0, key);
  hashCode = jsEquals(result, null)?ji2.compute(str):jl.intValue__I__devirtual$_0(result);
  ji2.increment_0();
  ji2.setProperty(ji2.front, key, jl.valueOf_6(hashCode));
  return hashCode;
}
;
ji2.increment_0 = function increment_0(){
  if (ji2.count_0 == 256) {
    ji2.back_0 = ji2.front;
    ji2.front = new Object_0;
    ji2.count_0 = 0;
  }
  ++ji2.count_0;
}
;
defineClass(413, 1, {1:1});
ji2.MAX_CACHE = 256;
ji2.count_0 = 0;
cggl.Ljava_lang_Object_2_classLit = createForClass('java.lang', 'Object', 1, null);
cggl.Lcom_google_gwt_core_client_GWT_2_classLit = createForClass('com.google.gwt.core.client', 'GWT', 303, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_io_Serializable_2_classLit = createForInterface('java.io', 'Serializable');
cggl.Ljava_lang_Throwable_2_classLit = createForClass('java.lang', 'Throwable', 13, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_lang_Exception_2_classLit = createForClass('java.lang', 'Exception', 11, cggl.Ljava_lang_Throwable_2_classLit);
cggl.Ljava_lang_RuntimeException_2_classLit = createForClass('java.lang', 'RuntimeException', 16, cggl.Ljava_lang_Exception_2_classLit);
cggl.Ljava_lang_JsException_2_classLit = createForClass('java.lang', 'JsException', 72, cggl.Ljava_lang_RuntimeException_2_classLit);
cggl.Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit = createForClass('com.google.gwt.core.client.impl', 'JavaScriptExceptionBase', 227, cggl.Ljava_lang_JsException_2_classLit);
cggl.Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptException', 75, cggl.Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit);
cggl.Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptObject$', 0, cggl.Ljava_lang_Object_2_classLit);
cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator', 392, cggl.Ljava_lang_Object_2_classLit);
cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/Collector', 98, cggl.Ljava_lang_Object_2_classLit);
cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorLegacy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorLegacy', 219, cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModern', 99, cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModernNoSourceMap_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModernNoSourceMap', 220, cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit);
cggl.Lcom_google_gwt_lang_Array_2_classLit = createForClass('com.google.gwt.lang', 'Array', 359, cggl.Ljava_lang_Object_2_classLit);
cggl.Lcom_google_gwt_lang_Cast_2_classLit = createForClass('com.google.gwt.lang', 'Cast', 360, cggl.Ljava_lang_Object_2_classLit);
cggl.Lcom_google_gwt_lang_Exceptions_2_classLit = createForClass('com.google.gwt.lang', 'Exceptions', 362, cggl.Ljava_lang_Object_2_classLit);
cggl.Lcom_google_gwt_lang_Util_2_classLit = createForClass('com.google.gwt.lang', 'Util', 367, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_lang_Error_2_classLit = createForClass('java.lang', 'Error', 50, cggl.Ljava_lang_Throwable_2_classLit);
cggl.Ljava_lang_AssertionError_2_classLit = createForClass('java.lang', 'AssertionError', 21, cggl.Ljava_lang_Error_2_classLit);
cggl.Ljava_lang_Comparable_2_classLit = createForInterface('java.lang', 'Comparable');
cggl.Ljava_lang_Boolean_2_classLit = createForClass('java.lang', 'Boolean', 211, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_lang_CharSequence_2_classLit = createForInterface('java.lang', 'CharSequence');
cggl.Ljava_lang_reflect_Type_2_classLit = createForInterface('java.lang.reflect', 'Type');
cggl.Ljava_lang_Class_2_classLit = createForClass('java.lang', 'Class', 132, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_lang_ClassCastException_2_classLit = createForClass('java.lang', 'ClassCastException', 214, cggl.Ljava_lang_RuntimeException_2_classLit);
cggl.Ljava_lang_Number_2_classLit = createForClass('java.lang', 'Number', 59, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_lang_Double_2_classLit = createForClass('java.lang', 'Double', 213, cggl.Ljava_lang_Number_2_classLit);
cggl.Ljava_lang_IllegalStateException_2_classLit = createForClass('java.lang', 'IllegalStateException', 79, cggl.Ljava_lang_RuntimeException_2_classLit);
cggl.Ljava_lang_IndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'IndexOutOfBoundsException', 54, cggl.Ljava_lang_RuntimeException_2_classLit);
cggl.Ljava_lang_Integer_2_classLit = createForClass('java.lang', 'Integer', 33, cggl.Ljava_lang_Number_2_classLit);
cggl.Ljava_lang_NullPointerException_2_classLit = createForClass('java.lang', 'NullPointerException', 106, cggl.Ljava_lang_JsException_2_classLit);
cggl.Ljava_lang_String_2_classLit = createForClass('java.lang', 'String', 2, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_util_Comparator_2_classLit = createForInterface('java.util', 'Comparator');
cggl.Ljava_lang_String$1_2_classLit = createForClass('java.lang', 'String/1', 171, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljava_lang_StringIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'StringIndexOutOfBoundsException', 149, cggl.Ljava_lang_IndexOutOfBoundsException_2_classLit);
cggl.Ljavaemul_internal_Coercions_2_classLit = createForClass('javaemul.internal', 'Coercions', 442, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljavaemul_internal_HashCodes_2_classLit = createForClass('javaemul.internal', 'HashCodes', 391, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljavaemul_internal_InternalPreconditions_2_classLit = createForClass('javaemul.internal', 'InternalPreconditions', 388, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljavaemul_internal_JsUtils_2_classLit = createForClass('javaemul.internal', 'JsUtils', 378, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljavaemul_internal_ObjectHashing_2_classLit = createForClass('javaemul.internal', 'ObjectHashing', 412, cggl.Ljava_lang_Object_2_classLit);
cggl.Ljavaemul_internal_StringHashCache_2_classLit = createForClass('javaemul.internal', 'StringHashCache', 413, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_AbstractDepictor = function $clinit_AbstractDepictor(){
  carc.$clinit_AbstractDepictor = emptyMethod;
  jl.$clinit_Object();
  carc.ATOM_LABEL_COLOR = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [0, 16777215, 14286847, 13402367, 12779264, 16758197, 9474192, 3166456, 16715021, 9494608, 11789301, 11230450, 9109248, 12560038, 15780000, 16744448, 16777008, 2093087, 8442339, 9388244, 4062976, 15132390, 12567239, 10921643, 9083335, 10255047, 14706227, 15765664, 5296208, 13140019, 8224944, 12750735, 6721423, 12419299, 16752896, 10889513, 6076625, 7351984, 65280, 9764863, 9756896, 7586505, 5551541, 3907230, 2396047, 687500, 27013, 12632256, 16767375, 10909043, 6717568, 10380213, 13924864, 9699476, 4366000, 5707663, 51456, 7394559, 16777159, 14286791, 13107143, 10747847, 9437127, 6422471, 4587463, 3211207, 2097095, 65436, 58997, 54354, 48952, 43812, 5096191, 5089023, 2200790, 2522539, 2516630, 1528967, 13684960, 16765219, 12105936, 10900557, 5724513, 10375093, 11230208, 7688005, 4358806, 4325478, 32000, 7384058, 47871, 41471, 36863, 33023, 27647, 5528818, 7888099, 9064419, 10565332, 11739092, 11739066, 11734438, 12389767, 13041766, 13369433, 13697103, 14221381, 14680120, 15073326, 15400998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13158600, 1334015, 56540, 15075850, 15132160, 56540, 15075850, 15461355, 8553170, 1016335, 1016335, 1334015, 15132160, 3289770, 14456450, 16422400, 16422400, 11819700, 3289770, 1016335]);
  carc.BOND_FG_HILITE_COLOR = new ja.Color_1(255, 128, 0);
  carc.BOND_BG_HILITE_COLOR = new ja.Color_1(92, 160, 255);
  carc.FG_EXCLUDE_GROUP_COLOR = new ja.Color_1(160, 0, 64);
  carc.BG_EXCLUDE_GROUP_COLOR = new ja.Color_1(255, 160, 255);
  carc.COLOR_UNDEFINED = -1;
  carc.COLOR_HILITE_BOND_BG = -2;
  carc.COLOR_HILITE_BOND_FG = -3;
  carc.COLOR_OVERRULED = -4;
  carc.COLOR_RGB = -5;
  carc.COLOR_CUSTOM_FOREGROUND = -6;
  carc.COLOR_EXCLUDE_GROUP_BG = -7;
  carc.COLOR_EXCLUDE_GROUP_FG = -8;
  carc.COLOR_RESTORE_PREVIOUS = -9;
  carc.COLOR_INITIALIZE = -10;
  carc.COLOR_BLUE = new ja.Color_1(32, 96, 255);
  carc.COLOR_RED = new ja.Color_1(255, 0, 0);
  carc.COLOR_GREEN = new ja.Color_1(0, 255, 0);
  carc.COLOR_MAGENTA = new ja.Color_1(192, 0, 255);
  carc.COLOR_ORANGE = new ja.Color_1(255, 160, 0);
  carc.COLOR_DARK_GREEN = new ja.Color_1(0, 128, 0);
  carc.COLOR_DARK_RED = new ja.Color_1(160, 0, 0);
}
;
carc.AbstractDepictor = function AbstractDepictor(mol, displayMode){
  carc.$clinit_AbstractDepictor();
  Object_0.call(this);
  this.$init_0();
  this.mMol = mol;
  this.mDisplayMode = displayMode;
  this.init();
}
;
defineClass(146, 1, {1:1});
_.$init_0 = function $init_0(){
  this.mBoundingRect = new jag.Rectangle2D$Double;
}
;
_.addChiralInfo = function addChiralInfo(){
  var avbl, chiralText;
  if ((this.mDisplayMode & 32) != 0)
    return;
  chiralText = this.mMol.getChiralText_0();
  if (jsNotEquals(chiralText, null)) {
    if (this.mChiralTextLocation.x_0 == 0 && this.mChiralTextLocation.y_0 == 0) {
      avbl = this.mTransformation.getScaling() * this.mMol.getAverageBondLength_0();
      this.simpleCalculateBounds();
      this.expandBoundsByTabuZones(avbl);
      this.setChiralTextLocation(null, avbl, 0);
    }
    this.setTextSize(round_int(this.mChiralTextSize));
    if (this.mMol.getMoleculeColor_0() != 1)
      this.setColor(448);
    this.drawString(chiralText, this.mChiralTextLocation.x_0, this.mChiralTextLocation.y_0 + 0.30000001192092896 * this.mChiralTextSize);
  }
}
;
_.append = function append(a, b){
  return jsEquals(a, null)?b:jsEquals(b, null)?a:a + ',' + b;
}
;
_.calculateParameters = function calculateParameters(){
  var averageBondLength;
  averageBondLength = this.mTransformation.getScaling() * this.mMol.getAverageBondLength_0();
  this.mpLineWidth = averageBondLength * 0.06;
  this.mpBondSpacing = averageBondLength * 0.15;
  this.mpBondHiliteRadius = averageBondLength * 0.38;
  this.mpExcludeGroupRadius = averageBondLength * 0.47;
  this.mpLabelSize = round_int(averageBondLength * this.mFactorTextSize * 0.6 + 0.5);
  this.mpDotDiameter = averageBondLength * 0.12;
  this.mpQFDiameter = averageBondLength * 0.4;
  this.mChiralTextSize = averageBondLength * 0.5 + 0.5;
}
;
_.drawColorLine = function drawColorLine(theLine, atm1, atm2){
  var line1, line2;
  line1 = new carc.AbstractDepictor$DepictorLine;
  line2 = new carc.AbstractDepictor$DepictorLine;
  line1.x1 = theLine.x1;
  line1.y1 = theLine.y1;
  line1.x2 = (theLine.x1 + theLine.x2) / 2;
  line1.y2 = (theLine.y1 + theLine.y2) / 2;
  line2.x1 = line1.x2;
  line2.y1 = line1.y2;
  line2.x2 = theLine.x2;
  line2.y2 = theLine.y2;
  if (this.mpProperLine(line1)) {
    this.setColor(this.mAtomColor[atm1]);
    this.drawBlackLine(line1);
  }
  if (this.mpProperLine(line2)) {
    this.setColor(this.mAtomColor[atm2]);
    this.drawBlackLine(line2);
  }
  this.setColor(this.mStandardForegroundColor);
}
;
_.drawDashedLine = function drawDashedLine(theLine, atom1, atom2){
  var aLine, color1, color2, xinc, yinc;
  xinc = (theLine.x2 - theLine.x1) / 10;
  yinc = (theLine.y2 - theLine.y1) / 10;
  aLine = new carc.AbstractDepictor$DepictorLine;
  if (this.mMol.isBondForegroundHilited_0(this.mMol.getBond_0(atom1, atom2))) {
    color1 = -3;
    color2 = -3;
  }
   else {
    color1 = this.mAtomColor[atom1];
    color2 = this.mAtomColor[atom2];
  }
  this.setColor(color1);
  aLine.x1 = theLine.x1;
  aLine.y1 = theLine.y1;
  aLine.x2 = theLine.x1 + xinc * 2;
  aLine.y2 = theLine.y1 + yinc * 2;
  this.drawBlackLine(aLine);
  aLine.x1 = theLine.x1 + xinc * 4;
  aLine.y1 = theLine.y1 + yinc * 4;
  aLine.x2 = theLine.x1 + xinc * 5;
  aLine.y2 = theLine.y1 + yinc * 5;
  this.drawBlackLine(aLine);
  this.setColor(color2);
  aLine.x1 = theLine.x1 + xinc * 5;
  aLine.y1 = theLine.y1 + yinc * 5;
  aLine.x2 = theLine.x1 + xinc * 6;
  aLine.y2 = theLine.y1 + yinc * 6;
  this.drawBlackLine(aLine);
  aLine.x1 = theLine.x1 + xinc * 8;
  aLine.y1 = theLine.y1 + yinc * 8;
  aLine.x2 = theLine.x2;
  aLine.y2 = theLine.y2;
  this.drawBlackLine(aLine);
  this.setColor(this.mStandardForegroundColor);
}
;
_.drawDot = function drawDot(x_0, y_0){
  this.fillCircle(x_0 - this.mpDotDiameter / 2, y_0 - this.mpDotDiameter / 2, this.mpDotDiameter);
}
;
_.drawLine = function drawLine(theLine, atom1, atom2){
  if (this.mMol.isBondForegroundHilited_0(this.mMol.getBond_0(atom1, atom2))) {
    this.setColor(-3);
    this.drawBlackLine(theLine);
    this.setColor(this.mStandardForegroundColor);
  }
   else if (this.mAtomColor[atom1] != this.mAtomColor[atom2]) {
    this.drawColorLine(theLine, atom1, atom2);
  }
   else if (this.mAtomColor[atom1] != 0) {
    this.setColor(this.mAtomColor[atom1]);
    this.drawBlackLine(theLine);
    this.setColor(this.mStandardForegroundColor);
  }
   else {
    this.drawBlackLine(theLine);
  }
}
;
_.drawShortDashedLine = function drawShortDashedLine(theLine, atom1, atom2){
  var color1, color2, i, i0, length_0, points, x_0, xdif, xinc, y_0, ydif, yinc;
  xdif = theLine.x2 - theLine.x1;
  ydif = theLine.y2 - theLine.y1;
  length_0 = $wnd.Math.sqrt(xdif * xdif + ydif * ydif);
  points = 2 * toInt_0(jl.round_0(length_0 / (4 * this.mpLineWidth)));
  xinc = xdif / (points - 1);
  yinc = ydif / (points - 1);
  if (this.mMol.isBondForegroundHilited_0(this.mMol.getBond_0(atom1, atom2))) {
    color1 = -3;
    color2 = -3;
  }
   else {
    color1 = this.mAtomColor[atom1];
    color2 = this.mAtomColor[atom2];
  }
  x_0 = theLine.x1 - this.mpLineWidth / 2;
  y_0 = theLine.y1 - this.mpLineWidth / 2;
  this.setColor(color1);
  for (i0 = 0; i0 < narrow_int(points / 2); i0++) {
    this.fillCircle(x_0, y_0, this.mpLineWidth);
    x_0 += xinc;
    y_0 += yinc;
  }
  this.setColor(color2);
  for (i = 0; i < narrow_int(points / 2); i++) {
    this.fillCircle(x_0, y_0, this.mpLineWidth);
    x_0 += xinc;
    y_0 += yinc;
  }
  this.setColor(this.mStandardForegroundColor);
}
;
_.drawWedge = function drawWedge(theWedge, atom1, atom2){
  var color1, color2, p1x, p1y, p2x, p2y, xdiff, ydiff;
  xdiff = (theWedge.y1 - theWedge.y2) / 9;
  ydiff = (theWedge.x2 - theWedge.x1) / 9;
  p1x = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  p1y = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  p2x = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 4, 15, 1);
  p2y = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 4, 15, 1);
  p1x[0] = theWedge.x1;
  p1y[0] = theWedge.y1;
  p2x[2] = theWedge.x2 + xdiff;
  p2y[2] = theWedge.y2 + ydiff;
  p2x[3] = theWedge.x2 - xdiff;
  p2y[3] = theWedge.y2 - ydiff;
  p1x[1] = (p1x[0] + p2x[2]) / 2;
  p1y[1] = (p1y[0] + p2y[2]) / 2;
  p1x[2] = (p1x[0] + p2x[3]) / 2;
  p1y[2] = (p1y[0] + p2y[3]) / 2;
  p2x[0] = p1x[2];
  p2y[0] = p1y[2];
  p2x[1] = p1x[1];
  p2y[1] = p1y[1];
  if (this.mMol.isBondForegroundHilited_0(this.mMol.getBond_0(atom1, atom2))) {
    color1 = -3;
    color2 = -3;
  }
   else {
    color1 = this.mAtomColor[atom1];
    color2 = this.mAtomColor[atom2];
    if (this.mMol.getMoleculeColor_0() != 1) {
      color2 = this.getESRColor(atom1);
      if (color1 == this.mMol.getAtomColor_0(atom1))
        color1 = color2;
    }
  }
  this.setColor(color1);
  this.drawPolygon(p1x, p1y, 3);
  this.setColor(color2);
  this.drawPolygon(p2x, p2y, 4);
  this.setColor(this.mStandardForegroundColor);
}
;
_.expandBoundsByTabuZones = function expandBoundsByTabuZones(avbl){
  var border, i;
  for (i = 0; i < this.mpTabuZone.size(); i++)
    this.mBoundingRect = castTo(this.mBoundingRect.createUnion(castTo(this.mpTabuZone.getAtIndex(i), 53)), 32);
  this.expandByHiliteBackgrounds(avbl);
  border = 0.1 * avbl;
  this.mBoundingRect.x_0 -= border;
  this.mBoundingRect.y_0 -= border;
  this.mBoundingRect.width_0 += 2 * border;
  this.mBoundingRect.height += 2 * border;
}
;
_.expandByHiliteBackgrounds = function expandByHiliteBackgrounds(avbl){
  var i, i0, isAtomHilited, radius, rect, x_0, y_0;
  isAtomHilited = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 16, 1);
  for (i0 = 0; i0 < this.mMol.getAllBonds_0(); i0++) {
    if (this.mMol.isBondBackgroundHilited_0(i0)) {
      isAtomHilited[this.mMol.getBondAtom_0(0, i0)] = true;
      isAtomHilited[this.mMol.getBondAtom_0(1, i0)] = true;
    }
  }
  rect = new jag.Rectangle2D$Double;
  for (i = 0; i < this.mMol.getAllAtoms_0(); i++) {
    radius = (this.mMol.getAtomQueryFeatures_0(i) & 536870912) != 0?avbl * 0.47:isAtomHilited[i]?avbl * 0.38:0;
    if (radius != 0) {
      x_0 = this.mTransformation.transformX(this.mMol.getAtomX_1(i));
      y_0 = this.mTransformation.transformY(this.mMol.getAtomY_1(i));
      rect.setRect(x_0 - radius, y_0 - radius, radius * 2, radius * 2);
      this.mBoundingRect = castTo(this.mBoundingRect.createUnion(rect), 32);
    }
  }
}
;
_.getAtomX_0 = function getAtomX(atom){
  return this.mTransformation.transformX(this.mMol.getAtomX_1(atom));
}
;
_.getAtomY_0 = function getAtomY(atom){
  return this.mTransformation.transformY(this.mMol.getAtomY_1(atom));
}
;
_.getContrastColor = function getContrastColor(rgb){
  var bg, fg;
  bg = isNotNull(this.mOverruleBackground)?this.mOverruleBackground:isNotNull(this.mCustomBackground)?this.mCustomBackground:(ja.$clinit_Color() , ja.WHITE);
  fg = new ja.Color_0(rgb);
  return caru.getContrastColor_0(fg, bg);
}
;
_.getESRColor = function getESRColor(atom){
  var alleneCenter, esrInfo;
  if ((this.mDisplayMode & 128) != 0)
    return this.mAtomColor[atom];
  esrInfo = this.getESRTypeToDisplayAt(atom);
  if (esrInfo == -1) {
    alleneCenter = this.mMol.findAlleneCenterAtom_0(atom);
    if (alleneCenter != -1) {
      atom = alleneCenter;
      esrInfo = this.getESRTypeToDisplayAt(atom);
    }
  }
  if (esrInfo == -1)
    return this.mAtomColor[atom];
  switch (esrInfo & 255) {
    case 1:
      return 384;
    case 2:
      return 64;
    default:return 448;
  }
}
;
_.getESRTypeToDisplayAt = function getESRTypeToDisplayAt(atom){
  var bond, group, type_0;
  type_0 = -1;
  group = -1;
  if ((this.mDisplayMode & 128) != 0)
    return type_0;
  if (this.mMol.isAtomStereoCenter_0(atom)) {
    type_0 = this.mMol.getAtomESRType_0(atom);
    group = this.mMol.getAtomESRGroup_0(atom);
  }
  bond = this.mMol.findBINAPChiralityBond_0(atom);
  if (bond != -1) {
    type_0 = this.mMol.getBondESRType_0(bond);
    group = this.mMol.getBondESRGroup_0(bond);
  }
  if (type_0 != -1 && type_0 != 0)
    type_0 |= group << 8;
  return type_0;
}
;
_.hiliteBondBackgrounds = function hiliteBondBackgrounds(){
  var atom1, atom2, bond, line;
  this.setLineWidth(2 * this.mpBondHiliteRadius);
  line = new carc.AbstractDepictor$DepictorLine;
  for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
    atom1 = this.mMol.getBondAtom_0(0, bond);
    atom2 = this.mMol.getBondAtom_0(1, bond);
    if (this.mMol.isBondBackgroundHilited_0(bond)) {
      line.x1 = this.getAtomX_0(atom1);
      line.y1 = this.getAtomY_0(atom1);
      line.x2 = this.getAtomX_0(atom2);
      line.y2 = this.getAtomY_0(atom2);
      this.setColor(-2);
      this.drawBlackLine(line);
    }
  }
}
;
_.hiliteExcludeGroups = function hiliteExcludeGroups(){
  var atom, atom1, atom2, bond, line, radius;
  if (this.mMol.isFragment_0()) {
    radius = this.mpExcludeGroupRadius;
    this.setColor(-7);
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
      if ((this.mMol.getAtomQueryFeatures_0(atom) & 536870912) != 0)
        this.fillCircle(this.getAtomX_0(atom) - radius, this.getAtomY_0(atom) - radius, 2 * radius);
    this.setLineWidth(2 * this.mpExcludeGroupRadius);
    line = new carc.AbstractDepictor$DepictorLine;
    for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
      atom1 = this.mMol.getBondAtom_0(0, bond);
      atom2 = this.mMol.getBondAtom_0(1, bond);
      if ((this.mMol.getAtomQueryFeatures_0(atom1) & this.mMol.getAtomQueryFeatures_0(atom2) & 536870912) != 0) {
        line.x1 = this.getAtomX_0(atom1);
        line.y1 = this.getAtomY_0(atom1);
        line.x2 = this.getAtomX_0(atom2);
        line.y2 = this.getAtomY_0(atom2);
        this.drawBlackLine(line);
      }
    }
  }
}
;
_.indicateQueryFeatures = function indicateQueryFeatures(){
  var atom, atom1, atom2, bond;
  if (this.mMol.isFragment_0()) {
    this.setColor(320);
    if ((this.mDisplayMode & 8) != 0)
      for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
        if ((this.mMol.getAtomQueryFeatures_0(atom) & ~536870912) != 0)
          this.fillCircle(this.getAtomX_0(atom) - this.mpQFDiameter / 2, this.getAtomY_0(atom) - this.mpQFDiameter / 2, this.mpQFDiameter);
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      if (this.mMol.getBondQueryFeatures_0(bond) != 0) {
        atom1 = this.mMol.getBondAtom_0(0, bond);
        atom2 = this.mMol.getBondAtom_0(1, bond);
        this.fillCircle((this.getAtomX_0(atom1) + this.getAtomX_0(atom2) - this.mpQFDiameter) / 2, (this.getAtomY_0(atom1) + this.getAtomY_0(atom2) - this.mpQFDiameter) / 2, this.mpQFDiameter);
      }
    }
  }
}
;
_.init = function init(){
  this.mFactorTextSize = 1;
  this.mTransformation = new carc.DepictorTransformation;
  this.mpTabuZone = new ju.ArrayList;
  this.mpDot = new ju.ArrayList;
  this.mAtomLabelDisplayed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 16, 1);
  this.mChiralTextLocation = new jag.Point2D$Double;
  this.mStandardForegroundColor = 0;
  this.mCurrentColor = -1;
  this.updateBondHiliteColor();
}
;
_.isHighlightedAtom = function isHighlightedAtom(atom){
  var i;
  if (this.mMol.getAllConnAtoms_0(atom) == 0)
    return false;
  for (i = 0; i < this.mMol.getAllConnAtoms_0(atom); i++)
    if (!this.mMol.isBondForegroundHilited_0(this.mMol.getConnBond_0(atom, i)))
      return false;
  return true;
}
;
_.markIsolatedAtoms = function markIsolatedAtoms(){
  var bnd;
  this.mAtomIsConnected = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 16, 1);
  for (bnd = 0; bnd < this.mMol.getAllBonds_0(); bnd++) {
    this.mAtomIsConnected[this.mMol.getBondAtom_0(0, bnd)] = true;
    this.mAtomIsConnected[this.mMol.getBondAtom_0(1, bnd)] = true;
  }
}
;
_.mpAlleneCenter = function mpAlleneCenter(atm){
  var i;
  if (this.mMol.getConnAtoms_0(atm) != 2)
    return false;
  for (i = 0; i < 2; i++)
    if (this.mMol.getConnBondOrder_0(atm, i) != 2)
      return false;
  return true;
}
;
_.mpCalcNextBondOffset = function mpCalcNextBondOffset(atm1, atm2, side, nextBondOffset){
  var LI_LIMIT, LO_LIMIT, RI_LIMIT, RO_LIMIT, angleDiff, bnd, bondAngle, currentAngleDiff, distance, i, remoteAtm, retval, testAngle, theBondAngle;
  RO_LIMIT = 2.617993878;
  LO_LIMIT = 3.665191429;
  RI_LIMIT = 0.523598776;
  LI_LIMIT = 5.759586531;
  retval = false;
  nextBondOffset.x_0 = 0;
  nextBondOffset.y_0 = 0;
  if (side > 0)
    angleDiff = 2.617993878;
  else 
    angleDiff = 3.665191429;
  theBondAngle = this.mMol.getBondAngle_0(atm1, atm2);
  for (i = 0; i < this.mMol.getConnAtoms_0(atm1); i++) {
    bnd = this.mMol.getConnBond_0(atm1, i);
    bondAngle = theBondAngle;
    if (this.mMol.getBondAtom_0(0, bnd) == atm1)
      remoteAtm = this.mMol.getBondAtom_0(1, bnd);
    else 
      remoteAtm = this.mMol.getBondAtom_0(0, bnd);
    if (remoteAtm == atm2)
      continue;
    testAngle = this.mMol.getBondAngle_0(atm1, remoteAtm);
    if (bondAngle < testAngle)
      bondAngle += 3.141592653589793 * 2;
    currentAngleDiff = bondAngle - testAngle;
    if (side > 0) {
      if (currentAngleDiff < 3.141592653589793)
        retval = true;
      if (currentAngleDiff > 2.617993878)
        currentAngleDiff = 2.617993878;
      if (currentAngleDiff < 0.523598776)
        currentAngleDiff = 0.523598776;
      if (currentAngleDiff <= angleDiff) {
        angleDiff = currentAngleDiff;
        distance = this.mpBondSpacing * $wnd.Math.tan(angleDiff - 3.141592653589793 / 2) / 2;
        nextBondOffset.x_0 = -(distance * $wnd.Math.sin(bondAngle));
        nextBondOffset.y_0 = -(distance * $wnd.Math.cos(bondAngle));
      }
    }
     else {
      if (currentAngleDiff >= 3.141592653589793)
        retval = true;
      if (currentAngleDiff < 3.665191429)
        currentAngleDiff = 3.665191429;
      if (currentAngleDiff > 5.759586531)
        currentAngleDiff = 5.759586531;
      if (currentAngleDiff >= angleDiff) {
        angleDiff = currentAngleDiff;
        distance = this.mpBondSpacing * $wnd.Math.tan(4.712388981 - angleDiff) / 2;
        nextBondOffset.x_0 = -(distance * $wnd.Math.sin(bondAngle));
        nextBondOffset.y_0 = -(distance * $wnd.Math.cos(bondAngle));
      }
    }
  }
  return retval;
}
;
_.mpCalcPiBondOffset = function mpCalcPiBondOffset(dx, dy, piBondOffset){
  var alpha_0;
  if (dx == 0) {
    if (dy < 0)
      piBondOffset.x_0 = this.mpBondSpacing;
    else 
      piBondOffset.x_0 = -this.mpBondSpacing;
    piBondOffset.y_0 = 0;
    return;
  }
  alpha_0 = $wnd.Math.atan(dy / dx);
  if (dx < 0)
    alpha_0 += 3.141592653589793;
  piBondOffset.x_0 = -(this.mpBondSpacing * $wnd.Math.sin(alpha_0));
  piBondOffset.y_0 = this.mpBondSpacing * $wnd.Math.cos(alpha_0);
}
;
_.mpDBFromNonLabelToLabel = function mpDBFromNonLabelToLabel(theLine, bnd, inverted){
  var aLine, aLineIsInnerLine, atm1, atm2, bLine, nextBondOffset, piBondOffset, side, td, ti, xdiff, ydiff;
  aLine = new carc.AbstractDepictor$DepictorLine;
  bLine = new carc.AbstractDepictor$DepictorLine;
  piBondOffset = new jag.Point2D$Double;
  nextBondOffset = new jag.Point2D$Double;
  atm1 = this.mMol.getBondAtom_0(0, bnd);
  atm2 = this.mMol.getBondAtom_0(1, bnd);
  if (inverted) {
    td = theLine.x1;
    theLine.x1 = theLine.x2;
    theLine.x2 = td;
    td = theLine.y1;
    theLine.y1 = theLine.y2;
    theLine.y2 = td;
    ti = atm1;
    atm1 = atm2;
    atm2 = ti;
  }
  if (!this.mpProperLine(theLine))
    return;
  if (this.mMol.isRingBond_0(bnd)) {
    aLine.x1 = theLine.x1;
    aLine.y1 = theLine.y1;
    aLine.x2 = theLine.x2;
    aLine.y2 = theLine.y2;
    side = inverted?-this.mpPreferredSide(bnd):this.mpPreferredSide(bnd);
    if (side == 0)
      side = 1;
    this.mpCalcPiBondOffset(theLine.x2 - theLine.x1, theLine.y2 - theLine.y1, piBondOffset);
    if (side > 0) {
      bLine.x1 = theLine.x1 + piBondOffset.x_0;
      bLine.y1 = theLine.y1 + piBondOffset.y_0;
      bLine.x2 = theLine.x2 + piBondOffset.x_0;
      bLine.y2 = theLine.y2 + piBondOffset.y_0;
      if (this.mpCalcNextBondOffset(atm1, atm2, 1, nextBondOffset) || this.mMol.getConnAtoms_0(atm1) > 1) {
        bLine.x1 += nextBondOffset.x_0 + piBondOffset.y_0;
        bLine.y1 += nextBondOffset.y_0 - piBondOffset.x_0;
      }
    }
     else {
      bLine.x1 = theLine.x1 - piBondOffset.x_0;
      bLine.y1 = theLine.y1 - piBondOffset.y_0;
      bLine.x2 = theLine.x2 - piBondOffset.x_0;
      bLine.y2 = theLine.y2 - piBondOffset.y_0;
      if (this.mpCalcNextBondOffset(atm1, atm2, -1, nextBondOffset) || this.mMol.getConnAtoms_0(atm1) > 1) {
        bLine.x1 += nextBondOffset.x_0 + piBondOffset.y_0;
        bLine.y1 += nextBondOffset.y_0 - piBondOffset.x_0;
      }
    }
    if (this.mMol.getBondType_0(bnd) == 26)
      this.mpMakeCrossBond(aLine, bLine);
    this.mpHandleLine(aLine, atm1, atm2);
    if (this.mMol.getBondType_0(bnd) == 64)
      this.mpHandleDashedLine(bLine, atm1, atm2);
    else 
      this.mpHandleLine(bLine, atm1, atm2);
  }
   else {
    this.mpCalcPiBondOffset(theLine.x2 - theLine.x1, theLine.y2 - theLine.y1, piBondOffset);
    xdiff = piBondOffset.x_0 / 2;
    ydiff = piBondOffset.y_0 / 2;
    aLineIsInnerLine = false;
    aLine.x1 = theLine.x1 + xdiff;
    aLine.y1 = theLine.y1 + ydiff;
    aLine.x2 = theLine.x2 + xdiff;
    aLine.y2 = theLine.y2 + ydiff;
    if (this.mMol.getConnAtoms_0(atm1) > 1) {
      if (!this.mpCalcNextBondOffset(atm1, atm2, 1, nextBondOffset)) {
        setCheck(this.mAlternativeCoords, atm1, new jag.Point2D$Double_0(aLine.x1, aLine.y1));
      }
       else {
        aLine.x1 += nextBondOffset.x_0;
        aLine.y1 += nextBondOffset.y_0;
        if (this.mMol.getConnAtoms_0(atm1) == 2) {
          if (nextBondOffset.x_0 != 0 || nextBondOffset.y_0 != 0) {
            aLine.x1 += piBondOffset.y_0;
            aLine.y1 -= piBondOffset.x_0;
          }
        }
      }
    }
    bLine.x1 = theLine.x1 - xdiff;
    bLine.y1 = theLine.y1 - ydiff;
    bLine.x2 = theLine.x2 - xdiff;
    bLine.y2 = theLine.y2 - ydiff;
    if (this.mMol.getConnAtoms_0(atm1) > 1) {
      if (!this.mpCalcNextBondOffset(atm1, atm2, 0, nextBondOffset)) {
        setCheck(this.mAlternativeCoords, atm1, new jag.Point2D$Double_0(bLine.x1, bLine.y1));
        aLineIsInnerLine = true;
      }
       else {
        bLine.x1 += nextBondOffset.x_0;
        bLine.y1 += nextBondOffset.y_0;
        if (this.mMol.getConnAtoms_0(atm1) == 2) {
          if (nextBondOffset.x_0 != 0 || nextBondOffset.y_0 != 0) {
            bLine.x1 += piBondOffset.y_0;
            bLine.y1 -= piBondOffset.x_0;
          }
        }
      }
    }
    if (this.mMol.getBondType_0(bnd) == 26)
      this.mpMakeCrossBond(aLine, bLine);
    if (this.mMol.getBondType_0(bnd) == 64) {
      if (aLineIsInnerLine) {
        this.drawDashedLine(aLine, atm1, atm2);
        this.drawLine(bLine, atm1, atm2);
      }
       else {
        this.drawLine(aLine, atm1, atm2);
        this.drawDashedLine(bLine, atm1, atm2);
      }
    }
     else {
      this.drawLine(aLine, atm1, atm2);
      this.drawLine(bLine, atm1, atm2);
    }
  }
}
;
_.mpDrawAllBonds = function mpDrawAllBonds(){
  var atom1, atom2, cipStr, dx, dy, i, i0, i1, type_0, x_0, y_0;
  this.mAlternativeCoords = initUnidimensionalArray(cggl.Ljava_awt_geom_Point2D$Double_2_classLit, {4:1, 1:1, 8:1}, 48, this.mMol.getAllAtoms_0(), 0, 1);
  for (i0 = 0; i0 < this.mMol.getAllBonds_0(); i0++)
    if (this.mMol.getBondType_0(i0) == 2 || this.mMol.getBondType_0(i0) == 26 || this.mMol.getBondType_0(i0) == 64)
      this.mpDrawBond(i0);
  for (i1 = 0; i1 < this.mMol.getAllBonds_0(); i1++)
    if (this.mMol.getBondType_0(i1) != 2 && this.mMol.getBondType_0(i1) != 26 && this.mMol.getBondType_0(i1) != 64)
      this.mpDrawBond(i1);
  if ((this.mDisplayMode & 64) == 0) {
    for (i = 0; i < this.mMol.getAllBonds_0(); i++) {
      if (this.mMol.getBondCIPParity_0(i) != 0) {
        switch (this.mMol.getBondCIPParity_0(i)) {
          case 1:
            cipStr = this.mMol.getBondOrder_0(i) == 2?'E':this.mMol.isBondParityPseudo_0(i)?'p':'P';
            break;
          case 2:
            cipStr = this.mMol.getBondOrder_0(i) == 2?'Z':this.mMol.isBondParityPseudo_0(i)?'m':'M';
            break;
          default:cipStr = '?';
            break;
        }
        this.mpSetSmallLabelSize();
        this.setColor(this.mMol.isBondForegroundHilited_0(i)?-3:this.mMol.getMoleculeColor_0() == 1?this.mStandardForegroundColor:448);
        atom1 = this.mMol.getBondAtom_0(0, i);
        atom2 = this.mMol.getBondAtom_0(1, i);
        x_0 = (this.getAtomX_0(atom1) + this.getAtomX_0(atom2)) / 2;
        y_0 = (this.getAtomY_0(atom1) + this.getAtomY_0(atom2)) / 2;
        dx = (this.getAtomX_0(atom1) - this.getAtomX_0(atom2)) / 3;
        dy = (this.getAtomY_0(atom1) - this.getAtomY_0(atom2)) / 3;
        this.mpDrawString(x_0 + dy, y_0 - dx, cipStr, true);
        this.setColor(this.mStandardForegroundColor);
        this.mpSetNormalLabelSize();
      }
    }
  }
  if ((this.mDisplayMode & 4) != 0) {
    this.mpSetSmallLabelSize();
    this.setColor(384);
    for (i = 0; i < this.mMol.getAllBonds_0(); i++) {
      atom1 = this.mMol.getBondAtom_0(0, i);
      atom2 = this.mMol.getBondAtom_0(1, i);
      type_0 = this.mMol.isDelocalizedBond_0(i)?'d':this.mMol.isAromaticBond_0(i)?'a':'';
      x_0 = (this.getAtomX_0(atom1) + this.getAtomX_0(atom2)) / 2;
      y_0 = (this.getAtomY_0(atom1) + this.getAtomY_0(atom2)) / 2;
      this.mpDrawString(x_0, y_0, type_0 + ('' + jl.valueOf_15(i)), true);
    }
    this.setColor(this.mStandardForegroundColor);
    this.mpSetNormalLabelSize();
  }
}
;
_.mpDrawAllDots = function mpDrawAllDots(){
  var dot, dot$iterator;
  for (dot$iterator = this.mpDot.iterator(); dot$iterator.hasNext_0();) {
    dot = castTo(dot$iterator.next_3(), 117);
    this.setColor(dot.color_0);
    this.drawDot(dot.x_0, dot.y_0);
  }
  this.setColor(this.mStandardForegroundColor);
}
;
_.mpDrawAtom = function mpDrawAtom(atom){
  var angle, atmStart, atomStr, bestSide, bnd, charge, chax, chay, cipStr, counterHindrance, counterSide, esrInfo, esrStr, hNoStr, hNoWidth, hindrance, hydrogenWidth, hydrogens, hydrogensToAdd, i, i0, isoStr, j, labelWidth, largeIsoString, mapStr, minHindrance, neighbours, piElectrons, propStr, queryFeatures, ringBonds, theAngle, theColor, unpairedElectrons, valStr, x_0, xdiff, y_0, ydiff;
  if (!this.mIsValidatingView)
    this.onDrawAtom(atom, this.mMol.getAtomLabel_0(atom), this.getAtomX_0(atom), this.getAtomY_0(atom));
  propStr = null;
  if (this.mMol.getAtomCharge_0(atom) != 0) {
    valStr = $wnd.Math.abs(this.mMol.getAtomCharge_0(atom)) == 1?'':jl.valueOf_15($wnd.Math.abs(this.mMol.getAtomCharge_0(atom)));
    propStr = this.mMol.getAtomCharge_0(atom) < 0?valStr + '-':valStr + '+';
  }
  if (jsNotEquals(this.mAtomText, null) && atom < this.mAtomText.length && jsNotEquals(this.mAtomText[atom], null) && jl.length__I__devirtual$_0(this.mAtomText[atom]) > 0)
    propStr = this.append(propStr, this.mAtomText[atom]);
  isoStr = null;
  queryFeatures = this.mMol.getAtomQueryFeatures_0(atom);
  if (queryFeatures != 0) {
    if ((queryFeatures & 2) != 0)
      isoStr = this.append(isoStr, 'a');
    if ((queryFeatures & 4) != 0)
      isoStr = this.append(isoStr, '!a');
    if ((queryFeatures & 4096) != 0)
      isoStr = this.append(isoStr, 's');
    if ((queryFeatures & 1920) != 0) {
      hydrogens = queryFeatures & 1920;
      if (hydrogens == 256 + 512 + 1024)
        isoStr = this.append(isoStr, 'h0');
      else if (hydrogens == 128 + 512 + 1024)
        isoStr = this.append(isoStr, 'h1');
      else if (hydrogens == 128 + 256 + 1024)
        isoStr = this.append(isoStr, 'h2');
      else if (hydrogens == 128)
        isoStr = this.append(isoStr, 'h>0');
      else if (hydrogens == 128 + 256)
        isoStr = this.append(isoStr, 'h>1');
      else if (hydrogens == 128 + 256 + 512)
        isoStr = this.append(isoStr, 'h>2');
      else if (hydrogens == 1024)
        isoStr = this.append(isoStr, 'h<3');
      else if (hydrogens == 512 + 1024)
        isoStr = this.append(isoStr, 'h<2');
    }
    if ((queryFeatures & 234881024) != 0) {
      charge = queryFeatures & 234881024;
      if (charge == 134217728 + 33554432)
        isoStr = this.append(isoStr, 'c0');
      else if (charge == 67108864 + 33554432)
        isoStr = this.append(isoStr, 'c+');
      else if (charge == 67108864 + 134217728)
        isoStr = this.append(isoStr, 'c-');
    }
    if ((queryFeatures & 114688) != 0) {
      piElectrons = queryFeatures & 114688;
      if (piElectrons == 32768 + 65536)
        isoStr = this.append(isoStr, 'pi0');
      else if (piElectrons == 16384 + 65536)
        isoStr = this.append(isoStr, 'pi1');
      else if (piElectrons == 16384 + 32768)
        isoStr = this.append(isoStr, 'pi2');
      else if (piElectrons == 16384)
        isoStr = this.append(isoStr, 'pi>0');
    }
    if ((queryFeatures & 4063232) != 0) {
      neighbours = queryFeatures & 4063232;
      if (neighbours == (4063232 & ~262144))
        isoStr = this.append(isoStr, 'n1');
      else if (neighbours == (4063232 & ~524288))
        isoStr = this.append(isoStr, 'n2');
      else if (neighbours == (4063232 & ~1048576))
        isoStr = this.append(isoStr, 'n3');
      else if (neighbours == 1048576 + 2097152)
        isoStr = this.append(isoStr, 'n<3');
      else if (neighbours == 2097152)
        isoStr = this.append(isoStr, 'n<4');
      else if (neighbours == 131072 + 262144)
        isoStr = this.append(isoStr, 'n>1');
      else if (neighbours == 131072 + 262144 + 524288)
        isoStr = this.append(isoStr, 'n>2');
      else if (neighbours == (4063232 & ~2097152))
        isoStr = this.append(isoStr, 'n>3');
    }
    if ((queryFeatures & 120) != 0) {
      ringBonds = queryFeatures & 120;
      if (ringBonds == 16 + 32 + 64)
        isoStr = this.append(isoStr, '!r');
      else if (ringBonds == 8)
        isoStr = this.append(isoStr, 'r');
      else if (ringBonds == 8 + 32 + 64)
        isoStr = this.append(isoStr, 'rb2');
      else if (ringBonds == 8 + 16 + 64)
        isoStr = this.append(isoStr, 'rb3');
      else if (ringBonds == 8 + 16 + 32)
        isoStr = this.append(isoStr, 'rb4');
    }
    if ((queryFeatures & 29360128) != 0) {
      isoStr = this.append(isoStr, 'r' + ((queryFeatures & 29360128) >> 22));
    }
    if ((queryFeatures & 268435456) != 0) {
      isoStr = this.append(isoStr, 'f');
    }
  }
  if (this.mMol.getAtomMass_0(atom) != 0) {
    isoStr = this.append(isoStr, jl.valueOf_15(this.mMol.getAtomMass_0(atom)));
  }
  unpairedElectrons = 0;
  if (this.mMol.getAtomRadical_0(atom) != 0) {
    switch (this.mMol.getAtomRadical_0(atom)) {
      case 16:
        propStr = this.append(propStr, '|');
        break;
      case 32:
        unpairedElectrons = 1;
        break;
      case 48:
        unpairedElectrons = 2;
        break;
    }
  }
  cipStr = null;
  if ((this.mDisplayMode & 64) == 0) {
    if (this.mMol.isAtomConfigurationUnknown_0(atom))
      cipStr = '?';
    else if (this.mMol.getAtomCIPParity_0(atom) != 0) {
      if (this.mMol.getConnAtoms_0(atom) == 2) {
        switch (this.mMol.getAtomCIPParity_0(atom)) {
          case 2:
            cipStr = this.mMol.isAtomParityPseudo_0(atom)?'p':'P';
            break;
          case 1:
            cipStr = this.mMol.isAtomParityPseudo_0(atom)?'m':'M';
            break;
          default:cipStr = '*';
            break;
        }
      }
       else {
        switch (this.mMol.getAtomCIPParity_0(atom)) {
          case 1:
            cipStr = this.mMol.isAtomParityPseudo_0(atom)?'r':'R';
            break;
          case 2:
            cipStr = this.mMol.isAtomParityPseudo_0(atom)?'s':'S';
            break;
          default:cipStr = '*';
            break;
        }
      }
    }
  }
  if ((this.mDisplayMode & 1792) != 0)
    cipStr = this.append(cipStr, jl.valueOf_15(this.mMol.getSymmetryRank_0(atom)));
  mapStr = null;
  if ((this.mDisplayMode & 16) != 0 && this.mMol.getAtomMapNo_0(atom) != 0)
    mapStr = '' + this.mMol.getAtomMapNo_0(atom);
  esrStr = null;
  if (this.mMol.getStereoBond_0(atom) != -1) {
    esrInfo = this.getESRTypeToDisplayAt(atom);
    if (esrInfo != -1)
      esrStr = esrInfo == 0?'abs':((esrInfo & 255) == 1?'&':'or') + (1 + (esrInfo >> 8));
  }
  hydrogensToAdd = 0;
  if (this.mMol.isFragment_0()) {
    if ((this.mMol.getAtomQueryFeatures_0(atom) & 2048) != 0)
      hydrogensToAdd = this.mMol.getImplicitHydrogens_0(atom);
  }
   else {
    if (this.mMol.getAtomicNo_0(atom) != 6 || !this.mAtomIsConnected[atom] || this.mMol.getAtomRadical_0(atom) != 0)
      hydrogensToAdd = this.mMol.getImplicitHydrogens_0(atom);
  }
  largeIsoString = false;
  atomStr = this.mMol.getAtomCustomLabel_0(atom);
  if (jsNotEquals(atomStr, null) && jl.startsWith_Ljava_lang_String__Z__devirtual$(atomStr, ']')) {
    isoStr = this.append(jl.substring_I_Ljava_lang_String___devirtual$(atomStr, 1), isoStr);
    atomStr = null;
    largeIsoString = true;
  }
  if (jsNotEquals(atomStr, null)) {
    hydrogensToAdd = 0;
  }
   else if (jsNotEquals(this.mMol.getAtomList_0(atom), null)) {
    atmStart = (this.mMol.getAtomQueryFeatures_0(atom) & 1) != 0?'[!':'[';
    atomStr = atmStart + ('' + this.mMol.getAtomListString_0(atom)) + ']';
    if (jl.length__I__devirtual$_0(atomStr) > 5)
      atomStr = atmStart + this.mMol.getAtomList_0(atom).length + ']';
    if ((this.mMol.getAtomQueryFeatures_0(atom) & 2048) != 0)
      hydrogensToAdd = -1;
  }
   else if ((this.mMol.getAtomQueryFeatures_0(atom) & 1) != 0) {
    atomStr = '?';
    if ((this.mMol.getAtomQueryFeatures_0(atom) & 2048) != 0)
      hydrogensToAdd = -1;
  }
   else if (this.mMol.getAtomicNo_0(atom) != 6 || jsNotEquals(propStr, null) || jsNotEquals(isoStr, null) || hydrogensToAdd > 0 || !this.mAtomIsConnected[atom])
    atomStr = this.mMol.getAtomLabel_0(atom);
  labelWidth = 0;
  if (!this.mMol.isSelectedAtom_0(atom) & (this.mMol.getAtomQueryFeatures_0(atom) & 536870912) != 0)
    this.setColor(-8);
  if (jsNotEquals(atomStr, null)) {
    labelWidth = this.getStringWidth(atomStr);
    this.mpDrawString(this.getAtomX_0(atom), this.getAtomY_0(atom), atomStr, true);
    this.mAtomLabelDisplayed[atom] = true;
  }
   else if (this.mpAlleneCenter(atom))
    this.mpDrawDot(this.getAtomX_0(atom), this.getAtomY_0(atom), atom);
  if (jsNotEquals(propStr, null)) {
    this.mpSetSmallLabelSize();
    x_0 = this.getAtomX_0(atom) + ((labelWidth + this.getStringWidth(propStr)) / 2 + 1);
    y_0 = this.getAtomY_0(atom) - narrow_int((this.getTextSize() * 4 - 4) / 8);
    this.mpDrawString(x_0, y_0, propStr, true);
    this.mpSetNormalLabelSize();
  }
  if ((this.mDisplayMode & 2) != 0)
    isoStr = jl.valueOf_15(atom);
  if (jsNotEquals(isoStr, null)) {
    if (largeIsoString)
      this.mpSetReducedLabelSize();
    else 
      this.mpSetSmallLabelSize();
    x_0 = this.getAtomX_0(atom) - (labelWidth + this.getStringWidth(isoStr)) / 2;
    y_0 = this.getAtomY_0(atom) - narrow_int((this.getTextSize() * 4 - 4) / 8);
    this.mpDrawString(x_0, y_0, isoStr, true);
    this.mpSetNormalLabelSize();
  }
  if (jsNotEquals(cipStr, null)) {
    this.mpSetSmallLabelSize();
    x_0 = this.getAtomX_0(atom) - (labelWidth + this.getStringWidth(cipStr)) / 2;
    y_0 = this.getAtomY_0(atom) + narrow_int((this.getTextSize() * 4 + 4) / 8);
    theColor = this.mCurrentColor;
    if (this.mMol.getMoleculeColor_0() != 1)
      this.setColor(448);
    this.mpDrawString(x_0, y_0, cipStr, false);
    this.setColor(theColor);
    this.mpSetNormalLabelSize();
  }
  if (jsNotEquals(mapStr, null)) {
    this.mpSetSmallLabelSize();
    x_0 = this.getAtomX_0(atom) + ((labelWidth + this.getStringWidth(mapStr)) / 2 + 1);
    y_0 = this.getAtomY_0(atom) + narrow_int((this.getTextSize() * 4 + 4) / 8);
    theColor = this.mCurrentColor;
    this.setColor(this.mMol.isAutoMappedAtom_0(atom)?384:448);
    this.mpDrawString(x_0, y_0, mapStr, true);
    this.setColor(theColor);
    this.mpSetNormalLabelSize();
  }
  if (jsNotEquals(esrStr, null)) {
    angle = this.mpGetFreeSpaceAngle(atom);
    this.mpSetSmallLabelSize();
    x_0 = this.getAtomX_0(atom) + 0.7 * this.getTextSize() * $wnd.Math.sin(angle);
    y_0 = this.getAtomY_0(atom) + 0.7 * this.getTextSize() * $wnd.Math.cos(angle);
    theColor = this.mCurrentColor;
    if (this.mMol.getMoleculeColor_0() != 1)
      this.setColor(this.getESRColor(atom));
    this.mpDrawString(x_0, y_0, esrStr, false);
    this.setColor(theColor);
    this.mpSetNormalLabelSize();
  }
  if (hydrogensToAdd == 0 && unpairedElectrons == 0) {
    if (this.mCurrentColor == -8)
      this.setColor(-9);
    return;
  }
  hindrance = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 4, 15, 1);
  for (i0 = 0; i0 < this.mMol.getAllConnAtomsPlusMetalBonds_0(atom); i0++) {
    bnd = this.mMol.getConnBond_0(atom, i0);
    for (j = 0; j < 2; j++) {
      if (this.mMol.getBondAtom_0(j, bnd) == atom) {
        theAngle = this.mMol.getBondAngle_0(this.mMol.getBondAtom_0(j, bnd), this.mMol.getBondAtom_0(1 - j, bnd));
        if (theAngle < -3.141592653589793 / 2) {
          hindrance[0] -= theAngle + 3.141592653589793 / 2;
          hindrance[3] += theAngle + 3.141592653589793;
        }
         else if (theAngle < 0) {
          hindrance[2] += theAngle + 3.141592653589793 / 2;
          hindrance[3] -= theAngle;
        }
         else if (theAngle < 3.141592653589793 / 2) {
          hindrance[1] += theAngle;
          hindrance[2] += 3.141592653589793 / 2 - theAngle;
        }
         else {
          hindrance[0] += theAngle - 3.141592653589793 / 2;
          hindrance[1] += 3.141592653589793 - theAngle;
        }
      }
    }
  }
  if (this.mMol.getConnAtoms_0(atom) == 0) {
    if (this.mMol.isElectronegative_0(atom))
      hindrance[3] -= 0.2;
    else 
      hindrance[1] -= 0.2;
  }
   else 
    hindrance[1] -= 0.1;
  if (jsNotEquals(propStr, null) || jsNotEquals(mapStr, null))
    hindrance[1] += 10;
  if (jsNotEquals(isoStr, null) || jsNotEquals(cipStr, null))
    hindrance[3] += 10;
  hNoStr = '';
  if (hydrogensToAdd != 0) {
    hydrogenWidth = this.getStringWidth('H');
    hNoWidth = 0;
    if (hydrogensToAdd == -1) {
      hNoStr = 'n';
      this.mpSetSmallLabelSize();
      hNoWidth = this.getStringWidth(hNoStr);
    }
     else if (hydrogensToAdd > 1) {
      hNoStr = jl.valueOf_15(hydrogensToAdd);
      this.mpSetSmallLabelSize();
      hNoWidth = this.getStringWidth(hNoStr);
    }
    if (hindrance[1] < 0.6 || hindrance[3] < 0.6) {
      chay = this.getAtomY_0(atom);
      if (hindrance[1] <= hindrance[3]) {
        hindrance[1] += 10;
        chax = this.getAtomX_0(atom) + (labelWidth + hydrogenWidth) / 2;
      }
       else {
        hindrance[3] += 10;
        chax = this.getAtomX_0(atom) - (labelWidth + hydrogenWidth) / 2 - hNoWidth;
      }
    }
     else {
      chax = this.getAtomX_0(atom);
      if (hindrance[0] < hindrance[2]) {
        hindrance[0] += 10;
        chay = this.getAtomY_0(atom) - this.getTextSize();
      }
       else {
        hindrance[2] += 10;
        chay = this.getAtomY_0(atom) + this.getTextSize();
      }
    }
    if (hNoWidth > 0) {
      x_0 = chax + (hydrogenWidth + hNoWidth) / 2;
      y_0 = chay + narrow_int((this.getTextSize() * 4 + 4) / 8);
      this.mpDrawString(x_0, y_0, hNoStr, true);
      this.mpSetNormalLabelSize();
    }
    this.mpDrawString(chax, chay, 'H', true);
  }
  bestSide = 0;
  if (unpairedElectrons != 0) {
    minHindrance = 50;
    counterHindrance = 0;
    for (i = 0; i < 4; i++) {
      counterSide = i > 1?i - 2:i + 2;
      if (hindrance[i] < minHindrance) {
        bestSide = i;
        minHindrance = hindrance[i];
        counterHindrance = hindrance[counterSide];
      }
       else if (hindrance[i] == minHindrance) {
        if (hindrance[counterSide] > counterHindrance) {
          bestSide = i;
          counterHindrance = hindrance[counterSide];
        }
      }
    }
    switch (bestSide) {
      case 0:
        chax = this.getAtomX_0(atom);
        chay = this.getAtomY_0(atom) - this.mpDotDiameter - labelWidth / 2;
        break;
      case 1:
        chax = this.getAtomX_0(atom) + this.mpDotDiameter + labelWidth / 2;
        chay = this.getAtomY_0(atom);
        break;
      case 2:
        chax = this.getAtomX_0(atom);
        chay = this.getAtomY_0(atom) + this.mpDotDiameter + labelWidth / 2;
        break;
      default:chax = this.getAtomX_0(atom) - this.mpDotDiameter - labelWidth / 2;
        chay = this.getAtomY_0(atom);
        break;
    }
    if (unpairedElectrons == 1) {
      this.mpDrawDot(chax, chay, atom);
    }
     else {
      switch (bestSide) {
        case 0:
          xdiff = 2 * this.mpDotDiameter;
          ydiff = 0;
          chax -= this.mpDotDiameter;
          break;
        case 1:
          xdiff = 0;
          ydiff = 2 * this.mpDotDiameter;
          chay -= this.mpDotDiameter;
          break;
        case 2:
          xdiff = 2 * this.mpDotDiameter;
          ydiff = 0;
          chax -= this.mpDotDiameter;
          break;
        default:xdiff = 0;
          ydiff = 2 * this.mpDotDiameter;
          chay -= this.mpDotDiameter;
          break;
      }
      this.mpDrawDot(chax, chay, atom);
      this.mpDrawDot(chax + xdiff, chay + ydiff, atom);
    }
  }
  if (this.mCurrentColor == -8)
    this.setColor(-9);
}
;
_.mpDrawBond = function mpDrawBond(bnd){
  var aLine, atom1, atom2, bLine, bondOrder, color1, color2, i, isExcludeGroup, nextBondOffset, piBondOffset, side, theLine, xdiff, ydiff;
  theLine = new carc.AbstractDepictor$DepictorLine;
  aLine = new carc.AbstractDepictor$DepictorLine;
  bLine = new carc.AbstractDepictor$DepictorLine;
  piBondOffset = new jag.Point2D$Double;
  nextBondOffset = new jag.Point2D$Double;
  atom1 = this.mMol.getBondAtom_0(0, bnd);
  atom2 = this.mMol.getBondAtom_0(1, bnd);
  isExcludeGroup = ((this.mMol.getAtomQueryFeatures_0(atom1) | this.mMol.getAtomQueryFeatures_0(atom2)) & 536870912) != 0;
  this.onDrawBond(atom1, atom2, this.getAtomX_0(atom1), this.getAtomY_0(atom1), this.getAtomX_0(atom2), this.getAtomY_0(atom2));
  if (!this.mMol.isSelectedAtom_0(atom1) && !this.mMol.isSelectedAtom_0(atom2) && ((this.mMol.getAtomQueryFeatures_0(atom1) | this.mMol.getAtomQueryFeatures_0(atom2)) & 536870912) != 0)
    this.setColor(-8);
  if (isNull(this.mAlternativeCoords[atom1])) {
    theLine.x1 = this.getAtomX_0(atom1);
    theLine.y1 = this.getAtomY_0(atom1);
  }
   else {
    theLine.x1 = this.mAlternativeCoords[atom1].x_0;
    theLine.y1 = this.mAlternativeCoords[atom1].y_0;
  }
  if (isNull(this.mAlternativeCoords[atom2])) {
    theLine.x2 = this.getAtomX_0(atom2);
    theLine.y2 = this.getAtomY_0(atom2);
  }
   else {
    theLine.x2 = this.mAlternativeCoords[atom2].x_0;
    theLine.y2 = this.mAlternativeCoords[atom2].y_0;
  }
  if ((this.mMol.getBondQueryFeatures_0(bnd) & 32640) != 0) {
    this.mpHandleDottedLine(theLine, atom1, atom2);
    this.setColor(-9);
    return;
  }
  bondOrder = this.mMol.getBondType_0(bnd) == 64?0:this.mMol.getBondType_0(bnd) == 32?1:this.mMol.getBondOrder_0(bnd);
  switch (bondOrder) {
    case 1:
      switch (this.mMol.getBondType_0(bnd)) {
        case 1:
          this.mpHandleLine(theLine, atom1, atom2);
          break;
        case 17:
          this.mpHandleWedge(theLine, atom1, atom2);
          break;
        case 9:
          xdiff = theLine.x2 - theLine.x1;
          ydiff = theLine.y2 - theLine.y1;
          if (this.mMol.isBondForegroundHilited_0(this.mMol.getBond_0(atom1, atom2))) {
            color1 = -3;
            color2 = -3;
          }
           else {
            color1 = this.mAtomColor[atom1];
            color2 = this.getESRColor(atom1);
            if (color1 == this.mMol.getAtomColor_0(atom1))
              color1 = color2;
          }

          for (i = 2; i < 17; i += 2) {
            aLine.x1 = theLine.x1 + i * xdiff / 17 - i * ydiff / 128;
            aLine.y1 = theLine.y1 + i * ydiff / 17 + i * xdiff / 128;
            aLine.x2 = theLine.x1 + i * xdiff / 17 + i * ydiff / 128;
            aLine.y2 = theLine.y1 + i * ydiff / 17 - i * xdiff / 128;
            if (this.mpProperLine(aLine)) {
              this.setColor(i < 9?color1:color2);
              this.drawBlackLine(aLine);
              this.setColor(this.mStandardForegroundColor);
            }
          }

          break;
        case 32:
          this.mpHandleShortDashedLine(theLine, atom1, atom2);
          break;
      }

      break;
    case 0:
    case 2:
      if ((this.mAtomLabelDisplayed[atom1] || this.mMol.getAtomPi_0(atom1) == 2) && (this.mAtomLabelDisplayed[atom2] || this.mMol.getAtomPi_0(atom2) == 2) && !this.mMol.isRingBond_0(bnd) && bondOrder == 2) {
        if (!this.mpProperLine(theLine))
          break;
        this.mpCalcPiBondOffset(theLine.x2 - theLine.x1, theLine.y2 - theLine.y1, piBondOffset);
        xdiff = piBondOffset.x_0 / 2;
        ydiff = piBondOffset.y_0 / 2;
        aLine.x1 = theLine.x1 + xdiff;
        aLine.y1 = theLine.y1 + ydiff;
        aLine.x2 = theLine.x2 + xdiff;
        aLine.y2 = theLine.y2 + ydiff;
        bLine.x1 = theLine.x1 - xdiff;
        bLine.y1 = theLine.y1 - ydiff;
        bLine.x2 = theLine.x2 - xdiff;
        bLine.y2 = theLine.y2 - ydiff;
        if (this.mMol.getBondType_0(bnd) == 26)
          this.mpMakeCrossBond(aLine, bLine);
        this.drawLine(aLine, atom1, atom2);
        if (bondOrder == 2)
          this.drawLine(bLine, atom1, atom2);
        else 
          this.drawDashedLine(bLine, atom1, atom2);
      }
       else if ((this.mAtomLabelDisplayed[atom2] || this.mMol.getAtomPi_0(atom2) == 2) && bondOrder == 2) {
        this.mpDBFromNonLabelToLabel(theLine, bnd, false);
      }
       else if ((this.mAtomLabelDisplayed[atom1] || this.mMol.getAtomPi_0(atom1) == 2) && bondOrder == 2) {
        this.mpDBFromNonLabelToLabel(theLine, bnd, true);
      }
       else {
        side = this.mpPreferredSide(bnd);
        if (side == 0)
          side = 1;
        aLine.x1 = theLine.x1;
        aLine.y1 = theLine.y1;
        aLine.x2 = theLine.x2;
        aLine.y2 = theLine.y2;
        this.mpCalcPiBondOffset(theLine.x2 - theLine.x1, theLine.y2 - theLine.y1, piBondOffset);
        if (side > 0) {
          bLine.x1 = theLine.x1 + piBondOffset.x_0;
          bLine.y1 = theLine.y1 + piBondOffset.y_0;
          bLine.x2 = theLine.x2 + piBondOffset.x_0;
          bLine.y2 = theLine.y2 + piBondOffset.y_0;
          if (this.mpCalcNextBondOffset(atom1, atom2, 1, nextBondOffset) || this.mMol.getConnAtoms_0(atom1) > 1) {
            bLine.x1 += nextBondOffset.x_0 + piBondOffset.y_0;
            bLine.y1 += nextBondOffset.y_0 - piBondOffset.x_0;
          }
          if (this.mpCalcNextBondOffset(atom2, atom1, -1, nextBondOffset) || this.mMol.getConnAtoms_0(atom2) > 1) {
            bLine.x2 += nextBondOffset.x_0 - piBondOffset.y_0;
            bLine.y2 += nextBondOffset.y_0 + piBondOffset.x_0;
          }
        }
         else {
          bLine.x1 = theLine.x1 - piBondOffset.x_0;
          bLine.y1 = theLine.y1 - piBondOffset.y_0;
          bLine.x2 = theLine.x2 - piBondOffset.x_0;
          bLine.y2 = theLine.y2 - piBondOffset.y_0;
          if (this.mpCalcNextBondOffset(atom1, atom2, -1, nextBondOffset) || this.mMol.getConnAtoms_0(atom1) > 1) {
            bLine.x1 += nextBondOffset.x_0 + piBondOffset.y_0;
            bLine.y1 += nextBondOffset.y_0 - piBondOffset.x_0;
          }
          if (this.mpCalcNextBondOffset(atom2, atom1, 1, nextBondOffset) || this.mMol.getConnAtoms_0(atom2) > 1) {
            bLine.x2 += nextBondOffset.x_0 - piBondOffset.y_0;
            bLine.y2 += nextBondOffset.y_0 + piBondOffset.x_0;
          }
        }
        if (this.mMol.getBondType_0(bnd) == 26)
          this.mpMakeCrossBond(aLine, bLine);
        this.mpHandleLine(aLine, atom1, atom2);
        if (bondOrder == 2)
          this.mpHandleLine(bLine, atom1, atom2);
        else 
          this.mpHandleDashedLine(bLine, atom1, atom2);
      }

      break;
    case 3:
      if (this.mpProperLine(theLine)) {
        this.drawLine(theLine, atom1, atom2);
        this.mpCalcPiBondOffset(theLine.x2 - theLine.x1, theLine.y2 - theLine.y1, piBondOffset);
        aLine.x1 = theLine.x1 + piBondOffset.x_0;
        aLine.y1 = theLine.y1 + piBondOffset.y_0;
        aLine.x2 = theLine.x2 + piBondOffset.x_0;
        aLine.y2 = theLine.y2 + piBondOffset.y_0;
        this.drawLine(aLine, atom1, atom2);
        aLine.x1 = theLine.x1 - piBondOffset.x_0;
        aLine.y1 = theLine.y1 - piBondOffset.y_0;
        aLine.x2 = theLine.x2 - piBondOffset.x_0;
        aLine.y2 = theLine.y2 - piBondOffset.y_0;
        this.drawLine(aLine, atom1, atom2);
      }

      break;
  }
  if (this.mCurrentColor == -8)
    this.setColor(-9);
}
;
_.mpDrawBondQueryFeatures = function mpDrawBondQueryFeatures(){
  var atom1, atom2, bond, d, dx, dy, hh, hw, label_0, maxAtoms, minAtoms, ringSize, textSizeChanged, x_0, y_0;
  textSizeChanged = false;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    label_0 = null;
    if (this.mMol.isBondBridge_0(bond)) {
      minAtoms = this.mMol.getBondBridgeMinSize_0(bond);
      maxAtoms = this.mMol.getBondBridgeMaxSize_0(bond);
      label_0 = minAtoms == maxAtoms?'[' + minAtoms + ']':'[' + minAtoms + ':' + maxAtoms + ']';
    }
     else if ((this.mMol.getBondQueryFeatures_0(bond) & 1572864) != 0) {
      label_0 = (this.mMol.getBondQueryFeatures_0(bond) & 1572864) == 524288?'a':(this.mMol.getBondQueryFeatures_0(bond) & 96) == 64?'r!a':'!a';
    }
     else if ((this.mMol.getBondQueryFeatures_0(bond) & 96) != 0) {
      label_0 = (this.mMol.getBondQueryFeatures_0(bond) & 96) == 64?'r':'!r';
    }
    ringSize = (this.mMol.getBondQueryFeatures_0(bond) & 229376) >> 15;
    if (ringSize != 0)
      label_0 = (jsEquals(label_0, null)?'':label_0) + ringSize;
    if (jsNotEquals(label_0, null)) {
      atom1 = this.mMol.getBondAtom_0(0, bond);
      atom2 = this.mMol.getBondAtom_0(1, bond);
      if (!textSizeChanged) {
        this.mpSetSmallLabelSize();
        textSizeChanged = true;
      }
      x_0 = (this.getAtomX_0(atom1) + this.getAtomX_0(atom2)) / 2;
      y_0 = (this.getAtomY_0(atom1) + this.getAtomY_0(atom2)) / 2;
      dx = this.getAtomX_0(atom2) - this.getAtomX_0(atom1);
      dy = this.getAtomY_0(atom2) - this.getAtomY_0(atom1);
      d = $wnd.Math.sqrt(dx * dx + dy * dy);
      hw = 0.6 * this.getStringWidth(label_0);
      hh = 0.55 * this.getTextSize();
      if (d != 0) {
        if (dx > 0)
          this.mpDrawString(x_0 + hw * dy / d, y_0 - hh * dx / d, label_0, true);
        else 
          this.mpDrawString(x_0 - hw * dy / d, y_0 + hh * dx / d, label_0, true);
      }
    }
  }
  if (textSizeChanged)
    this.mpSetNormalLabelSize();
}
;
_.mpDrawDot = function mpDrawDot(x_0, y_0, atm){
  this.mpTabuZone.add(new jag.Rectangle2D$Double_0(x_0 - this.mpDotDiameter, y_0 - this.mpDotDiameter, 2 * this.mpDotDiameter, 2 * this.mpDotDiameter));
  if (!this.mIsValidatingView) {
    this.mpDot.add(new carc.AbstractDepictor$DepictorDot(x_0, y_0, this.isHighlightedAtom(atm)?-3:this.mAtomColor[atm]));
  }
}
;
_.mpDrawString = function mpDrawString(x_0, y_0, str, withTabu){
  var strWidth, xdiff, ydiff;
  if (withTabu) {
    strWidth = this.getStringWidth(str);
    xdiff = strWidth / 2 + narrow_int(this.getTextSize() / 8);
    ydiff = narrow_int(this.getTextSize() / 2);
    if (jsEquals(str, '+') || jsEquals(str, '-'))
      ydiff = ydiff * 2 / 3;
    this.mpTabuZone.add(new jag.Rectangle2D$Double_0(x_0 - xdiff, y_0 - ydiff, 2 * xdiff, 2 * ydiff));
  }
  if (!this.mIsValidatingView)
    this.drawString(str, x_0, y_0);
}
;
_.mpExchangeLineEnds = function mpExchangeLineEnds(theLine){
  var temp;
  temp = theLine.x1;
  theLine.x1 = theLine.x2;
  theLine.x2 = temp;
  temp = theLine.y1;
  theLine.y1 = theLine.y2;
  theLine.y2 = temp;
}
;
_.mpGetAngleESRScore = function mpGetAngleESRScore(angleList, index_0, meanAngle){
  var score;
  score = index_0 == 0?2 * 3.141592653589793 + angleList[0] - angleList[angleList.length - 1]:angleList[index_0] - angleList[index_0 - 1];
  if (meanAngle > -3.141592653589793 * 2 / 3 && meanAngle < 3.141592653589793 / 3)
    score -= 2 * $wnd.Math.cos(meanAngle + 3.141592653589793 / 6);
  else 
    score -= 0.5 * $wnd.Math.cos(meanAngle + 3.141592653589793 / 6);
  return score;
}
;
_.mpGetFrame = function mpGetFrame(theLine){
  var theFrame;
  theFrame = new jag.Rectangle2D$Double;
  if (theLine.x1 <= theLine.x2) {
    theFrame.x_0 = theLine.x1;
    theFrame.width_0 = theLine.x2 - theLine.x1;
  }
   else {
    theFrame.x_0 = theLine.x2;
    theFrame.width_0 = theLine.x1 - theLine.x2;
  }
  if (theLine.y1 <= theLine.y2) {
    theFrame.y_0 = theLine.y1;
    theFrame.height = theLine.y2 - theLine.y1;
  }
   else {
    theFrame.y_0 = theLine.y2;
    theFrame.height = theLine.y1 - theLine.y2;
  }
  return theFrame;
}
;
_.mpGetFreeSpaceAngle = function mpGetFreeSpaceAngle(atom){
  var angle, i, i0, maxMean, maxVal, mean, val;
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, this.mMol.getAllConnAtoms_0(atom), 15, 1);
  for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom); i0++)
    angle[i0] = this.mMol.getBondAngle_0(atom, this.mMol.getConnAtom_0(atom, i0));
  ju.sort_2(angle);
  maxMean = this.mpGetMeanAngle(angle, 0);
  maxVal = this.mpGetAngleESRScore(angle, 0, maxMean);
  for (i = 1; i < angle.length; i++) {
    mean = this.mpGetMeanAngle(angle, i);
    val = this.mpGetAngleESRScore(angle, i, mean);
    if (maxVal < val) {
      maxVal = val;
      maxMean = mean;
    }
  }
  return maxMean;
}
;
_.mpGetMeanAngle = function mpGetMeanAngle(angle, index_0){
  var mean;
  if (index_0 > 0)
    return (angle[index_0] + angle[index_0 - 1]) / 2;
  mean = 3.141592653589793 + (angle[0] + angle[angle.length - 1]) / 2;
  return mean > 3.141592653589793?mean - 2 * 3.141592653589793:mean;
}
;
_.mpHandleDashedLine = function mpHandleDashedLine(theLine, atm1, atm2){
  if (this.mpProperLine(theLine))
    this.drawDashedLine(theLine, atm1, atm2);
}
;
_.mpHandleDottedLine = function mpHandleDottedLine(theLine, atm1, atm2){
  if (this.mpProperLine(theLine))
    this.drawDottedLine(theLine);
}
;
_.mpHandleLine = function mpHandleLine(theLine, atm1, atm2){
  if (this.mpProperLine(theLine))
    this.drawLine(theLine, atm1, atm2);
}
;
_.mpHandleShortDashedLine = function mpHandleShortDashedLine(theLine, atm1, atm2){
  if (this.mpProperLine(theLine))
    this.drawShortDashedLine(theLine, atm1, atm2);
}
;
_.mpHandleWedge = function mpHandleWedge(origWedge, atm1, atm2){
  var i, tabuZone, theFrame, theWedge;
  theWedge = new carc.AbstractDepictor$DepictorLine;
  if (origWedge.x1 == origWedge.x2 && origWedge.y1 == origWedge.y2)
    return;
  theWedge.x1 = origWedge.x1;
  theWedge.y1 = origWedge.y1;
  theWedge.x2 = origWedge.x2;
  theWedge.y2 = origWedge.y2;
  theFrame = this.mpGetFrame(theWedge);
  for (i = 0; i < this.mpTabuZone.size(); i++) {
    tabuZone = castTo(this.mpTabuZone.getAtIndex(i), 32);
    if (tabuZone.x_0 > theFrame.x_0 + theFrame.width_0 || tabuZone.y_0 > theFrame.y_0 + theFrame.height || theFrame.x_0 > tabuZone.x_0 + tabuZone.width_0 || theFrame.y_0 > tabuZone.y_0 + tabuZone.height)
      continue;
    if (this.mpInTabuZone(theWedge.x1, theWedge.y1, i)) {
      if (this.mpInTabuZone(theWedge.x2, theWedge.y2, i))
        return;
      this.mpShortenLine(theWedge, 0, i);
      this.mpHandleWedge(theWedge, atm1, atm2);
      return;
    }
    if (this.mpInTabuZone(theWedge.x2, theWedge.y2, i)) {
      this.mpShortenLine(theWedge, 1, i);
      this.mpHandleWedge(theWedge, atm1, atm2);
      return;
    }
  }
  this.drawWedge(theWedge, atm1, atm2);
}
;
_.mpInTabuZone = function mpInTabuZone(x_0, y_0, tabuZoneNo){
  var tabuZone;
  if ((this.mDisplayMode & 1) != 0)
    return false;
  tabuZone = castTo(this.mpTabuZone.getAtIndex(tabuZoneNo), 32);
  return x_0 > tabuZone.x_0 && x_0 < tabuZone.x_0 + tabuZone.width_0 && y_0 > tabuZone.y_0 && y_0 < tabuZone.y_0 + tabuZone.height;
}
;
_.mpMakeCrossBond = function mpMakeCrossBond(aLine, bLine){
  var temp;
  temp = aLine.x2;
  aLine.x2 = bLine.x2;
  bLine.x2 = temp;
  temp = aLine.y2;
  aLine.y2 = bLine.y2;
  bLine.y2 = temp;
}
;
_.mpPreferredSide = function mpPreferredSide(bnd){
  var angle, angles, atm, bondAngle, changed, connBond, i, i0, isAromatic, isInRing, j, side, value_0;
  isAromatic = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 16, 16, 1);
  isInRing = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 16, 16, 1);
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 16, 15, 1);
  bondAngle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 2, 15, 1);
  angles = 0;
  for (i0 = 0; i0 < 2; i0++) {
    atm = this.mMol.getBondAtom_0(i0, bnd);
    for (j = 0; j < this.mMol.getConnAtoms_0(atm); j++) {
      connBond = this.mMol.getConnBond_0(atm, j);
      if (connBond == bnd)
        continue;
      if (angles == 4)
        return 0;
      isAromatic[angles] = this.mMol.isAromaticBond_0(connBond);
      isInRing[angles] = this.mMol.isRingBond_0(connBond);
      angle[angles++] = this.mMol.getBondAngle_0(atm, this.mMol.getConnAtom_0(atm, j));
    }
  }
  bondAngle[0] = this.mMol.getBondAngle_0(this.mMol.getBondAtom_0(0, bnd), this.mMol.getBondAtom_0(1, bnd));
  if (bondAngle[0] < 0) {
    bondAngle[1] = bondAngle[0] + 3.141592653589793;
    changed = false;
  }
   else {
    bondAngle[1] = bondAngle[0];
    bondAngle[0] = bondAngle[1] - 3.141592653589793;
    changed = true;
  }
  side = 0;
  for (i = 0; i < angles; i++) {
    if (isAromatic[i])
      value_0 = 20;
    else if (isInRing[i])
      value_0 = 17;
    else 
      value_0 = 16;
    if (angle[i] > bondAngle[0] && angle[i] < bondAngle[1])
      side -= value_0;
    else 
      side += value_0;
  }
  return changed?-side:side;
}
;
_.mpProperLine = function mpProperLine(theLine){
  var endsExchanged, i, i0, retval, tabuZone, theFrame;
  if (theLine.x1 == theLine.x2 && theLine.y1 == theLine.y2) {
    for (i0 = 0; i0 < this.mpTabuZone.size(); i0++) {
      tabuZone = castTo(this.mpTabuZone.getAtIndex(i0), 32);
      if (tabuZone.contains_1(theLine.x1, theLine.y1))
        return false;
    }
    return true;
  }
  theFrame = this.mpGetFrame(theLine);
  endsExchanged = false;
  if (theLine.x1 > theLine.x2) {
    this.mpExchangeLineEnds(theLine);
    endsExchanged = true;
  }
  for (i = 0; i < this.mpTabuZone.size(); i++) {
    tabuZone = castTo(this.mpTabuZone.getAtIndex(i), 32);
    if (tabuZone.x_0 > theFrame.x_0 + theFrame.width_0 || tabuZone.y_0 > theFrame.y_0 + theFrame.height || theFrame.x_0 > tabuZone.x_0 + tabuZone.width_0 || theFrame.y_0 > tabuZone.y_0 + tabuZone.height)
      continue;
    if (this.mpInTabuZone(theLine.x1, theLine.y1, i)) {
      if (this.mpInTabuZone(theLine.x2, theLine.y2, i)) {
        if (endsExchanged)
          this.mpExchangeLineEnds(theLine);
        return false;
      }
      this.mpShortenLine(theLine, 0, i);
      retval = this.mpProperLine(theLine);
      if (endsExchanged)
        this.mpExchangeLineEnds(theLine);
      return retval;
    }
    if (this.mpInTabuZone(theLine.x2, theLine.y2, i)) {
      this.mpShortenLine(theLine, 1, i);
      retval = this.mpProperLine(theLine);
      if (endsExchanged)
        this.mpExchangeLineEnds(theLine);
      return retval;
    }
  }
  if (endsExchanged)
    this.mpExchangeLineEnds(theLine);
  return true;
}
;
_.mpSetNormalLabelSize = function mpSetNormalLabelSize(){
  this.setTextSize(this.mpLabelSize);
}
;
_.mpSetReducedLabelSize = function mpSetReducedLabelSize(){
  this.setTextSize(narrow_int((this.mpLabelSize * 5 + 1) / 6));
}
;
_.mpSetSmallLabelSize = function mpSetSmallLabelSize(){
  this.setTextSize(narrow_int((this.mpLabelSize * 2 + 1) / 3));
}
;
_.mpShortenLine = function mpShortenLine(theLine, pointNo, tabuZoneNo){
  var dx, dy, sx, sy, tabuX, tabuY, tabuZone, x1, x2, y1, y2;
  if (pointNo == 0) {
    x1 = theLine.x1;
    y1 = theLine.y1;
    x2 = theLine.x2;
    y2 = theLine.y2;
  }
   else {
    x1 = theLine.x2;
    y1 = theLine.y2;
    x2 = theLine.x1;
    y2 = theLine.y1;
  }
  tabuZone = castTo(this.mpTabuZone.getAtIndex(tabuZoneNo), 32);
  tabuX = x2 > x1?tabuZone.x_0 + tabuZone.width_0:tabuZone.x_0;
  tabuY = y2 > y1?tabuZone.y_0 + tabuZone.height:tabuZone.y_0;
  dx = x2 - x1;
  dy = y2 - y1;
  if ($wnd.Math.abs(dx) > $wnd.Math.abs(dy)) {
    if (y1 == y2) {
      sx = tabuX;
      sy = y1;
    }
     else {
      sx = x1 + dx * (tabuY - y1) / dy;
      if (x2 > x1 == tabuX > sx) {
        sy = tabuY;
      }
       else {
        sx = tabuX;
        sy = y1 + dy * (tabuX - x1) / dx;
      }
    }
  }
   else {
    if (x1 == x2) {
      sx = x1;
      sy = tabuY;
    }
     else {
      sy = y1 + dy * (tabuX - x1) / dx;
      if (y2 > y1 == tabuY > sy) {
        sx = tabuX;
      }
       else {
        sx = x1 + dx * (tabuY - y1) / dy;
        sy = tabuY;
      }
    }
  }
  if (pointNo == 0) {
    theLine.x1 = sx;
    theLine.y1 = sy;
  }
   else {
    theLine.x2 = sx;
    theLine.y2 = sy;
  }
}
;
_.onDrawAtom = function onDrawAtom(atom, symbol, x_0, y_0){
}
;
_.onDrawBond = function onDrawBond(atom1, atom2, x1, y1, x2, y2){
}
;
_.paint = function paint(g){
  var atom, explicitAtomColors, i;
  if (this.mMol.getAllAtoms_0() == 0)
    return;
  this.mMol.ensureHelperArrays_0(this.requiredHelperArrays());
  this.mG = g;
  this.calculateParameters();
  explicitAtomColors = false;
  this.mAtomColor = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    this.mAtomColor[atom] = this.mMol.getAtomColor_0(atom);
    if (this.mAtomColor[atom] != 0)
      explicitAtomColors = true;
    if (this.mMol.isSelectedAtom_0(atom))
      this.mAtomColor[atom] = 128;
    if (this.mMol.getStereoProblem_0(atom) && (this.mDisplayMode & 4096) == 0)
      this.mAtomColor[atom] = 256;
  }
  this.setColor(-10);
  this.hiliteExcludeGroups();
  this.hiliteBondBackgrounds();
  this.indicateQueryFeatures();
  this.addChiralInfo();
  this.mpSetNormalLabelSize();
  this.setLineWidth(this.mpLineWidth);
  this.setColor(this.mStandardForegroundColor);
  this.markIsolatedAtoms();
  this.mpDot.clear();
  this.mpTabuZone.clear();
  for (i = 0; i < this.mMol.getAllAtoms_0(); i++) {
    if (this.isHighlightedAtom(i)) {
      this.setColor(-3);
      this.mpDrawAtom(i);
      this.setColor(this.mStandardForegroundColor);
    }
     else if (this.mAtomColor[i] != 0) {
      this.setColor(this.mAtomColor[i]);
      this.mpDrawAtom(i);
      this.setColor(this.mStandardForegroundColor);
    }
     else if (!explicitAtomColors && this.mMol.getMoleculeColor_0() != 1 && this.mMol.getAtomicNo_0(i) != 1 && this.mMol.getAtomicNo_0(i) != 6 && (this.mDisplayMode & 2048) == 0 && jsEquals(this.mMol.getAtomList_0(i), null) && this.mMol.getAtomicNo_0(i) < carc.ATOM_LABEL_COLOR.length) {
      this.setRGBColor(this.getContrastColor(carc.ATOM_LABEL_COLOR[this.mMol.getAtomicNo_0(i)]));
      this.mpDrawAtom(i);
      this.setColor(this.mStandardForegroundColor);
    }
     else {
      this.mpDrawAtom(i);
    }
  }
  this.mpDrawAllDots();
  this.mpDrawBondQueryFeatures();
  this.mpDrawAllBonds();
}
;
_.requiredHelperArrays = function requiredHelperArrays(){
  return (this.mDisplayMode & 256) != 0?31:(this.mDisplayMode & 512) != 0?47:(this.mDisplayMode & 1024) != 0?79:15;
}
;
_.setChiralTextLocation = function setChiralTextLocation(viewRect, avbl, mode){
  var spacing;
  spacing = avbl / 2;
  switch (mode & 786432) {
    case 786432:
      if (isNotNull(viewRect)) {
        this.mChiralTextLocation.x_0 = viewRect.x_0 + viewRect.width_0 / 2;
        this.mChiralTextLocation.y_0 = viewRect.y_0 + viewRect.height - spacing;
        break;
      }

    case 0:
      this.mChiralTextLocation.x_0 = this.mBoundingRect.x_0 + this.mBoundingRect.width_0 / 2;
      this.mChiralTextLocation.y_0 = this.mBoundingRect.y_0 + this.mBoundingRect.height + spacing;
      if (isNotNull(viewRect) && this.mChiralTextLocation.y_0 > viewRect.y_0 + viewRect.height - spacing)
        this.mChiralTextLocation.y_0 = viewRect.y_0 + viewRect.height - spacing;
      break;
    case 524288:
      if (isNotNull(viewRect)) {
        this.mChiralTextLocation.x_0 = viewRect.x_0 + viewRect.width_0 / 2;
        this.mChiralTextLocation.y_0 = viewRect.y_0 + spacing;
        break;
      }

    case 262144:
      this.mChiralTextLocation.x_0 = this.mBoundingRect.x_0 + this.mBoundingRect.width_0 / 2;
      this.mChiralTextLocation.y_0 = this.mBoundingRect.y_0 - spacing;
      if (isNotNull(viewRect) && this.mChiralTextLocation.y_0 < viewRect.y_0 + spacing)
        this.mChiralTextLocation.y_0 = viewRect.y_0 + spacing;
      break;
  }
}
;
_.setColor = function setColor(theColor){
  if (this.mIsValidatingView)
    return;
  if (theColor != -2 && theColor != -7 && isNotNull(this.mOverruleForeground))
    theColor = -4;
  if (theColor == -10) {
    this.mCurrentColor = -999;
    theColor = this.mStandardForegroundColor;
  }
  if (theColor == this.mCurrentColor)
    return;
  if (this.mCurrentColor == -8 && theColor != -9)
    return;
  if (theColor == -8)
    this.mPreviousColor = this.mCurrentColor;
  if (theColor == -9)
    theColor = this.mPreviousColor;
  this.mCurrentColor = theColor;
  switch (theColor) {
    case 0:
      this.setColor_0(isNull(this.mCustomForeground)?(ja.$clinit_Color() , ja.black):this.mCustomForeground);
      break;
    case -6:
      this.setColor_0(this.mCustomForeground);
      break;
    case -4:
      this.setColor_0(this.mOverruleForeground);
      break;
    case -2:
      this.setColor_0(this.mBondBGHiliteColor);
      break;
    case -3:
      this.setColor_0(this.mBondFGHiliteColor);
      break;
    case -7:
      this.setColor_0(this.mExcludeGroupBGColor);
      break;
    case -8:
      this.setColor_0(this.mExcludeGroupFGColor);
      break;
    case -5:
      this.setColor_0(this.mRGBColor);
      break;
    case 64:
      this.setColor_0(carc.COLOR_BLUE);
      break;
    case 128:
      this.setColor_0(carc.COLOR_RED);
      break;
    case 256:
      this.setColor_0(carc.COLOR_MAGENTA);
      break;
    case 192:
      this.setColor_0(carc.COLOR_GREEN);
      break;
    case 320:
      this.setColor_0(carc.COLOR_ORANGE);
      break;
    case 384:
      this.setColor_0(carc.COLOR_DARK_GREEN);
      break;
    case 448:
      this.setColor_0(carc.COLOR_DARK_RED);
      break;
    case 1:
      this.setColor_0((ja.$clinit_Color() , ja.gray));
      break;
    default:this.setColor_0((ja.$clinit_Color() , ja.black));
      break;
  }
}
;
_.setFactorTextSize = function setFactorTextSize(factor){
  this.mFactorTextSize = factor;
}
;
_.setRGBColor = function setRGBColor(rgbColor){
  if (isNotNull(this.mOverruleForeground)) {
    if (this.mCurrentColor != -4) {
      this.mCurrentColor = -4;
      this.setColor_0(this.mOverruleForeground);
    }
    return;
  }
  this.mCurrentColor = -5;
  this.mRGBColor = rgbColor;
  this.setColor_0(rgbColor);
}
;
_.simpleCalculateBounds = function simpleCalculateBounds(){
  var i, maxx, maxy, minx, miny;
  minx = this.getAtomX_0(0);
  maxx = this.getAtomX_0(0);
  miny = this.getAtomY_0(0);
  maxy = this.getAtomY_0(0);
  for (i = 0; i < this.mMol.getAllAtoms_0(); i++) {
    if (minx > this.getAtomX_0(i))
      minx = this.getAtomX_0(i);
    if (maxx < this.getAtomX_0(i))
      maxx = this.getAtomX_0(i);
    if (miny > this.getAtomY_0(i))
      miny = this.getAtomY_0(i);
    if (maxy < this.getAtomY_0(i))
      maxy = this.getAtomY_0(i);
  }
  this.mBoundingRect = new jag.Rectangle2D$Double_0(minx, miny, maxx - minx, maxy - miny);
}
;
_.simpleValidateView = function simpleValidateView(viewRect, mode){
  var avbl, t;
  if (this.mMol.getAllAtoms_0() == 0)
    return null;
  this.simpleCalculateBounds();
  avbl = this.mTransformation.getScaling() * this.mMol.getAverageBondLength_0();
  t = new carc.DepictorTransformation_0(this.mBoundingRect, viewRect, avbl, mode);
  if (t.isVoidTransformation()) {
    t = null;
  }
   else {
    t.applyTo(this.mTransformation);
    t.applyTo_1(this.mBoundingRect);
  }
  this.setChiralTextLocation(viewRect, avbl, mode);
  return t;
}
;
_.updateBondHiliteColor = function updateBondHiliteColor(){
  var background;
  background = isNotNull(this.mOverruleBackground)?this.mOverruleBackground:isNotNull(this.mCustomBackground)?this.mCustomBackground:(ja.$clinit_Color() , ja.WHITE);
  this.mBondBGHiliteColor = caru.intermediateColor(background, carc.BOND_BG_HILITE_COLOR, 0.30000001192092896);
  this.mBondFGHiliteColor = caru.getContrastColor_0(carc.BOND_FG_HILITE_COLOR, background);
  this.mExcludeGroupBGColor = carc.BG_EXCLUDE_GROUP_COLOR;
  this.mExcludeGroupFGColor = carc.FG_EXCLUDE_GROUP_COLOR;
}
;
_.validateView = function validateView(g, viewRect, mode){
  var avbl, i, t1, t2;
  if (this.mMol.getAllAtoms_0() == 0)
    return null;
  t1 = this.simpleValidateView(viewRect, mode);
  this.mMol.ensureHelperArrays_0(this.requiredHelperArrays());
  this.markIsolatedAtoms();
  this.mpDot.clear();
  this.mpTabuZone.clear();
  this.mG = g;
  this.calculateParameters();
  this.mpSetNormalLabelSize();
  this.mIsValidatingView = true;
  for (i = 0; i < this.mMol.getAllAtoms_0(); i++)
    this.mpDrawAtom(i);
  this.mIsValidatingView = false;
  avbl = this.mTransformation.getScaling() * this.mMol.getAverageBondLength_0();
  this.expandBoundsByTabuZones(avbl);
  this.setChiralTextLocation(viewRect, avbl, mode);
  if (isNull(viewRect) || viewRect.contains_3(this.mBoundingRect))
    return t1;
  t2 = new carc.DepictorTransformation_0(this.mBoundingRect, viewRect, avbl, mode);
  t2.applyTo(this.mTransformation);
  t2.applyTo_1(this.mBoundingRect);
  t2.applyTo_0(this.mChiralTextLocation);
  if (isNull(t1))
    return t2;
  t2.applyTo(t1);
  return t1;
}
;
_.mChiralTextSize = 0;
_.mCurrentColor = 0;
_.mDisplayMode = 0;
_.mFactorTextSize = 0;
_.mIsValidatingView = false;
_.mPreviousColor = 0;
_.mStandardForegroundColor = 0;
_.mpBondHiliteRadius = 0;
_.mpBondSpacing = 0;
_.mpDotDiameter = 0;
_.mpExcludeGroupRadius = 0;
_.mpLabelSize = 0;
_.mpLineWidth = 0;
_.mpQFDiameter = 0;
carc.COLOR_CHIRALITY_TEXT = 448;
carc.COLOR_CIP_LETTER = 448;
carc.COLOR_CUSTOM_FOREGROUND = 0;
carc.COLOR_EXCLUDE_GROUP_BG = 0;
carc.COLOR_EXCLUDE_GROUP_FG = 0;
carc.COLOR_HILITE_BOND_BG = 0;
carc.COLOR_HILITE_BOND_FG = 0;
carc.COLOR_INITIALIZE = 0;
carc.COLOR_OVERRULED = 0;
carc.COLOR_RESTORE_PREVIOUS = 0;
carc.COLOR_RGB = 0;
carc.COLOR_SELECTED = 128;
carc.COLOR_UNDEFINED = 0;
carc.cColorGray = 1;
carc.cDModeAtomNo = 2;
carc.cDModeBondNo = 4;
carc.cDModeHiliteAllQueryFeatures = 8;
carc.cDModeNoImplicitAtomLabelColors = 2048;
carc.cDModeNoStereoProblem = 4096;
carc.cDModeNoTabus = 1;
carc.cDModeShowMapping = 16;
carc.cDModeShowSymmetryAny = 1792;
carc.cDModeShowSymmetryDiastereotopic = 512;
carc.cDModeShowSymmetryEnantiotopic = 1024;
carc.cDModeShowSymmetrySimple = 256;
carc.cDModeSuppressCIPParity = 64;
carc.cDModeSuppressChiralText = 32;
carc.cDModeSuppressESR = 128;
carc.cFactorBondHiliteRadius = 0.38;
carc.cFactorBondSpacing = 0.15;
carc.cFactorChiralTextSize = 0.5;
carc.cFactorDotDiameter = 0.12;
carc.cFactorExcludeGroupRadius = 0.47;
carc.cFactorLineWidth = 0.06;
carc.cFactorQFDiameter = 0.4;
carc.cFactorTextSize = 0.6;
carc.cModeChiralTextAboveMolecule = 262144;
carc.cModeChiralTextBelowMolecule = 0;
carc.cModeChiralTextLocation = 786432;
carc.cModeChiralTextOnFrameBottom = 786432;
carc.cModeChiralTextOnFrameTop = 524288;
carc.cModeInflateToAVBL = 196608;
carc.cModeInflateToHighResAVBL = 131072;
carc.cModeInflateToMaxAVBL = 65536;
carc.cModeMaxBondLength = 65535;
carc.cOptAvBondLen = 24;
cggl.Lcom_actelion_research_chem_AbstractDepictor_2_classLit = createForClass('com.actelion.research.chem', 'AbstractDepictor', 146, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_AbstractDepictor$DepictorDot = function $clinit_AbstractDepictor$DepictorDot(){
  carc.$clinit_AbstractDepictor$DepictorDot = emptyMethod;
  jl.$clinit_Object();
}
;
carc.AbstractDepictor$DepictorDot = function AbstractDepictor$DepictorDot(x_0, y_0, color_0){
  carc.$clinit_AbstractDepictor$DepictorDot();
  Object_0.call(this);
  this.$init_1();
  this.x_0 = x_0;
  this.y_0 = y_0;
  this.color_0 = color_0;
}
;
defineClass(117, 1, {117:1, 1:1}, carc.AbstractDepictor$DepictorDot);
_.$init_1 = function $init_1(){
}
;
_.color_0 = 0;
_.x_0 = 0;
_.y_0 = 0;
cggl.Lcom_actelion_research_chem_AbstractDepictor$DepictorDot_2_classLit = createForClass('com.actelion.research.chem', 'AbstractDepictor/DepictorDot', 117, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_AbstractDepictor$DepictorLine = function $clinit_AbstractDepictor$DepictorLine(){
  carc.$clinit_AbstractDepictor$DepictorLine = emptyMethod;
  jl.$clinit_Object();
}
;
carc.AbstractDepictor$DepictorLine = function AbstractDepictor$DepictorLine(){
  carc.$clinit_AbstractDepictor$DepictorLine();
  Object_0.call(this);
  this.$init_2();
}
;
defineClass(43, 1, {1:1}, carc.AbstractDepictor$DepictorLine);
_.$init_2 = function $init_2(){
}
;
_.x1 = 0;
_.x2 = 0;
_.y1 = 0;
_.y2 = 0;
cggl.Lcom_actelion_research_chem_AbstractDepictor$DepictorLine_2_classLit = createForClass('com.actelion.research.chem', 'AbstractDepictor/DepictorLine', 43, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_AromaticityResolver = function $clinit_AromaticityResolver(){
  carc.$clinit_AromaticityResolver = emptyMethod;
  jl.$clinit_Object();
}
;
carc.AromaticityResolver = function AromaticityResolver(mol){
  carc.$clinit_AromaticityResolver();
  Object_0.call(this);
  this.$init_3();
  this.mMol = mol;
}
;
defineClass(91, 1, {1:1}, carc.AromaticityResolver);
_.$init_3 = function $init_3(){
}
;
_.addObviousAtomCharges = function addObviousAtomCharges(ringSet){
  var atom, atom$array, atom$array0, atom$array1, atom$index, atom$index0, atom$index1, atom$max, atom$max0, atom$max1, atom1, atom2, atomHandled, bond, bond$array, bond$index, bond$max, bond0, candidate, current, delocalizedNeighbourCount, delocalizedRingCount, graphAtom, hasMetalLigandBond, highest, i, i0, i1, isAromaticRingAtom, isDelocalized, isPossible, j, leakAtom, leakPriority, maxAtom, maxPriority, possible, priority, priority0, r, ring, ringSize, seedAtom, seedAtom0;
  isDelocalized = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, ringSet.getSize_0(), 16, 1);
  delocalizedRingCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  for (r = 0; r < ringSet.getSize_0(); r++) {
    isDelocalized[r] = true;
    for (bond$array = ringSet.getRingBonds_0(r) , bond$index = 0 , bond$max = bond$array.length; bond$index < bond$max; ++bond$index) {
      bond0 = bond$array[bond$index];
      if (!this.mIsDelocalizedBond[bond0]) {
        isDelocalized[r] = false;
        break;
      }
    }
    if (isDelocalized[r])
      for (atom$array = ringSet.getRingAtoms_0(r) , atom$index = 0 , atom$max = atom$array.length; atom$index < atom$max; ++atom$index) {
        atom = atom$array[atom$index];
        delocalizedRingCount[atom]++;
      }
  }
  isAromaticRingAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (ring = 0; ring < ringSet.getSize_0(); ring++) {
    ringSize = ringSet.getRingSize_0(ring);
    if (ringSize == 3 || ringSize == 5 || ringSize == 6 || ringSize == 7) {
      if (isDelocalized[ring]) {
        for (atom$array0 = ringSet.getRingAtoms_0(ring) , atom$index0 = 0 , atom$max0 = atom$array0.length; atom$index0 < atom$max0; ++atom$index0) {
          atom = atom$array0[atom$index0];
          isAromaticRingAtom[atom] = true;
        }
        possible = true;
        leakAtom = -1;
        leakPriority = 0;
        for (atom$array1 = ringSet.getRingAtoms_0(ring) , atom$index1 = 0 , atom$max1 = atom$array1.length; atom$index1 < atom$max1; ++atom$index1) {
          atom = atom$array1[atom$index1];
          if (ringSize == 6 || delocalizedRingCount[atom] > 1) {
            if (!this.checkAtomTypePi1(atom, false)) {
              possible = false;
              break;
            }
          }
           else {
            priority0 = ringSize == 5?this.checkAtomTypeLeak5(atom, false):this.checkAtomTypeLeak7(atom, false);
            if (!this.checkAtomTypePi1(atom, false)) {
              if (leakPriority == 10) {
                possible = false;
                break;
              }
              leakAtom = atom;
              leakPriority = 20;
            }
             else if (leakPriority < priority0) {
              leakPriority = priority0;
              leakAtom = atom;
            }
          }
        }
        if (possible) {
          for (atom$array = ringSet.getRingAtoms_0(ring) , atom$index = 0 , atom$max = atom$array.length; atom$index < atom$max; ++atom$index) {
            atom = atom$array[atom$index];
            if (atom == leakAtom) {
              if (ringSize == 5)
                this.checkAtomTypeLeak5(atom, true);
              else 
                this.checkAtomTypeLeak7(atom, true);
              this.protectAtom(atom);
            }
             else {
              this.checkAtomTypePi1(atom, true);
            }
          }
        }
      }
    }
  }
  delocalizedNeighbourCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  hasMetalLigandBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    atom1 = this.mMol.getBondAtom_0(0, bond);
    atom2 = this.mMol.getBondAtom_0(1, bond);
    if (!isAromaticRingAtom[atom1] && !isAromaticRingAtom[atom2]) {
      if (this.mIsDelocalizedBond[bond]) {
        delocalizedNeighbourCount[atom1]++;
        delocalizedNeighbourCount[atom2]++;
      }
      if (this.mMol.getBondType_0(bond) == 32) {
        hasMetalLigandBond[atom1] = true;
        hasMetalLigandBond[atom2] = true;
      }
    }
  }
  priority = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  for (seedAtom0 = 0; seedAtom0 < this.mMol.getAtoms_0(); seedAtom0++) {
    if (delocalizedNeighbourCount[seedAtom0] == 1) {
      graphAtom[0] = seedAtom0;
      current = 0;
      highest = 0;
      while (current <= highest) {
        for (i = 0; i < this.mMol.getConnAtoms_0(graphAtom[current]); i++) {
          if (this.mIsDelocalizedBond[this.mMol.getConnBond_0(graphAtom[current], i)]) {
            candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
            if ((current == 0 || candidate != graphAtom[current - 1]) && delocalizedNeighbourCount[candidate] != 0) {
              graphAtom[++highest] = candidate;
              if ((delocalizedNeighbourCount[candidate] & 1) != 0) {
                for (j = 1; j < highest; j += 2)
                  priority[graphAtom[j]] = -1;
                highest = 0;
              }
              break;
            }
          }
        }
        current++;
      }
    }
  }
  atomHandled = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (seedAtom = 0; seedAtom < this.mMol.getAtoms_0(); seedAtom++) {
    if (!atomHandled[seedAtom] && delocalizedNeighbourCount[seedAtom] != 0) {
      graphAtom[0] = seedAtom;
      atomHandled[seedAtom] = true;
      current = 0;
      highest = 0;
      while (current <= highest) {
        for (i = 0; i < this.mMol.getConnAtoms_0(graphAtom[current]); i++) {
          if (this.mIsDelocalizedBond[this.mMol.getConnBond_0(graphAtom[current], i)]) {
            candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
            if (!atomHandled[candidate]) {
              graphAtom[++highest] = candidate;
              atomHandled[candidate] = true;
            }
          }
        }
        current++;
      }
      if ((highest & 1) == 0) {
        for (i0 = 0; i0 <= highest; i0++)
          if (priority[graphAtom[i0]] == 0)
            priority[graphAtom[i0]] = this.checkAtomTypeLeakNonRing(graphAtom[i0], false);
        isPossible = true;
        for (i1 = 0; i1 <= highest; i1++) {
          if (priority[graphAtom[i1]] <= 0) {
            if (!this.checkAtomTypePi1(graphAtom[i1], false)) {
              isPossible = false;
              break;
            }
          }
        }
        if (isPossible) {
          maxPriority = 0;
          maxAtom = -1;
          for (i = 0; i <= highest; i++) {
            if (maxPriority < priority[graphAtom[i]]) {
              maxPriority = priority[graphAtom[i]];
              maxAtom = graphAtom[i];
            }
          }
          if (maxPriority > 0) {
            this.checkAtomTypeLeakNonRing(maxAtom, true);
            this.protectAtom(maxAtom);
          }
        }
      }
    }
  }
}
;
_.checkAtomTypeLeak5 = function checkAtomTypeLeak5(atom, correctCharge){
  if (this.mMol.getAtomicNo_0(atom) == 7) {
    if (this.mMol.getAllConnAtoms_0(atom) == 3)
      return 6;
    else if (this.mMol.getConnAtoms_0(atom) == 2)
      return 4;
  }
   else if (this.mMol.getAtomicNo_0(atom) == 8) {
    return 10;
  }
   else if (this.mMol.getAtomicNo_0(atom) == 15 || this.mMol.getAtomicNo_0(atom) == 33) {
    if (this.mMol.getConnAtoms_0(atom) == 3)
      return 8;
  }
   else if (this.mMol.getAtomicNo_0(atom) == 16 || this.mMol.getAtomicNo_0(atom) == 34) {
    if (this.mMol.getConnAtoms_0(atom) == 2)
      return 12;
  }
   else if (this.mMol.getAtomicNo_0(atom) == 6) {
    if (correctCharge)
      this.mMol.setAtomCharge_0(atom, -1);
    return this.mMol.getAllConnAtoms_0(atom) != this.mMol.getAllConnAtomsPlusMetalBonds_0(atom)?2:3;
  }
  return 0;
}
;
_.checkAtomTypeLeak7 = function checkAtomTypeLeak7(atom, correctCharge){
  if (this.mAllHydrogensAreExplicit) {
    if (this.mMol.getAllConnAtoms_0(atom) != 3)
      return 0;
  }
   else {
    if (this.mMol.getAllConnAtoms_0(atom) > 3)
      return 0;
  }
  if (this.mMol.getAtomicNo_0(atom) == 6) {
    if (correctCharge)
      this.mMol.setAtomCharge_0(atom, 1);
    return 2;
  }
  if (this.mMol.getAtomicNo_0(atom) == 5) {
    return 4;
  }
  return 0;
}
;
_.checkAtomTypeLeakNonRing = function checkAtomTypeLeakNonRing(atom, correctCharge){
  if (this.mMol.getAtomCharge_0(atom) != 0)
    return 0;
  if (this.mAllHydrogensAreExplicit) {
    if (this.mMol.getAtomicNo_0(atom) == 5) {
      if (this.mMol.getOccupiedValence_0(atom) != 2)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, 1);
      return 1;
    }
    if (this.mMol.getAtomicNo_0(atom) == 7) {
      if (this.mMol.getOccupiedValence_0(atom) != 2)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, -1);
      return this.hasMetalNeighbour(atom)?6:3;
    }
    if (this.mMol.getAtomicNo_0(atom) == 8) {
      if (this.mMol.getOccupiedValence_0(atom) != 1)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, -1);
      return this.hasMetalNeighbour(atom)?7:4;
    }
    if (this.mMol.getAtomicNo_0(atom) == 16) {
      if (this.mMol.getOccupiedValence_0(atom) != 1)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, -1);
      return this.hasMetalNeighbour(atom)?5:2;
    }
    if (this.mMol.getAtomicNo_0(atom) == 34) {
      if (this.mMol.getOccupiedValence_0(atom) != 1)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, -1);
      return this.hasMetalNeighbour(atom)?4:1;
    }
  }
   else {
    if (this.mMol.getAtomicNo_0(atom) == 5) {
      if (this.mMol.getOccupiedValence_0(atom) > 2)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, 1);
      return 1;
    }
    if (this.mMol.getAtomicNo_0(atom) == 7) {
      if (this.mMol.getOccupiedValence_0(atom) > 2)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, -1);
      return this.hasMetalNeighbour(atom)?5:3;
    }
    if (this.mMol.getAtomicNo_0(atom) == 8) {
      if (this.mMol.getOccupiedValence_0(atom) > 1)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, -1);
      return this.hasMetalNeighbour(atom)?7:4;
    }
    if (this.mMol.getAtomicNo_0(atom) == 16) {
      if (this.mMol.getOccupiedValence_0(atom) > 1)
        return 0;
      if (correctCharge)
        this.mMol.setAtomCharge_0(atom, -1);
      return this.hasMetalNeighbour(atom)?5:2;
    }
  }
  return 0;
}
;
_.checkAtomTypePi1 = function checkAtomTypePi1(atom, correctCharge){
  var atomicNo, freeValence;
  atomicNo = this.mMol.getAtomicNo_0(atom);
  if (atomicNo >= 5 && atomicNo <= 8 || atomicNo == 15 || atomicNo == 16 || atomicNo == 33 || atomicNo == 34) {
    freeValence = this.mMol.getFreeValence_0(atom);
    if (freeValence == 1 || freeValence == 2)
      return true;
    if (this.mMol.getAtomCharge_0(atom) == 0) {
      if ((atomicNo == 15 || atomicNo == 33) && freeValence == 3) {
        if (correctCharge)
          this.mMol.setAtomCharge_0(atom, 1);
        return true;
      }
      if ((atomicNo == 16 || atomicNo == 34) && freeValence == 4) {
        if (correctCharge)
          this.mMol.setAtomCharge_0(atom, 1);
        return true;
      }
      if (atomicNo == 5 && freeValence == 0) {
        if (correctCharge)
          this.mMol.setAtomCharge_0(atom, -1);
        return true;
      }
      if ((atomicNo == 7 || atomicNo == 8) && freeValence == 0) {
        if (correctCharge)
          this.mMol.setAtomCharge_0(atom, 1);
        return true;
      }
    }
  }
  return false;
}
;
_.getNextOuterDelocalizedConnIndex = function getNextOuterDelocalizedConnIndex(atom, previousAtom, sharedDelocalizedRingCount){
  var i;
  for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++)
    if (sharedDelocalizedRingCount[this.mMol.getConnBond_0(atom, i)] == 1 && this.mMol.getConnAtom_0(atom, i) != previousAtom)
      return i;
  return -1;
}
;
_.hasMetalNeighbour = function hasMetalNeighbour(atom){
  var i;
  for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++)
    if (this.mMol.isMetalAtom_0(this.mMol.getConnAtom_0(atom, i)))
      return true;
  return false;
}
;
_.hasSharedDelocalizedBond = function hasSharedDelocalizedBond(atom, sharedDelocalizedRingCount){
  var i;
  for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++)
    if (sharedDelocalizedRingCount[this.mMol.getConnBond_0(atom, i)] > 1)
      return true;
  return false;
}
;
_.isAromaticAtom_0 = function isAromaticAtom_0(atom){
  var i;
  for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++)
    if (this.mIsDelocalizedBond[this.mMol.getConnBond_0(atom, i)])
      return true;
  return false;
}
;
_.locateDelocalizedDoubleBonds = function locateDelocalizedDoubleBonds(isAromaticBond){
  return this.locateDelocalizedDoubleBonds_0(isAromaticBond, false, false);
}
;
_.locateDelocalizedDoubleBonds_0 = function locateDelocalizedDoubleBonds_0(isAromaticBond, mayChangeAtomCharges, allHydrogensAreExplicit){
  var bond, bond0, bond1, bondsPromoted, i, i0, isAromaticAtom, isAromaticRing, ring, ringBond, ringSet;
  this.mMol.ensureHelperArrays_0(1);
  if (jsNotEquals(isAromaticBond, null)) {
    this.mIsDelocalizedBond = isAromaticBond;
  }
   else {
    this.mIsDelocalizedBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
    for (bond0 = 0; bond0 < this.mMol.getBonds_0(); bond0++) {
      if (this.mMol.getBondType_0(bond0) == 64) {
        this.mIsDelocalizedBond[bond0] = true;
        this.mMol.setBondType_0(bond0, 1);
      }
    }
  }
  this.mPiElectronsAdded = 0;
  isAromaticAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (bond1 = 0; bond1 < this.mMol.getBonds_0(); bond1++) {
    if (this.mIsDelocalizedBond[bond1]) {
      this.mAromaticBonds++;
      for (i = 0; i < 2; i++) {
        if (!isAromaticAtom[this.mMol.getBondAtom_0(i, bond1)]) {
          isAromaticAtom[this.mMol.getBondAtom_0(i, bond1)] = true;
          this.mAromaticAtoms++;
        }
      }
    }
  }
  if (this.mAromaticBonds == 0)
    return true;
  this.mAllHydrogensAreExplicit = allHydrogensAreExplicit;
  if (this.mMol.isFragment_0())
    this.promoteDelocalizedChains();
  ringSet = new carc.RingCollection(this.mMol, 1);
  if (mayChangeAtomCharges)
    this.addObviousAtomCharges(ringSet);
  this.protectObviousDelocalizationLeaks(ringSet);
  this.protectAmideBonds(ringSet);
  this.protectDoubleBondAtoms();
  this.promoteObviousBonds();
  while (this.promoteOuterShellDelocalizedRingSystems(ringSet))
    this.promoteObviousBonds();
  while (this.mAromaticBonds != 0) {
    bondsPromoted = false;
    if (!bondsPromoted) {
      for (ring = 0; ring < ringSet.getSize_0(); ring++) {
        if (ringSet.getRingSize_0(ring) == 6) {
          isAromaticRing = true;
          ringBond = ringSet.getRingBonds_0(ring);
          for (i0 = 0; i0 < 6; i0++) {
            if (!this.mIsDelocalizedBond[ringBond[i0]]) {
              isAromaticRing = false;
              break;
            }
          }
          if (isAromaticRing) {
            for (i = 0; i < 6; i += 2)
              this.promoteBond(ringBond[i]);
            bondsPromoted = true;
            break;
          }
        }
      }
    }
    if (!bondsPromoted) {
      for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
        if (this.mIsDelocalizedBond[bond]) {
          this.promoteBond(bond);
          this.promoteObviousBonds();
          bondsPromoted = true;
          break;
        }
      }
    }
  }
  return this.mAromaticAtoms == this.mPiElectronsAdded;
}
;
_.promoteBond = function promoteBond(bond){
  var bondAtom, connBond, i, j;
  if (this.mMol.getBondType_0(bond) == 1) {
    this.mMol.setBondType_0(bond, 2);
    this.mPiElectronsAdded += 2;
  }
  for (i = 0; i < 2; i++) {
    bondAtom = this.mMol.getBondAtom_0(i, bond);
    for (j = 0; j < this.mMol.getConnAtoms_0(bondAtom); j++) {
      connBond = this.mMol.getConnBond_0(bondAtom, j);
      if (this.mIsDelocalizedBond[connBond]) {
        this.mIsDelocalizedBond[connBond] = false;
        this.mAromaticBonds--;
      }
    }
  }
}
;
_.promoteDelocalizedChains = function promoteDelocalizedChains(){
  var aromaticNeighbourFound, bond, bridgeAtom, i, j, j0, terminalAtom, terminalBond;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mIsDelocalizedBond[bond]) {
      for (i = 0; i < 2; i++) {
        terminalAtom = this.mMol.getBondAtom_0(i, bond);
        aromaticNeighbourFound = false;
        for (j0 = 0; j0 < this.mMol.getConnAtoms_0(terminalAtom); j0++) {
          if (bond != this.mMol.getConnBond_0(terminalAtom, j0) && this.mIsDelocalizedBond[this.mMol.getConnBond_0(terminalAtom, j0)]) {
            aromaticNeighbourFound = true;
            break;
          }
        }
        if (!aromaticNeighbourFound) {
          terminalBond = bond;
          bridgeAtom = this.mMol.getBondAtom_0(1 - i, bond);
          while (terminalBond != -1) {
            this.mIsDelocalizedBond[terminalBond] = false;
            this.mAromaticBonds--;
            this.mMol.setBondType_0(terminalBond, 64);
            terminalBond = -1;
            terminalAtom = bridgeAtom;
            for (j = 0; j < this.mMol.getConnAtoms_0(terminalAtom); j++) {
              if (this.mIsDelocalizedBond[this.mMol.getConnBond_0(terminalAtom, j)]) {
                if (terminalBond == -1) {
                  terminalBond = this.mMol.getConnBond_0(terminalAtom, j);
                  bridgeAtom = this.mMol.getConnAtom_0(terminalAtom, j);
                }
                 else {
                  terminalAtom = -1;
                  terminalBond = -1;
                  break;
                }
              }
            }
          }
          break;
        }
      }
    }
  }
}
;
_.promoteObviousBonds = function promoteObviousBonds(){
  var aromaticNeighbourFound, bond, bondAtom, i, isTerminalAromaticBond, j, terminalAromaticBondFound;
  do {
    terminalAromaticBondFound = false;
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      if (this.mIsDelocalizedBond[bond]) {
        isTerminalAromaticBond = false;
        for (i = 0; i < 2; i++) {
          bondAtom = this.mMol.getBondAtom_0(i, bond);
          aromaticNeighbourFound = false;
          for (j = 0; j < this.mMol.getConnAtoms_0(bondAtom); j++) {
            if (bond != this.mMol.getConnBond_0(bondAtom, j) && this.mIsDelocalizedBond[this.mMol.getConnBond_0(bondAtom, j)]) {
              aromaticNeighbourFound = true;
              break;
            }
          }
          if (!aromaticNeighbourFound) {
            isTerminalAromaticBond = true;
            break;
          }
        }
        if (isTerminalAromaticBond) {
          terminalAromaticBondFound = true;
          this.promoteBond(bond);
        }
      }
    }
  }
   while (terminalAromaticBondFound);
}
;
_.promoteOuterShellDelocalizedRingSystems = function promoteOuterShellDelocalizedRingSystems(ringSet){
  var atom1, atom2, atom3, bond, bond2to3, connIndex, delocalizedBonds, i, i0, isDelocalized, r, ringBond, sharedDelocalizedRingCount;
  sharedDelocalizedRingCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  for (r = 0; r < ringSet.getSize_0(); r++) {
    ringBond = ringSet.getRingBonds_0(r);
    isDelocalized = true;
    for (i0 = 0; i0 < ringBond.length; i0++) {
      if (!this.mIsDelocalizedBond[ringBond[i0]]) {
        isDelocalized = false;
        break;
      }
    }
    if (isDelocalized)
      for (i = 0; i < ringBond.length; i++)
        sharedDelocalizedRingCount[ringBond[i]]++;
  }
  delocalizedBonds = this.mAromaticBonds;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (sharedDelocalizedRingCount[bond] == 1) {
      for (i = 0; i < 2 && this.mIsDelocalizedBond[bond]; i++) {
        atom1 = this.mMol.getBondAtom_0(i, bond);
        atom2 = this.mMol.getBondAtom_0(1 - i, bond);
        if (this.hasSharedDelocalizedBond(atom1, sharedDelocalizedRingCount) && !this.hasSharedDelocalizedBond(atom2, sharedDelocalizedRingCount)) {
          while (-1 != (connIndex = this.getNextOuterDelocalizedConnIndex(atom2, atom1, sharedDelocalizedRingCount))) {
            atom3 = this.mMol.getConnAtom_0(atom2, connIndex);
            bond2to3 = this.mMol.getConnBond_0(atom2, connIndex);
            if (!this.mIsDelocalizedBond[bond2to3])
              break;
            this.promoteBond(bond2to3);
            connIndex = this.getNextOuterDelocalizedConnIndex(atom3, atom2, sharedDelocalizedRingCount);
            if (connIndex == -1)
              break;
            atom1 = atom3;
            atom2 = this.mMol.getConnAtom_0(atom3, connIndex);
          }
        }
      }
    }
  }
  return delocalizedBonds != this.mAromaticBonds;
}
;
_.protectAmideBonds = function protectAmideBonds(ringSet){
  var bond;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mIsDelocalizedBond[bond] && ringSet.qualifiesAsAmideTypeBond_0(bond)) {
      this.protectAtom(this.mMol.getBondAtom_0(0, bond));
      this.protectAtom(this.mMol.getBondAtom_0(1, bond));
    }
  }
}
;
_.protectAtom = function protectAtom(atom){
  var connBond, i;
  this.mAromaticAtoms--;
  for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++) {
    connBond = this.mMol.getConnBond_0(atom, i);
    if (this.mIsDelocalizedBond[connBond]) {
      this.mIsDelocalizedBond[connBond] = false;
      this.mAromaticBonds--;
    }
  }
}
;
_.protectDoubleBondAtoms = function protectDoubleBondAtoms(){
  var atom, bond, connBond, i, j;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mMol.getBondOrder_0(bond) == 2) {
      for (i = 0; i < 2; i++) {
        atom = this.mMol.getBondAtom_0(i, bond);
        if (this.mMol.getAtomicNo_0(atom) <= 8) {
          for (j = 0; j < this.mMol.getConnAtoms_0(atom); j++) {
            connBond = this.mMol.getConnBond_0(atom, j);
            if (this.mIsDelocalizedBond[connBond]) {
              this.protectAtom(atom);
              break;
            }
          }
        }
      }
    }
  }
}
;
_.protectObviousDelocalizationLeaks = function protectObviousDelocalizationLeaks(ringSet){
  var atom, i, i0, isDelocalized, negativeCarbon, negativeCarbonPriority, priority, r, r0, ringAtom, ringBond, ringSize;
  for (r0 = 0; r0 < ringSet.getSize_0(); r0++) {
    ringSize = ringSet.getRingSize_0(r0);
    if (ringSize == 3 || ringSize == 5 || ringSize == 7) {
      ringAtom = ringSet.getRingAtoms_0(r0);
      for (i = 0; i < ringSize; i++) {
        atom = ringAtom[i];
        if (this.isAromaticAtom_0(atom)) {
          if (ringSize == 5) {
            if (this.mMol.getAtomicNo_0(atom) == 6 && this.mMol.getAtomCharge_0(atom) == -1 && this.mMol.getAllConnAtoms_0(atom) == 3 || this.mMol.getAtomicNo_0(atom) == 7 && this.mMol.getAtomCharge_0(atom) == 0 && this.mMol.getAllConnAtoms_0(atom) == 3 || this.mMol.getAtomicNo_0(atom) == 8 && this.mMol.getAtomCharge_0(atom) == 0 && this.mMol.getConnAtoms_0(atom) == 2 || this.mMol.getAtomicNo_0(atom) == 16 && this.mMol.getAtomCharge_0(atom) == 0 && this.mMol.getConnAtoms_0(atom) == 2 || this.mMol.getAtomicNo_0(atom) == 34 && this.mMol.getAtomCharge_0(atom) == 0 && this.mMol.getConnAtoms_0(atom) == 2)
              this.protectAtom(atom);
          }
           else {
            if (this.mMol.getAtomicNo_0(atom) == 5 && this.mMol.getAtomCharge_0(atom) == 0 && this.mMol.getAllConnAtoms_0(atom) == 3 || this.mMol.getAtomicNo_0(atom) == 6 && this.mMol.getAtomCharge_0(atom) == 1)
              this.protectAtom(atom);
          }
        }
      }
    }
  }
  for (r = 0; r < ringSet.getSize_0(); r++) {
    if (ringSet.getRingSize_0(r) == 5) {
      ringBond = ringSet.getRingBonds_0(r);
      isDelocalized = true;
      for (i0 = 0; i0 < ringBond.length; i0++) {
        if (!this.mIsDelocalizedBond[ringBond[i0]]) {
          isDelocalized = false;
          break;
        }
      }
      if (isDelocalized) {
        ringAtom = ringSet.getRingAtoms_0(r);
        negativeCarbonPriority = 0;
        negativeCarbon = -1;
        for (i = 0; i < ringBond.length; i++) {
          if (this.mMol.getAtomCharge_0(ringAtom[i]) == -1 && this.mMol.getAtomicNo_0(ringAtom[i]) == 6) {
            priority = this.mMol.getAllConnAtoms_0(ringAtom[i]) == 3?3:this.mMol.getAllConnAtomsPlusMetalBonds_0(ringAtom[i]) == 3?2:1;
            if (negativeCarbonPriority < priority) {
              negativeCarbonPriority = priority;
              negativeCarbon = ringAtom[i];
            }
          }
        }
        if (negativeCarbon != -1)
          this.protectAtom(negativeCarbon);
      }
    }
  }
}
;
_.mAllHydrogensAreExplicit = false;
_.mAromaticAtoms = 0;
_.mAromaticBonds = 0;
_.mPiElectronsAdded = 0;
cggl.Lcom_actelion_research_chem_AromaticityResolver_2_classLit = createForClass('com.actelion.research.chem', 'AromaticityResolver', 91, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Canonizer = function $clinit_Canonizer(){
  carc.$clinit_Canonizer = emptyMethod;
  jl.$clinit_Object();
  carc.CONSIDER_STEREOHETEROTOPICITY = 2 | 4;
}
;
carc.Canonizer = function Canonizer(mol){
  carc.$clinit_Canonizer();
  carc.Canonizer_0.call(this, mol, 0);
}
;
carc.Canonizer_0 = function Canonizer_0(mol, mode){
  carc.$clinit_Canonizer();
  var atom;
  Object_0.call(this);
  this.$init_4();
  if (mol.getAllAtoms_0() > 65535)
    throw toJs(new jl.IllegalArgumentException_0('Cannot canonize a molecule having more than ' + 65535 + ' atoms'));
  if (mol.getAllBonds_0() > 65535)
    throw toJs(new jl.IllegalArgumentException_0('Cannot canonize a molecule having more than ' + 65535 + ' bonds'));
  this.mMol = mol;
  this.mMode = mode;
  this.mMol.ensureHelperArrays_0(3);
  this.canFindNitrogenQualifyingForParity();
  this.mZCoordinatesAvailable = (mode & 64) != 0;
  if (!this.mZCoordinatesAvailable) {
    for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
      if (this.mMol.getAtomZ_0(atom) != 0) {
        this.mZCoordinatesAvailable = true;
        break;
      }
    }
  }
  this.mTHParity = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  this.mTHParityIsPseudo = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  this.mTHParityRoundIsOdd = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  this.mEZParity = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  this.mEZParityRoundIsOdd = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  this.mEZParityIsPseudo = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  this.mCIPParityNoDistinctionProblem = false;
  this.canInitializeRanking();
  this.canRankStereo();
  this.canRankFinal();
}
;
defineClass(58, 1, {1:1}, carc.Canonizer, carc.Canonizer_0);
_.$init_4 = function $init_4(){
}
;
_.addAtomQueryFeatures = function addAtomQueryFeatures(codeNo, isSecondFeatureBlock, nbits, qfMask, qfBits, qfShift){
  var atom, atom0, count, feature;
  count = 0;
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++)
    if ((this.mMol.getAtomQueryFeatures_0(this.mGraphAtom[atom0]) & qfMask) != 0)
      count++;
  if (count == 0)
    return false;
  if (codeNo > 15) {
    this.ensureSecondFeatureBlock(isSecondFeatureBlock);
    codeNo -= 16;
  }
  this.encodeBits(1, 1);
  this.encodeBits(codeNo, 4);
  this.encodeBits(count, nbits);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    feature = this.mMol.getAtomQueryFeatures_0(this.mGraphAtom[atom]) & qfMask;
    if (feature != 0) {
      this.encodeBits(atom, nbits);
      if (qfBits != 1)
        this.encodeBits(feature >> qfShift, qfBits);
    }
  }
  return true;
}
;
_.addBondQueryFeatures = function addBondQueryFeatures(codeNo, isSecondFeatureBlock, nbits, qfMask, qfBits, qfShift){
  var bond, bond0, count, feature;
  count = 0;
  for (bond0 = 0; bond0 < this.mMol.getBonds_0(); bond0++)
    if ((this.mMol.getBondQueryFeatures_0(this.mGraphBond[bond0]) & qfMask) != 0)
      count++;
  if (count == 0)
    return false;
  if (codeNo > 15) {
    this.ensureSecondFeatureBlock(isSecondFeatureBlock);
    codeNo -= 16;
  }
  this.encodeBits(1, 1);
  this.encodeBits(codeNo, 4);
  this.encodeBits(count, nbits);
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    feature = this.mMol.getBondQueryFeatures_0(this.mGraphBond[bond]) & qfMask;
    if (feature != 0) {
      this.encodeBits(bond, nbits);
      if (qfBits != 1)
        this.encodeBits(feature >> qfShift, qfBits);
    }
  }
  return true;
}
;
_.canCalcAlleneParity = function canCalcAlleneParity(atom, calcProParity){
  var alleneParity, atom1, atom2, halfParity1, halfParity2, hp1, hp2;
  if (this.mMol.getAtomicNo_0(atom) != 6 && this.mMol.getAtomicNo_0(atom) != 7)
    return false;
  atom1 = this.mMol.getConnAtom_0(atom, 0);
  atom2 = this.mMol.getConnAtom_0(atom, 1);
  if (this.mMol.getAtomPi_0(atom1) != 1 || this.mMol.getAtomPi_0(atom2) != 1)
    return false;
  if (this.mMol.getConnAtoms_0(atom1) == 1 || this.mMol.getConnAtoms_0(atom2) == 1)
    return false;
  if (this.mMol.getAllConnAtoms_0(atom1) > 3 || this.mMol.getAllConnAtoms_0(atom2) > 3)
    return false;
  halfParity1 = new carc.EZHalfParity(this.mMol, this.mCanRank, atom, atom1);
  if (halfParity1.mRanksEqual && !calcProParity)
    return false;
  halfParity2 = new carc.EZHalfParity(this.mMol, this.mCanRank, atom, atom2);
  if (halfParity2.mRanksEqual && !calcProParity)
    return false;
  if (halfParity1.mRanksEqual && halfParity2.mRanksEqual)
    return false;
  if (calcProParity) {
    if (halfParity1.mRanksEqual && halfParity1.mInSameFragment)
      this.mProTHAtomsInSameFragment[atom] = true;
    if (halfParity2.mRanksEqual && halfParity2.mInSameFragment)
      this.mProTHAtomsInSameFragment[atom] = true;
  }
  hp1 = halfParity1.getValue();
  hp2 = halfParity2.getValue();
  if (hp1 == -1 || hp2 == -1 || (hp1 + hp2 & 1) == 0) {
    if (!calcProParity) {
      this.mTHParity[atom] = 3;
    }
    return true;
  }
  alleneParity = 0;
  switch (hp1 + hp2) {
    case 3:
    case 7:
      alleneParity = 2;
      break;
    case 5:
      alleneParity = 1;
      break;
  }
  if (!calcProParity) {
    this.mTHParity[atom] = alleneParity;
  }
   else if (this.mStereoCentersFound && (this.mMode & 2) != 0 || !this.mStereoCentersFound && (this.mMode & 4) != 0) {
    if (halfParity1.mRanksEqual) {
      if (alleneParity == 1) {
        this.mCanBase[halfParity1.mHighConn].add_1(64);
        this.mCanBase[halfParity1.mLowConn].add_1(16);
      }
       else {
        this.mCanBase[halfParity1.mHighConn].add_1(16);
        this.mCanBase[halfParity1.mLowConn].add_1(64);
      }
    }
    if (halfParity2.mRanksEqual) {
      if (alleneParity == 2) {
        this.mCanBase[halfParity2.mHighConn].add_1(64);
        this.mCanBase[halfParity2.mLowConn].add_1(16);
      }
       else {
        this.mCanBase[halfParity2.mHighConn].add_1(16);
        this.mCanBase[halfParity2.mLowConn].add_1(64);
      }
    }
  }
  return true;
}
;
_.canCalcBINAPParity = function canCalcBINAPParity(bond, calcProParity){
  var atom1, atom2, axialParity, halfParity1, halfParity2;
  if (!this.mMol.isBINAPChiralityBond_0(bond))
    return false;
  atom1 = this.mMol.getBondAtom_0(0, bond);
  atom2 = this.mMol.getBondAtom_0(1, bond);
  halfParity1 = new carc.EZHalfParity(this.mMol, this.mCanRank, atom1, atom2);
  if (halfParity1.mRanksEqual && !calcProParity)
    return false;
  halfParity2 = new carc.EZHalfParity(this.mMol, this.mCanRank, atom2, atom1);
  if (halfParity2.mRanksEqual && !calcProParity)
    return false;
  if (halfParity1.mRanksEqual && halfParity2.mRanksEqual)
    return false;
  if (calcProParity) {
    if (halfParity1.mRanksEqual)
      this.mProEZAtomsInSameFragment[bond] = this.hasSecondBINAPBond(atom2);
    if (halfParity2.mRanksEqual)
      this.mProEZAtomsInSameFragment[bond] = this.hasSecondBINAPBond(atom1);
  }
  axialParity = this.mZCoordinatesAvailable?this.canCalcBINAPParity3D(halfParity1, halfParity2):this.canCalcBINAPParity2D(halfParity1, halfParity2);
  if (!calcProParity) {
    this.mEZParity[bond] = axialParity;
  }
   else if (this.mStereoCentersFound && (this.mMode & 2) != 0 || !this.mStereoCentersFound && (this.mMode & 4) != 0) {
    if (halfParity1.mRanksEqual) {
      if (axialParity == 2) {
        this.mCanBase[halfParity1.mHighConn].add_1(4);
        this.mCanBase[halfParity1.mLowConn].add_1(1);
      }
       else {
        this.mCanBase[halfParity1.mHighConn].add_1(1);
        this.mCanBase[halfParity1.mLowConn].add_1(4);
      }
    }
    if (halfParity2.mRanksEqual) {
      if (axialParity == 2) {
        this.mCanBase[halfParity2.mHighConn].add_1(4);
        this.mCanBase[halfParity2.mLowConn].add_1(1);
      }
       else {
        this.mCanBase[halfParity2.mHighConn].add_1(1);
        this.mCanBase[halfParity2.mLowConn].add_1(4);
      }
    }
  }
  return true;
}
;
_.canCalcBINAPParity2D = function canCalcBINAPParity2D(halfParity1, halfParity2){
  var axialParity, hp1, hp2;
  hp1 = halfParity1.getValue();
  hp2 = halfParity2.getValue();
  if (hp1 == -1 || hp2 == -1 || (hp1 + hp2 & 1) == 0)
    return 3;
  axialParity = 0;
  switch (hp1 + hp2) {
    case 3:
    case 7:
      axialParity = 1;
      break;
    case 5:
      axialParity = 2;
      break;
  }
  return axialParity;
}
;
_.canCalcBINAPParity3D = function canCalcBINAPParity3D(halfParity1, halfParity2){
  var atom, torsion;
  atom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
  atom[0] = halfParity1.mHighConn;
  atom[1] = halfParity1.mCentralAxialAtom;
  atom[2] = halfParity2.mCentralAxialAtom;
  atom[3] = halfParity2.mHighConn;
  torsion = this.mMol.calculateTorsion_0(atom);
  if ($wnd.Math.abs(torsion) < 0.3 || $wnd.Math.abs(torsion) > 3.141592653589793 - 0.3)
    return 3;
  if (torsion < 0)
    return 1;
  else 
    return 2;
}
;
_.canCalcEZParity = function canCalcEZParity(bond, calcProParity){
  var bondDBParity, dbAtom1, dbAtom2, halfParity1, halfParity2;
  if (this.mEZParity[bond] != 0)
    return false;
  if (this.mMol.getBondOrder_0(bond) == 1)
    return this.canCalcBINAPParity(bond, calcProParity);
  if (this.mMol.getBondOrder_0(bond) != 2)
    return false;
  if (this.mMol.isAromaticBond_0(bond))
    return false;
  dbAtom1 = this.mMol.getBondAtom_0(0, bond);
  dbAtom2 = this.mMol.getBondAtom_0(1, bond);
  if (this.mMol.getConnAtoms_0(dbAtom1) == 1 || this.mMol.getConnAtoms_0(dbAtom2) == 1)
    return false;
  if (this.mMol.getConnAtoms_0(dbAtom1) > 3 || this.mMol.getConnAtoms_0(dbAtom2) > 3)
    return false;
  if (this.mMol.getAtomPi_0(dbAtom1) == 2 || this.mMol.getAtomPi_0(dbAtom2) == 2)
    return false;
  halfParity1 = new carc.EZHalfParity(this.mMol, this.mCanRank, dbAtom2, dbAtom1);
  if (halfParity1.mRanksEqual && !calcProParity)
    return false;
  halfParity2 = new carc.EZHalfParity(this.mMol, this.mCanRank, dbAtom1, dbAtom2);
  if (halfParity2.mRanksEqual && !calcProParity)
    return false;
  if (halfParity1.mRanksEqual && halfParity2.mRanksEqual)
    return false;
  if (calcProParity) {
    if (halfParity1.mRanksEqual && halfParity1.mInSameFragment)
      this.mProEZAtomsInSameFragment[bond] = true;
    if (halfParity2.mRanksEqual && halfParity2.mInSameFragment)
      this.mProEZAtomsInSameFragment[bond] = true;
  }
  bondDBParity = this.mMol.isBondParityUnknownOrNone_0(bond)?3:this.mZCoordinatesAvailable?this.canCalcEZParity3D(halfParity1, halfParity2):this.canCalcEZParity2D(halfParity1, halfParity2);
  if (!calcProParity) {
    this.mEZParity[bond] = bondDBParity;
  }
   else if ((this.mMode & 2) != 0) {
    if (halfParity1.mRanksEqual) {
      if (bondDBParity == 1) {
        this.mCanBase[halfParity1.mHighConn].add_1(4);
        this.mCanBase[halfParity1.mLowConn].add_1(1);
      }
       else if (bondDBParity == 2) {
        this.mCanBase[halfParity1.mHighConn].add_1(1);
        this.mCanBase[halfParity1.mLowConn].add_1(4);
      }
    }
    if (halfParity2.mRanksEqual) {
      if (bondDBParity == 1) {
        this.mCanBase[halfParity2.mHighConn].add_1(4);
        this.mCanBase[halfParity2.mLowConn].add_1(1);
      }
       else if (bondDBParity == 2) {
        this.mCanBase[halfParity2.mHighConn].add_1(1);
        this.mCanBase[halfParity2.mLowConn].add_1(4);
      }
    }
  }
  return true;
}
;
_.canCalcEZParity2D = function canCalcEZParity2D(halfParity1, halfParity2){
  if (halfParity1.getValue() == -1 || halfParity2.getValue() == -1)
    return 3;
  if (((halfParity1.getValue() | halfParity2.getValue()) & 1) != 0)
    return 3;
  return halfParity1.getValue() == halfParity2.getValue()?narrow_byte(1):2;
}
;
_.canCalcEZParity3D = function canCalcEZParity3D(halfParity1, halfParity2){
  var cosa, cosb, db, n1, n2, s1, s2;
  db = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  db[0] = this.mMol.getAtomX_1(halfParity2.mCentralAxialAtom) - this.mMol.getAtomX_1(halfParity1.mCentralAxialAtom);
  db[1] = this.mMol.getAtomY_1(halfParity2.mCentralAxialAtom) - this.mMol.getAtomY_1(halfParity1.mCentralAxialAtom);
  db[2] = this.mMol.getAtomZ_0(halfParity2.mCentralAxialAtom) - this.mMol.getAtomZ_0(halfParity1.mCentralAxialAtom);
  s1 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  s1[0] = this.mMol.getAtomX_1(halfParity1.mHighConn) - this.mMol.getAtomX_1(halfParity1.mCentralAxialAtom);
  s1[1] = this.mMol.getAtomY_1(halfParity1.mHighConn) - this.mMol.getAtomY_1(halfParity1.mCentralAxialAtom);
  s1[2] = this.mMol.getAtomZ_0(halfParity1.mHighConn) - this.mMol.getAtomZ_0(halfParity1.mCentralAxialAtom);
  s2 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  s2[0] = this.mMol.getAtomX_1(halfParity2.mHighConn) - this.mMol.getAtomX_1(halfParity2.mCentralAxialAtom);
  s2[1] = this.mMol.getAtomY_1(halfParity2.mHighConn) - this.mMol.getAtomY_1(halfParity2.mCentralAxialAtom);
  s2[2] = this.mMol.getAtomZ_0(halfParity2.mHighConn) - this.mMol.getAtomZ_0(halfParity2.mCentralAxialAtom);
  n1 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  n1[0] = db[1] * s1[2] - db[2] * s1[1];
  n1[1] = db[2] * s1[0] - db[0] * s1[2];
  n1[2] = db[0] * s1[1] - db[1] * s1[0];
  n2 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  n2[0] = db[1] * n1[2] - db[2] * n1[1];
  n2[1] = db[2] * n1[0] - db[0] * n1[2];
  n2[2] = db[0] * n1[1] - db[1] * n1[0];
  cosa = (s1[0] * n2[0] + s1[1] * n2[1] + s1[2] * n2[2]) / ($wnd.Math.sqrt(s1[0] * s1[0] + s1[1] * s1[1] + s1[2] * s1[2]) * $wnd.Math.sqrt(n2[0] * n2[0] + n2[1] * n2[1] + n2[2] * n2[2]));
  cosb = (s2[0] * n2[0] + s2[1] * n2[1] + s2[2] * n2[2]) / ($wnd.Math.sqrt(s2[0] * s2[0] + s2[1] * s2[1] + s2[2] * s2[2]) * $wnd.Math.sqrt(n2[0] * n2[0] + n2[1] * n2[1] + n2[2] * n2[2]));
  return cosa < 0 ^ cosb < 0?narrow_byte(1):2;
}
;
_.canCalcImplicitAbnormalValence = function canCalcImplicitAbnormalValence(atom){
  var explicitAbnormalValence, implicitHigherValence, newImplicitHigherValence, valence;
  explicitAbnormalValence = this.mMol.getAtomAbnormalValence_0(atom);
  implicitHigherValence = this.mMol.getImplicitHigherValence_0(atom, false);
  newImplicitHigherValence = this.mMol.getImplicitHigherValence_0(atom, true);
  valence = -1;
  if (implicitHigherValence != newImplicitHigherValence) {
    if (explicitAbnormalValence != -1 && explicitAbnormalValence > implicitHigherValence)
      valence = narrow_byte(explicitAbnormalValence);
    else 
      valence = narrow_byte(implicitHigherValence);
  }
   else if (explicitAbnormalValence != -1) {
    if (explicitAbnormalValence > newImplicitHigherValence || explicitAbnormalValence < newImplicitHigherValence && explicitAbnormalValence >= this.mMol.getOccupiedValence_0(atom))
      valence = narrow_byte(explicitAbnormalValence);
  }
   else if (!this.mMol.supportsImplicitHydrogen_0(atom) && this.mMol.getExplicitHydrogens_0(atom) != 0) {
    valence = this.mMol.getOccupiedValence_0(atom);
    valence -= this.mMol.getElectronValenceCorrection_0(atom, valence);
  }
  this.canSetAbnormalValence(atom, valence);
  return valence;
}
;
_.canCalcNextBaseValues = function canCalcNextBaseValues(){
  var atom, connBond, connRank, i, i0, i1, j, k, neighbour, neighbours, rank;
  connRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxConnAtoms, 15, 1);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    neighbours = this.mMol.getConnAtoms_0(atom) + this.mMol.getMetalBondedConnAtoms_0(atom);
    neighbour = 0;
    for (i0 = 0; i0 < this.mMol.getAllConnAtomsPlusMetalBonds_0(atom); i0++) {
      if (i0 < this.mMol.getConnAtoms_0(atom) || i0 >= this.mMol.getAllConnAtoms_0(atom)) {
        rank = 2 * this.mCanRank[this.mMol.getConnAtom_0(atom, i0)];
        connBond = this.mMol.getConnBond_0(atom, i0);
        if (this.mMol.getBondOrder_0(connBond) == 2)
          if (!this.mMol.isAromaticBond_0(connBond))
            rank++;
        for (j = 0; j < neighbour; j++)
          if (rank < connRank[j])
            break;
        for (k = neighbour; k > j; k--)
          connRank[k] = connRank[k - 1];
        connRank[j] = rank;
        neighbour++;
      }
    }
    this.mCanBase[atom].init_0(atom);
    this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
    for (i1 = neighbours; i1 < this.mMaxConnAtoms; i1++)
      this.mCanBase[atom].add_0(16 + 1, 0);
    for (i = 0; i < neighbours; i++)
      this.mCanBase[atom].add_0(16 + 1, fromInt_0(connRank[i]));
  }
}
;
_.canCalcTHParity = function canCalcTHParity(atom, calcProParity){
  var atomTHParity, highestConn, highestRank, i, i0, j, neighbourUsed, proTHAtom1, proTHAtom2, proTHAtomsFound, remappedConn, remappedRank;
  if (this.mTHParity[atom] != 0)
    return false;
  if (this.mMol.getAtomicNo_0(atom) != 5 && this.mMol.getAtomicNo_0(atom) != 6 && this.mMol.getAtomicNo_0(atom) != 7 && this.mMol.getAtomicNo_0(atom) != 14 && this.mMol.getAtomicNo_0(atom) != 15 && this.mMol.getAtomicNo_0(atom) != 16)
    return false;
  if (this.mMol.getAtomPi_0(atom) != 0) {
    if (this.isCentralAlleneAtom(atom))
      return this.canCalcAlleneParity(atom, calcProParity);
    if (this.mMol.getAtomicNo_0(atom) != 15 && this.mMol.getAtomicNo_0(atom) != 16)
      return false;
  }
  if (this.mMol.getConnAtoms_0(atom) < 3 || this.mMol.getAllConnAtoms_0(atom) > 4)
    return false;
  if (this.mMol.getAtomCharge_0(atom) > 0 && this.mMol.getAtomicNo_0(atom) == 6)
    return false;
  if (this.mMol.getAtomicNo_0(atom) == 5 && this.mMol.getAllConnAtoms_0(atom) != 4)
    return false;
  if (this.mMol.getAtomicNo_0(atom) == 7 && !this.mNitrogenQualifiesForParity[atom])
    return false;
  remappedConn = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
  remappedRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
  neighbourUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 4, 16, 1);
  for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom); i0++) {
    highestRank = -1;
    highestConn = 0;
    for (j = 0; j < this.mMol.getAllConnAtoms_0(atom); j++) {
      if (!neighbourUsed[j]) {
        if (highestRank < this.mCanRank[this.mMol.getConnAtom_0(atom, j)]) {
          highestRank = this.mCanRank[this.mMol.getConnAtom_0(atom, j)];
          highestConn = j;
        }
      }
    }
    remappedConn[i0] = highestConn;
    remappedRank[i0] = highestRank;
    neighbourUsed[highestConn] = true;
  }
  if (this.mMol.getAllConnAtoms_0(atom) == 4 && remappedRank[0] == remappedRank[1] && remappedRank[2] == remappedRank[3])
    return false;
  if (this.mMol.getAllConnAtoms_0(atom) == 4 && (remappedRank[0] == remappedRank[2] || remappedRank[1] == remappedRank[3]))
    return false;
  if (this.mMol.getAllConnAtoms_0(atom) == 3 && remappedRank[0] == remappedRank[2])
    return false;
  proTHAtom1 = 0;
  proTHAtom2 = 0;
  proTHAtomsFound = false;
  for (i = 1; i < this.mMol.getAllConnAtoms_0(atom); i++) {
    if (remappedRank[i - 1] == remappedRank[i]) {
      if (!calcProParity || remappedRank[i] == 0)
        return false;
      proTHAtom1 = this.mMol.getConnAtom_0(atom, remappedConn[i - 1]);
      proTHAtom2 = this.mMol.getConnAtom_0(atom, remappedConn[i]);
      if (this.mMol.isRingBond_0(this.mMol.getConnBond_0(atom, remappedConn[i])))
        this.mProTHAtomsInSameFragment[atom] = true;
      proTHAtomsFound = true;
    }
  }
  if (calcProParity && !proTHAtomsFound)
    return false;
  atomTHParity = this.mZCoordinatesAvailable?this.canCalcTHParity3D(atom, remappedConn):this.canCalcTHParity2D(atom, remappedConn);
  if (!calcProParity) {
    this.mTHParity[atom] = atomTHParity;
  }
   else if (this.mStereoCentersFound && (this.mMode & 2) != 0 || !this.mStereoCentersFound && (this.mMode & 4) != 0) {
    if (atomTHParity == 1) {
      this.mCanBase[proTHAtom1].add_1(1024);
      this.mCanBase[proTHAtom2].add_1(256);
    }
     else if (atomTHParity == 2) {
      this.mCanBase[proTHAtom1].add_1(256);
      this.mCanBase[proTHAtom2].add_1(1024);
    }
  }
  return true;
}
;
_.canCalcTHParity2D = function canCalcTHParity2D(atom, remappedConn){
  var angle, bnd, i, i0, i1, order, parity, stereoBond, stereoType, up_down;
  up_down = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 2), {31:1, 4:1, 1:1, 8:1}, 6, 0, [stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2, 1, 2, 1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [1, 2, 2, 1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [1, 1, 2, 2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2, 1, 1, 2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2, 2, 1, 1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [1, 2, 1, 2])]);
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, this.mMol.getAllConnAtoms_0(atom), 15, 1);
  for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom); i0++)
    angle[i0] = this.mMol.getBondAngle_0(this.mMol.getConnAtom_0(atom, remappedConn[i0]), atom);
  parity = narrow_byte(this.mMol.getFisherProjectionParity_0(atom, remappedConn, angle, null));
  if (parity != 3)
    return parity;
  stereoBond = 0;
  stereoType = 0;
  for (i1 = 0; i1 < this.mMol.getAllConnAtoms_0(atom); i1++) {
    bnd = this.mMol.getConnBond_0(atom, remappedConn[i1]);
    if (this.mMol.getBondAtom_0(0, bnd) == atom) {
      if (this.mMol.getBondType_0(bnd) == 9) {
        if (stereoType != 0)
          this.mMol.setStereoProblem(atom);
        stereoBond = i1;
        stereoType = 1;
      }
      if (this.mMol.getBondType_0(bnd) == 17) {
        if (stereoType != 0)
          this.mMol.setStereoProblem(atom);
        stereoBond = i1;
        stereoType = 2;
      }
    }
  }
  if (stereoType == 0)
    return 3;
  for (i = 1; i < this.mMol.getAllConnAtoms_0(atom); i++)
    if (angle[i] < angle[0])
      angle[i] += 3.141592653589793 * 2;
  if (this.mMol.getAllConnAtoms_0(atom) == 3) {
    switch (stereoBond) {
      case 0:
        if (angle[1] < angle[2] && angle[2] - angle[1] < 3.141592653589793 || angle[1] > angle[2] && angle[1] - angle[2] > 3.141592653589793)
          stereoType = 3 - stereoType;
        break;
      case 1:
        if (angle[2] - angle[0] > 3.141592653589793)
          stereoType = 3 - stereoType;
        break;
      case 2:
        if (angle[1] - angle[0] < 3.141592653589793)
          stereoType = 3 - stereoType;
        break;
    }
    return stereoType == 1?narrow_byte(2):1;
  }
  order = 0;
  if (angle[1] <= angle[2] && angle[2] <= angle[3])
    order = 0;
  else if (angle[1] <= angle[3] && angle[3] <= angle[2])
    order = 1;
  else if (angle[2] <= angle[1] && angle[1] <= angle[3])
    order = 2;
  else if (angle[2] <= angle[3] && angle[3] <= angle[1])
    order = 3;
  else if (angle[3] <= angle[1] && angle[1] <= angle[2])
    order = 4;
  else if (angle[3] <= angle[2] && angle[2] <= angle[1])
    order = 5;
  return up_down[order][stereoBond] == stereoType?narrow_byte(2):1;
}
;
_.canCalcTHParity3D = function canCalcTHParity3D(atom, remappedConn){
  var atomList, coords, cosa, i, i0, n;
  atomList = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
  for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom); i0++)
    atomList[i0] = this.mMol.getConnAtom_0(atom, remappedConn[i0]);
  if (this.mMol.getAllConnAtoms_0(atom) == 3)
    atomList[3] = atom;
  coords = initMultidimensionalArray(cggl.D_classLit, [{4:1, 1:1, 8:1}, {14:1, 4:1, 1:1}], [14, 5], 15, [3, 3], 2);
  for (i = 0; i < 3; i++) {
    coords[i][0] = this.mMol.getAtomX_1(atomList[i + 1]) - this.mMol.getAtomX_1(atomList[0]);
    coords[i][1] = this.mMol.getAtomY_1(atomList[i + 1]) - this.mMol.getAtomY_1(atomList[0]);
    coords[i][2] = this.mMol.getAtomZ_0(atomList[i + 1]) - this.mMol.getAtomZ_0(atomList[0]);
  }
  n = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 3, 15, 1);
  n[0] = coords[0][1] * coords[1][2] - coords[0][2] * coords[1][1];
  n[1] = coords[0][2] * coords[1][0] - coords[0][0] * coords[1][2];
  n[2] = coords[0][0] * coords[1][1] - coords[0][1] * coords[1][0];
  cosa = (coords[2][0] * n[0] + coords[2][1] * n[1] + coords[2][2] * n[2]) / ($wnd.Math.sqrt(coords[2][0] * coords[2][0] + coords[2][1] * coords[2][1] + coords[2][2] * coords[2][2]) * $wnd.Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]));
  return cosa > 0?narrow_byte(1):2;
}
;
_.canConsolidate = function canConsolidate(){
  var canRank, i;
  canRank = 0;
  ju.sort_5(this.mCanBase);
  for (i = 0; i < this.mCanBase.length; i++) {
    if (i == 0 || this.mCanBase[i].compareTo_0(this.mCanBase[i - 1]) != 0)
      canRank++;
    this.mCanRank[this.mCanBase[i].getAtom()] = canRank;
  }
  return canRank;
}
;
_.canEnsureFragments = function canEnsureFragments(){
  var atom, bondHandled, connAtom, connBond, current, fragmentAtom, fragmentAtoms, fragmentBond, fragmentBonds, fragmentCount, fragmentNo, i;
  if (isNotNull(this.mFragmentList))
    return;
  this.mFragmentList = new ju.ArrayList;
  fragmentCount = 0;
  fragmentNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  fragmentAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  fragmentBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (fragmentNo[atom] == 0 && (this.mMol.isRingAtom_0(atom) || this.mMol.getAtomPi_0(atom) == 1)) {
      fragmentAtom[0] = atom;
      fragmentAtoms = 1;
      fragmentBonds = 0;
      fragmentNo[atom] = ++fragmentCount;
      bondHandled = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
      for (current = 0; current < fragmentAtoms; current++) {
        for (i = 0; i < this.mMol.getConnAtoms_0(fragmentAtom[current]); i++) {
          connBond = this.mMol.getConnBond_0(fragmentAtom[current], i);
          if (this.mMol.isRingBond_0(connBond) || this.mMol.getBondOrder_0(connBond) == 2 || this.mMol.isBINAPChiralityBond_0(connBond)) {
            connAtom = this.mMol.getConnAtom_0(fragmentAtom[current], i);
            if (!bondHandled[connBond]) {
              fragmentBond[fragmentBonds++] = connBond;
              bondHandled[connBond] = true;
            }
            if (fragmentNo[connAtom] == 0) {
              fragmentAtom[fragmentAtoms++] = connAtom;
              fragmentNo[connAtom] = fragmentCount;
            }
          }
        }
      }
      this.mFragmentList.add(new carc.CanonizerFragment(fragmentAtom, fragmentAtoms, fragmentBond, fragmentBonds));
    }
  }
}
;
_.canFindNitrogenQualifyingForParity = function canFindNitrogenQualifyingForParity(){
  var atom, bondCountToBridgeHead, bridgeAtomCount, bridgeHead, bridgeHeadIsFlat, bridgeHeadMayInvert, connBond, firstBridgeAtom, firstBridgeBond, i, i0, isAdamantane, neglectBond, pathAtom, pathLength, potentialOtherBridgeHead, potentialOtherBridgeHeadIndex, ringAtom, ringSet, smallRingNo, smallRingSize;
  this.mNitrogenQualifiesForParity = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mMol.getAtomicNo_0(atom) == 7) {
      if (this.mMol.getConnAtoms_0(atom) == 4) {
        this.mNitrogenQualifiesForParity[atom] = true;
        continue;
      }
      if (this.mMol.getConnAtoms_0(atom) == 3) {
        if (this.mMol.getAtomCharge_0(atom) == 1) {
          this.mNitrogenQualifiesForParity[atom] = true;
          continue;
        }
        if (this.mMol.isFlatNitrogen_0(atom))
          continue;
        if ((this.mMode & 32) != 0) {
          this.mNitrogenQualifiesForParity[atom] = true;
          continue;
        }
        if (this.mMol.getAtomRingBondCount_0(atom) != 3)
          continue;
        smallRingSize = this.mMol.getAtomRingSize_0(atom);
        if (smallRingSize > 7)
          continue;
        ringSet = this.mMol.getRingSet_0();
        smallRingNo = 0;
        while (smallRingNo < ringSet.getSize_0()) {
          if (ringSet.getRingSize_0(smallRingNo) == smallRingSize && ringSet.isAtomMember_0(smallRingNo, atom))
            break;
          smallRingNo++;
        }
        firstBridgeAtom = -1;
        firstBridgeBond = -1;
        for (i0 = 0; i0 < 3; i0++) {
          connBond = this.mMol.getConnBond_0(atom, i0);
          if (!ringSet.isBondMember_0(smallRingNo, connBond)) {
            firstBridgeAtom = this.mMol.getConnAtom_0(atom, i0);
            firstBridgeBond = connBond;
            break;
          }
        }
        neglectBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
        neglectBond[firstBridgeBond] = true;
        pathAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 11, 15, 1);
        pathLength = this.mMol.getPath_0(pathAtom, firstBridgeAtom, atom, 10, neglectBond);
        if (pathLength == -1)
          continue;
        bridgeAtomCount = 1;
        while (!ringSet.isAtomMember_0(smallRingNo, pathAtom[bridgeAtomCount]))
          bridgeAtomCount++;
        bondCountToBridgeHead = pathLength - bridgeAtomCount;
        bridgeHead = pathAtom[bridgeAtomCount];
        if (smallRingSize == 6 && bondCountToBridgeHead == 2 && bridgeAtomCount == 3) {
          if (this.mMol.getAtomRingBondCount_0(pathAtom[1]) >= 3) {
            isAdamantane = false;
            ringAtom = ringSet.getRingAtoms_0(smallRingNo);
            for (i = 0; i < 6; i++) {
              if (atom == ringAtom[i]) {
                potentialOtherBridgeHeadIndex = ringSet.validateMemberIndex_0(smallRingNo, bridgeHead == ringAtom[ringSet.validateMemberIndex_0(smallRingNo, i + 2)]?i - 2:i + 2);
                potentialOtherBridgeHead = ringAtom[potentialOtherBridgeHeadIndex];
                if (this.mMol.getAtomRingBondCount_0(potentialOtherBridgeHead) >= 3 && this.mMol.getPathLength_1(pathAtom[1], potentialOtherBridgeHead, 2, null) == 2)
                  isAdamantane = true;
                break;
              }
            }
            if (isAdamantane) {
              this.mNitrogenQualifiesForParity[atom] = true;
              continue;
            }
          }
        }
        bridgeHeadIsFlat = this.mMol.getAtomPi_0(bridgeHead) == 1 || this.mMol.isAromaticAtom_1(bridgeHead) || this.mMol.isFlatNitrogen_0(bridgeHead);
        bridgeHeadMayInvert = !bridgeHeadIsFlat && this.mMol.getAtomicNo_0(bridgeHead) == 7 && this.mMol.getAtomCharge_0(bridgeHead) != 1;
        if (bondCountToBridgeHead == 1) {
          if (!bridgeHeadIsFlat && !bridgeHeadMayInvert && smallRingSize <= 4 && bridgeAtomCount <= 3)
            this.mNitrogenQualifiesForParity[atom] = true;
          continue;
        }
        switch (smallRingSize) {
          case 4:
            if (!bridgeHeadIsFlat && !bridgeHeadMayInvert) {
              if (bridgeAtomCount <= 4)
                this.mNitrogenQualifiesForParity[atom] = true;
            }

            break;
          case 5:
            if (bridgeHeadMayInvert) {
              if (bridgeAtomCount <= 3)
                this.mNitrogenQualifiesForParity[atom] = true;
            }
             else if (!bridgeHeadIsFlat) {
              if (bridgeAtomCount <= 4)
                this.mNitrogenQualifiesForParity[atom] = true;
            }

            break;
          case 6:
            if (bondCountToBridgeHead == 2) {
              if (bridgeHeadIsFlat) {
                if (bridgeAtomCount <= 4)
                  this.mNitrogenQualifiesForParity[atom] = true;
              }
               else if (!bridgeHeadMayInvert) {
                if (bridgeAtomCount <= 3)
                  this.mNitrogenQualifiesForParity[atom] = true;
              }
            }
             else if (bondCountToBridgeHead == 3) {
              if (bridgeHeadIsFlat) {
                if (bridgeAtomCount <= 6)
                  this.mNitrogenQualifiesForParity[atom] = true;
              }
               else {
                if (bridgeAtomCount <= 4)
                  this.mNitrogenQualifiesForParity[atom] = true;
              }
            }

            break;
          case 7:
            if (bondCountToBridgeHead == 3) {
              if (bridgeAtomCount <= 3)
                this.mNitrogenQualifiesForParity[atom] = true;
            }

            break;
        }
      }
    }
  }
}
;
_.canFindParities = function canFindParities(doCIP){
  var atom, bond, ezFound, thFound;
  ezFound = false;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
    if (this.canCalcEZParity(bond, false)) {
      this.mEZParityRoundIsOdd[bond] = this.mIsOddParityRound;
      if (doCIP)
        this.cipCalcEZParity(bond);
      ezFound = true;
    }
  thFound = false;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
    if (this.canCalcTHParity(atom, false)) {
      this.mTHParityRoundIsOdd[atom] = this.mIsOddParityRound;
      if (doCIP)
        this.cipCalcTHParity(atom);
      thFound = true;
    }
  if (thFound)
    this.mIsOddParityRound = !this.mIsOddParityRound;
  return ezFound || thFound;
}
;
_.canFindPseudoParities = function canFindPseudoParities(){
  var anyPseudoParityCount, atom, atom0, bond, bond0, f, f$iterator, highEZBondRank, highRankingEZBond, highRankingTHAtom, highTHAtomRank, higherRank, i, i0, i1, i2, invertFragmentsStereoFeatures, isFreshPseudoParityAtom, isFreshPseudoParityBond, pseudoParitiesInGroup, pseudoParity1Or2Found, pseudoParity1Or2InGroup, rank1, rank2;
  isFreshPseudoParityAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  isFreshPseudoParityBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  anyPseudoParityCount = 0;
  pseudoParity1Or2Found = false;
  if ((this.mMode & 128) != 0) {
    this.mPseudoTHGroup = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
    this.mPseudoEZGroup = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  }
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++) {
    if (this.mProTHAtomsInSameFragment[atom0]) {
      if (!this.mTHParityIsPseudo[atom0]) {
        if (this.canCalcTHParity(atom0, false)) {
          this.mTHParityIsPseudo[atom0] = true;
          isFreshPseudoParityAtom[atom0] = true;
          anyPseudoParityCount++;
        }
      }
    }
  }
  for (bond0 = 0; bond0 < this.mMol.getBonds_0(); bond0++) {
    if (this.mProEZAtomsInSameFragment[bond0]) {
      if (!this.mEZParityIsPseudo[bond0]) {
        if (this.canCalcEZParity(bond0, false)) {
          this.mEZParityIsPseudo[bond0] = true;
          isFreshPseudoParityBond[bond0] = true;
          anyPseudoParityCount++;
        }
      }
    }
  }
  if (anyPseudoParityCount == 1) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      if (isFreshPseudoParityAtom[atom]) {
        this.mTHParity[atom] = 0;
        break;
      }
    }
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      if (isFreshPseudoParityBond[bond]) {
        this.mEZParity[bond] = 0;
        break;
      }
    }
  }
   else if (anyPseudoParityCount > 1) {
    this.canEnsureFragments();
    this.mNoOfPseudoGroups = 0;
    for (f$iterator = this.mFragmentList.iterator(); f$iterator.hasNext_0();) {
      f = castTo(f$iterator.next_3(), 116);
      pseudoParitiesInGroup = 0;
      pseudoParity1Or2InGroup = 0;
      highRankingTHAtom = 0;
      highRankingEZBond = 0;
      highTHAtomRank = -1;
      highEZBondRank = -1;
      for (i0 = 0; i0 < f.atom.length; i0++) {
        if (isFreshPseudoParityAtom[f.atom[i0]]) {
          pseudoParitiesInGroup++;
          if (this.mTHParity[f.atom[i0]] == 1 || this.mTHParity[f.atom[i0]] == 2) {
            pseudoParity1Or2InGroup++;
            pseudoParity1Or2Found = true;
            if (highTHAtomRank < this.mCanRank[f.atom[i0]]) {
              highTHAtomRank = this.mCanRank[f.atom[i0]];
              highRankingTHAtom = f.atom[i0];
            }
          }
        }
      }
      for (i1 = 0; i1 < f.bond.length; i1++) {
        if (isFreshPseudoParityBond[f.bond[i1]]) {
          pseudoParitiesInGroup++;
          rank1 = this.mCanRank[this.mMol.getBondAtom_0(0, f.bond[i1])];
          rank2 = this.mCanRank[this.mMol.getBondAtom_0(1, f.bond[i1])];
          higherRank = rank1 > rank2?(rank1 << 16) + rank2:(rank2 << 16) + rank1;
          if (this.mEZParity[f.bond[i1]] == 1 || this.mEZParity[f.bond[i1]] == 2) {
            pseudoParity1Or2InGroup++;
            pseudoParity1Or2Found = true;
            if (highEZBondRank < higherRank) {
              highEZBondRank = higherRank;
              highRankingEZBond = f.bond[i1];
            }
          }
        }
      }
      if (pseudoParitiesInGroup == 0)
        continue;
      if (pseudoParitiesInGroup == 1) {
        for (i2 = 0; i2 < f.atom.length; i2++)
          if (isFreshPseudoParityAtom[f.atom[i2]])
            this.mTHParity[f.atom[i2]] = 0;
        for (i = 0; i < f.bond.length; i++)
          if (isFreshPseudoParityBond[f.bond[i]])
            this.mEZParity[f.bond[i]] = 0;
      }
       else {
        if (pseudoParity1Or2InGroup == 1) {
          for (i2 = 0; i2 < f.atom.length; i2++)
            if (isFreshPseudoParityAtom[f.atom[i2]])
              this.mTHParity[f.atom[i2]] = 3;
          for (i = 0; i < f.bond.length; i++)
            if (isFreshPseudoParityBond[f.bond[i]])
              this.mEZParity[f.bond[i]] = 3;
        }
         else {
          if ((this.mMode & 128) != 0) {
            this.mNoOfPseudoGroups++;
            for (i2 = 0; i2 < f.atom.length; i2++)
              if (isFreshPseudoParityAtom[f.atom[i2]])
                this.mPseudoTHGroup[f.atom[i2]] = this.mNoOfPseudoGroups;
            for (i = 0; i < f.bond.length; i++)
              if (isFreshPseudoParityBond[f.bond[i]])
                this.mPseudoEZGroup[f.bond[i]] = this.mNoOfPseudoGroups;
          }
          invertFragmentsStereoFeatures = false;
          if (highTHAtomRank != -1) {
            if (this.mTHParity[highRankingTHAtom] == 2)
              invertFragmentsStereoFeatures = true;
          }
           else {
            if (this.mEZParity[highRankingEZBond] == 2)
              invertFragmentsStereoFeatures = true;
          }
          if (invertFragmentsStereoFeatures) {
            for (i2 = 0; i2 < f.atom.length; i2++) {
              if (isFreshPseudoParityAtom[f.atom[i2]]) {
                switch (this.mTHParity[f.atom[i2]]) {
                  case 1:
                    this.mTHParity[f.atom[i2]] = 2;
                    break;
                  case 2:
                    this.mTHParity[f.atom[i2]] = 1;
                    break;
                }
              }
            }
            for (i = 0; i < f.bond.length; i++) {
              if (isFreshPseudoParityBond[f.bond[i]]) {
                switch (this.mEZParity[f.bond[i]]) {
                  case 1:
                    this.mEZParity[f.bond[i]] = 2;
                    break;
                  case 2:
                    this.mEZParity[f.bond[i]] = 1;
                    break;
                }
              }
            }
          }
        }
      }
    }
  }
  return pseudoParity1Or2Found;
}
;
_.canGetESRGroupRank = function canGetESRGroupRank(groupMember){
  var atomRank, group, group0, groupRank, groupTypeIndex, i, maxAtomRank, maxGroup, memberCount, rank, rankCount;
  groupRank = initMultidimensionalArray(cggl.I_classLit, [{31:1, 4:1, 1:1, 8:1}, {6:1, 4:1, 1:1}], [6, 5], 15, [2, 32], 2);
  for (groupTypeIndex = 0; groupTypeIndex < 2; groupTypeIndex++) {
    atomRank = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, 32, 0, 2);
    rankCount = 0;
    for (group0 = 0; group0 < 32; group0++) {
      if (jsNotEquals(groupMember[groupTypeIndex][group0], null)) {
        memberCount = groupMember[groupTypeIndex][group0].length;
        atomRank[group0] = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, memberCount, 15, 1);
        for (i = 0; i < memberCount; i++)
          atomRank[group0][i] = this.mCanRank[groupMember[groupTypeIndex][group0][i]];
        ju.sort_3(atomRank[group0]);
        rankCount++;
      }
    }
    for (rank = rankCount; rank > 0; rank--) {
      maxGroup = 0;
      maxAtomRank = null;
      for (group = 0; group < 32; group++) {
        if (jsNotEquals(atomRank[group], null)) {
          if (jsEquals(maxAtomRank, null) || maxAtomRank.length < atomRank[group].length) {
            maxAtomRank = atomRank[group];
            maxGroup = group;
          }
           else if (maxAtomRank.length == atomRank[group].length) {
            for (i = maxAtomRank.length - 1; i >= 0; i--) {
              if (maxAtomRank[i] < atomRank[group][i]) {
                maxAtomRank = atomRank[group];
                maxGroup = group;
                break;
              }
            }
          }
        }
      }
      groupRank[groupTypeIndex][maxGroup] = rank;
      atomRank[maxGroup] = null;
    }
  }
  return groupRank;
}
;
_.canInitializeRanking = function canInitializeRanking(){
  var atom, atom0, atom1, atom2, atom3, atomList, atomListFound, baseValueSize, bond, bondQFList, bondQueryFeaturesPresent, bondRingSize, i, i0, i1, index_0, list, listLength, rank;
  bondQueryFeaturesPresent = false;
  if (this.mMol.isFragment_0()) {
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      if (this.mMol.getBondQueryFeatures_0(bond) != 0) {
        bondQueryFeaturesPresent = true;
        break;
      }
    }
  }
  this.mMaxConnAtoms = 2;
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++)
    this.mMaxConnAtoms = $wnd.Math.max(this.mMaxConnAtoms, this.mMol.getConnAtoms_0(atom0) + this.mMol.getMetalBondedConnAtoms_0(atom0));
  baseValueSize = $wnd.Math.max(2, bondQueryFeaturesPresent?narrow_int((62 + 16 + this.mMaxConnAtoms * (16 + 21)) / 63):narrow_int((62 + 16 + this.mMaxConnAtoms * (16 + 5)) / 63));
  this.mCanRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  this.mCanBase = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_CanonizerBaseValue_2_classLit, {4:1, 1:1, 8:1}, 68, this.mMol.getAtoms_0(), 0, 1);
  for (atom1 = 0; atom1 < this.mMol.getAtoms_0(); atom1++)
    setCheck(this.mCanBase, atom1, new carc.CanonizerBaseValue(baseValueSize));
  atomListFound = false;
  for (atom2 = 0; atom2 < this.mMol.getAtoms_0(); atom2++) {
    this.mCanBase[atom2].init_0(atom2);
    if ((this.mMol.getAtomQueryFeatures_0(atom2) & 1) != 0 || jsNotEquals(this.mMol.getAtomList_0(atom2), null))
      this.mCanBase[atom2].add_0(8, 6);
    else 
      this.mCanBase[atom2].add_0(8, fromInt_0(this.mMol.getAtomicNo_0(atom2)));
    this.mCanBase[atom2].add_0(8, fromInt_0(this.mMol.getAtomMass_0(atom2)));
    this.mCanBase[atom2].add_0(2, fromInt_0(this.mMol.getAtomPi_0(atom2)));
    this.mCanBase[atom2].add_0(4, fromInt_0(this.mMol.getConnAtoms_0(atom2) + this.mMol.getMetalBondedConnAtoms_0(atom2)));
    if ((this.mMol.getAtomQueryFeatures_0(atom2) & 1) != 0)
      this.mCanBase[atom2].add_0(4, 8);
    else 
      this.mCanBase[atom2].add_0(4, fromInt_0(8 + this.mMol.getAtomCharge_0(atom2)));
    this.mCanBase[atom2].add_0(5, fromInt_0($wnd.Math.min(31, this.mMol.getAtomRingSize_0(atom2))));
    this.mCanBase[atom2].add_0(4, fromInt_0(this.canCalcImplicitAbnormalValence(atom2) + 1));
    this.mCanBase[atom2].add_0(2, fromInt_0(this.mMol.getAtomRadical_0(atom2) >> 4));
    if (this.mMol.isFragment_0()) {
      this.mCanBase[atom2].add_0(30, fromInt_0(this.mMol.getAtomQueryFeatures_0(atom2)));
      if (jsNotEquals(this.mMol.getAtomList_0(atom2), null))
        atomListFound = true;
    }
  }
  this.mNoOfRanks = this.canPerformRanking();
  if (this.mNoOfRanks < this.mMol.getAtoms_0()) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
      bondRingSize = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getConnAtoms_0(atom), 15, 1);
      for (i0 = 0; i0 < this.mMol.getConnAtoms_0(atom); i0++) {
        bondRingSize[i0] = this.mCanRank[this.mMol.getConnAtom_0(atom, i0)] << 5;
        bondRingSize[i0] |= $wnd.Math.min(31, this.mMol.getBondRingSize_0(this.mMol.getConnBond_0(atom, i0)));
      }
      ju.sort_3(bondRingSize);
      for (i1 = this.mMaxConnAtoms; i1 > bondRingSize.length; i1--)
        this.mCanBase[atom].add_0(16 + 5, 0);
      for (i = bondRingSize.length - 1; i >= 0; i--)
        this.mCanBase[atom].add_0(16 + 5, fromInt_0(bondRingSize[i]));
    }
    this.mNoOfRanks = this.canPerformRanking();
  }
  if (atomListFound && this.mNoOfRanks < this.mMol.getAtoms_0()) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
      atomList = this.mMol.getAtomList_0(atom);
      listLength = jsEquals(atomList, null)?0:$wnd.Math.min(12, atomList.length);
      for (i0 = 12; i0 > listLength; i0--)
        this.mCanBase[atom].add_0(8, 0);
      for (i = listLength - 1; i >= 0; i--)
        this.mCanBase[atom].add_0(8, fromInt_0(atomList[i]));
    }
    this.mNoOfRanks = this.canPerformRanking();
  }
  if (bondQueryFeaturesPresent && this.mNoOfRanks < this.mMol.getAtoms_0()) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
      bondQFList = initUnidimensionalArray(cggl.J_classLit, {4:1, 1:1}, 5, this.mMol.getConnAtoms_0(atom) + this.mMol.getMetalBondedConnAtoms_0(atom), 14, 1);
      index_0 = 0;
      for (i0 = 0; i0 < this.mMol.getAllConnAtomsPlusMetalBonds_0(atom); i0++) {
        if (i0 < this.mMol.getConnAtoms_0(atom) || i0 >= this.mMol.getAllConnAtoms_0(atom)) {
          bondQFList[index_0] = fromInt_0(this.mCanRank[this.mMol.getConnAtom_0(atom, i0)]);
          bondQFList[index_0] = shl_0(bondQFList[index_0], 21);
          bondQFList[index_0] = or_0(bondQFList[index_0], fromInt_0(this.mMol.getBondQueryFeatures_0(this.mMol.getConnBond_0(atom, i0))));
          index_0++;
        }
      }
      ju.sort_4(bondQFList);
      for (i1 = this.mMaxConnAtoms; i1 > bondQFList.length; i1--)
        this.mCanBase[atom].add_0(16 + 21, 0);
      for (i = bondQFList.length - 1; i >= 0; i--)
        this.mCanBase[atom].add_0(16 + 21, bondQFList[i]);
    }
    this.mNoOfRanks = this.canPerformRanking();
  }
  if ((this.mMode & 8) != 0 && this.mNoOfRanks < this.mMol.getAtoms_0()) {
    list = new carc.SortedStringList;
    for (atom3 = 0; atom3 < this.mMol.getAtoms_0(); atom3++)
      if (jsNotEquals(this.mMol.getAtomCustomLabel_0(atom3), null))
        list.addString(this.mMol.getAtomCustomLabel_0(atom3));
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      rank = jsEquals(this.mMol.getAtomCustomLabel_0(atom), null)?0:1 + list.getListIndex(this.mMol.getAtomCustomLabel_0(atom));
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
      this.mCanBase[atom].add_0(16, fromInt_0(rank));
    }
    this.mNoOfRanks = this.canPerformRanking();
  }
  if ((this.mMode & 16) != 0 && this.mNoOfRanks < this.mMol.getAtoms_0()) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
      this.mCanBase[atom].add_0(1, fromInt_0(this.mMol.isSelectedAtom_0(atom)?1:0));
    }
    this.mNoOfRanks = this.canPerformRanking();
  }
}
;
_.canMarkESRGroupsForParityNormalization = function canMarkESRGroupsForParityNormalization(){
  var atom, atom0, atom1, atomList, count, groupBase, groupID, i, nextGroupBase, parity;
  count = 0;
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++)
    if (this.mTHESRType[atom0] != 0 && (this.mTHESRType[atom0] != 2 || (this.mMode & 256) == 0))
      count++;
  if (count == 0)
    return;
  parity = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, count, 15, 1);
  count = 0;
  for (atom1 = 0; atom1 < this.mMol.getAtoms_0(); atom1++) {
    if (this.mTHESRType[atom1] != 0 && (this.mTHESRType[atom1] != 2 || (this.mMode & 256) == 0)) {
      parity[count] = this.mTHESRType[atom1] << 29 | this.mTHESRGroup[atom1] << 24 | this.mCanRank[atom1] << 12 | atom1;
      count++;
    }
  }
  ju.sort_3(parity);
  groupBase = 0;
  nextGroupBase = 0;
  groupID = parity[0] & -16777216;
  while (true) {
    nextGroupBase++;
    if (nextGroupBase == parity.length || groupID != (parity[nextGroupBase] & -16777216)) {
      atomList = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, nextGroupBase - groupBase, 15, 1);
      for (i = groupBase; i < nextGroupBase; i++) {
        atom = parity[i] & 4095;
        atomList[i - groupBase] = atom;
        this.mTHParityNeedsNormalization[atom] = true;
      }
      this.mTHParityNormalizationGroupList.add(atomList);
      if (nextGroupBase == parity.length)
        break;
      groupID = parity[nextGroupBase] & -16777216;
      groupBase = nextGroupBase;
    }
  }
}
;
_.canNormalizeGroupParities = function canNormalizeGroupParities(){
  var allParitiesDetermined, atom, groupAtom, groupNormalized, i, invertParities, isUniqueRank, j, j0, k, maxRank;
  groupNormalized = false;
  for (i = 0; i < this.mTHParityNormalizationGroupList.size(); i++) {
    groupAtom = castTo(this.mTHParityNormalizationGroupList.getAtIndex(i), 6);
    allParitiesDetermined = true;
    maxRank = -1;
    invertParities = false;
    for (j0 = 0; j0 < groupAtom.length; j0++) {
      atom = groupAtom[j0];
      if (this.mTHParity[atom] == 0) {
        allParitiesDetermined = false;
        break;
      }
      if (this.mTHParity[atom] != 3) {
        isUniqueRank = true;
        for (k = 0; k < groupAtom.length; k++) {
          if (k != j0 && this.mCanRank[atom] == this.mCanRank[groupAtom[k]]) {
            isUniqueRank = false;
            break;
          }
        }
        if (isUniqueRank && maxRank < this.mCanRank[atom]) {
          maxRank = this.mCanRank[atom];
          invertParities = this.mTHParity[atom] == 1;
        }
      }
    }
    if (allParitiesDetermined && maxRank != -1) {
      for (j = 0; j < groupAtom.length; j++) {
        atom = groupAtom[j];
        if (invertParities) {
          if (this.mTHParity[atom] == 1)
            this.mTHParity[atom] = 2;
          else if (this.mTHParity[atom] == 2)
            this.mTHParity[atom] = 1;
        }
        this.mTHParityNeedsNormalization[atom] = false;
      }
      this.mTHParityNormalizationGroupList.remove(groupAtom);
      groupNormalized = true;
      i--;
    }
  }
  return groupNormalized;
}
;
_.canPerformRanking = function canPerformRanking(){
  var newNoOfRanks, oldNoOfRanks;
  newNoOfRanks = this.canConsolidate();
  do {
    oldNoOfRanks = newNoOfRanks;
    this.canCalcNextBaseValues();
    newNoOfRanks = this.canConsolidate();
  }
   while (oldNoOfRanks != newNoOfRanks);
  return newNoOfRanks;
}
;
_.canRankFinal = function canRankFinal(){
  var atom, atom0, atom1, bond, proParities, rank, rankCount;
  this.mProTHAtomsInSameFragment = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  this.mProEZAtomsInSameFragment = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  if ((this.mMode & 6) != 0) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16 + 12, fromInt_0(this.mCanRank[atom] << 12));
    }
  }
  if (this.mNoOfRanks < this.mMol.getAtoms_0()) {
    proParities = 0;
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
      if (this.canCalcTHParity(atom, true))
        proParities++;
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
      if (this.canCalcEZParity(bond, true))
        proParities++;
  }
  if ((this.mMode & 6) != 0) {
    this.mNoOfRanks = this.canPerformRanking();
  }
  if ((this.mMode & 1) != 0) {
    this.mCanRankBeforeTieBreaking = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
      this.mCanRankBeforeTieBreaking[atom] = this.mCanRank[atom];
  }
  while (this.mNoOfRanks < this.mMol.getAtoms_0()) {
    for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++) {
      this.mCanBase[atom0].init_0(atom0);
      this.mCanBase[atom0].add_0(16 + 1, fromInt_0(2 * this.mCanRank[atom0]));
    }
    rankCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mNoOfRanks + 1, 15, 1);
    for (atom1 = 0; atom1 < this.mMol.getAtoms_0(); atom1++)
      rankCount[this.mCanRank[atom1]]++;
    rank = 1;
    while (rankCount[rank] == 1)
      rank++;
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      if (this.mCanRank[atom] == rank) {
        this.mCanBase[atom].add_1(1);
        break;
      }
    }
    this.mNoOfRanks = this.canPerformRanking();
    this.canNormalizeGroupParities();
    if (isNotNull(this.mMesoHelper))
      this.mMesoHelper.normalizeESRGroupSwappingAndRemoval(this.mCanRank);
  }
  this.canNormalizeGroupParities();
  this.canFindPseudoParities();
  this.flagStereoProblems();
}
;
_.canRankStereo = function canRankStereo(){
  var atom, atom0, atom1, bond, canRankWithoutStereo, noOfRanksWithoutStereo;
  noOfRanksWithoutStereo = this.mNoOfRanks;
  canRankWithoutStereo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++)
    canRankWithoutStereo[atom0] = this.mCanRank[atom0];
  if (!this.mMol.isFragment_0()) {
    this.canRecursivelyFindCIPParities();
    this.initializeParities(noOfRanksWithoutStereo, canRankWithoutStereo);
  }
  this.mTHESRType = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  this.mTHESRGroup = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  for (atom1 = 0; atom1 < this.mMol.getAtoms_0(); atom1++) {
    this.mTHESRType[atom1] = narrow_byte(this.mMol.getAtomESRType_0(atom1));
    this.mTHESRGroup[atom1] = narrow_byte(this.mMol.getAtomESRGroup_0(atom1));
  }
  this.mEZESRType = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  this.mEZESRGroup = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    this.mEZESRType[bond] = narrow_byte(this.mMol.getBondESRType_0(bond));
    this.mEZESRGroup[bond] = narrow_byte(this.mMol.getBondESRGroup_0(bond));
  }
  this.canRecursivelyFindAllParities();
  this.mStereoCentersFound = false;
  this.mIsStereoCenter = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mTHParity[atom] != 0) {
      this.mIsStereoCenter[atom] = true;
      this.mStereoCentersFound = true;
    }
  }
  this.canRemoveOverspecifiedESRGroups();
  this.mMesoHelper = null;
  this.mTHESRTypeNeedsNormalization = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  if (this.mStereoCentersFound) {
    this.mMesoHelper = new carc.CanonizerMesoHelper(this.mMol, canRankWithoutStereo, this.mIsStereoCenter, this.mTHParity, this.mEZParity, this.mTHESRType, this.mTHESRGroup, this.mEZESRType, this.mEZESRGroup, this.mTHParityRoundIsOdd, this.mEZParityRoundIsOdd, this.mTHESRTypeNeedsNormalization);
    this.mMesoHelper.normalizeESRGroups();
  }
  this.mTHParityNeedsNormalization = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  this.mTHParityNormalizationGroupList = new ju.ArrayList;
  this.canMarkESRGroupsForParityNormalization();
  this.initializeParities(noOfRanksWithoutStereo, canRankWithoutStereo);
  this.canRecursivelyFindCanonizedParities();
  if (isNotNull(this.mMesoHelper))
    this.mIsMeso = this.mMesoHelper.isMeso();
  this.determineChirality(canRankWithoutStereo);
}
;
_.canRecursivelyFindAllParities = function canRecursivelyFindAllParities(){
  var atom, bond, ezParityInfo, newNoOfRanks, paritiesFound, parityInfoBits, thParityInfo;
  this.mIsOddParityRound = true;
  paritiesFound = this.canFindParities(false);
  parityInfoBits = 2 + 2 + 5;
  while (this.mNoOfRanks < this.mMol.getAtoms_0() && paritiesFound) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
      thParityInfo = this.mTHParity[atom] << 2 + 5;
      if ((this.mTHParity[atom] == 1 || this.mTHParity[atom] == 2) && this.mTHESRType[atom] != 0) {
        thParityInfo |= this.mTHESRType[atom] << 5;
        thParityInfo |= this.mTHESRGroup[atom];
      }
      this.mCanBase[atom].add_0(2 * 9, fromInt_0(thParityInfo << 9));
    }
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      ezParityInfo = this.mEZParity[bond] << 2 + 5;
      if ((this.mEZParity[bond] == 1 || this.mEZParity[bond] == 2) && this.mMol.getBondType_0(bond) == 1 && this.mEZESRType[bond] != 0) {
        ezParityInfo |= this.mEZESRType[bond] << 5;
        ezParityInfo |= this.mEZESRGroup[bond];
      }
      this.mCanBase[this.mMol.getBondAtom_0(0, bond)].add_1(fromInt_0(ezParityInfo));
      this.mCanBase[this.mMol.getBondAtom_0(1, bond)].add_1(fromInt_0(ezParityInfo));
    }
    newNoOfRanks = this.canPerformRanking();
    if (this.mNoOfRanks == newNoOfRanks)
      break;
    this.mNoOfRanks = newNoOfRanks;
    paritiesFound = this.canFindParities(false);
  }
}
;
_.canRecursivelyFindCIPParities = function canRecursivelyFindCIPParities(){
  var atom, bond, newNoOfRanks, paritiesFound;
  this.mIsOddParityRound = true;
  this.mTHCIPParity = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  this.mEZCIPParity = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  paritiesFound = this.canFindParities(true);
  while (this.mNoOfRanks < this.mMol.getAtoms_0() && paritiesFound) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16 + 4, fromInt_0(this.mCanRank[atom] << 4 | this.mTHParity[atom] << 2));
    }
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      this.mCanBase[this.mMol.getBondAtom_0(0, bond)].add_1(fromInt_0(this.mEZParity[bond]));
      this.mCanBase[this.mMol.getBondAtom_0(1, bond)].add_1(fromInt_0(this.mEZParity[bond]));
    }
    newNoOfRanks = this.canPerformRanking();
    if (this.mNoOfRanks == newNoOfRanks)
      break;
    this.mNoOfRanks = newNoOfRanks;
    paritiesFound = this.canFindParities(true);
  }
}
;
_.canRecursivelyFindCanonizedParities = function canRecursivelyFindCanonizedParities(){
  var atom, bond, esrGroupMember, groupRank, newNoOfRanks, newStereoInfoAvailable;
  this.mIsOddParityRound = true;
  esrGroupMember = this.compileESRGroupMembers();
  if (isNotNull(this.mMesoHelper) && this.mMesoHelper.normalizeESRGroupSwappingAndRemoval(this.mCanRank))
    esrGroupMember = this.compileESRGroupMembers();
  if (this.canFindParities(false))
    this.canNormalizeGroupParities();
  newStereoInfoAvailable = true;
  while (this.mNoOfRanks < this.mMol.getAtoms_0() && newStereoInfoAvailable) {
    groupRank = this.canGetESRGroupRank(esrGroupMember);
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      this.mCanBase[atom].init_0(atom);
      this.mCanBase[atom].add_0(16, fromInt_0(this.mCanRank[atom]));
      this.mCanBase[atom].add_0(20, 0);
      if (!this.mTHESRTypeNeedsNormalization[atom] && this.mTHESRType[atom] != 0)
        this.mCanBase[atom].add_1(fromInt_0((this.mTHESRType[atom] << 18) + (groupRank[this.mTHESRType[atom] == 1?0:1][this.mTHESRGroup[atom]] << 8)));
      this.mCanBase[atom].add_1(fromInt_0(this.mTHParity[atom] << 4));
    }
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      this.mCanBase[this.mMol.getBondAtom_0(0, bond)].add_1(fromInt_0(this.mEZParity[bond]));
      this.mCanBase[this.mMol.getBondAtom_0(1, bond)].add_1(fromInt_0(this.mEZParity[bond]));
    }
    newNoOfRanks = this.canPerformRanking();
    if (this.mNoOfRanks == newNoOfRanks)
      break;
    this.mNoOfRanks = newNoOfRanks;
    newStereoInfoAvailable = false;
    if (isNotNull(this.mMesoHelper) && this.mMesoHelper.normalizeESRGroupSwappingAndRemoval(this.mCanRank)) {
      newStereoInfoAvailable = true;
      esrGroupMember = this.compileESRGroupMembers();
    }
    if (this.canFindParities(false)) {
      newStereoInfoAvailable = true;
      this.canNormalizeGroupParities();
    }
  }
}
;
_.canRemoveOverspecifiedESRGroups = function canRemoveOverspecifiedESRGroups(){
  var atom, bond;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
    if (!this.mIsStereoCenter[atom] || this.mTHParity[atom] == 3)
      this.mTHESRType[atom] = 0;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
    if (this.mMol.getBondType_0(bond) != 1 || this.mEZParity[bond] == 0 || this.mEZParity[bond] == 3)
      this.mEZESRType[bond] = 0;
}
;
_.canSetAbnormalValence = function canSetAbnormalValence(atom, valence){
  if (jsEquals(this.mAbnormalValence, null)) {
    this.mAbnormalValence = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
    ju.fill(this.mAbnormalValence, narrow_byte(-1));
  }
  this.mAbnormalValence[atom] = narrow_byte(valence);
}
;
_.cipCalcEZParity = function cipCalcEZParity(bond){
  var bondAtom, connAtom, count, e, i, invertedOrder, j;
  if ((this.mEZParity[bond] == 1 || this.mEZParity[bond] == 2) && !this.mMol.isSmallRingBond_0(bond)) {
    invertedOrder = false;
    try {
      for (i = 0; i < 2; i++) {
        bondAtom = this.mMol.getBondAtom_0(i, bond);
        if (this.mMol.getConnAtoms_0(bondAtom) == 3) {
          connAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
          count = 0;
          for (j = 0; j < this.mMol.getConnAtoms_0(bondAtom); j++)
            if (this.mMol.getConnBond_0(bondAtom, j) != bond)
              connAtom[count++] = this.mMol.getConnAtom_0(bondAtom, j);
          if (this.mCanRank[connAtom[0]] > this.mCanRank[connAtom[1]] ^ this.cipComparePriority(bondAtom, connAtom[0], connAtom[1]))
            invertedOrder = !invertedOrder;
        }
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        this.mEZCIPParity[bond] = 3;
        return;
      }
       else 
        throw toJs($e0);
    }
    if (this.mEZParity[bond] == 1 ^ invertedOrder)
      this.mEZCIPParity[bond] = 1;
    else 
      this.mEZCIPParity[bond] = 2;
  }
}
;
_.cipCalcTHParity = function cipCalcTHParity(atom){
  var alleneAtom, cipConnAtom, connAtom, count, e, i, invertedOrder, j;
  if (this.mTHParity[atom] == 1 || this.mTHParity[atom] == 2) {
    invertedOrder = false;
    if (this.mMol.getAtomPi_0(atom) == 2) {
      try {
        for (i = 0; i < 2; i++) {
          alleneAtom = this.mMol.getConnAtom_0(atom, i);
          if (this.mMol.getConnAtoms_0(alleneAtom) == 3) {
            connAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
            count = 0;
            for (j = 0; j < this.mMol.getConnAtoms_0(alleneAtom); j++)
              if (this.mMol.getConnBondOrder_0(alleneAtom, j) == 1)
                connAtom[count++] = this.mMol.getConnAtom_0(alleneAtom, j);
            if (this.mCanRank[connAtom[0]] > this.mCanRank[connAtom[1]] ^ this.cipComparePriority(alleneAtom, connAtom[0], connAtom[1]))
              invertedOrder = !invertedOrder;
          }
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 11)) {
          e = $e0;
          this.mTHCIPParity[atom] = 3;
          return;
        }
         else 
          throw toJs($e0);
      }
    }
     else {
      try {
        cipConnAtom = this.cipGetOrderedConns(atom);
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (instanceOf($e1, 11)) {
          e = $e1;
          this.mTHCIPParity[atom] = 3;
          return;
        }
         else 
          throw toJs($e1);
      }
      for (i = 1; i < cipConnAtom.length; i++)
        for (j = 0; j < i; j++)
          if (this.mCanRank[cipConnAtom[i]] < this.mCanRank[cipConnAtom[j]])
            invertedOrder = !invertedOrder;
    }
    if (this.mTHParity[atom] == 1 ^ invertedOrder)
      this.mTHCIPParity[atom] = 1;
    else 
      this.mTHCIPParity[atom] = 2;
  }
}
;
_.cipComparePriority = function cipComparePriority(rootAtom, atom1, atom2){
  var atom, atom0, atom3, atomInParentChain, atomUsed, bond, candidate, cipRank, current, currentAtom, currentLevel, delocalizedBondCount, delocalizedMeanAtomicNo, ezDataFound, graphAtom, graphIsPseudo, graphParent, graphRank, graphSize, highest, i, i0, isotopDataFound, j, levelStart, mass1, mass2, parent_0, parentGraphIndex, rsDataFound;
  if (this.mMol.getAtomicNo_0(atom1) != this.mMol.getAtomicNo_0(atom2))
    return this.mMol.getAtomicNo_0(atom1) > this.mMol.getAtomicNo_0(atom2);
  if (this.mMol.getAtomMass_0(atom1) != this.mMol.getAtomMass_0(atom2)) {
    mass1 = this.mMol.isNaturalAbundance_0(atom1)?(carc.$clinit_Molecule() , carc.cRoundedMass)[this.mMol.getAtomicNo_0(atom1)]:this.mMol.getAtomMass_0(atom1);
    mass2 = this.mMol.isNaturalAbundance_0(atom2)?(carc.$clinit_Molecule() , carc.cRoundedMass)[this.mMol.getAtomicNo_0(atom2)]:this.mMol.getAtomMass_0(atom2);
    return mass1 > mass2;
  }
  graphSize = this.mMol.getAtoms_0();
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, graphSize, 15, 1);
  graphParent = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, graphSize, 15, 1);
  graphRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, graphSize, 15, 1);
  graphIsPseudo = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, graphSize, 16, 1);
  atomUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 16, 1);
  graphAtom[0] = rootAtom;
  graphAtom[1] = atom1;
  graphAtom[2] = atom2;
  graphParent[0] = -1;
  graphParent[1] = 0;
  graphParent[2] = 0;
  atomUsed[rootAtom] = true;
  atomUsed[atom1] = true;
  atomUsed[atom2] = true;
  current = 1;
  highest = 2;
  levelStart = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 64, 15, 1);
  levelStart[1] = 1;
  levelStart[2] = 3;
  currentLevel = 2;
  while (current <= highest) {
    while (current < levelStart[currentLevel]) {
      currentAtom = graphAtom[current];
      if (!graphIsPseudo[current]) {
        delocalizedBondCount = 0;
        delocalizedMeanAtomicNo = 0;
        for (i0 = 0; i0 < this.mMol.getConnAtoms_0(currentAtom); i0++) {
          candidate = this.mMol.getConnAtom_0(currentAtom, i0);
          if (highest + this.mMol.getConnBondOrder_0(currentAtom, i0) + 1 >= graphSize) {
            graphSize += this.mMol.getAtoms_0();
            graphAtom = this.resize(graphAtom, graphSize);
            graphParent = this.resize(graphParent, graphSize);
            graphRank = this.resize(graphRank, graphSize);
            graphIsPseudo = this.resize_0(graphIsPseudo, graphSize);
          }
          if (this.mMol.isDelocalizedBond_0(this.mMol.getConnBond_0(currentAtom, i0))) {
            delocalizedBondCount++;
            delocalizedMeanAtomicNo += this.mMol.getAtomicNo_0(candidate);
          }
           else {
            for (j = 1; j < this.mMol.getConnBondOrder_0(currentAtom, i0); j++) {
              highest++;
              graphAtom[highest] = candidate;
              graphParent[highest] = current;
              graphIsPseudo[highest] = true;
            }
          }
          parentGraphIndex = graphParent[current];
          if (candidate == graphAtom[parentGraphIndex])
            continue;
          atomInParentChain = false;
          if (atomUsed[candidate]) {
            parent_0 = graphParent[parentGraphIndex];
            while (parent_0 != -1) {
              if (candidate == graphAtom[parent_0]) {
                atomInParentChain = true;
                break;
              }
              parent_0 = graphParent[parent_0];
            }
          }
          if (atomInParentChain) {
            highest++;
            graphAtom[highest] = candidate;
            graphParent[highest] = current;
            graphIsPseudo[highest] = true;
          }
           else {
            highest++;
            graphAtom[highest] = candidate;
            graphParent[highest] = current;
            atomUsed[candidate] = true;
          }
        }
        if (delocalizedBondCount != 0) {
          highest++;
          graphRank[highest] = narrow_int((delocalizedMeanAtomicNo << 2) / delocalizedBondCount);
          graphParent[highest] = current;
          graphIsPseudo[highest] = true;
        }
      }
      current++;
      if (current == 10000) {
        throw toJs(new jl.Exception_1('Emergency break in while loop.'));
      }
    }
    if (levelStart.length == currentLevel + 1)
      levelStart = this.resize(levelStart, levelStart.length + 64);
    levelStart[currentLevel + 1] = highest + 1;
    for (i = levelStart[currentLevel]; i < levelStart[currentLevel + 1]; i++) {
      if (graphRank[i] == 0)
        graphRank[i] = (this.mMol.getAtomicNo_0(graphAtom[i]) == 151?1:this.mMol.getAtomicNo_0(graphAtom[i]) == 152?1:this.mMol.getAtomicNo_0(graphAtom[i])) << 2;
      graphRank[i] += graphRank[graphParent[i]] << 16;
    }
    this.cipUpdateParentRanking(graphIsPseudo, graphRank, graphParent, graphAtom, levelStart, currentLevel);
    if (graphRank[1] != graphRank[2])
      return graphRank[1] > graphRank[2];
    if (currentLevel > 1)
      this.cipCompileRelativeRanks(graphRank, graphParent, levelStart, currentLevel);
    currentLevel++;
  }
  cipRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  isotopDataFound = false;
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++) {
    if (atomUsed[atom0] && !this.mMol.isNaturalAbundance_0(atom0)) {
      isotopDataFound = true;
      break;
    }
  }
  if (isotopDataFound) {
    for (atom3 = 0; atom3 < this.mMol.getAtoms_0(); atom3++)
      cipRank[atom3] = this.mMol.isNaturalAbundance_0(atom3)?(carc.$clinit_Molecule() , carc.cRoundedMass)[this.mMol.getAtomicNo_0(atom3)]:this.mMol.getAtomMass_0(atom3);
    if (this.cipTryDistinguishBranches(graphIsPseudo, graphRank, graphParent, graphAtom, cipRank, levelStart, currentLevel))
      return graphRank[1] > graphRank[2];
  }
  ju.fill_0(cipRank, 0);
  ezDataFound = false;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (atomUsed[this.mMol.getBondAtom_0(0, bond)] || atomUsed[this.mMol.getBondAtom_0(1, bond)]) {
      if (this.mEZCIPParity[bond] == 1) {
        cipRank[this.mMol.getBondAtom_0(0, bond)] = 1;
        cipRank[this.mMol.getBondAtom_0(1, bond)] = 1;
        ezDataFound = true;
      }
       else if (this.mEZCIPParity[bond] == 2) {
        cipRank[this.mMol.getBondAtom_0(0, bond)] = 2;
        cipRank[this.mMol.getBondAtom_0(1, bond)] = 2;
        ezDataFound = true;
      }
    }
  }
  if (ezDataFound && this.cipTryDistinguishBranches(graphIsPseudo, graphRank, graphParent, graphAtom, cipRank, levelStart, currentLevel))
    return graphRank[1] > graphRank[2];
  ju.fill_0(cipRank, 0);
  rsDataFound = false;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (atomUsed[atom]) {
      if (this.mTHCIPParity[atom] == 2) {
        cipRank[atom] = 1;
        rsDataFound = true;
      }
       else if (this.mTHCIPParity[atom] == 1) {
        cipRank[atom] = 2;
        rsDataFound = true;
      }
    }
  }
  if (rsDataFound && this.cipTryDistinguishBranches(graphIsPseudo, graphRank, graphParent, graphAtom, cipRank, levelStart, currentLevel))
    return graphRank[1] > graphRank[2];
  this.mCIPParityNoDistinctionProblem = true;
  throw toJs(new jl.Exception_1('no distinction applying CIP rules'));
}
;
_.cipCompileRelativeRanks = function cipCompileRelativeRanks(graphRank, graphParent, levelStart, currentLevel){
  var comparator, consolidatedRank, count, i, i0, i1, level, levelOffset, rankObject;
  levelOffset = levelStart[currentLevel];
  count = levelStart[currentLevel + 1] - levelOffset;
  rankObject = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_Canonizer$2RankObject_2_classLit, {4:1, 1:1, 8:1}, 78, count, 0, 1);
  for (i0 = 0; i0 < count; i0++) {
    setCheck(rankObject, i0, new carc.Canonizer$2RankObject(this));
    rankObject[i0].rank = graphRank[i0 + levelOffset];
    rankObject[i0].parent_0 = graphParent[i0 + levelOffset];
    rankObject[i0].index_0 = i0 + levelOffset;
  }
  comparator = new carc.Canonizer$2(this);
  for (level = currentLevel; level > 1; level--) {
    for (i1 = 0; i1 < count; i1++) {
      rankObject[i1].rank += graphRank[rankObject[i1].parent_0] << 16;
      rankObject[i1].parent_0 = graphParent[rankObject[i1].parent_0];
    }
    ju.sort_7(rankObject, comparator);
    consolidatedRank = 1;
    for (i = 0; i < count; i++) {
      graphRank[rankObject[i].index_0] = consolidatedRank;
      if (i != count - 1 && comparator.compare_0(rankObject[i], rankObject[i + 1]) != 0)
        consolidatedRank++;
    }
  }
}
;
_.cipGetOrderedConns = function cipGetOrderedConns(atom){
  var found, i, i0, j, noOfConns, orderedConn, temp;
  noOfConns = this.mMol.getAllConnAtoms_0(atom);
  orderedConn = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, noOfConns, 15, 1);
  for (i0 = 0; i0 < noOfConns; i0++)
    orderedConn[i0] = this.mMol.getConnAtom_0(atom, i0);
  for (i = noOfConns; i > 1; i--) {
    found = false;
    for (j = 1; j < i; j++) {
      if (this.cipComparePriority(atom, orderedConn[j - 1], orderedConn[j])) {
        found = true;
        temp = orderedConn[j - 1];
        orderedConn[j - 1] = orderedConn[j];
        orderedConn[j] = temp;
      }
    }
    if (!found)
      break;
  }
  return orderedConn;
}
;
_.cipTryDistinguishBranches = function cipTryDistinguishBranches(graphIsPseudo, graphRank, graphParent, graphAtom, cipRank, levelStart, currentLevel){
  var i, level;
  for (level = 1; level < currentLevel; level++) {
    for (i = levelStart[level]; i < levelStart[level + 1]; i++)
      graphRank[i] = cipRank[graphAtom[i]] + (graphRank[graphParent[i]] << 8);
    this.cipUpdateParentRanking(graphIsPseudo, graphRank, graphParent, graphAtom, levelStart, level);
    if (graphRank[1] != graphRank[2])
      return true;
    if (level > 1)
      this.cipCompileRelativeRanks(graphRank, graphParent, levelStart, level);
  }
  return false;
}
;
_.cipUpdateParentRanking = function cipUpdateParentRanking(graphIsPseudo, graphRank, graphParent, graphAtom, levelStart, currentLevel){
  var baseIndex, comparator, consolidatedRank, i, level, nextBaseIndex, parent_0, parent0, parentCount, parentIndex, rankObject;
  for (level = currentLevel; level > 1; level--) {
    parentCount = levelStart[level] - levelStart[level - 1];
    rankObject = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_Canonizer$1RankObject_2_classLit, {4:1, 1:1, 8:1}, 77, parentCount, 0, 1);
    baseIndex = levelStart[level];
    for (parent0 = 0; parent0 < parentCount; parent0++) {
      parentIndex = levelStart[level - 1] + parent0;
      nextBaseIndex = baseIndex;
      while (nextBaseIndex < levelStart[level + 1] && graphParent[nextBaseIndex] == parentIndex)
        nextBaseIndex++;
      setCheck(rankObject, parent0, new carc.Canonizer$1RankObject(this));
      rankObject[parent0].parentIndex = parentIndex;
      rankObject[parent0].parentRank = graphRank[parentIndex];
      rankObject[parent0].parentHCount = graphIsPseudo[parentIndex]?0:this.mMol.getAllHydrogens_0(graphAtom[parentIndex]);
      rankObject[parent0].childRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, nextBaseIndex - baseIndex, 15, 1);
      for (i = baseIndex; i < nextBaseIndex; i++)
        rankObject[parent0].childRank[i - baseIndex] = graphRank[i];
      ju.sort_3(rankObject[parent0].childRank);
      baseIndex = nextBaseIndex;
    }
    comparator = new carc.Canonizer$1(this);
    ju.sort_7(rankObject, comparator);
    consolidatedRank = 1;
    for (parent_0 = 0; parent_0 < parentCount; parent_0++) {
      graphRank[rankObject[parent_0].parentIndex] = consolidatedRank;
      if (parent_0 != parentCount - 1 && comparator.compare_0(rankObject[parent_0], rankObject[parent_0 + 1]) != 0)
        consolidatedRank++;
    }
  }
}
;
_.compileESRGroupMembers = function compileESRGroupMembers(){
  var atom, esrGroupMember;
  esrGroupMember = initMultidimensionalArray(cggl.I_classLit, [{4:1, 1:1, 8:1}, {31:1, 4:1, 1:1, 8:1}], [31, 6], 0, [2, 32], 2);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mIsStereoCenter[atom]) {
      if (this.mTHESRType[atom] == 1)
        esrGroupMember[0][this.mTHESRGroup[atom]] = carc.addToIntArray(esrGroupMember[0][this.mTHESRGroup[atom]], atom);
      else if (this.mTHESRType[atom] == 2)
        esrGroupMember[1][this.mTHESRGroup[atom]] = carc.addToIntArray(esrGroupMember[0][this.mTHESRGroup[atom]], atom);
    }
  }
  return esrGroupMember;
}
;
_.determineChirality = function determineChirality(canRankWithoutStereo){
  var andGroupUsed, atom, bond, group, stereoCenters, stereoCentersTypeAbs, stereoCentersTypeAbsInMesoFragment, stereoCentersTypeAndGroup0, stereoCentersTypeOrGroup0, stereoCentersUnknown, typeAndGroups, typeAndInMesoFragmentFound;
  stereoCenters = 0;
  stereoCentersUnknown = 0;
  stereoCentersTypeAbs = 0;
  stereoCentersTypeAbsInMesoFragment = 0;
  stereoCentersTypeAndGroup0 = 0;
  stereoCentersTypeOrGroup0 = 0;
  typeAndGroups = 0;
  typeAndInMesoFragmentFound = false;
  andGroupUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 32, 16, 1);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mTHParity[atom] != 0) {
      stereoCenters++;
      if (this.mTHParity[atom] == 3) {
        stereoCentersUnknown++;
      }
       else {
        if (this.mTHESRType[atom] == 0) {
          stereoCentersTypeAbs++;
          if (isNotNull(this.mMesoHelper) && this.mMesoHelper.isInMesoFragment(atom))
            stereoCentersTypeAbsInMesoFragment++;
        }
         else if (this.mTHESRType[atom] == 2) {
          if (this.mTHESRGroup[atom] == 0)
            stereoCentersTypeOrGroup0++;
        }
         else if (this.mTHESRType[atom] == 1) {
          group = this.mTHESRGroup[atom];
          if (!andGroupUsed[group]) {
            typeAndGroups++;
            andGroupUsed[group] = true;
          }
          if (this.mTHESRGroup[atom] == 0)
            stereoCentersTypeAndGroup0++;
          if (isNotNull(this.mMesoHelper) && this.mMesoHelper.isInMesoFragment(atom))
            typeAndInMesoFragmentFound = true;
        }
      }
    }
  }
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mEZParity[bond] != 0 && this.mMol.getBondType_0(bond) == 1) {
      stereoCenters++;
      if (this.mEZParity[bond] == 3) {
        stereoCentersUnknown++;
      }
       else {
        if (this.mEZESRType[bond] == 0) {
          stereoCentersTypeAbs++;
          if (isNotNull(this.mMesoHelper) && this.mMesoHelper.isInMesoFragment(this.mMol.getBondAtom_0(0, bond)) && this.mMesoHelper.isInMesoFragment(this.mMol.getBondAtom_0(1, bond)))
            stereoCentersTypeAbsInMesoFragment++;
        }
         else if (this.mEZESRType[bond] == 2) {
          if (this.mEZESRGroup[bond] == 0)
            stereoCentersTypeOrGroup0++;
        }
         else if (this.mEZESRType[bond] == 1) {
          group = this.mEZESRGroup[bond];
          if (!andGroupUsed[group]) {
            typeAndGroups++;
            andGroupUsed[group] = true;
          }
          if (this.mEZESRGroup[bond] == 0)
            stereoCentersTypeAndGroup0++;
          if (isNotNull(this.mMesoHelper) && this.mMesoHelper.isInMesoFragment(this.mMol.getBondAtom_0(0, bond)) && this.mMesoHelper.isInMesoFragment(this.mMol.getBondAtom_0(1, bond)))
            typeAndInMesoFragmentFound = true;
        }
      }
    }
  }
  if (stereoCenters == 0) {
    this.mMol.setChirality_0(65536);
    return;
  }
  if (stereoCentersUnknown != 0) {
    this.mMol.setChirality_0(0);
    return;
  }
  if (this.mIsMeso) {
    this.mMol.setChirality_0(131072 + (1 << typeAndGroups));
    return;
  }
  if (stereoCentersTypeAndGroup0 + stereoCentersTypeAbsInMesoFragment == stereoCenters && !typeAndInMesoFragmentFound) {
    this.mMol.setChirality_0(196608);
  }
   else if (stereoCentersTypeAbs == stereoCenters) {
    this.mMol.setChirality_0(262144);
  }
   else if (stereoCentersTypeOrGroup0 == stereoCenters) {
    this.mMol.setChirality_0(327680);
  }
   else if (stereoCentersTypeAbs == stereoCenters - 1 && stereoCentersTypeAndGroup0 == 1) {
    this.mMol.setChirality_0(393216);
  }
   else {
    this.mMol.setChirality_0(458752 + (1 << typeAndGroups));
  }
}
;
_.encodeABVL = function encodeABVL(value_0, binCount){
  return $wnd.Math.min(binCount - 1, $wnd.Math.max(0, round_int(0.5 + jl.log10(value_0 / 0.1) / jl.log10(200 / 0.1) * (binCount - 1))));
}
;
_.encodeAtomCoords = function encodeAtomCoords(atom, from, maxDeltaPlusHalfIncrement, increment, resolutionBits){
  var deltaX, deltaY, deltaZ;
  deltaX = from == -1?(this.mMol.getAtomX_1(atom) - this.mMol.getAtomX_1(this.mGraphAtom[0])) / 8:this.mMol.getAtomX_1(atom) - this.mMol.getAtomX_1(from);
  deltaY = from == -1?(this.mMol.getAtomY_1(atom) - this.mMol.getAtomY_1(this.mGraphAtom[0])) / 8:this.mMol.getAtomY_1(atom) - this.mMol.getAtomY_1(from);
  this.encodeBits(round_int((maxDeltaPlusHalfIncrement + deltaX) / increment), resolutionBits);
  this.encodeBits(round_int((maxDeltaPlusHalfIncrement + deltaY) / increment), resolutionBits);
  if (this.mZCoordinatesAvailable) {
    deltaZ = from == -1?(this.mMol.getAtomZ_0(atom) - this.mMol.getAtomZ_0(this.mGraphAtom[0])) / 8:this.mMol.getAtomZ_0(atom) - this.mMol.getAtomZ_0(from);
    this.encodeBits(round_int((maxDeltaPlusHalfIncrement + deltaZ) / increment), resolutionBits);
  }
}
;
_.encodeBits = function encodeBits(data_0, bits){
  while (bits != 0) {
    if (this.mEncodingBitsAvail == 0) {
      this.mEncodingBuffer.append_1(narrow_char(this.mEncodingTempData + 64));
      this.mEncodingBitsAvail = 6;
      this.mEncodingTempData = 0;
    }
    this.mEncodingTempData <<= 1;
    this.mEncodingTempData |= data_0 & 1;
    data_0 >>= 1;
    bits--;
    this.mEncodingBitsAvail--;
  }
}
;
_.encodeBitsEnd = function encodeBitsEnd(){
  this.mEncodingTempData <<= this.mEncodingBitsAvail;
  this.mEncodingBuffer.append_1(narrow_char(this.mEncodingTempData + 64));
  return this.mEncodingBuffer.toString_0();
}
;
_.encodeBitsStart = function encodeBitsStart(){
  this.mEncodingBuffer = new jl.StringBuilder;
  this.mEncodingBitsAvail = 6;
  this.mEncodingTempData = 0;
}
;
_.encodeCoordinates = function encodeCoordinates(keepPositionAndScale){
  var atom, avbl, avblDefault, binCount, i, i0, i1, i2, includeHydrogenCoordinates, increment, j, maxDelta, maxDeltaPlusHalfIncrement, resolutionBits;
  if (this.mMol.getAtoms_0() == 0) {
    this.mCoordinates = '';
    return;
  }
  includeHydrogenCoordinates = false;
  if (this.mZCoordinatesAvailable && this.mMol.getAllAtoms_0() > this.mMol.getAtoms_0() && !this.mMol.isFragment_0()) {
    includeHydrogenCoordinates = true;
    for (i0 = 0; i0 < this.mMol.getAtoms_0(); i0++) {
      if (this.mMol.getImplicitHydrogens_0(i0) != 0) {
        includeHydrogenCoordinates = false;
        break;
      }
    }
  }
  resolutionBits = this.mZCoordinatesAvailable?16:8;
  this.encodeBitsStart();
  this.mEncodingBuffer.append_1(includeHydrogenCoordinates?35:33);
  this.encodeBits(this.mZCoordinatesAvailable?1:0, 1);
  this.encodeBits(keepPositionAndScale?1:0, 1);
  this.encodeBits(narrow_int(resolutionBits / 2), 4);
  maxDelta = 0;
  for (i1 = 1; i1 < this.mMol.getAtoms_0(); i1++)
    maxDelta = this.getMaxDelta(this.mGraphAtom[i1], this.mGraphFrom[i1] == -1?-1:this.mGraphAtom[this.mGraphFrom[i1]], maxDelta);
  if (includeHydrogenCoordinates) {
    for (i0 = 0; i0 < this.mMol.getAtoms_0(); i0++) {
      atom = this.mGraphAtom[i0];
      for (j = this.mMol.getConnAtoms_0(atom); j < this.mMol.getAllConnAtoms_0(atom); j++)
        maxDelta = this.getMaxDelta(this.mMol.getConnAtom_0(atom, j), atom, maxDelta);
    }
  }
  if (maxDelta == 0) {
    this.mCoordinates = '';
    return;
  }
  binCount = 1 << resolutionBits;
  increment = maxDelta / (binCount / 2 - 1);
  maxDeltaPlusHalfIncrement = maxDelta + increment / 2;
  for (i2 = 1; i2 < this.mMol.getAtoms_0(); i2++)
    this.encodeAtomCoords(this.mGraphAtom[i2], this.mGraphFrom[i2] == -1?-1:this.mGraphAtom[this.mGraphFrom[i2]], maxDeltaPlusHalfIncrement, increment, resolutionBits);
  if (includeHydrogenCoordinates) {
    for (i = 0; i < this.mMol.getAtoms_0(); i++) {
      atom = this.mGraphAtom[i];
      for (j = this.mMol.getConnAtoms_0(atom); j < this.mMol.getAllConnAtoms_0(atom); j++)
        this.encodeAtomCoords(this.mMol.getConnAtom_0(atom, j), atom, maxDeltaPlusHalfIncrement, increment, resolutionBits);
    }
  }
  if (keepPositionAndScale) {
    avblDefault = this.mZCoordinatesAvailable?1.5:carc.getDefaultAverageBondLength();
    avbl = this.mMol.getAverageBondLength_2(this.mMol.getAtoms_0(), this.mMol.getBonds_0(), avblDefault);
    this.encodeBits(this.encodeABVL(avbl, binCount), resolutionBits);
    this.encodeBits(this.encodeShift(this.mMol.getAtomX_1(this.mGraphAtom[0]) / avbl, binCount), resolutionBits);
    this.encodeBits(this.encodeShift(this.mMol.getAtomY_1(this.mGraphAtom[0]) / avbl, binCount), resolutionBits);
    if (this.mZCoordinatesAvailable)
      this.encodeBits(this.encodeShift(this.mMol.getAtomZ_0(this.mGraphAtom[0]) / avbl, binCount), resolutionBits);
  }
  this.mCoordinates = this.encodeBitsEnd();
}
;
_.encodeShift = function encodeShift(value_0, binCount){
  var halfBinCount, intValue, isNegative, steepness;
  halfBinCount = narrow_int(binCount / 2);
  isNegative = value_0 < 0;
  value_0 = $wnd.Math.abs(value_0);
  steepness = narrow_int(binCount / 32);
  intValue = $wnd.Math.min(halfBinCount - 1, toInt_0(jl.round_0(value_0 * halfBinCount / (value_0 + steepness))));
  return isNegative?halfBinCount + intValue:intValue;
}
;
_.ensureSecondFeatureBlock = function ensureSecondFeatureBlock(isSecondFeatureBlock){
  if (!isSecondFeatureBlock) {
    this.encodeBits(1, 1);
    this.encodeBits(15, 4);
  }
  return true;
}
;
_.flagStereoProblems = function flagStereoProblems(){
  var atom, bond, bond0;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mMol.isAtomConfigurationUnknown_0(atom) ^ this.mTHParity[atom] == 3)
      this.mMol.setStereoProblem(atom);
    if ((this.mMol.getAtomESRType_0(atom) == 1 || this.mMol.getAtomESRType_0(atom) == 2) && (!this.mIsStereoCenter[atom] || this.mTHParity[atom] == 3))
      this.mMol.setStereoProblem(atom);
  }
  for (bond0 = 0; bond0 < this.mMol.getAllBonds_0(); bond0++)
    if (this.mMol.isStereoBond_0(bond0) && !this.isJustifiedStereoBond(bond0))
      this.mMol.setStereoProblem(this.mMol.getBondAtom_0(0, bond0));
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mMol.getBondOrder_0(bond) == 2) {
      if (this.mMol.isBondParityUnknownOrNone_0(bond) && (this.mEZParity[bond] == 1 || this.mEZParity[bond] == 2)) {
        this.mEZParity[bond] = 3;
        this.mMol.setBondType_0(bond, 26);
      }
      if (this.mEZParity[bond] == 3 && !this.mEZParityIsPseudo[bond]) {
        if (this.mMol.getBondType_0(bond) != 26) {
          this.mMol.setStereoProblem(this.mMol.getBondAtom_0(0, bond));
          this.mMol.setStereoProblem(this.mMol.getBondAtom_0(1, bond));
        }
      }
    }
    if (this.mMol.getBondType_0(bond) == 1 && this.mEZParity[bond] == 3) {
      this.mMol.setStereoProblem(this.mMol.getBondAtom_0(0, bond));
      this.mMol.setStereoProblem(this.mMol.getBondAtom_0(1, bond));
    }
    if ((this.mMol.getBondESRType_0(bond) == 1 || this.mMol.getBondESRType_0(bond) == 2) && (this.mMol.getBondType_0(bond) != 1 || this.mEZParity[bond] != 1 && this.mEZParity[bond] != 2)) {
      this.mMol.setStereoProblem(this.mMol.getBondAtom_0(0, bond));
      this.mMol.setStereoProblem(this.mMol.getBondAtom_0(1, bond));
    }
  }
}
;
_.generateGraph = function generateGraph(){
  var atom, atom0, atomHandled, atomsWithoutParents, bond, bondHandled, connAtom, firstUnhandled, firstUnused, graphBonds, hiAtom, highestRank, highestRankingAtom, highestRankingConnAtom, highestRankingConnBond, i, loAtom, lowAtomNo1, lowAtomNo2, lowBond, startAtom;
  if (this.mMol.getAtoms_0() == 0)
    return;
  if (this.mGraphGenerated)
    return;
  this.mGraphRings = 0;
  startAtom = 0;
  for (atom0 = 1; atom0 < this.mMol.getAtoms_0(); atom0++)
    if (this.mCanRank[atom0] > this.mCanRank[startAtom])
      startAtom = atom0;
  atomHandled = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  bondHandled = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  this.mGraphIndex = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  this.mGraphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  this.mGraphFrom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  this.mGraphBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  this.mGraphAtom[0] = startAtom;
  this.mGraphIndex[startAtom] = 0;
  atomHandled[startAtom] = true;
  atomsWithoutParents = 1;
  firstUnhandled = 0;
  firstUnused = 1;
  graphBonds = 0;
  while (firstUnhandled < this.mMol.getAtoms_0()) {
    if (firstUnhandled < firstUnused) {
      while (true) {
        highestRankingConnAtom = 0;
        highestRankingConnBond = 0;
        highestRank = -1;
        atom = this.mGraphAtom[firstUnhandled];
        for (i = 0; i < this.mMol.getAllConnAtomsPlusMetalBonds_0(atom); i++) {
          if (i < this.mMol.getConnAtoms_0(atom) || i >= this.mMol.getAllConnAtoms_0(atom)) {
            connAtom = this.mMol.getConnAtom_0(atom, i);
            if (!atomHandled[connAtom] && this.mCanRank[connAtom] > highestRank) {
              highestRankingConnAtom = connAtom;
              highestRankingConnBond = this.mMol.getConnBond_0(atom, i);
              highestRank = this.mCanRank[connAtom];
            }
          }
        }
        if (highestRank == -1)
          break;
        this.mGraphIndex[highestRankingConnAtom] = firstUnused;
        this.mGraphFrom[firstUnused] = firstUnhandled;
        this.mGraphAtom[firstUnused++] = highestRankingConnAtom;
        this.mGraphBond[graphBonds++] = highestRankingConnBond;
        atomHandled[highestRankingConnAtom] = true;
        bondHandled[highestRankingConnBond] = true;
      }
      firstUnhandled++;
    }
     else {
      highestRankingAtom = 0;
      highestRank = -1;
      for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
        if (!atomHandled[atom] && this.mCanRank[atom] > highestRank) {
          highestRankingAtom = atom;
          highestRank = this.mCanRank[atom];
        }
      }
      atomsWithoutParents++;
      this.mGraphIndex[highestRankingAtom] = firstUnused;
      this.mGraphFrom[firstUnused] = -1;
      this.mGraphAtom[firstUnused++] = highestRankingAtom;
      atomHandled[highestRankingAtom] = true;
    }
  }
  this.mGraphClosure = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2 * (this.mMol.getBonds_0() - graphBonds), 15, 1);
  while (true) {
    lowAtomNo1 = this.mMol.getMaxAtoms_0();
    lowAtomNo2 = this.mMol.getMaxAtoms_0();
    lowBond = -1;
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      if (!bondHandled[bond]) {
        if (this.mGraphIndex[this.mMol.getBondAtom_0(0, bond)] < this.mGraphIndex[this.mMol.getBondAtom_0(1, bond)]) {
          loAtom = this.mGraphIndex[this.mMol.getBondAtom_0(0, bond)];
          hiAtom = this.mGraphIndex[this.mMol.getBondAtom_0(1, bond)];
        }
         else {
          loAtom = this.mGraphIndex[this.mMol.getBondAtom_0(1, bond)];
          hiAtom = this.mGraphIndex[this.mMol.getBondAtom_0(0, bond)];
        }
        if (loAtom < lowAtomNo1 || loAtom == lowAtomNo1 && hiAtom < lowAtomNo2) {
          lowAtomNo1 = loAtom;
          lowAtomNo2 = hiAtom;
          lowBond = bond;
        }
      }
    }
    if (lowBond == -1)
      break;
    bondHandled[lowBond] = true;
    this.mGraphBond[graphBonds++] = lowBond;
    this.mGraphClosure[2 * this.mGraphRings] = lowAtomNo1;
    this.mGraphClosure[2 * this.mGraphRings + 1] = lowAtomNo2;
    this.mGraphRings++;
  }
  this.mGraphGenerated = true;
}
;
_.getAromaticSPBonds = function getAromaticSPBonds(){
  var atom, atom$array, atom$index, atom$max, count, i, index_0, isAromaticSPBond, minIndex, minValue, r, ringAtom, ringBond, ringSet;
  isAromaticSPBond = null;
  ringSet = this.mMol.getRingSet_0();
  for (r = 0; r < ringSet.getSize_0(); r++) {
    if (ringSet.isDelocalized_0(r)) {
      count = 0;
      ringAtom = ringSet.getRingAtoms_0(r);
      for (atom$array = ringAtom , atom$index = 0 , atom$max = atom$array.length; atom$index < atom$max; ++atom$index) {
        atom = atom$array[atom$index];
        if (this.hasTwoAromaticPiElectrons(atom))
          count++;
      }
      if (count != 0) {
        ringBond = ringSet.getRingBonds_0(r);
        if (jsEquals(isAromaticSPBond, null))
          isAromaticSPBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
        if (count == ringAtom.length) {
          minIndex = -1;
          minValue = 2147483647;
          for (i = 0; i < ringAtom.length; i++) {
            if (minValue > this.mGraphAtom[ringBond[i]]) {
              minValue = this.mGraphAtom[ringBond[i]];
              minIndex = i;
            }
          }
          while (count > 0) {
            isAromaticSPBond[ringBond[minIndex]] = true;
            minIndex = this.validateCyclicIndex(minIndex + 2, ringAtom.length);
            count -= 2;
          }
        }
         else {
          index_0 = 0;
          while (this.hasTwoAromaticPiElectrons(ringAtom[index_0]))
            index_0++;
          while (!this.hasTwoAromaticPiElectrons(ringAtom[index_0]))
            index_0 = this.validateCyclicIndex(index_0 + 1, ringAtom.length);
          while (count > 0) {
            isAromaticSPBond[ringBond[index_0]] = true;
            index_0 = this.validateCyclicIndex(index_0 + 2, ringAtom.length);
            count -= 2;
            while (!this.hasTwoAromaticPiElectrons(ringAtom[index_0]))
              index_0 = this.validateCyclicIndex(index_0 + 1, ringAtom.length);
          }
        }
      }
    }
  }
  return isAromaticSPBond;
}
;
_.getEZParity = function getEZParity(bond){
  return this.mEZParity[bond];
}
;
_.getEncodedCoordinates = function getEncodedCoordinates(){
  return this.getEncodedCoordinates_0(this.mZCoordinatesAvailable);
}
;
_.getEncodedCoordinates_0 = function getEncodedCoordinates_0(keepPositionAndScale){
  if (jsEquals(this.mCoordinates, null)) {
    this.generateGraph();
    this.encodeCoordinates(keepPositionAndScale);
  }
  return this.mCoordinates;
}
;
_.getIDCode_0 = function getIDCode(){
  if (jsEquals(this.mIDCode, null)) {
    this.generateGraph();
    this.idGenerateConfigurations();
    this.idNormalizeESRGroupNumbers();
    this.idCodeCreate();
  }
  return this.mIDCode;
}
;
_.getMaxDelta = function getMaxDelta(atom, from, maxDelta){
  var deltaX, deltaY, deltaZ;
  deltaX = from == -1?$wnd.Math.abs(this.mMol.getAtomX_1(atom) - this.mMol.getAtomX_1(this.mGraphAtom[0])) / 8:$wnd.Math.abs(this.mMol.getAtomX_1(atom) - this.mMol.getAtomX_1(from));
  if (maxDelta < deltaX)
    maxDelta = deltaX;
  deltaY = from == -1?$wnd.Math.abs(this.mMol.getAtomY_1(atom) - this.mMol.getAtomY_1(this.mGraphAtom[0])) / 8:$wnd.Math.abs(this.mMol.getAtomY_1(atom) - this.mMol.getAtomY_1(from));
  if (maxDelta < deltaY)
    maxDelta = deltaY;
  if (this.mZCoordinatesAvailable) {
    deltaZ = from == -1?$wnd.Math.abs(this.mMol.getAtomZ_0(atom) - this.mMol.getAtomZ_0(this.mGraphAtom[0])) / 8:$wnd.Math.abs(this.mMol.getAtomZ_0(atom) - this.mMol.getAtomZ_0(from));
    if (maxDelta < deltaZ)
      maxDelta = deltaZ;
  }
  return maxDelta;
}
;
_.getSymmetryRank_0 = function getSymmetryRank(atom){
  return jsEquals(this.mCanRankBeforeTieBreaking, null)?-1:this.mCanRankBeforeTieBreaking[atom];
}
;
_.getTHParity = function getTHParity(atom){
  return this.mTHParity[atom];
}
;
_.hasSecondBINAPBond = function hasSecondBINAPBond(atom){
  var i, j, j$array, j$index, j$max, k, ringSet;
  ringSet = this.mMol.getRingSet_0();
  for (i = 0; i < ringSet.getSize_0(); i++) {
    if (ringSet.isAromatic_0(i) && ringSet.isAtomMember_0(i, atom)) {
      for (j$array = ringSet.getRingAtoms_0(i) , j$index = 0 , j$max = j$array.length; j$index < j$max; ++j$index) {
        j = j$array[j$index];
        if (j != atom)
          for (k = 0; k < this.mMol.getConnAtoms_0(j); k++)
            if (this.mMol.isBINAPChiralityBond_0(this.mMol.getConnBond_0(j, k)))
              return true;
      }
      return false;
    }
  }
  return false;
}
;
_.hasTwoAromaticPiElectrons = function hasTwoAromaticPiElectrons(atom){
  var aromaticPi, connBond, i;
  if (this.mMol.getAtomPi_0(atom) < 2)
    return false;
  if (this.mMol.getConnAtoms_0(atom) == 2)
    return true;
  aromaticPi = 0;
  for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++) {
    connBond = this.mMol.getConnBond_0(atom, i);
    if (this.mMol.isAromaticBond_0(connBond))
      aromaticPi += this.mMol.getBondOrder_0(connBond) - 1;
  }
  return aromaticPi > 1;
}
;
_.idCodeCreate = function idCodeCreate(){
  var EZCount, THCount, a, atom, atom0, atom1, atom10, atom11, atom12, atom13, atom2, atom3, atom4, atom5, atom6, atom7, atom8, atom9, atomList, base, bond, bond0, bond1, bond2, bond3, bond4, bond5, bondOrder, chargedAtoms, count, customLabel, dbits, dif, i, i0, isAromaticSPBond, isSecondFeatureBlock, label_0, lbits, maxLength, maxdif, nbits, nitrogens, otherAtoms, oxygens, parity;
  this.encodeBitsStart();
  this.encodeBits(9, 4);
  nbits = $wnd.Math.max(this.idGetNeededBits(this.mMol.getAtoms_0()), this.idGetNeededBits(this.mMol.getBonds_0()));
  this.encodeBits(nbits, 4);
  if (nbits == 0) {
    this.encodeBits(this.mMol.isFragment_0()?1:0, 1);
    this.encodeBits(0, 1);
    this.mIDCode = this.encodeBitsEnd();
    return;
  }
  nitrogens = oxygens = otherAtoms = chargedAtoms = 0;
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++) {
    if ((this.mMol.getAtomQueryFeatures_0(atom0) & 1) == 0) {
      switch (this.mMol.getAtomicNo_0(atom0)) {
        case 6:
          break;
        case 7:
          nitrogens++;
          break;
        case 8:
          oxygens++;
          break;
        default:otherAtoms++;
          break;
      }
      if (this.mMol.getAtomCharge_0(atom0) != 0)
        chargedAtoms++;
    }
  }
  this.encodeBits(this.mMol.getAtoms_0(), nbits);
  this.encodeBits(this.mMol.getBonds_0(), nbits);
  this.encodeBits(nitrogens, nbits);
  this.encodeBits(oxygens, nbits);
  this.encodeBits(otherAtoms, nbits);
  this.encodeBits(chargedAtoms, nbits);
  for (atom1 = 0; atom1 < this.mMol.getAtoms_0(); atom1++)
    if (this.mMol.getAtomicNo_0(this.mGraphAtom[atom1]) == 7 && (this.mMol.getAtomQueryFeatures_0(this.mGraphAtom[atom1]) & 1) == 0)
      this.encodeBits(atom1, nbits);
  for (atom2 = 0; atom2 < this.mMol.getAtoms_0(); atom2++)
    if (this.mMol.getAtomicNo_0(this.mGraphAtom[atom2]) == 8 && (this.mMol.getAtomQueryFeatures_0(this.mGraphAtom[atom2]) & 1) == 0)
      this.encodeBits(atom2, nbits);
  for (atom3 = 0; atom3 < this.mMol.getAtoms_0(); atom3++)
    if (this.mMol.getAtomicNo_0(this.mGraphAtom[atom3]) != 6 && this.mMol.getAtomicNo_0(this.mGraphAtom[atom3]) != 7 && this.mMol.getAtomicNo_0(this.mGraphAtom[atom3]) != 8 && (this.mMol.getAtomQueryFeatures_0(this.mGraphAtom[atom3]) & 1) == 0) {
      this.encodeBits(atom3, nbits);
      this.encodeBits(this.mMol.getAtomicNo_0(this.mGraphAtom[atom3]), 8);
    }
  for (atom4 = 0; atom4 < this.mMol.getAtoms_0(); atom4++)
    if (this.mMol.getAtomCharge_0(this.mGraphAtom[atom4]) != 0 && (this.mMol.getAtomQueryFeatures_0(this.mGraphAtom[atom4]) & 1) == 0) {
      this.encodeBits(atom4, nbits);
      this.encodeBits(8 + this.mMol.getAtomCharge_0(this.mGraphAtom[atom4]), 4);
    }
  maxdif = 0;
  base = 0;
  for (atom5 = 1; atom5 < this.mMol.getAtoms_0(); atom5++) {
    if (this.mGraphFrom[atom5] == -1) {
      dif = 0;
    }
     else {
      dif = 1 + this.mGraphFrom[atom5] - base;
      base = this.mGraphFrom[atom5];
    }
    if (maxdif < dif)
      maxdif = dif;
  }
  dbits = this.idGetNeededBits(maxdif);
  this.encodeBits(dbits, 4);
  base = 0;
  for (atom6 = 1; atom6 < this.mMol.getAtoms_0(); atom6++) {
    if (this.mGraphFrom[atom6] == -1) {
      dif = 0;
    }
     else {
      dif = 1 + this.mGraphFrom[atom6] - base;
      base = this.mGraphFrom[atom6];
    }
    this.encodeBits(dif, dbits);
  }
  for (i0 = 0; i0 < 2 * this.mGraphRings; i0++)
    this.encodeBits(this.mGraphClosure[i0], nbits);
  for (bond0 = 0; bond0 < this.mMol.getBonds_0(); bond0++) {
    bondOrder = (this.mMol.getBondQueryFeatures_0(this.mGraphBond[bond0]) & 32640) != 0 || this.mMol.getBondType_0(this.mGraphBond[bond0]) == 32?1:this.mMol.isDelocalizedBond_0(this.mGraphBond[bond0])?0:this.mMol.getBondOrder_0(this.mGraphBond[bond0]);
    this.encodeBits(bondOrder, 2);
  }
  THCount = 0;
  for (atom7 = 0; atom7 < this.mMol.getAtoms_0(); atom7++)
    if (this.mTHConfiguration[this.mGraphAtom[atom7]] != 0 && this.mTHConfiguration[this.mGraphAtom[atom7]] != 3)
      THCount++;
  this.encodeBits(THCount, nbits);
  for (atom8 = 0; atom8 < this.mMol.getAtoms_0(); atom8++)
    if (this.mTHConfiguration[this.mGraphAtom[atom8]] != 0 && this.mTHConfiguration[this.mGraphAtom[atom8]] != 3) {
      this.encodeBits(atom8, nbits);
      if (this.mTHESRType[this.mGraphAtom[atom8]] == 0) {
        this.encodeBits(this.mTHConfiguration[this.mGraphAtom[atom8]], 3);
      }
       else {
        parity = this.mTHConfiguration[this.mGraphAtom[atom8]] == 1?this.mTHESRType[this.mGraphAtom[atom8]] == 1?4:6:this.mTHESRType[this.mGraphAtom[atom8]] == 1?5:7;
        this.encodeBits(parity, 3);
        this.encodeBits(this.mTHESRGroup[this.mGraphAtom[atom8]], 3);
      }
    }
  EZCount = 0;
  for (bond1 = 0; bond1 < this.mMol.getBonds_0(); bond1++)
    if (this.mEZConfiguration[this.mGraphBond[bond1]] != 0 && this.mEZConfiguration[this.mGraphBond[bond1]] != 3 && (!this.mMol.isSmallRingBond_0(this.mGraphBond[bond1]) || this.mMol.getBondType_0(this.mGraphBond[bond1]) == 1))
      EZCount++;
  this.encodeBits(EZCount, nbits);
  for (bond2 = 0; bond2 < this.mMol.getBonds_0(); bond2++)
    if (this.mEZConfiguration[this.mGraphBond[bond2]] != 0 && this.mEZConfiguration[this.mGraphBond[bond2]] != 3 && (!this.mMol.isSmallRingBond_0(this.mGraphBond[bond2]) || this.mMol.getBondType_0(this.mGraphBond[bond2]) == 1)) {
      this.encodeBits(bond2, nbits);
      if (this.mMol.getBondType_0(this.mGraphBond[bond2]) == 1) {
        if (this.mEZESRType[this.mGraphBond[bond2]] == 0) {
          this.encodeBits(this.mEZConfiguration[this.mGraphBond[bond2]], 3);
        }
         else {
          parity = this.mEZConfiguration[this.mGraphBond[bond2]] == 1?this.mEZESRType[this.mGraphBond[bond2]] == 1?4:6:this.mEZESRType[this.mGraphBond[bond2]] == 1?5:7;
          this.encodeBits(parity, 3);
          this.encodeBits(this.mEZESRGroup[this.mGraphBond[bond2]], 3);
        }
      }
       else {
        this.encodeBits(this.mEZConfiguration[this.mGraphBond[bond2]], 2);
      }
    }
  this.encodeBits(this.mMol.isFragment_0()?1:0, 1);
  count = 0;
  for (atom9 = 0; atom9 < this.mMol.getAtoms_0(); atom9++)
    if (this.mMol.getAtomMass_0(this.mGraphAtom[atom9]) != 0)
      count++;
  if (count != 0) {
    this.encodeBits(1, 1);
    this.encodeBits(1, 4);
    this.encodeBits(count, nbits);
    for (atom10 = 0; atom10 < this.mMol.getAtoms_0(); atom10++) {
      if (this.mMol.getAtomMass_0(this.mGraphAtom[atom10]) != 0) {
        this.encodeBits(atom10, nbits);
        this.encodeBits(this.mMol.getAtomMass_0(this.mGraphAtom[atom10]), 8);
      }
    }
  }
  isSecondFeatureBlock = false;
  if (this.mMol.isFragment_0()) {
    this.addAtomQueryFeatures(0, false, nbits, 2048, 1, -1);
    this.addBondQueryFeatures(2, false, nbits, 64, 1, -1);
    this.addAtomQueryFeatures(3, false, nbits, 4096, 1, -1);
    this.addAtomQueryFeatures(4, false, nbits, 120, 4, 3);
    this.addAtomQueryFeatures(5, false, nbits, 6, 2, 1);
    this.addAtomQueryFeatures(6, false, nbits, 1, 1, -1);
    this.addAtomQueryFeatures(7, false, nbits, 1920, 4, 7);
    count = 0;
    for (atom10 = 0; atom10 < this.mMol.getAtoms_0(); atom10++)
      if (jsNotEquals(this.mMol.getAtomList_0(this.mGraphAtom[atom10]), null))
        count++;
    if (count > 0) {
      this.encodeBits(1, 1);
      this.encodeBits(8, 4);
      this.encodeBits(count, nbits);
      for (atom11 = 0; atom11 < this.mMol.getAtoms_0(); atom11++) {
        atomList = this.mMol.getAtomList_0(this.mGraphAtom[atom11]);
        if (jsNotEquals(atomList, null)) {
          this.encodeBits(atom11, nbits);
          this.encodeBits(atomList.length, 4);
          for (i = 0; i < atomList.length; i++)
            this.encodeBits(atomList[i], 8);
        }
      }
    }
    this.addBondQueryFeatures(9, false, nbits, 96, 2, 5);
    this.addBondQueryFeatures(10, false, nbits, 31, 5, 0);
    this.addAtomQueryFeatures(11, false, nbits, 8192, 1, -1);
    this.addBondQueryFeatures(12, false, nbits, 32640, 8, 7);
    this.addAtomQueryFeatures(13, false, nbits, 114688, 3, 14);
    this.addAtomQueryFeatures(14, false, nbits, 4063232, 5, 17);
    isSecondFeatureBlock = isSecondFeatureBlock | this.addAtomQueryFeatures(16, isSecondFeatureBlock, nbits, 29360128, 3, 22);
  }
  count = 0;
  for (atom12 = 0; atom12 < this.mMol.getAtoms_0(); atom12++)
    if (jsNotEquals(this.mAbnormalValence, null) && this.mAbnormalValence[this.mGraphAtom[atom12]] != -1)
      count++;
  if (count != 0) {
    isSecondFeatureBlock = this.ensureSecondFeatureBlock(isSecondFeatureBlock);
    this.encodeBits(1, 1);
    this.encodeBits(1, 4);
    this.encodeBits(count, nbits);
    for (atom10 = 0; atom10 < this.mMol.getAtoms_0(); atom10++) {
      if (jsNotEquals(this.mAbnormalValence, null) && this.mAbnormalValence[this.mGraphAtom[atom10]] != -1) {
        this.encodeBits(atom10, nbits);
        this.encodeBits(this.mAbnormalValence[this.mGraphAtom[atom10]], 4);
      }
    }
  }
  if ((this.mMode & 8) != 0) {
    count = 0;
    maxLength = 0;
    for (atom10 = 0; atom10 < this.mMol.getAtoms_0(); atom10++) {
      label_0 = this.mMol.getAtomCustomLabel_0(this.mGraphAtom[atom10]);
      if (jsNotEquals(label_0, null)) {
        count++;
        maxLength = $wnd.Math.max(maxLength, jl.length__I__devirtual$_0(label_0));
      }
    }
    if (count != 0) {
      isSecondFeatureBlock = this.ensureSecondFeatureBlock(isSecondFeatureBlock);
      lbits = this.idGetNeededBits(maxLength);
      this.encodeBits(1, 1);
      this.encodeBits(2, 4);
      this.encodeBits(count, nbits);
      this.encodeBits(lbits, 4);
      for (atom11 = 0; atom11 < this.mMol.getAtoms_0(); atom11++) {
        customLabel = this.mMol.getAtomCustomLabel_0(this.mGraphAtom[atom11]);
        if (jsNotEquals(customLabel, null)) {
          this.encodeBits(atom11, nbits);
          this.encodeBits(jl.length__I__devirtual$_0(customLabel), lbits);
          for (i = 0; i < jl.length__I__devirtual$_0(customLabel); i++)
            this.encodeBits(jl.charAt_I_C__devirtual$_0(customLabel, i), 7);
        }
      }
    }
  }
  if (this.mMol.isFragment_0()) {
    isSecondFeatureBlock = isSecondFeatureBlock | this.addAtomQueryFeatures(19, isSecondFeatureBlock, nbits, 234881024, 3, 25);
    isSecondFeatureBlock = isSecondFeatureBlock | this.addBondQueryFeatures(20, isSecondFeatureBlock, nbits, 229376, 3, 15);
  }
  count = 0;
  for (atom13 = 0; atom13 < this.mMol.getAtoms_0(); atom13++)
    if (this.mMol.getAtomRadical_0(this.mGraphAtom[atom13]) != 0)
      count++;
  if (count != 0) {
    isSecondFeatureBlock = this.ensureSecondFeatureBlock(isSecondFeatureBlock);
    this.encodeBits(1, 1);
    this.encodeBits(5, 4);
    this.encodeBits(count, nbits);
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      if (this.mMol.getAtomRadical_0(this.mGraphAtom[atom]) != 0) {
        this.encodeBits(atom, nbits);
        this.encodeBits(this.mMol.getAtomRadical_0(this.mGraphAtom[atom]) >> 4, 2);
      }
    }
  }
  if (this.mMol.isFragment_0()) {
    isSecondFeatureBlock = isSecondFeatureBlock | this.addAtomQueryFeatures(22, isSecondFeatureBlock, nbits, 268435456, 1, -1);
    isSecondFeatureBlock = isSecondFeatureBlock | this.addBondQueryFeatures(23, isSecondFeatureBlock, nbits, 262144, 1, -1);
    isSecondFeatureBlock = isSecondFeatureBlock | this.addBondQueryFeatures(24, isSecondFeatureBlock, nbits, 1572864, 2, 19);
  }
  if ((this.mMode & 16) != 0) {
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      if (this.mMol.isSelectedAtom_0(this.mGraphAtom[atom])) {
        isSecondFeatureBlock = this.ensureSecondFeatureBlock(isSecondFeatureBlock);
        this.encodeBits(1, 1);
        this.encodeBits(9, 4);
        for (a = 0; a < this.mMol.getAtoms_0(); a++)
          this.encodeBits(this.mMol.isSelectedAtom_0(this.mGraphAtom[a])?1:0, 1);
        break;
      }
    }
  }
  isAromaticSPBond = this.getAromaticSPBonds();
  if (jsNotEquals(isAromaticSPBond, null)) {
    count = 0;
    for (bond3 = 0; bond3 < this.mMol.getBonds_0(); bond3++)
      if (isAromaticSPBond[this.mGraphBond[bond3]])
        count++;
    isSecondFeatureBlock = this.ensureSecondFeatureBlock(isSecondFeatureBlock);
    this.encodeBits(1, 1);
    this.encodeBits(10, 4);
    this.encodeBits(count, nbits);
    for (bond4 = 0; bond4 < this.mMol.getBonds_0(); bond4++)
      if (isAromaticSPBond[this.mGraphBond[bond4]])
        this.encodeBits(bond4, nbits);
  }
  if (this.mMol.isFragment_0())
    isSecondFeatureBlock = isSecondFeatureBlock | this.addAtomQueryFeatures(27, isSecondFeatureBlock, nbits, 536870912, 1, -1);
  count = 0;
  for (bond5 = 0; bond5 < this.mMol.getBonds_0(); bond5++)
    if (this.mMol.getBondType_0(this.mGraphBond[bond5]) == 32)
      count++;
  if (count != 0) {
    isSecondFeatureBlock = this.ensureSecondFeatureBlock(isSecondFeatureBlock);
    this.encodeBits(1, 1);
    this.encodeBits(12, 4);
    this.encodeBits(count, nbits);
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
      if (this.mMol.getBondType_0(this.mGraphBond[bond]) == 32)
        this.encodeBits(bond, nbits);
  }
  this.encodeBits(0, 1);
  this.mIDCode = this.encodeBitsEnd();
}
;
_.idGenerateConfigurations = function idGenerateConfigurations(){
  var atom, bond, bondAtom, connAtom, connAtom1, connAtom2, i, inversion, j, neighbour, neighbours;
  this.mTHConfiguration = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mTHParity[atom] == 1 || this.mTHParity[atom] == 2) {
      inversion = false;
      if (this.isCentralAlleneAtom(atom)) {
        for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++) {
          connAtom = this.mMol.getConnAtom_0(atom, i);
          neighbours = 0;
          neighbour = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 3, 15, 1);
          for (j = 0; j < this.mMol.getConnAtoms_0(connAtom); j++) {
            neighbour[neighbours] = this.mMol.getConnAtom_0(connAtom, j);
            if (neighbour[neighbours] != atom)
              neighbours++;
          }
          if (neighbours == 2 && this.mCanRank[neighbour[0]] > this.mCanRank[neighbour[1]] ^ this.mGraphIndex[neighbour[0]] < this.mGraphIndex[neighbour[1]])
            inversion = !inversion;
        }
      }
       else {
        for (i = 1; i < this.mMol.getConnAtoms_0(atom); i++) {
          for (j = 0; j < i; j++) {
            connAtom1 = this.mMol.getConnAtom_0(atom, i);
            connAtom2 = this.mMol.getConnAtom_0(atom, j);
            if (this.mCanRank[connAtom1] > this.mCanRank[connAtom2])
              inversion = !inversion;
            if (this.mGraphIndex[connAtom1] < this.mGraphIndex[connAtom2])
              inversion = !inversion;
          }
        }
      }
      this.mTHConfiguration[atom] = this.mTHParity[atom] == 1 ^ inversion?narrow_byte(1):2;
    }
     else {
      this.mTHConfiguration[atom] = this.mTHParity[atom];
    }
  }
  this.mEZConfiguration = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mEZParity[bond] == 1 || this.mEZParity[bond] == 2) {
      inversion = false;
      for (i = 0; i < 2; i++) {
        bondAtom = this.mMol.getBondAtom_0(i, bond);
        if (this.mMol.getConnAtoms_0(bondAtom) == 3) {
          neighbour = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
          neighbours = 0;
          for (j = 0; j < 3; j++)
            if (this.mMol.getConnAtom_0(bondAtom, j) != this.mMol.getBondAtom_0(1 - i, bond))
              neighbour[neighbours++] = this.mMol.getConnAtom_0(bondAtom, j);
          if (this.mCanRank[neighbour[0]] > this.mCanRank[neighbour[1]])
            inversion = !inversion;
          if (this.mGraphIndex[neighbour[0]] < this.mGraphIndex[neighbour[1]])
            inversion = !inversion;
        }
      }
      this.mEZConfiguration[bond] = this.mEZParity[bond] == 1 ^ inversion?narrow_byte(1):2;
    }
     else {
      this.mEZConfiguration[bond] = this.mEZParity[bond];
    }
  }
}
;
_.idGetNeededBits = function idGetNeededBits(no){
  var bits;
  bits = 0;
  while (no > 0) {
    no >>= 1;
    bits++;
  }
  return bits;
}
;
_.idNormalizeESRGroupNumbers = function idNormalizeESRGroupNumbers(){
  this.idNormalizeESRGroupNumbers_0(1);
  this.idNormalizeESRGroupNumbers_0(2);
}
;
_.idNormalizeESRGroupNumbers_0 = function idNormalizeESRGroupNumbers_0(type_0){
  var atom, atom0, bond, bond0, canGroup, group, groupRank, groups, i, j, maxGroup, maxRank, rank;
  groupRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 32, 15, 1);
  groups = 0;
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++) {
    if ((this.mTHConfiguration[atom0] == 1 || this.mTHConfiguration[atom0] == 2) && this.mTHESRType[atom0] == type_0) {
      group = this.mTHESRGroup[atom0];
      if (groupRank[group] < this.mCanRank[atom0]) {
        if (groupRank[group] == 0)
          groups++;
        groupRank[group] = this.mCanRank[atom0];
      }
    }
  }
  for (bond0 = 0; bond0 < this.mMol.getBonds_0(); bond0++) {
    if ((this.mEZConfiguration[bond0] == 1 || this.mEZConfiguration[bond0] == 2) && this.mEZESRType[bond0] == type_0 && this.mMol.getBondType_0(bond0) == 1) {
      group = this.mEZESRGroup[bond0];
      rank = $wnd.Math.max(this.mCanRank[this.mMol.getBondAtom_0(0, bond0)], this.mCanRank[this.mMol.getBondAtom_0(1, bond0)]);
      if (groupRank[group] < rank) {
        if (groupRank[group] == 0)
          groups++;
        groupRank[group] = rank;
      }
    }
  }
  canGroup = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, 32, 15, 1);
  for (i = 0; i < groups; i++) {
    maxGroup = -1;
    maxRank = 0;
    for (j = 0; j < 32; j++) {
      if (maxRank < groupRank[j]) {
        maxRank = groupRank[j];
        maxGroup = j;
      }
    }
    groupRank[maxGroup] = 0;
    canGroup[maxGroup] = narrow_byte(i);
  }
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
    if ((this.mTHConfiguration[atom] == 1 || this.mTHConfiguration[atom] == 2) && this.mTHESRType[atom] == type_0)
      this.mTHESRGroup[atom] = canGroup[this.mTHESRGroup[atom]];
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
    if ((this.mEZConfiguration[bond] == 1 || this.mEZConfiguration[bond] == 2) && this.mEZESRType[bond] == type_0 && this.mMol.getBondType_0(bond) == 1)
      this.mEZESRGroup[bond] = canGroup[this.mEZESRGroup[bond]];
}
;
_.initializeParities = function initializeParities(noOfRanksWithoutStereo, canRankWithoutStereo){
  var atom, bond;
  this.mNoOfRanks = noOfRanksWithoutStereo;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    this.mCanRank[atom] = canRankWithoutStereo[atom];
    this.mTHParity[atom] = 0;
    this.mTHParityRoundIsOdd[atom] = false;
  }
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    this.mEZParity[bond] = 0;
    this.mEZParityRoundIsOdd[bond] = false;
  }
}
;
_.isCentralAlleneAtom = function isCentralAlleneAtom(atom){
  return this.mMol.getConnAtoms_0(atom) == 2 && this.mMol.getConnBondOrder_0(atom, 0) == 2 && this.mMol.getConnBondOrder_0(atom, 1) == 2;
}
;
_.isJustifiedStereoBond = function isJustifiedStereoBond(bond){
  var atom, binapBond, i;
  atom = this.mMol.getBondAtom_0(0, bond);
  if (atom >= this.mMol.getAtoms_0())
    return false;
  if (this.mTHParity[atom] == 1 || this.mTHParity[atom] == 2)
    return true;
  if (this.mTHParity[atom] == 3)
    return false;
  binapBond = this.mMol.findBINAPChiralityBond_0(atom);
  if (binapBond != -1)
    return this.mEZParity[binapBond] == 1 || this.mEZParity[binapBond] == 2;
  for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++) {
    if (this.mMol.getConnBondOrder_0(atom, i) == 2) {
      if (this.mTHParity[this.mMol.getConnAtom_0(atom, i)] == 1 || this.mTHParity[this.mMol.getConnAtom_0(atom, i)] == 2)
        return true;
    }
  }
  return false;
}
;
_.resize = function resize(array, newSize){
  var copy;
  copy = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, newSize, 15, 1);
  jl.arraycopy(array, 0, copy, 0, array.length);
  return copy;
}
;
_.resize_0 = function resize_0(array, newSize){
  var copy;
  copy = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, newSize, 16, 1);
  jl.arraycopy(array, 0, copy, 0, array.length);
  return copy;
}
;
_.setCIPParities = function setCIPParities(){
  var atom, bond;
  if (jsNotEquals(this.mTHCIPParity, null))
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
      this.mMol.setAtomCIPParity_0(atom, this.mTHCIPParity[atom]);
  if (jsNotEquals(this.mEZCIPParity, null))
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
      this.mMol.setBondCIPParity_0(bond, this.mEZCIPParity[bond]);
}
;
_.setParities = function setParities(){
  var atom, bond, bondAtom, connAtom, connAtom1, connAtom2, i, inversion, j, neighbour, neighbours;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mTHParity[atom] == 1 || this.mTHParity[atom] == 2) {
      inversion = false;
      if (this.mMol.getAtomPi_0(atom) != 0 && this.mMol.getConnAtoms_0(atom) == 2 && this.mMol.getConnBondOrder_0(atom, 0) == 2 && this.mMol.getConnBondOrder_0(atom, 1) == 2) {
        for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++) {
          connAtom = this.mMol.getConnAtom_0(atom, i);
          neighbours = 0;
          neighbour = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 3, 15, 1);
          for (j = 0; j < this.mMol.getConnAtoms_0(connAtom); j++) {
            neighbour[neighbours] = this.mMol.getConnAtom_0(connAtom, j);
            if (neighbour[neighbours] != atom)
              neighbours++;
          }
          if (neighbours == 2 && this.mCanRank[neighbour[0]] > this.mCanRank[neighbour[1]] ^ neighbour[0] < neighbour[1])
            inversion = !inversion;
        }
      }
       else {
        for (i = 1; i < this.mMol.getConnAtoms_0(atom); i++) {
          for (j = 0; j < i; j++) {
            connAtom1 = this.mMol.getConnAtom_0(atom, i);
            connAtom2 = this.mMol.getConnAtom_0(atom, j);
            if (this.mCanRank[connAtom1] > this.mCanRank[connAtom2])
              inversion = !inversion;
            if (connAtom1 < connAtom2)
              inversion = !inversion;
          }
        }
      }
      this.mMol.setAtomParity_0(atom, this.mTHParity[atom] == 1 ^ inversion?1:2, this.mTHParityIsPseudo[atom]);
    }
     else {
      this.mMol.setAtomParity_0(atom, this.mTHParity[atom], this.mTHParityIsPseudo[atom]);
    }
  }
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mEZParity[bond] == 1 || this.mEZParity[bond] == 2) {
      inversion = false;
      for (i = 0; i < 2; i++) {
        bondAtom = this.mMol.getBondAtom_0(i, bond);
        if (this.mMol.getConnAtoms_0(bondAtom) == 3) {
          neighbour = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
          neighbours = 0;
          for (j = 0; j < 3; j++)
            if (this.mMol.getConnAtom_0(bondAtom, j) != this.mMol.getBondAtom_0(1 - i, bond))
              neighbour[neighbours++] = this.mMol.getConnAtom_0(bondAtom, j);
          if (this.mCanRank[neighbour[0]] > this.mCanRank[neighbour[1]])
            inversion = !inversion;
          if (neighbour[0] < neighbour[1])
            inversion = !inversion;
        }
      }
      this.mMol.setBondParity_0(bond, this.mEZParity[bond] == 1 ^ inversion?1:2, this.mEZParityIsPseudo[bond]);
    }
     else {
      this.mMol.setBondParity_0(bond, this.mEZParity[bond], this.mEZParityIsPseudo[bond]);
    }
  }
}
;
_.setStereoCenters = function setStereoCenters(){
  var atom;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    this.mMol.setAtomStereoCenter(atom, this.mIsStereoCenter[atom]);
  }
}
;
_.setUnknownParitiesToExplicitlyUnknown_0 = function setUnknownParitiesToExplicitlyUnknown(){
  var atom, bond;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
    if (!this.mMol.isAtomConfigurationUnknown_0(atom) && this.mTHParity[atom] == 3)
      this.mMol.setAtomConfigurationUnknown_0(atom, true);
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mEZParity[bond] == 3) {
      if (this.mMol.getBondOrder_0(bond) == 2) {
        this.mMol.setBondType_0(bond, 26);
      }
    }
  }
}
;
_.validateCyclicIndex = function validateCyclicIndex(index_0, limit){
  return index_0 < limit?index_0:index_0 - limit;
}
;
_.mCIPParityNoDistinctionProblem = false;
_.mEncodingBitsAvail = 0;
_.mEncodingTempData = 0;
_.mGraphGenerated = false;
_.mGraphRings = 0;
_.mIsMeso = false;
_.mIsOddParityRound = false;
_.mMaxConnAtoms = 0;
_.mMode = 0;
_.mNoOfPseudoGroups = 0;
_.mNoOfRanks = 0;
_.mStereoCentersFound = false;
_.mZCoordinatesAvailable = false;
carc.ASSIGN_PARITIES_TO_TETRAHEDRAL_N = 32;
carc.ATOM_BITS = 16;
carc.CONSIDER_DIASTEREOTOPICITY = 2;
carc.CONSIDER_ENANTIOTOPICITY = 4;
carc.CONSIDER_STEREOHETEROTOPICITY = 0;
carc.COORDS_ARE_3D = 64;
carc.CREATE_PSEUDO_STEREO_GROUPS = 128;
carc.CREATE_SYMMETRY_RANK = 1;
carc.DISTINGUISH_RACEMIC_OR_GROUPS = 256;
carc.ENCODE_ATOM_CUSTOM_LABELS = 8;
carc.ENCODE_ATOM_SELECTION = 16;
carc.MAX_ATOMS = 65535;
carc.MAX_BONDS = 65535;
carc.cIDCodeCurrentVersion = 9;
carc.cIDCodeVersion2 = 8;
carc.cIDCodeVersion3 = 9;
carc.cParity1And = 4;
carc.cParity1Or = 6;
carc.cParity2And = 5;
carc.cParity2Or = 7;
cggl.Lcom_actelion_research_chem_Canonizer_2_classLit = createForClass('com.actelion.research.chem', 'Canonizer', 58, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Canonizer$1 = function $clinit_Canonizer$1(){
  carc.$clinit_Canonizer$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
carc.Canonizer$1 = function Canonizer$1(this$0){
  carc.$clinit_Canonizer$1();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_5();
}
;
defineClass(221, 1, {1:1, 26:1}, carc.Canonizer$1);
_.$init_5 = function $init_5(){
}
;
_.compare_0 = function compare_1(r1, r2){
  return this.compare(castTo(r1, 77), castTo(r2, 77));
}
;
_.equals_0 = function equals_0(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare = function compare_0(r1, r2){
  var count, i, i1, i2;
  if (r1.parentRank != r2.parentRank)
    return r1.parentRank > r2.parentRank?1:-1;
  i1 = r1.childRank.length;
  i2 = r2.childRank.length;
  count = $wnd.Math.min(i1, i2);
  for (i = 0; i < count; i++) {
    i1--;
    i2--;
    if (r1.childRank[i1] != r2.childRank[i2])
      return r1.childRank[i1] > r2.childRank[i2]?1:-1;
  }
  if (i1 != i2)
    return i1 > i2?1:-1;
  if (r1.parentHCount != r2.parentHCount)
    return r1.parentHCount > r2.parentHCount?1:-1;
  return 0;
}
;
cggl.Lcom_actelion_research_chem_Canonizer$1_2_classLit = createForClass('com.actelion.research.chem', 'Canonizer/1', 221, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Canonizer$1RankObject = function $clinit_Canonizer$1RankObject(){
  carc.$clinit_Canonizer$1RankObject = emptyMethod;
  jl.$clinit_Object();
}
;
carc.Canonizer$1RankObject = function Canonizer$1RankObject(this$0){
  carc.$clinit_Canonizer$1RankObject();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_6();
}
;
defineClass(77, 1, {77:1, 1:1}, carc.Canonizer$1RankObject);
_.$init_6 = function $init_6(){
}
;
_.parentHCount = 0;
_.parentIndex = 0;
_.parentRank = 0;
cggl.Lcom_actelion_research_chem_Canonizer$1RankObject_2_classLit = createForClass('com.actelion.research.chem', 'Canonizer/1RankObject', 77, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Canonizer$2 = function $clinit_Canonizer$2(){
  carc.$clinit_Canonizer$2 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
carc.Canonizer$2 = function Canonizer$2(this$0){
  carc.$clinit_Canonizer$2();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_7();
}
;
defineClass(222, 1, {1:1, 26:1}, carc.Canonizer$2);
_.$init_7 = function $init_7(){
}
;
_.compare_0 = function compare_3(r1, r2){
  return this.compare_1(castTo(r1, 78), castTo(r2, 78));
}
;
_.equals_0 = function equals_1(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_1 = function compare_2(r1, r2){
  if (r1.rank != r2.rank)
    return r1.rank > r2.rank?1:-1;
  return 0;
}
;
cggl.Lcom_actelion_research_chem_Canonizer$2_2_classLit = createForClass('com.actelion.research.chem', 'Canonizer/2', 222, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Canonizer$2RankObject = function $clinit_Canonizer$2RankObject(){
  carc.$clinit_Canonizer$2RankObject = emptyMethod;
  jl.$clinit_Object();
}
;
carc.Canonizer$2RankObject = function Canonizer$2RankObject(this$0){
  carc.$clinit_Canonizer$2RankObject();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_8();
}
;
defineClass(78, 1, {78:1, 1:1}, carc.Canonizer$2RankObject);
_.$init_8 = function $init_8(){
}
;
_.index_0 = 0;
_.parent_0 = 0;
_.rank = 0;
cggl.Lcom_actelion_research_chem_Canonizer$2RankObject_2_classLit = createForClass('com.actelion.research.chem', 'Canonizer/2RankObject', 78, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Canonizer$ESRGroup = function $clinit_Canonizer$ESRGroup(){
  carc.$clinit_Canonizer$ESRGroup = emptyMethod;
}
;
defineClass(396, 1, {20:1, 1:1});
cggl.Lcom_actelion_research_chem_Canonizer$ESRGroup_2_classLit = createForClass('com.actelion.research.chem', 'Canonizer/ESRGroup', 396, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_CanonizerBaseValue = function $clinit_CanonizerBaseValue(){
  carc.$clinit_CanonizerBaseValue = emptyMethod;
  jl.$clinit_Object();
}
;
carc.CanonizerBaseValue = function CanonizerBaseValue(size_0){
  carc.$clinit_CanonizerBaseValue();
  Object_0.call(this);
  this.$init_9();
  this.mValue = initUnidimensionalArray(cggl.J_classLit, {4:1, 1:1}, 5, size_0, 14, 1);
}
;
defineClass(68, 1, {68:1, 20:1, 1:1}, carc.CanonizerBaseValue);
_.$init_9 = function $init_9(){
}
;
_.compareTo_1 = function compareTo_0(b){
  return this.compareTo_0(castTo(b, 68));
}
;
_.add_0 = function add_0(bits, data_0){
  if (this.mAvailableBits == 0) {
    this.mIndex++;
    this.mAvailableBits = 63;
  }
  if (this.mAvailableBits == 63) {
    this.mValue[this.mIndex] = or_0(this.mValue[this.mIndex], data_0);
    this.mAvailableBits -= bits;
  }
   else {
    if (this.mAvailableBits >= bits) {
      this.mValue[this.mIndex] = shl_0(this.mValue[this.mIndex], bits);
      this.mValue[this.mIndex] = or_0(this.mValue[this.mIndex], data_0);
      this.mAvailableBits -= bits;
    }
     else {
      this.mValue[this.mIndex] = shl_0(this.mValue[this.mIndex], this.mAvailableBits);
      this.mValue[this.mIndex] = or_0(this.mValue[this.mIndex], shr_0(data_0, bits - this.mAvailableBits));
      bits -= this.mAvailableBits;
      this.mIndex++;
      this.mAvailableBits = 63 - bits;
      this.mValue[this.mIndex] = or_0(this.mValue[this.mIndex], and_0(data_0, fromInt_0((1 << bits) - 1)));
    }
  }
}
;
_.add_1 = function add_1(data_0){
  this.mValue[this.mIndex] = add_10(this.mValue[this.mIndex], data_0);
}
;
_.compareTo_0 = function compareTo(b){
  var i;
  for (i = 0; i < this.mIndex; i++)
    if (neq(this.mValue[i], b.mValue[i]))
      return lt(this.mValue[i], b.mValue[i])?-1:1;
  return eq(this.mValue[this.mIndex], b.mValue[this.mIndex])?0:lt(this.mValue[this.mIndex], b.mValue[this.mIndex])?-1:1;
}
;
_.getAtom = function getAtom(){
  return this.mAtom;
}
;
_.init_0 = function init_0(atom){
  this.mAtom = atom;
  this.mIndex = 0;
  this.mAvailableBits = 63;
  ju.fill_1(this.mValue, 0);
}
;
_.mAtom = 0;
_.mAvailableBits = 0;
_.mIndex = 0;
cggl.Lcom_actelion_research_chem_CanonizerBaseValue_2_classLit = createForClass('com.actelion.research.chem', 'CanonizerBaseValue', 68, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_CanonizerFragment = function $clinit_CanonizerFragment(){
  carc.$clinit_CanonizerFragment = emptyMethod;
  jl.$clinit_Object();
}
;
carc.CanonizerFragment = function CanonizerFragment(atom, atoms, bond, bonds){
  carc.$clinit_CanonizerFragment();
  var a, b;
  Object_0.call(this);
  this.$init_10();
  this.atom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atoms, 15, 1);
  this.bond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, bonds, 15, 1);
  for (a = 0; a < atoms; a++)
    this.atom[a] = atom[a];
  for (b = 0; b < bonds; b++)
    this.bond[b] = bond[b];
}
;
defineClass(116, 1, {116:1, 1:1}, carc.CanonizerFragment);
_.$init_10 = function $init_10(){
}
;
cggl.Lcom_actelion_research_chem_CanonizerFragment_2_classLit = createForClass('com.actelion.research.chem', 'CanonizerFragment', 116, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_CanonizerMesoHelper = function $clinit_CanonizerMesoHelper(){
  carc.$clinit_CanonizerMesoHelper = emptyMethod;
  jl.$clinit_Object();
}
;
carc.CanonizerMesoHelper = function CanonizerMesoHelper(mol, canRankWithoutStereo, isStereoCenter, thParity, ezParity, thESRType, thESRGroup, ezESRType, ezESRGroup, thParityRoundIsOdd, ezParityRoundIsOdd, esrTypeNeedsNormalization){
  carc.$clinit_CanonizerMesoHelper();
  Object_0.call(this);
  this.$init_11();
  this.mMol = mol;
  this.mCanRankWithoutStereo = canRankWithoutStereo;
  this.mIsStereoCenter = isStereoCenter;
  this.mTHParity = thParity;
  this.mEZParity = ezParity;
  this.mTHESRType = thESRType;
  this.mTHESRGroup = thESRGroup;
  this.mTHParityRoundIsOdd = thParityRoundIsOdd;
  this.mEZParityRoundIsOdd = ezParityRoundIsOdd;
  this.mTHESRTypeNeedsNormalization = esrTypeNeedsNormalization;
  this.findMesoFragments();
}
;
carc.addToIntArray = function addToIntArray(intArray, intValue){
  carc.$clinit_CanonizerMesoHelper();
  var i, newArray;
  newArray = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, jsEquals(intArray, null)?1:intArray.length + 1, 15, 1);
  for (i = 0; i < newArray.length - 1; i++)
    newArray[i] = intArray[i];
  newArray[newArray.length - 1] = intValue;
  return newArray;
}
;
defineClass(249, 1, {1:1}, carc.CanonizerMesoHelper);
_.$init_11 = function $init_11(){
}
;
_.addNewMesoFragment = function addNewMesoFragment(atomMask, mesoFragmentList){
  var atom, atom0, atomList, atomList$iterator, count, differs, found, k, newAtomList;
  if (jsEquals(atomMask, null))
    return;
  count = 0;
  for (atom0 = 0; atom0 < this.mMol.getAtoms_0(); atom0++)
    if (atomMask[atom0])
      count++;
  newAtomList = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, count, 15, 1);
  count = 0;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++)
    if (atomMask[atom])
      newAtomList[count++] = atom;
  found = false;
  for (atomList$iterator = mesoFragmentList.iterator(); atomList$iterator.hasNext_0();) {
    atomList = castTo(atomList$iterator.next_3(), 6);
    if (atomList.length == newAtomList.length) {
      differs = false;
      for (k = 0; k < atomList.length; k++) {
        if (atomList[k] != newAtomList[k]) {
          differs = true;
          break;
        }
      }
      if (!differs) {
        found = true;
        break;
      }
    }
  }
  if (!found)
    mesoFragmentList.add(newAtomList);
}
;
_.containsTypeABSParity1Or2 = function containsTypeABSParity1Or2(fragment){
  var atom, i;
  for (i = 0; i < this.mMesoFragmentAtom[fragment].length; i++) {
    atom = this.mMesoFragmentAtom[fragment][i];
    if (this.hasParity1or2(atom) && this.mTHESRType[atom] == 0)
      return true;
  }
  return false;
}
;
_.countESRGroups = function countESRGroups(fragment, esrType){
  var atom, count, groupBit, groupBits, i;
  count = 0;
  groupBits = 0;
  for (i = 0; i < this.mMesoFragmentAtom[fragment].length; i++) {
    atom = this.mMesoFragmentAtom[fragment][i];
    if (this.mTHESRType[atom] == esrType) {
      groupBit = 1 << this.mTHESRGroup[atom];
      if ((groupBits & groupBit) == 0) {
        groupBits |= groupBit;
        count++;
      }
    }
  }
  return count;
}
;
_.findMesoFragments = function findMesoFragments(){
  var atom1, atom2, atomList, found, i, i0, i1, j, j0, mesoFragmentList, seedAtom, seedBond;
  mesoFragmentList = new ju.ArrayList;
  for (seedAtom = 0; seedAtom < this.mMol.getAtoms_0(); seedAtom++) {
    if (this.mMol.getAtomPi_0(seedAtom) < 2 || this.mMol.getConnAtoms_0(seedAtom) > 2) {
      for (i0 = 1; i0 < this.mMol.getConnAtoms_0(seedAtom); i0++) {
        atom1 = this.mMol.getConnAtom_0(seedAtom, i0);
        for (j0 = 0; j0 < i0; j0++) {
          atom2 = this.mMol.getConnAtom_0(seedAtom, j0);
          if (this.mayBeMirrorAtoms(atom1, atom2))
            this.addNewMesoFragment(this.tryFindMesoFragment(atom1, atom2), mesoFragmentList);
        }
      }
    }
  }
  for (seedBond = 0; seedBond < this.mMol.getBonds_0(); seedBond++) {
    if (this.mEZParity[seedBond] != 0) {
      if (this.mMol.getBondOrder_0(seedBond) != 2 || this.mEZParity[seedBond] != 2)
        continue;
    }
    atom1 = this.mMol.getBondAtom_0(0, seedBond);
    atom2 = this.mMol.getBondAtom_0(1, seedBond);
    if (this.mayBeMirrorAtoms(atom1, atom2))
      this.addNewMesoFragment(this.tryFindMesoFragment(atom1, atom2), mesoFragmentList);
  }
  for (i1 = mesoFragmentList.size() - 1; i1 >= 0; i1--) {
    atomList = castTo(mesoFragmentList.getAtIndex(i1), 6);
    found = false;
    for (j0 = 0; j0 < atomList.length; j0++) {
      if (this.mIsStereoCenter[atomList[j0]]) {
        found = true;
        break;
      }
    }
    if (!found)
      mesoFragmentList.remove(atomList);
  }
  this.mMesoFragmentAtom = castTo(mesoFragmentList.toArray_1(initMultidimensionalArray(cggl.I_classLit, [{31:1, 4:1, 1:1, 8:1}, {6:1, 4:1, 1:1}], [6, 5], 15, [0, 0], 2)), 31);
  ju.sort_7(this.mMesoFragmentAtom, new carc.CanonizerMesoHelper$1(this));
  this.mIsMesoFragmentMember = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (i = 0; i < this.mMesoFragmentAtom.length; i++)
    for (j = 0; j < this.mMesoFragmentAtom[i].length; j++)
      this.mIsMesoFragmentMember[this.mMesoFragmentAtom[i][j]] = true;
}
;
_.findMirrorAtom = function findMirrorAtom(atom, parentOfMirrorAtom, isFragmentMember){
  var candidate, i;
  for (i = 0; i < this.mMol.getConnAtoms_0(parentOfMirrorAtom); i++) {
    candidate = this.mMol.getConnAtom_0(parentOfMirrorAtom, i);
    if (!isFragmentMember[candidate] && this.mayBeMirrorAtoms(atom, candidate))
      return candidate;
  }
  return -1;
}
;
_.hasParity1or2 = function hasParity1or2(atom){
  carc.$clinit_CanonizerMesoHelper();
  return this.mIsStereoCenter[atom] && (this.mTHParity[atom] == 1 || this.mTHParity[atom] == 2);
}
;
_.isInMesoFragment = function isInMesoFragment(atom){
  return this.mIsMesoFragmentMember[atom];
}
;
_.isMeso = function isMeso(){
  var atom, meso;
  meso = true;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mTHParity[atom] != 0 && !this.mIsMesoFragmentMember[atom]) {
      meso = false;
      break;
    }
  }
  return meso;
}
;
_.isTetrahedral = function isTetrahedral(atom){
  return this.mMol.getAtomicNo_0(atom) == 6 && this.mMol.getAtomPi_0(atom) == 0 || this.mMol.getAtomicNo_0(atom) == 7 && this.mMol.getAtomCharge_0(atom) == 1 || this.mMol.getAtomicNo_0(atom) == 14 || this.mMol.getAtomicNo_0(atom) == 15 && this.mMol.getConnAtoms_0(atom) > 2 || this.mMol.getAtomicNo_0(atom) == 16 && this.mMol.getConnAtoms_0(atom) > 2;
}
;
_.mayBeMirrorAtoms = function mayBeMirrorAtoms(atom1, atom2){
  var bond, bond1, bond2, i, i0;
  if (atom1 == atom2)
    return false;
  if (this.mCanRankWithoutStereo[atom1] != this.mCanRankWithoutStereo[atom2])
    return false;
  if (this.mTHParity[atom1] != 0) {
    if (this.mTHParity[atom1] == 3 || this.mTHParity[atom2] == 3)
      return false;
    if (this.mTHParityRoundIsOdd[atom1] ^ this.mTHParity[atom1] != this.mTHParity[atom2])
      return false;
    if (this.mTHESRType[atom1] != this.mTHESRType[atom2] || this.mTHESRGroup[atom1] != this.mTHESRGroup[atom2])
      return false;
  }
  bond = this.mMol.getBond_0(atom1, atom2);
  if (bond != -1) {
    if (this.mMol.getBondOrder_0(bond) == 1 && this.mEZParity[bond] != 0)
      return false;
    if (this.mMol.getBondOrder_0(bond) == 2 && this.mEZParity[bond] == 2)
      return false;
  }
  if (this.mMol.getAtomPi_0(atom1) == 1 && !this.mMol.isAromaticAtom_1(atom1)) {
    bond1 = -1;
    for (i0 = 0; i0 < this.mMol.getConnAtoms_0(atom1); i0++) {
      if (this.mMol.getConnAtom_0(atom1, i0) != atom2 && this.mMol.getConnBondOrder_0(atom1, i0) == 2) {
        bond1 = this.mMol.getConnBond_0(atom1, i0);
        break;
      }
    }
    bond2 = -1;
    for (i = 0; i < this.mMol.getConnAtoms_0(atom2); i++) {
      if (this.mMol.getConnAtom_0(atom2, i) != atom1 && this.mMol.getConnBondOrder_0(atom2, i) == 2) {
        bond2 = this.mMol.getConnBond_0(atom2, i);
        break;
      }
    }
    if (bond1 != -1 && this.mEZParity[bond1] != 0 && this.mEZParityRoundIsOdd[bond1] ^ this.mEZParity[bond1] == this.mEZParity[bond2])
      return false;
  }
  return true;
}
;
_.normalizeESRGroupSwapping = function normalizeESRGroupSwapping(fragment, group, type_0, canRank){
  var absAtom, atom, comparison, groupAtom, i, i0;
  groupAtom = null;
  absAtom = null;
  for (i0 = 0; i0 < this.mMesoFragmentAtom[fragment].length; i0++) {
    atom = this.mMesoFragmentAtom[fragment][i0];
    if (this.hasParity1or2(atom)) {
      if (this.mTHESRType[atom] == 0)
        absAtom = carc.addToIntArray(absAtom, (canRank[atom] << 16) + atom);
      else if (this.mTHESRType[atom] == type_0 && this.mTHESRGroup[atom] == group)
        groupAtom = carc.addToIntArray(groupAtom, (canRank[atom] << 16) + atom);
    }
  }
  comparison = (new carc.CanonizerRankListComparator).compare_2(groupAtom, absAtom);
  if (comparison == 0)
    return false;
  if (comparison < 0) {
    for (i = 0; i < this.mMesoFragmentAtom[fragment].length; i++) {
      atom = this.mMesoFragmentAtom[fragment][i];
      if (this.hasParity1or2(atom)) {
        if (this.mTHESRType[atom] == 0) {
          this.mTHESRType[atom] = narrow_byte(type_0);
          this.mTHESRGroup[atom] = narrow_byte(group);
        }
         else if (this.mTHESRType[atom] == type_0 && this.mTHESRGroup[atom] == group) {
          this.mTHESRType[atom] = 0;
          this.mTHESRGroup[atom] = -1;
        }
      }
    }
  }
  return true;
}
;
_.normalizeESRGroupSwappingAndRemoval = function normalizeESRGroupSwappingAndRemoval(canRank){
  var atom, done, doneAny, i, info, j;
  if (isNull(this.mESRGroupNormalizationInfoList))
    return false;
  doneAny = false;
  for (i = this.mESRGroupNormalizationInfoList.size() - 1; i >= 0; i--) {
    done = false;
    info = castTo(this.mESRGroupNormalizationInfoList.getAtIndex(i), 55);
    if (info.action == 2) {
      done = this.normalizeESRGroupSwapping(info.fragment_0, info.group, info.type_0, canRank);
    }
     else if (info.action == 1) {
      done = this.removeESRGroupFromFragment(info.fragment_0, canRank);
    }
    if (done) {
      this.mESRGroupNormalizationInfoList.remove(info);
      for (j = 0; j < this.mMesoFragmentAtom[info.fragment_0].length; j++) {
        atom = this.mMesoFragmentAtom[info.fragment_0][j];
        this.mTHESRTypeNeedsNormalization[atom] = false;
      }
      doneAny = true;
    }
  }
  return doneAny;
}
;
_.normalizeESRGroups = function normalizeESRGroups(){
  var andCount, containsABS, dependentGroupCount, fragment, group, matrix, orCount, type_0;
  if (jsNotEquals(this.mMesoFragmentAtom, null)) {
    matrix = new carc.CanonizerMesoHelper$ESRGroupFragmentMatrix(this);
    this.mESRGroupNormalizationInfoList = new ju.ArrayList;
    for (fragment = 0; fragment < this.mMesoFragmentAtom.length; fragment++) {
      dependentGroupCount = matrix.getDependentGroupCount(fragment);
      if (dependentGroupCount == 0) {
        matrix.cutTiesOfIndependentGroups(fragment);
        orCount = this.countESRGroups(fragment, 2);
        andCount = this.countESRGroups(fragment, 1);
        containsABS = this.containsTypeABSParity1Or2(fragment);
        if (orCount == 1 && andCount == 1 && !containsABS) {
          this.putORAtomsIntoANDGroup(fragment, matrix.newESRGroup(1));
          this.mESRGroupNormalizationInfoList.add(new carc.ESRGroupNormalizationInfo(fragment, 1, -1, -1));
        }
        if (orCount > 0) {
          if (containsABS) {
            this.putABSAtomsIntoESRGroup(fragment, matrix.newESRGroup(2), 2);
            orCount++;
          }
          this.mESRGroupNormalizationInfoList.add(new carc.ESRGroupNormalizationInfo(fragment, 1, -1, -1));
        }
         else if (andCount > 0) {
          if (containsABS)
            this.putABSAtomsIntoESRGroup(fragment, matrix.newESRGroup(1), 1);
          this.mESRGroupNormalizationInfoList.add(new carc.ESRGroupNormalizationInfo(fragment, 1, -1, -1));
        }
         else if (containsABS) {
          this.putABSAtomsIntoESRGroup(fragment, matrix.newESRGroup(1), 1);
          this.mESRGroupNormalizationInfoList.add(new carc.ESRGroupNormalizationInfo(fragment, 1, -1, -1));
        }
      }
       else if (dependentGroupCount == 1) {
        if (this.containsTypeABSParity1Or2(fragment)) {
          group = matrix.getDependentGroup(fragment);
          type_0 = matrix.getDependentType(fragment);
          this.mESRGroupNormalizationInfoList.add(new carc.ESRGroupNormalizationInfo(fragment, 2, group, type_0));
        }
         else {
          matrix.cutTiesOfIndependentGroups(fragment);
          this.mESRGroupNormalizationInfoList.add(new carc.ESRGroupNormalizationInfo(fragment, 1, -1, -1));
        }
      }
    }
  }
}
;
_.putABSAtomsIntoESRGroup = function putABSAtomsIntoESRGroup(fragment, esrGroup, esrType){
  var atom, j;
  for (j = 0; j < this.mMesoFragmentAtom[fragment].length; j++) {
    atom = this.mMesoFragmentAtom[fragment][j];
    if (this.hasParity1or2(atom) && this.mTHESRType[atom] == 0) {
      this.mTHESRType[atom] = narrow_byte(esrType);
      this.mTHESRGroup[atom] = narrow_byte(esrGroup);
    }
  }
}
;
_.putORAtomsIntoANDGroup = function putORAtomsIntoANDGroup(fragment, esrGroup){
  var atom, j;
  for (j = 0; j < this.mMesoFragmentAtom[fragment].length; j++) {
    atom = this.mMesoFragmentAtom[fragment][j];
    if (this.mTHESRType[atom] == 2) {
      this.mTHESRType[atom] = 1;
      this.mTHESRGroup[atom] = narrow_byte(esrGroup);
    }
  }
}
;
_.removeESRGroupFromFragment = function removeESRGroupFromFragment(fragment, canRank){
  var atom, esrType, fragmentAtom, groupMember, i, i0, i1, i2;
  fragmentAtom = this.mMesoFragmentAtom[fragment];
  esrType = 1;
  for (i0 = 0; i0 < fragmentAtom.length; i0++) {
    atom = fragmentAtom[i0];
    if (this.mIsStereoCenter[atom] && this.mTHESRType[atom] == 2) {
      esrType = 2;
      break;
    }
  }
  groupMember = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, 32, 0, 2);
  for (i1 = 0; i1 < fragmentAtom.length; i1++) {
    atom = fragmentAtom[i1];
    if (this.mIsStereoCenter[atom] && this.mTHESRType[atom] == esrType)
      groupMember[this.mTHESRGroup[atom]] = carc.addToIntArray(groupMember[this.mTHESRGroup[atom]], (canRank[atom] << 16) + atom);
  }
  for (i2 = 0; i2 < 32; i2++)
    if (jsNotEquals(groupMember[i2], null))
      ju.sort_3(groupMember[i2]);
  ju.sort_7(groupMember, new carc.CanonizerRankListComparator);
  if ((new carc.CanonizerRankListComparator).compare_2(groupMember[0], groupMember[1]) == 0)
    return false;
  for (i = 0; i < groupMember[0].length; i++) {
    atom = groupMember[0][i] & 65535;
    this.mTHESRType[atom] = 0;
    this.mTHESRGroup[atom] = -1;
  }
  return true;
}
;
_.tryFindMesoFragment = function tryFindMesoFragment(atom1, atom2){
  var b, branch, candidate, connIsOnMirrorPlane, current, currentAtom, found, graphAtom, hasOrthogonality, highest, i, i0, i1, isFragmentMember, isOrthogonal, j, k, matchAtom, opponent, symAtom1, symAtom2;
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  matchAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  isFragmentMember = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  isOrthogonal = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  hasOrthogonality = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  branch = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_MesoFragmentBranch_2_classLit, {4:1, 1:1, 8:1}, 152, this.mMol.getAtoms_0(), 0, 1);
  graphAtom[0] = atom1;
  matchAtom[atom1] = atom2;
  matchAtom[atom2] = -2;
  isFragmentMember[atom1] = true;
  isFragmentMember[atom2] = true;
  current = 0;
  highest = 0;
  while (current <= highest) {
    currentAtom = graphAtom[current];
    if (matchAtom[currentAtom] == currentAtom) {
      for (i = 0; i < this.mMol.getConnAtoms_0(currentAtom); i++) {
        candidate = this.mMol.getConnAtom_0(currentAtom, i);
        if (!isFragmentMember[candidate]) {
          if (this.mMol.getConnBondOrder_0(currentAtom, i) == 2 && this.mMol.getAtomicNo_0(candidate) < 10) {
            graphAtom[++highest] = candidate;
            matchAtom[candidate] = candidate;
            hasOrthogonality[candidate] = hasOrthogonality[currentAtom] || this.mMol.getAtomPi_0(candidate) == 2;
            isOrthogonal[candidate] = hasOrthogonality[currentAtom]?!isOrthogonal[currentAtom]:false;
            isFragmentMember[candidate] = true;
          }
           else if (hasOrthogonality[currentAtom] && isOrthogonal[currentAtom]) {
            opponent = this.findMirrorAtom(candidate, matchAtom[currentAtom], isFragmentMember);
            if (opponent == -1)
              return null;
            graphAtom[++highest] = candidate;
            matchAtom[candidate] = opponent;
            matchAtom[opponent] = -2;
            hasOrthogonality[candidate] = false;
            isFragmentMember[candidate] = true;
            isFragmentMember[opponent] = true;
          }
           else if (this.mMol.isRingBond_0(this.mMol.getConnBond_0(currentAtom, i))) {
            graphAtom[++highest] = candidate;
            matchAtom[candidate] = candidate;
            hasOrthogonality[candidate] = false;
            isFragmentMember[candidate] = true;
            if (this.isTetrahedral(candidate) && this.mMol.getConnAtoms_0(candidate) > 2) {
              found = false;
              for (j = 1; j < this.mMol.getConnAtoms_0(candidate); j++) {
                symAtom1 = this.mMol.getConnAtom_0(candidate, j);
                if (!isFragmentMember[symAtom1]) {
                  for (k = 0; k < j; k++) {
                    symAtom2 = this.mMol.getConnAtom_0(candidate, k);
                    if (!isFragmentMember[symAtom2]) {
                      if (this.mayBeMirrorAtoms(symAtom1, symAtom2)) {
                        graphAtom[++highest] = symAtom1;
                        matchAtom[symAtom1] = symAtom2;
                        matchAtom[symAtom2] = -2;
                        hasOrthogonality[symAtom1] = false;
                        isFragmentMember[symAtom1] = true;
                        isFragmentMember[symAtom2] = true;
                        found = true;
                      }
                    }
                  }
                }
              }
              if (!found)
                return null;
            }
          }
        }
      }
    }
     else {
      connIsOnMirrorPlane = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getConnAtoms_0(currentAtom), 16, 1);
      for (i0 = 0; i0 < this.mMol.getConnAtoms_0(currentAtom); i0++) {
        candidate = this.mMol.getConnAtom_0(currentAtom, i0);
        if (isFragmentMember[candidate]) {
          connIsOnMirrorPlane[i0] = matchAtom[candidate] == candidate;
        }
         else {
          for (j = 0; j < this.mMol.getConnAtoms_0(candidate); j++) {
            if (this.mMol.getConnAtom_0(candidate, j) == matchAtom[currentAtom]) {
              connIsOnMirrorPlane[i0] = true;
              break;
            }
          }
        }
      }
      for (i1 = 0; i1 < this.mMol.getConnAtoms_0(currentAtom); i1++) {
        if (connIsOnMirrorPlane[i1]) {
          candidate = this.mMol.getConnAtom_0(currentAtom, i1);
          if (isFragmentMember[candidate]) {
            if (this.mMol.getBond_0(candidate, matchAtom[currentAtom]) == -1)
              return null;
          }
           else {
            graphAtom[++highest] = candidate;
            matchAtom[candidate] = candidate;
            isOrthogonal[candidate] = false;
            hasOrthogonality[candidate] = true;
            isFragmentMember[candidate] = true;
          }
        }
      }
      b = branch[currentAtom];
      for (i = isNull(b)?0:b.neighbourIndex; i < this.mMol.getConnAtoms_0(currentAtom); i++) {
        if (!connIsOnMirrorPlane[i]) {
          candidate = this.mMol.getConnAtom_0(currentAtom, i);
          if (!isFragmentMember[candidate]) {
            opponent = this.findMirrorAtom(candidate, matchAtom[currentAtom], isFragmentMember);
            if (opponent == -1)
              return null;
            graphAtom[++highest] = candidate;
            matchAtom[candidate] = opponent;
            matchAtom[opponent] = -2;
            hasOrthogonality[candidate] = false;
            isFragmentMember[candidate] = true;
            isFragmentMember[opponent] = true;
          }
        }
      }
    }
    current++;
  }
  return isFragmentMember;
}
;
carc.REMOVE_ESR_GROUP = 1;
carc.SWAP_ESR_GROUPS = 2;
cggl.Lcom_actelion_research_chem_CanonizerMesoHelper_2_classLit = createForClass('com.actelion.research.chem', 'CanonizerMesoHelper', 249, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_CanonizerMesoHelper$1 = function $clinit_CanonizerMesoHelper$1(){
  carc.$clinit_CanonizerMesoHelper$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
carc.CanonizerMesoHelper$1 = function CanonizerMesoHelper$1(this$0){
  carc.$clinit_CanonizerMesoHelper$1();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_12();
}
;
defineClass(251, 1, {1:1, 26:1}, carc.CanonizerMesoHelper$1);
_.$init_12 = function $init_12(){
}
;
_.compare_0 = function compare_4(a1, a2){
  return this.compare_2(castTo(a1, 6), castTo(a2, 6));
}
;
_.equals_0 = function equals_2(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_2 = function compare_5(a1, a2){
  var i;
  if (a1.length != a2.length)
    return a1.length < a2.length?-1:1;
  for (i = 0; i < a1.length; i++)
    if (a1[i] != a2[i])
      return a1[i] < a2[i]?-1:1;
  return 0;
}
;
cggl.Lcom_actelion_research_chem_CanonizerMesoHelper$1_2_classLit = createForClass('com.actelion.research.chem', 'CanonizerMesoHelper/1', 251, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix = function $clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix(){
  carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix = emptyMethod;
  jl.$clinit_Object();
}
;
carc.CanonizerMesoHelper$ESRGroupFragmentMatrix = function CanonizerMesoHelper$ESRGroupFragmentMatrix(this$0){
  carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix();
  var anchorGroup, atom, atom0, atom1, chainMemberLevel, cycle, fragment, fragment0, fragment1, fragment2, group, group0, group1, group2, i, j;
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_13();
  for (atom0 = 0; atom0 < this$0.mMol.getAtoms_0(); atom0++) {
    if (this$0.hasParity1or2(atom0)) {
      if (this$0.mTHESRType[atom0] == 1) {
        if (this.mAndGroupCount <= this$0.mTHESRGroup[atom0])
          this.mAndGroupCount = 1 + this$0.mTHESRGroup[atom0];
      }
       else if (this$0.mTHESRType[atom0] == 2) {
        if (this.mOrGroupCount <= this$0.mTHESRGroup[atom0])
          this.mOrGroupCount = 1 + this$0.mTHESRGroup[atom0];
      }
    }
  }
  this.mGroupCount = this.mAndGroupCount + this.mOrGroupCount;
  this.mMatrix = initMultidimensionalArray(cggl.Z_classLit, [{4:1, 1:1, 8:1}, {12:1, 4:1, 1:1}], [12, 5], 16, [this.mGroupCount + 1, this$0.mMesoFragmentAtom.length + 1], 2);
  for (atom1 = 0; atom1 < this$0.mMol.getAtoms_0(); atom1++)
    if (this$0.hasParity1or2(atom1) && !this$0.mIsMesoFragmentMember[atom1])
      this.mMatrix[this.groupIndex(atom1)][this$0.mMesoFragmentAtom.length] = true;
  for (fragment0 = 0; fragment0 < this$0.mMesoFragmentAtom.length; fragment0++) {
    for (j = 0; j < this$0.mMesoFragmentAtom[fragment0].length; j++) {
      atom = this$0.mMesoFragmentAtom[fragment0][j];
      if (this$0.hasParity1or2(atom))
        this.mMatrix[this.groupIndex(atom)][fragment0] = true;
    }
  }
  this.mGroupNeighbour = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mGroupCount, 0, 2);
  for (fragment1 = 0; fragment1 < this$0.mMesoFragmentAtom.length; fragment1++) {
    for (group1 = 1; group1 < this.mGroupCount; group1++) {
      if (this.mMatrix[group1][fragment1]) {
        for (group2 = 0; group2 < group1; group2++) {
          if (this.mMatrix[group2][fragment1]) {
            this.mGroupNeighbour[group1] = carc.addToIntArray(this.mGroupNeighbour[group1], group2);
            this.mGroupNeighbour[group2] = carc.addToIntArray(this.mGroupNeighbour[group2], group1);
          }
        }
      }
    }
  }
  this.mGroupDependence = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mGroupCount + 1, 15, 1);
  for (group0 = 0; group0 < this.mGroupCount; group0++) {
    if (this.mMatrix[group0][this$0.mMesoFragmentAtom.length])
      this.mGroupDependence[group0] = -1;
    else 
      this.mGroupDependence[group0] = -2;
  }
  for (fragment2 = 0; fragment2 < this$0.mMesoFragmentAtom.length; fragment2++) {
    if (this.mMatrix[this.mGroupCount][fragment2]) {
      for (group = 0; group < this.mGroupCount; group++) {
        if (this.mMatrix[group][fragment2] && this.mGroupDependence[group] != fragment2) {
          if (this.mGroupDependence[group] == -2)
            this.mGroupDependence[group] = fragment2;
          else 
            this.mGroupDependence[group] = -3;
        }
      }
    }
  }
  for (anchorGroup = 0; anchorGroup < this.mGroupCount; anchorGroup++) {
    if (this.mGroupDependence[anchorGroup] >= -1) {
      chainMemberLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mGroupCount, 15, 1);
      if (this.extendAnchorChain(chainMemberLevel, anchorGroup)) {
        for (group = 0; group < this.mGroupCount; group++) {
          if (chainMemberLevel[group] != 0)
            this.mGroupDependence[group] = -3;
        }
      }
    }
  }
  for (fragment = 0; fragment < this$0.mMesoFragmentAtom.length - 1; fragment++) {
    for (group1 = 1; group1 < this.mGroupCount; group1++) {
      if (this.mMatrix[group1][fragment] && this.mGroupDependence[group1] != -3) {
        for (group2 = 0; group2 < group1; group2++) {
          if (this.mMatrix[group2][fragment] && this.mGroupDependence[group2] != -3) {
            cycle = this.getDependencyCycle(group1, group2, fragment);
            if (jsNotEquals(cycle, null)) {
              for (i = 0; i < cycle.length; i++)
                this.mGroupDependence[cycle[i]] = -3;
              this.removeOneGroupFromCycle(cycle);
              break;
            }
          }
        }
      }
    }
  }
}
;
defineClass(250, 1, {1:1}, carc.CanonizerMesoHelper$ESRGroupFragmentMatrix);
_.$init_13 = function $init_13(){
}
;
_.cutTiesOfIndependentGroups = function cutTiesOfIndependentGroups(fragment){
  carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix();
  var atom, f, group, i, newESRGroup, oldESRGroup;
  for (group = 0; group < this.mGroupCount; group++) {
    if (this.mMatrix[group][fragment] && this.mGroupDependence[group] != -3) {
      for (f = 0; f <= this.this$01.mMesoFragmentAtom.length; f++) {
        if (f != fragment && this.mMatrix[group][f]) {
          this.mMatrix[group][fragment] = false;
          oldESRGroup = this.getESRGroup(group);
          newESRGroup = this.newESRGroup(this.getESRType(group));
          for (i = 0; i < this.this$01.mMesoFragmentAtom[fragment].length; i++) {
            atom = this.this$01.mMesoFragmentAtom[fragment][i];
            if (this.this$01.hasParity1or2(atom) && this.this$01.mTHESRGroup[atom] == oldESRGroup)
              this.this$01.mTHESRGroup[atom] = narrow_byte(newESRGroup);
          }
        }
      }
    }
  }
}
;
_.extendAnchorChain = function extendAnchorChain(chainMemberLevel, anchorGroup){
  var chainExtentionFound, group1, group2, level, secondAnchorFound;
  secondAnchorFound = false;
  level = 1;
  chainMemberLevel[anchorGroup] = level;
  chainExtentionFound = true;
  while (chainExtentionFound) {
    chainExtentionFound = false;
    for (group1 = 0; group1 < this.mGroupCount; group1++) {
      if (chainMemberLevel[group1] == level) {
        for (group2 = 0; group2 < this.mGroupCount; group2++) {
          if (chainMemberLevel[group2] == 0 && this.groupsShareFragment(group1, group2)) {
            if (this.mGroupDependence[group2] == -2) {
              chainMemberLevel[group2] = level + 1;
              chainExtentionFound = true;
            }
             else if (this.mGroupDependence[group2] != this.mGroupDependence[anchorGroup]) {
              chainMemberLevel[group2] = level + 1;
              secondAnchorFound = true;
            }
          }
        }
      }
    }
    level++;
  }
  return secondAnchorFound;
}
;
_.getDependencyCycle = function getDependencyCycle(group1, group2, startFragment){
  var candidate, current, cycle, cycleLength, fragment, graphGroup, graphLevel, highest, i, j, parentGroup;
  for (fragment = startFragment + 1; fragment < this.this$01.mMesoFragmentAtom.length; fragment++) {
    if (fragment != startFragment && this.mMatrix[group1][fragment] && this.mMatrix[group2][fragment]) {
      cycle = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
      cycle[0] = group2;
      cycle[1] = group1;
      return cycle;
    }
  }
  parentGroup = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mGroupCount, 15, 1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mGroupCount, 15, 1);
  graphGroup = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mGroupCount, 15, 1);
  current = 0;
  highest = 0;
  graphGroup[0] = group1;
  graphLevel[group1] = 1;
  while (current <= highest) {
    for (i = 0; i < this.mGroupNeighbour[graphGroup[current]].length; i++) {
      candidate = this.mGroupNeighbour[graphGroup[current]][i];
      if (candidate == group2) {
        if (current == 0)
          continue;
        cycleLength = graphLevel[graphGroup[current]] + 1;
        cycle = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, cycleLength, 15, 1);
        cycle[0] = candidate;
        cycle[1] = graphGroup[current];
        for (j = 2; j < cycleLength; j++)
          cycle[j] = parentGroup[cycle[j - 1]];
        return cycle;
      }
      if (graphLevel[candidate] == 0 && this.mGroupDependence[candidate] != -3) {
        graphLevel[candidate] = graphLevel[graphGroup[current]] + 1;
        graphGroup[++highest] = candidate;
        parentGroup[candidate] = graphGroup[current];
      }
    }
    current++;
  }
  return null;
}
;
_.getDependentGroup = function getDependentGroup(fragment){
  carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix();
  var group;
  for (group = 0; group < this.mGroupCount; group++)
    if (this.mMatrix[group][fragment] && this.mGroupDependence[group] == -3)
      return this.getESRGroup(group);
  return -1;
}
;
_.getDependentGroupCount = function getDependentGroupCount(fragment){
  carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix();
  var count, group;
  count = 0;
  for (group = 0; group < this.mGroupCount; group++)
    if (this.mMatrix[group][fragment] && this.mGroupDependence[group] == -3)
      count++;
  return count;
}
;
_.getDependentType = function getDependentType(fragment){
  carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix();
  var group;
  for (group = 0; group < this.mGroupCount; group++)
    if (this.mMatrix[group][fragment] && this.mGroupDependence[group] == -3)
      return this.getESRType(group);
  return -1;
}
;
_.getESRGroup = function getESRGroup(group){
  return group < this.mAndGroupCount?group:group < this.mGroupCount?group - this.mAndGroupCount:-1;
}
;
_.getESRType = function getESRType(group){
  return group < this.mAndGroupCount?1:group < this.mGroupCount?2:0;
}
;
_.groupIndex = function groupIndex(atom){
  var group, type_0;
  type_0 = this.this$01.mTHESRType[atom];
  group = this.this$01.mTHESRGroup[atom];
  return type_0 == 0?this.mGroupCount:type_0 == 1?group:this.mAndGroupCount + group;
}
;
_.groupsShareFragment = function groupsShareFragment(group1, group2){
  var fragment;
  for (fragment = 0; fragment < this.this$01.mMesoFragmentAtom.length; fragment++)
    if (this.mMatrix[group1][fragment] && this.mMatrix[group2][fragment])
      return true;
  return false;
}
;
_.newESRGroup = function newESRGroup_0(esrType){
  carc.$clinit_CanonizerMesoHelper$ESRGroupFragmentMatrix();
  return esrType == 1?this.mAndGroupCount + this.mNewAndGroupCount++:this.mOrGroupCount + this.mNewOrGroupCount++;
}
;
_.removeOneGroupFromCycle = function removeOneGroupFromCycle(cycle){
  var atom, atom0, esrGroup, esrType, fragment, i, minGroup, minGroupIndex, minRank, minType;
  minRank = 2147483647;
  minGroup = -1;
  minType = -1;
  minGroupIndex = -1;
  for (atom0 = 0; atom0 < this.this$01.mMol.getAtoms_0(); atom0++) {
    if (this.this$01.hasParity1or2(atom0) && this.this$01.mTHESRType[atom0] != 0) {
      for (i = 0; i < cycle.length; i++) {
        esrGroup = this.getESRGroup(cycle[i]);
        esrType = this.getESRType(cycle[i]);
        if (this.this$01.mTHESRType[atom0] == esrType && this.this$01.mTHESRGroup[atom0] == esrGroup) {
          if (minRank > this.this$01.mCanRankWithoutStereo[atom0] + (esrType == 1?65536:0)) {
            minRank = this.this$01.mCanRankWithoutStereo[atom0] + (esrType == 1?65536:0);
            minGroup = esrGroup;
            minType = esrType;
            minGroupIndex = cycle[i];
          }
        }
      }
    }
  }
  for (atom = 0; atom < this.this$01.mMol.getAtoms_0(); atom++) {
    if (this.this$01.hasParity1or2(atom) && this.this$01.mTHESRType[atom] == minType && this.this$01.mTHESRGroup[atom] == minGroup) {
      this.this$01.mTHESRType[atom] = 0;
      this.this$01.mTHESRGroup[atom] = -1;
    }
  }
  for (fragment = 0; fragment < this.this$01.mMesoFragmentAtom.length; fragment++)
    this.mMatrix[minGroupIndex][fragment] = false;
}
;
_.mAndGroupCount = 0;
_.mGroupCount = 0;
_.mNewAndGroupCount = 0;
_.mNewOrGroupCount = 0;
_.mOrGroupCount = 0;
cggl.Lcom_actelion_research_chem_CanonizerMesoHelper$ESRGroupFragmentMatrix_2_classLit = createForClass('com.actelion.research.chem', 'CanonizerMesoHelper/ESRGroupFragmentMatrix', 250, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_CanonizerParity = function $clinit_CanonizerParity(){
  carc.$clinit_CanonizerParity = emptyMethod;
}
;
defineClass(397, 1, {20:1, 1:1});
cggl.Lcom_actelion_research_chem_CanonizerParity_2_classLit = createForClass('com.actelion.research.chem', 'CanonizerParity', 397, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_CanonizerRankListComparator = function $clinit_CanonizerRankListComparator(){
  carc.$clinit_CanonizerRankListComparator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
carc.CanonizerRankListComparator = function CanonizerRankListComparator(){
  carc.$clinit_CanonizerRankListComparator();
  Object_0.call(this);
  this.$init_14();
}
;
defineClass(125, 1, {1:1, 26:1}, carc.CanonizerRankListComparator);
_.$init_14 = function $init_14(){
}
;
_.compare_0 = function compare_6(o1, o2){
  return this.compare_2(castTo(o1, 6), castTo(o2, 6));
}
;
_.equals_0 = function equals_3(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_2 = function compare_7(o1, o2){
  var count, i;
  if (jsEquals(o1, null))
    return jsEquals(o2, null)?0:1;
  if (jsEquals(o2, null))
    return -1;
  count = $wnd.Math.min(o1.length, o2.length);
  for (i = 0; i < count; i++)
    if ((o1[i] & -65536) != (o2[i] & -65536))
      return (o1[i] & -65536) < (o2[i] & -65536)?-1:1;
  return o1.length == o2.length?0:o1.length < o2.length?-1:1;
}
;
cggl.Lcom_actelion_research_chem_CanonizerRankListComparator_2_classLit = createForClass('com.actelion.research.chem', 'CanonizerRankListComparator', 125, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Coordinates = function $clinit_Coordinates(){
  carc.$clinit_Coordinates = emptyMethod;
  jl.$clinit_Object();
}
;
carc.Coordinates_0 = function Coordinates_0(){
  carc.$clinit_Coordinates();
  Object_0.call(this);
  this.$init_15();
}
;
carc.Coordinates_1 = function Coordinates_1(x_0, y_0, z_0){
  Object_0.call(this);
  this.$init_15();
  this.x_0 = x_0;
  this.y_0 = y_0;
  this.z_0 = z_0;
}
;
defineClass(47, 1, {47:1, 4:1, 20:1, 1:1}, carc.Coordinates_0, carc.Coordinates_1);
_.$init_15 = function $init_15(){
}
;
_.compareTo_1 = function compareTo_2(o){
  return this.compareTo_2(castTo(o, 47));
}
;
_.compareTo_2 = function compareTo_1(o){
  if (this.x_0 != o.x_0)
    return this.x_0 < o.x_0?-1:1;
  if (this.y_0 != o.y_0)
    return this.y_0 < o.y_0?-1:1;
  if (this.z_0 != o.z_0)
    return this.z_0 < o.z_0?-1:1;
  return 0;
}
;
_.cross = function cross(c){
  return new carc.Coordinates_1(this.y_0 * c.z_0 - this.z_0 * c.y_0, -(this.x_0 * c.z_0 - this.z_0 * c.x_0), this.x_0 * c.y_0 - this.y_0 * c.x_0);
}
;
_.dist = function dist_0(){
  return $wnd.Math.sqrt(this.distSq());
}
;
_.distSq = function distSq(){
  return this.x_0 * this.x_0 + this.y_0 * this.y_0 + this.z_0 * this.z_0;
}
;
_.distance = function distance_0(c){
  return $wnd.Math.sqrt(this.distanceSquared(c));
}
;
_.distanceSquared = function distanceSquared(c){
  return (c.x_0 - this.x_0) * (c.x_0 - this.x_0) + (c.y_0 - this.y_0) * (c.y_0 - this.y_0) + (c.z_0 - this.z_0) * (c.z_0 - this.z_0);
}
;
_.dot = function dot_0(c){
  return this.x_0 * c.x_0 + this.y_0 * c.y_0 + this.z_0 * c.z_0;
}
;
_.equals_0 = function equals_4(o){
  var c;
  if (jsEquals(o, null) || !instanceOf(o, 47))
    return false;
  c = castTo(o, 47);
  return $wnd.Math.abs(c.x_0 - this.x_0) + $wnd.Math.abs(c.y_0 - this.y_0) + $wnd.Math.abs(c.z_0 - this.z_0) < 1.0E-6;
}
;
_.getLength = function getLength(){
  return this.dist();
}
;
_.isNaN_0 = function isNaN_0(){
  return isNaN(this.x_0) || isNaN(this.y_0) || isNaN(this.z_0);
}
;
_.set_0 = function set_1(x_0, y_0, z_0){
  this.x_0 = x_0;
  this.y_0 = y_0;
  this.z_0 = z_0;
}
;
_.set_1 = function set_2(c){
  this.set_0(c.x_0, c.y_0, c.z_0);
  return this;
}
;
_.subC = function subC(c){
  return new carc.Coordinates_1(this.x_0 - c.x_0, this.y_0 - c.y_0, this.z_0 - c.z_0);
}
;
_.toString_0 = function toString_2(){
  var df;
  df = new jt.DecimalFormat('0.00');
  return '[' + df.format(this.x_0) + ', ' + df.format(this.y_0) + ', ' + df.format(this.z_0) + ']';
}
;
_.x_0 = 0;
_.y_0 = 0;
_.z_0 = 0;
cggl.Lcom_actelion_research_chem_Coordinates_2_classLit = createForClass('com.actelion.research.chem', 'Coordinates', 47, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_DepictorTransformation = function $clinit_DepictorTransformation(){
  carc.$clinit_DepictorTransformation = emptyMethod;
  jl.$clinit_Object();
}
;
carc.DepictorTransformation = function DepictorTransformation(){
  carc.$clinit_DepictorTransformation();
  Object_0.call(this);
  this.$init_16();
  this.clear_0();
}
;
carc.DepictorTransformation_0 = function DepictorTransformation_0(bounds, view, averageBondLength, mode){
  carc.$clinit_DepictorTransformation();
  var bScaling, hScaling, maxAVBL, vScaling;
  Object_0.call(this);
  this.$init_16();
  this.clear_0();
  if (isNotNull(view)) {
    if ((mode & 196608) == 0) {
      if (!view.contains_3(bounds)) {
        if (bounds.width_0 > view.width_0 || bounds.height > view.height) {
          hScaling = view.width_0 / bounds.width_0;
          vScaling = view.height / bounds.height;
          this.mScaling = $wnd.Math.min(hScaling, vScaling);
        }
        if (bounds.x_0 * this.mScaling < view.x_0)
          this.mOffsetX = view.x_0 - bounds.x_0 * this.mScaling;
        else if ((bounds.x_0 + bounds.width_0) * this.mScaling > view.x_0 + view.width_0)
          this.mOffsetX = view.x_0 + view.width_0 - (bounds.x_0 + bounds.width_0) * this.mScaling;
        if (bounds.y_0 * this.mScaling < view.y_0)
          this.mOffsetY = view.y_0 - bounds.y_0 * this.mScaling;
        else if ((bounds.y_0 + bounds.height) * this.mScaling > view.y_0 + view.height)
          this.mOffsetY = view.y_0 + view.height - (bounds.y_0 + bounds.height) * this.mScaling;
      }
    }
     else {
      hScaling = view.width_0 / bounds.width_0;
      vScaling = view.height / bounds.height;
      maxAVBL = mode & 65535;
      if (maxAVBL == 0)
        maxAVBL = 24;
      else if ((mode & 131072) != 0)
        maxAVBL /= 256;
      bScaling = maxAVBL / averageBondLength;
      this.mScaling = $wnd.Math.min(bScaling, $wnd.Math.min(hScaling, vScaling));
      this.mOffsetX = view.x_0 + view.width_0 / 2 - this.mScaling * (bounds.x_0 + bounds.width_0 / 2);
      this.mOffsetY = view.y_0 + view.height / 2 - this.mScaling * (bounds.y_0 + bounds.height / 2);
    }
  }
   else if ((mode & 65536) != 0) {
    maxAVBL = (mode & 65535) != 0?mode & 65535:24;
    this.mScaling = maxAVBL / averageBondLength;
  }
}
;
defineClass(118, 1, {1:1}, carc.DepictorTransformation, carc.DepictorTransformation_0);
_.$init_16 = function $init_16(){
}
;
_.applyTo = function applyTo(t){
  t.mScaling *= this.mScaling;
  t.mOffsetX = t.mOffsetX * this.mScaling + this.mOffsetX;
  t.mOffsetY = t.mOffsetY * this.mScaling + this.mOffsetY;
}
;
_.applyTo_0 = function applyTo_0(p){
  p.x_0 = p.x_0 * this.mScaling + this.mOffsetX;
  p.y_0 = p.y_0 * this.mScaling + this.mOffsetY;
}
;
_.applyTo_1 = function applyTo_1(r){
  r.x_0 = r.x_0 * this.mScaling + this.mOffsetX;
  r.y_0 = r.y_0 * this.mScaling + this.mOffsetY;
  r.width_0 *= this.mScaling;
  r.height *= this.mScaling;
}
;
_.clear_0 = function clear_0(){
  this.mOffsetX = 0;
  this.mOffsetY = 0;
  this.mScaling = 1;
}
;
_.getScaling = function getScaling(){
  return this.mScaling;
}
;
_.isVoidTransformation = function isVoidTransformation(){
  return this.mScaling == 1 && this.mOffsetX == 0 && this.mOffsetY == 0;
}
;
_.toString_0 = function toString_3(){
  return 'DepictorTransformation Offset: ' + this.mOffsetX + ',' + this.mOffsetY + ' Scaling: ' + this.mScaling;
}
;
_.transformX = function transformX(x_0){
  return x_0 * this.mScaling + this.mOffsetX;
}
;
_.transformY = function transformY(y_0){
  return y_0 * this.mScaling + this.mOffsetY;
}
;
_.mOffsetX = 0;
_.mOffsetY = 0;
_.mScaling = 0;
cggl.Lcom_actelion_research_chem_DepictorTransformation_2_classLit = createForClass('com.actelion.research.chem', 'DepictorTransformation', 118, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_ESRGroupNormalizationInfo = function $clinit_ESRGroupNormalizationInfo(){
  carc.$clinit_ESRGroupNormalizationInfo = emptyMethod;
  jl.$clinit_Object();
}
;
carc.ESRGroupNormalizationInfo = function ESRGroupNormalizationInfo(fragment, action, group, type_0){
  carc.$clinit_ESRGroupNormalizationInfo();
  Object_0.call(this);
  this.$init_17();
  this.fragment_0 = fragment;
  this.action = action;
  this.group = group;
  this.type_0 = type_0;
}
;
defineClass(55, 1, {55:1, 1:1}, carc.ESRGroupNormalizationInfo);
_.$init_17 = function $init_17(){
}
;
_.action = 0;
_.fragment_0 = 0;
_.group = 0;
_.type_0 = 0;
cggl.Lcom_actelion_research_chem_ESRGroupNormalizationInfo_2_classLit = createForClass('com.actelion.research.chem', 'ESRGroupNormalizationInfo', 55, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_EZHalfParity = function $clinit_EZHalfParity(){
  carc.$clinit_EZHalfParity = emptyMethod;
  jl.$clinit_Object();
}
;
carc.EZHalfParity = function EZHalfParity(mol, rank, atom1, atom2){
  carc.$clinit_EZHalfParity();
  var connAtom, connBond, highRank, i;
  Object_0.call(this);
  this.$init_18();
  this.mMol = mol;
  this.mRemoteAxialAtom = atom1;
  this.mCentralAxialAtom = atom2;
  highRank = -1;
  for (i = 0; i < this.mMol.getAllConnAtoms_0(this.mCentralAxialAtom); i++) {
    connAtom = this.mMol.getConnAtom_0(this.mCentralAxialAtom, i);
    connBond = this.mMol.getConnBond_0(this.mCentralAxialAtom, i);
    if (connAtom == this.mRemoteAxialAtom) {
      if (this.mMol.getBondType_0(connBond) == 26)
        this.mValue = -1;
      continue;
    }
    if (this.mMol.isStereoBond_1(connBond, this.mCentralAxialAtom)) {
      if (this.mStereoBondFound)
        mol.setStereoProblem(atom2);
      this.mStereoBondFound = true;
    }
    if (highRank == rank[connAtom]) {
      this.mLowConn = connAtom;
      this.mRanksEqual = true;
      this.mInSameFragment = this.mMol.isRingBond_0(connBond);
      continue;
    }
     else if (highRank < rank[connAtom]) {
      highRank = rank[connAtom];
      this.mLowConn = this.mHighConn;
      this.mHighConn = connAtom;
    }
     else {
      this.mLowConn = connAtom;
    }
  }
}
;
defineClass(66, 1, {1:1}, carc.EZHalfParity);
_.$init_18 = function $init_18(){
}
;
_.getValue = function getValue(){
  var angleDB, angleDif, angleHigh, angleOther, connBond, i;
  if (this.mValue != 0)
    return this.mValue;
  if (this.mStereoBondFound && this.mMol.getAtomicNo_0(this.mCentralAxialAtom) != 15 && this.mMol.getAtomicNo_0(this.mCentralAxialAtom) != 16) {
    for (i = 0; i < this.mMol.getAllConnAtoms_0(this.mCentralAxialAtom); i++) {
      connBond = this.mMol.getConnBond_0(this.mCentralAxialAtom, i);
      if (this.mMol.isStereoBond_1(connBond, this.mCentralAxialAtom)) {
        if (this.mMol.getConnAtom_0(this.mCentralAxialAtom, i) == this.mHighConn)
          this.mValue = this.mMol.getBondType_0(connBond) == 17?3:1;
        else 
          this.mValue = this.mMol.getBondType_0(connBond) == 17?1:3;
        return this.mValue;
      }
    }
  }
  angleDB = this.mMol.getBondAngle_0(this.mCentralAxialAtom, this.mRemoteAxialAtom);
  angleHigh = this.mMol.getBondAngle_0(this.mCentralAxialAtom, this.mHighConn);
  if (angleHigh < angleDB)
    angleHigh += 3.141592653589793 * 2;
  if (this.mMol.getAllConnAtoms_0(this.mCentralAxialAtom) == 2) {
    angleDif = angleHigh - angleDB;
    if (angleDif > 3.141592653589793 - 0.05 && angleDif < 3.141592653589793 + 0.05) {
      this.mValue = -1;
      return this.mValue;
    }
    this.mValue = angleDif < 3.141592653589793?4:2;
    return this.mValue;
  }
   else {
    angleOther = this.mMol.getBondAngle_0(this.mCentralAxialAtom, this.mLowConn);
    if (angleOther < angleDB)
      angleOther += 3.141592653589793 * 2;
    this.mValue = angleOther < angleHigh?2:4;
    return this.mValue;
  }
}
;
_.mCentralAxialAtom = 0;
_.mHighConn = 0;
_.mInSameFragment = false;
_.mLowConn = 0;
_.mRanksEqual = false;
_.mRemoteAxialAtom = 0;
_.mStereoBondFound = false;
_.mValue = 0;
cggl.Lcom_actelion_research_chem_EZHalfParity_2_classLit = createForClass('com.actelion.research.chem', 'EZHalfParity', 66, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_Molecule = function $clinit_Molecule(){
  carc.$clinit_Molecule = emptyMethod;
  jl.$clinit_Object();
  carc.cHelperRings = 1 | 2;
  carc.cHelperParities = 3 | 4;
  carc.cHelperCIP = 7 | 8;
  carc.cHelperSymmetrySimple = 15 | 16;
  carc.cHelperSymmetryDiastereotopic = 15 | 32;
  carc.cHelperSymmetryEnantiotopic = 15 | 64;
  carc.cAtomLabel = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['?', 'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10', 'R11', 'R12', 'R13', 'R14', 'R15', 'R16', 'R1', 'R2', 'R3', 'A', 'A1', 'A2', 'A3', '??', '??', 'D', 'T', 'X', 'R', 'H2', 'H+', 'Nnn', 'HYD', 'Pol', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', 'Ala', 'Arg', 'Asn', 'Asp', 'Cys', 'Gln', 'Glu', 'Gly', 'His', 'Ile', 'Leu', 'Lys', 'Met', 'Phe', 'Pro', 'Ser', 'Thr', 'Trp', 'Tyr', 'Val']);
  carc.cRoundedMass = stampJavaTypeInfo(getClassLiteralForArray(cggl.S_classLit, 1), {4:1, 1:1}, 5, 15, [0, 1, 4, 7, 9, 11, 12, 14, 16, 19, 20, 23, 24, 27, 28, 31, 32, 35, 40, 39, 40, 45, 48, 51, 52, 55, 56, 59, 58, 63, 64, 69, 74, 75, 80, 79, 84, 85, 88, 89, 90, 93, 98, 0, 102, 103, 106, 107, 114, 115, 120, 121, 130, 127, 132, 133, 138, 139, 140, 141, 142, 0, 152, 153, 158, 159, 164, 165, 166, 169, 174, 175, 180, 181, 184, 187, 192, 193, 195, 197, 202, 205, 208, 209, 209, 210, 222, 223, 226, 227, 232, 231, 238, 237, 244, 243, 247, 247, 251, 252, 257, 258, 259, 262, 267, 268, 271, 270, 277, 276, 281, 281, 283, 285, 289, 289, 293, 294, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 156, 114, 115, 103, 128, 129, 57, 137, 113, 113, 128, 131, 147, 97, 87, 101, 186, 163, 99]);
  carc.cAtomValence = stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 2), {93:1, 4:1, 1:1, 8:1}, 9, 0, [null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [0]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [0]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 3, 5, 7]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [0]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), null, null, null, null, null, null, null, null, null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 3, 5, 7]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [0, 2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 2, 3, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), null, null, null, null, null, null, null, null, null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 3, 5, 7]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [0, 2, 4, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2])]);
  carc.cCommonOxidationState = stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 2), {93:1, 4:1, 1:1, 8:1}, 9, 0, [null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-1]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-1]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3, 4, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3, 4, 7]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-3, 3, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-1]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4, 6, 7]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-3, 3, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-2, 4, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-1]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4, 6, 7]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-2, 2, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [-1, 1]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [4, 5]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4, 5, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4, 5, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4, 5, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4, 5, 6]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3, 4]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [2, 3]), stampJavaTypeInfo(getClassLiteralForArray(cggl.B_classLit, 1), {9:1, 4:1, 1:1}, 5, 15, [3])]);
}
;
carc.Molecule = function Molecule(maxAtoms, maxBonds){
  carc.$clinit_Molecule();
  Object_0.call(this);
  this.$init_19();
  this.mMaxAtoms = $wnd.Math.max(1, maxAtoms);
  this.mMaxBonds = $wnd.Math.max(1, maxBonds);
  this.init_1();
}
;
carc.getAngle = function getAngle(x1, y1, x2, y2){
  carc.$clinit_Molecule();
  var angle, xdiff, ydiff;
  xdiff = x2 - x1;
  ydiff = y2 - y1;
  if (ydiff != 0) {
    angle = $wnd.Math.atan(xdiff / ydiff);
    if (ydiff < 0) {
      if (xdiff < 0)
        angle -= 3.141592653589793;
      else 
        angle += 3.141592653589793;
    }
  }
   else 
    angle = xdiff > 0?3.141592653589793 / 2:-3.141592653589793 / 2;
  return angle;
}
;
carc.getAngleDif = function getAngleDif(angle1, angle2){
  carc.$clinit_Molecule();
  var angleDif;
  angleDif = angle1 - angle2;
  while (angleDif < -3.141592653589793)
    angleDif += 2 * 3.141592653589793;
  while (angleDif > 3.141592653589793)
    angleDif -= 2 * 3.141592653589793;
  return angleDif;
}
;
carc.getAtomicNoFromLabel = function getAtomicNoFromLabel(atomLabel){
  carc.$clinit_Molecule();
  var i;
  for (i = 1; i < carc.cAtomLabel.length; i++)
    if (jl.equalsIgnoreCase_Ljava_lang_String__Z__devirtual$(atomLabel, carc.cAtomLabel[i]))
      return i;
  return 0;
}
;
carc.getDefaultAverageBondLength = function getDefaultAverageBondLength(){
  carc.$clinit_Molecule();
  return carc.sDefaultAVBL;
}
;
carc.isAtomicNoElectronegative = function isAtomicNoElectronegative(atomicNo){
  carc.$clinit_Molecule();
  switch (atomicNo) {
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 33:
    case 34:
    case 35:
    case 53:
      return true;
  }
  return false;
}
;
carc.isAtomicNoElectropositive = function isAtomicNoElectropositive(atomicNo){
  carc.$clinit_Molecule();
  if (atomicNo == 1 || atomicNo == 6)
    return false;
  if (carc.isAtomicNoElectronegative(atomicNo))
    return false;
  if (atomicNo == 2 || atomicNo == 10 || atomicNo == 18 || atomicNo == 36 || atomicNo == 54)
    return false;
  if (atomicNo > 103)
    return false;
  return true;
}
;
carc.setDefaultAverageBondLength = function setDefaultAverageBondLength(defaultAVBL){
  carc.$clinit_Molecule();
  carc.sDefaultAVBL = defaultAVBL;
}
;
defineClass(90, 1, {4:1, 1:1});
_.$init_19 = function $init_19(){
}
;
_.addAtom_0 = function addAtom(x_0, y_0){
  return this.addAtom_1(x_0, y_0, 0);
}
;
_.addAtom_1 = function addAtom_0(x_0, y_0, z_0){
  var atom;
  atom = this.addAtom_2(6);
  this.mCoordinates[atom].set_0(x_0, y_0, z_0);
  return atom;
}
;
_.addAtom_2 = function addAtom_1(atomicNo){
  if (this.mAllAtoms >= this.mMaxAtoms)
    this.setMaxAtoms_0(this.mMaxAtoms * 2);
  this.mAtomicNo[this.mAllAtoms] = 0;
  this.setAtomicNo_0(this.mAllAtoms, atomicNo);
  this.mAtomCharge[this.mAllAtoms] = 0;
  this.mAtomFlags[this.mAllAtoms] = 0;
  this.mAtomQueryFeatures[this.mAllAtoms] = 0;
  this.mAtomMapNo[this.mAllAtoms] = 0;
  this.mCoordinates[this.mAllAtoms].set_0(0, 0, 0);
  if (jsNotEquals(this.mAtomList, null))
    this.mAtomList[this.mAllAtoms] = null;
  if (jsNotEquals(this.mAtomCustomLabel, null))
    this.mAtomCustomLabel[this.mAllAtoms] = null;
  this.mValidHelperArrays = 0;
  return this.mAllAtoms++;
}
;
_.addBond_0 = function addBond(atom1, atom2){
  return this.addBond_1(atom1, atom2, this.suggestBondType_0(atom1, atom2));
}
;
_.addBond_1 = function addBond_0(atom1, atom2, type_0){
  var bnd;
  if (atom1 == atom2)
    return -1;
  for (bnd = 0; bnd < this.mAllBonds; bnd++) {
    if (this.mBondAtom[0][bnd] == atom1 && this.mBondAtom[1][bnd] == atom2 || this.mBondAtom[0][bnd] == atom2 && this.mBondAtom[1][bnd] == atom1) {
      if (this.mBondType[bnd] < type_0)
        this.mBondType[bnd] = type_0;
      return bnd;
    }
  }
  if (this.mAllBonds >= this.mMaxBonds)
    this.setMaxBonds_0(this.mMaxBonds * 2);
  this.mBondAtom[0][this.mAllBonds] = atom1;
  this.mBondAtom[1][this.mAllBonds] = atom2;
  this.mBondType[this.mAllBonds] = type_0;
  this.mBondFlags[this.mAllBonds] = 0;
  this.mBondQueryFeatures[this.mAllBonds] = 0;
  this.mValidHelperArrays = 0;
  return this.mAllBonds++;
}
;
_.addMolecule_0 = function addMolecule(mol){
  var atom, atomMap, bond, esrGroupCountAND, esrGroupCountOR;
  this.mIsFragment = this.mIsFragment | mol.mIsFragment;
  atomMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, mol.mAllAtoms, 15, 1);
  esrGroupCountAND = this.renumberESRGroups_0(1);
  esrGroupCountOR = this.renumberESRGroups_0(2);
  for (atom = 0; atom < mol.mAllAtoms; atom++) {
    atomMap[atom] = mol.copyAtom_0(this, atom, esrGroupCountAND, esrGroupCountOR);
  }
  for (bond = 0; bond < mol.mAllBonds; bond++) {
    mol.copyBond_1(this, bond, esrGroupCountAND, esrGroupCountOR, atomMap, false);
  }
  this.mIsRacemate = this.mIsRacemate && mol.mIsRacemate;
  this.mChirality = 0;
  this.mValidHelperArrays = 0;
  return atomMap;
}
;
_.addOrChangeAtom_0 = function addOrChangeAtom(x_0, y_0, atomicNo, mass, abnormalValence, radical, customLabel){
  var atom, changed;
  atom = this.findAtom_0(x_0, y_0);
  if (atom == -1) {
    if (this.mAllAtoms >= this.mMaxAtoms)
      this.setMaxAtoms_0(this.mMaxAtoms * 2);
    atom = this.addAtom_2(atomicNo);
    this.mCoordinates[atom].set_0(x_0, y_0, 0);
    this.mAtomMass[atom] = mass;
    this.setAtomAbnormalValence_0(atom, abnormalValence);
    this.setAtomRadical_0(atom, radical);
    this.setAtomCustomLabel_0(atom, customLabel);
    return true;
  }
  changed = this.changeAtom_0(atom, atomicNo, mass, abnormalValence, radical);
  this.setAtomCustomLabel_0(atom, customLabel);
  return changed;
}
;
_.addOrChangeBond_0 = function addOrChangeBond(atm1, atm2, type_0){
  var bnd;
  for (bnd = 0; bnd < this.mAllBonds; bnd++) {
    if (this.mBondAtom[0][bnd] == atm1 && this.mBondAtom[1][bnd] == atm2 || this.mBondAtom[0][bnd] == atm2 && this.mBondAtom[1][bnd] == atm1) {
      this.changeBond_0(bnd, type_0);
      this.mValidHelperArrays = 0;
      return bnd;
    }
  }
  if (this.mAllBonds >= this.mMaxBonds)
    this.setMaxBonds_0(this.mMaxBonds * 2);
  this.mBondAtom[0][this.mAllBonds] = atm1;
  this.mBondAtom[1][this.mAllBonds] = atm2;
  this.mBondType[this.mAllBonds] = type_0;
  this.mBondFlags[this.mAllBonds] = 0;
  this.mBondQueryFeatures[this.mAllBonds] = 0;
  this.mValidHelperArrays = 0;
  return this.mAllBonds++;
}
;
_.addRing_0 = function addRing(x_0, y_0, ringSize, aromatic){
  var atom, bond, cornerAngle;
  while (this.mAllAtoms + ringSize > this.mMaxAtoms)
    this.setMaxAtoms_0(this.mMaxAtoms * 2);
  while (this.mAllBonds + ringSize > this.mMaxBonds)
    this.setMaxBonds_0(this.mMaxBonds * 2);
  atom = this.findAtom_0(x_0, y_0);
  if (atom != -1)
    return this.addRingToAtom_0(atom, ringSize, aromatic);
  bond = this.findBond_0(x_0, y_0);
  if (bond != -1)
    return this.addRingToBond_0(bond, ringSize, aromatic);
  atom = this.addAtom_0(x_0, y_0);
  cornerAngle = 3.141592653589793 * (ringSize - 2) / ringSize;
  this.polygon(atom, ringSize, atom, aromatic, 0, 3.141592653589793 - cornerAngle);
  this.mValidHelperArrays = 0;
  return true;
}
;
_.addRingToAtom_0 = function addRingToAtom(atom, ringSize, aromatic){
  var angle, angles, cornerAngle, i, j, newAngle;
  if (aromatic && this.getOccupiedValence_0(atom) > 1 || !aromatic && this.getOccupiedValence_0(atom) > 2)
    return false;
  angles = 0;
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 4, 15, 1);
  for (i = 0; i < this.mAllBonds; i++) {
    for (j = 0; j < 2; j++) {
      if (this.mBondAtom[j][i] == atom) {
        if (angles == 2) {
          angles = 3;
          break;
        }
        angle[angles++] = this.getBondAngle_0(atom, this.mBondAtom[1 - j][i]);
      }
    }
    if (angles == 3)
      break;
  }
  if (angles == 3)
    return false;
  newAngle = angles == 1?angle[0] + 3.141592653589793:$wnd.Math.abs(angle[0] - angle[1]) > 3.141592653589793?(angle[0] + angle[1]) / 2:(angle[0] + angle[1]) / 2 + 3.141592653589793;
  cornerAngle = 3.141592653589793 * (ringSize - 2) / ringSize;
  this.polygon(atom, ringSize, atom, aromatic, newAngle - cornerAngle / 2, 3.141592653589793 - cornerAngle);
  this.mValidHelperArrays = 0;
  return true;
}
;
_.addRingToBond_0 = function addRingToBond(bond, ringSize, aromatic){
  var angle, angles, atomNo, bondAngle, bondAtom, cornerAngle, i, i0, j, k, side;
  bondAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  bondAngle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 2, 15, 1);
  bondAtom[0] = this.mBondAtom[0][bond];
  bondAtom[1] = this.mBondAtom[1][bond];
  if (this.getOccupiedValence_0(bondAtom[0]) > 3)
    return false;
  if (this.getOccupiedValence_0(bondAtom[1]) > 3)
    return false;
  angles = 0;
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 4, 15, 1);
  for (i0 = 0; i0 < this.mAllBonds; i0++) {
    if (i0 == bond)
      continue;
    for (j = 0; j < 2; j++) {
      for (k = 0; k < 2; k++) {
        if (this.mBondAtom[j][i0] == bondAtom[k]) {
          if (angles == 4) {
            angles = 5;
            break;
          }
          angle[angles++] = this.getBondAngle_0(bondAtom[k], this.mBondAtom[1 - j][i0]);
        }
      }
      if (angles == 5)
        break;
    }
    if (angles == 5)
      break;
  }
  if (angles == 5)
    return false;
  bondAngle[0] = this.getBondAngle_0(bondAtom[0], bondAtom[1]);
  if (bondAngle[0] < 0) {
    bondAngle[1] = bondAngle[0] + 3.141592653589793;
    atomNo = 0;
  }
   else {
    bondAngle[1] = bondAngle[0];
    bondAngle[0] = bondAngle[1] - 3.141592653589793;
    atomNo = 1;
  }
  side = 0;
  for (i = 0; i < angles; i++) {
    if (angle[i] > bondAngle[0] && angle[i] < bondAngle[1])
      side--;
    else 
      side++;
  }
  atomNo = side > 0?1 - atomNo:atomNo;
  cornerAngle = 3.141592653589793 * (ringSize - 2) / ringSize;
  this.polygon(bondAtom[atomNo], ringSize - 1, bondAtom[1 - atomNo], aromatic, bondAngle[side > 0?0:1] + 3.141592653589793 - cornerAngle, 3.141592653589793 - cornerAngle);
  this.mValidHelperArrays = 0;
  return true;
}
;
_.addSubstituent_0 = function addSubstituent(substituent, connectionAtom){
  var atom, atomMap, bond, esrGroupCountAND, esrGroupCountOR;
  atomMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, substituent.mAllAtoms, 15, 1);
  esrGroupCountAND = this.renumberESRGroups_0(1);
  esrGroupCountOR = this.renumberESRGroups_0(2);
  for (atom = 0; atom < substituent.mAllAtoms; atom++) {
    if (substituent.getAtomicNo_0(atom) != 0)
      atomMap[atom] = substituent.copyAtom_0(this, atom, esrGroupCountAND, esrGroupCountOR);
    else 
      atomMap[atom] = connectionAtom;
  }
  for (bond = 0; bond < substituent.mAllBonds; bond++) {
    substituent.copyBond_1(this, bond, esrGroupCountAND, esrGroupCountOR, atomMap, false);
  }
  this.mIsRacemate = this.mIsRacemate && substituent.mIsRacemate;
  this.mChirality = 0;
  this.mValidHelperArrays = 0;
  return atomMap;
}
;
_.calculateTorsion_0 = function calculateTorsion(atom){
  var c1, c2, c3, c4, n1, n2, v1, v2, v3;
  c1 = this.mCoordinates[atom[0]];
  c2 = this.mCoordinates[atom[1]];
  c3 = this.mCoordinates[atom[2]];
  c4 = this.mCoordinates[atom[3]];
  v1 = c2.subC(c1);
  v2 = c3.subC(c2);
  v3 = c4.subC(c3);
  n1 = v1.cross(v2);
  n2 = v2.cross(v3);
  return -$wnd.Math.atan2(v2.getLength() * v1.dot(n2), n1.dot(n2));
}
;
_.changeAtom_0 = function changeAtom(atom, atomicNo, mass, abnormalValence, radical){
  if ((atomicNo == 1 || atomicNo == 151 || atomicNo == 152) && this.getOccupiedValence_0(atom) > 1)
    return false;
  this.mAtomQueryFeatures[atom] &= ~1;
  if (jsNotEquals(this.mAtomList, null))
    this.mAtomList[atom] = null;
  if (jsNotEquals(this.mAtomCustomLabel, null))
    this.mAtomCustomLabel[atom] = null;
  if (atomicNo == this.mAtomicNo[atom] && mass == this.mAtomMass[atom] && abnormalValence == this.getAtomAbnormalValence_0(atom) && radical == this.getAtomRadical_0(atom))
    return false;
  if (atomicNo == 151 || atomicNo == 152) {
    mass = atomicNo - 149;
    atomicNo = 1;
  }
  this.mAtomFlags[atom] &= 448 | 512;
  this.mAtomicNo[atom] = atomicNo;
  this.mAtomMass[atom] = mass;
  this.mAtomCharge[atom] = 0;
  this.mAtomQueryFeatures[atom] = 0;
  this.setAtomAbnormalValence_0(atom, abnormalValence);
  this.setAtomRadical_0(atom, radical);
  this.removeMappingNo(this.mAtomMapNo[atom]);
  this.mValidHelperArrays = 0;
  return true;
}
;
_.changeAtomCharge_0 = function changeAtomCharge(atom, positive){
  if (positive) {
    if (this.mAtomCharge[atom] > 8)
      return false;
    this.mAtomCharge[atom]++;
  }
   else {
    if (this.mAtomCharge[atom] < -8)
      return false;
    this.mAtomCharge[atom]--;
  }
  this.mValidHelperArrays = 0;
  return true;
}
;
_.changeBond_0 = function changeBond(bnd, type_0){
  var bondAtAtom1Qualifies, bondAtAtom2Qualifies, bondWasChanged, oldType, temp;
  bondWasChanged = false;
  oldType = this.mBondType[bnd];
  if (type_0 == 127) {
    bondWasChanged = this.incrementBondOrder(bnd);
  }
   else if (this.validateBondType(bnd, type_0)) {
    if (type_0 == 17 || type_0 == 9) {
      bondAtAtom1Qualifies = this.qualifiesAsStereoBond(bnd, this.mBondAtom[0][bnd]);
      bondAtAtom2Qualifies = this.qualifiesAsStereoBond(bnd, this.mBondAtom[1][bnd]);
      if (type_0 == oldType) {
        if (bondAtAtom1Qualifies == bondAtAtom2Qualifies || bondAtAtom2Qualifies) {
          temp = this.mBondAtom[0][bnd];
          this.mBondAtom[0][bnd] = this.mBondAtom[1][bnd];
          this.mBondAtom[1][bnd] = temp;
          bondWasChanged = true;
        }
      }
       else {
        if (!bondAtAtom1Qualifies && bondAtAtom2Qualifies) {
          temp = this.mBondAtom[0][bnd];
          this.mBondAtom[0][bnd] = this.mBondAtom[1][bnd];
          this.mBondAtom[1][bnd] = temp;
        }
        this.mBondType[bnd] = type_0;
        bondWasChanged = true;
      }
    }
     else {
      this.mBondType[bnd] = type_0;
      bondWasChanged = true;
    }
  }
  if (bondWasChanged) {
    this.mValidHelperArrays = (oldType & 103) == (type_0 & 103)?this.mValidHelperArrays & 3:0;
    this.mBondQueryFeatures[bnd] = 0;
  }
  return bondWasChanged;
}
;
_.compressMolTable = function compressMolTable(){
  var atom, atom1, atom2, atomDest, bnd, bnd0, bondDest, newAtmNo;
  for (bnd0 = 0; bnd0 < this.mAllBonds; bnd0++) {
    if (this.mBondType[bnd0] == 128) {
      atom1 = this.mBondAtom[0][bnd0];
      atom2 = this.mBondAtom[1][bnd0];
      if (this.mAtomicNo[atom1] == -1 ^ this.mAtomicNo[atom2] == -1) {
        if (this.mAtomCharge[atom1] != 0 && this.mAtomCharge[atom2] != 0) {
          if (this.mAtomCharge[atom1] < 0 ^ this.mAtomCharge[atom2] < 0) {
            if (this.mAtomCharge[atom1] < 0) {
              this.mAtomCharge[atom1]++;
              this.mAtomCharge[atom2]--;
            }
             else {
              this.mAtomCharge[atom1]--;
              this.mAtomCharge[atom2]++;
            }
          }
        }
      }
    }
  }
  newAtmNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  atomDest = 0;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    if (this.mAtomicNo[atom] == -1) {
      newAtmNo[atom] = -1;
      continue;
    }
    if (atomDest < atom) {
      this.mAtomicNo[atomDest] = this.mAtomicNo[atom];
      this.mAtomCharge[atomDest] = this.mAtomCharge[atom];
      this.mAtomMass[atomDest] = this.mAtomMass[atom];
      this.mAtomFlags[atomDest] = this.mAtomFlags[atom];
      this.mAtomQueryFeatures[atomDest] = this.mAtomQueryFeatures[atom];
      this.mAtomMapNo[atomDest] = this.mAtomMapNo[atom];
      this.mCoordinates[atomDest].set_1(this.mCoordinates[atom]);
      if (jsNotEquals(this.mAtomList, null))
        this.mAtomList[atomDest] = this.mAtomList[atom];
      if (jsNotEquals(this.mAtomCustomLabel, null))
        this.mAtomCustomLabel[atomDest] = this.mAtomCustomLabel[atom];
    }
    newAtmNo[atom] = atomDest;
    atomDest++;
  }
  this.mAllAtoms = atomDest;
  bondDest = 0;
  for (bnd = 0; bnd < this.mAllBonds; bnd++) {
    if (this.mBondType[bnd] == 128)
      continue;
    this.mBondType[bondDest] = this.mBondType[bnd];
    this.mBondFlags[bondDest] = this.mBondFlags[bnd];
    this.mBondQueryFeatures[bondDest] = this.mBondQueryFeatures[bnd];
    this.mBondAtom[0][bondDest] = newAtmNo[this.mBondAtom[0][bnd]];
    this.mBondAtom[1][bondDest] = newAtmNo[this.mBondAtom[1][bnd]];
    bondDest++;
  }
  this.mAllBonds = bondDest;
  return newAtmNo;
}
;
_.copyAtom_0 = function copyAtom(destMol, sourceAtom, esrGroupOffsetAND, esrGroupOffsetOR){
  var destAtom, esrGroup, esrType, i;
  destAtom = destMol.mAllAtoms;
  if (destAtom >= destMol.mMaxAtoms)
    destMol.setMaxAtoms_0(destMol.mMaxAtoms * 2);
  esrType = this.getAtomESRType_0(sourceAtom);
  esrGroup = -1;
  if (esrType == 1) {
    if (esrGroupOffsetAND == -1)
      esrGroup = destMol.renumberESRGroups_0(esrType);
    else 
      esrGroup = $wnd.Math.min(32, esrGroupOffsetAND + this.getAtomESRGroup_0(sourceAtom));
  }
   else if (esrType == 2) {
    if (esrGroupOffsetOR == -1)
      esrGroup = destMol.renumberESRGroups_0(esrType);
    else 
      esrGroup = $wnd.Math.min(32, esrGroupOffsetOR + this.getAtomESRGroup_0(sourceAtom));
  }
  destMol.mAtomicNo[destAtom] = this.mAtomicNo[sourceAtom];
  destMol.mAtomCharge[destAtom] = this.mAtomCharge[sourceAtom];
  destMol.mAtomMass[destAtom] = this.mAtomMass[sourceAtom];
  destMol.mAtomFlags[destAtom] = this.mAtomFlags[sourceAtom];
  destMol.mAtomQueryFeatures[destAtom] = destMol.mIsFragment?this.mAtomQueryFeatures[sourceAtom]:0;
  destMol.mCoordinates[destAtom].set_1(this.mCoordinates[sourceAtom]);
  destMol.mAtomMapNo[destAtom] = this.mAtomMapNo[sourceAtom];
  if (jsNotEquals(destMol.mAtomList, null))
    destMol.mAtomList[destAtom] = null;
  if (jsNotEquals(this.mAtomList, null) && jsNotEquals(this.mAtomList[sourceAtom], null) && destMol.mIsFragment) {
    if (jsEquals(destMol.mAtomList, null))
      destMol.mAtomList = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, destMol.mAtomicNo.length, 0, 2);
    destMol.mAtomList[destAtom] = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtomList[sourceAtom].length, 15, 1);
    for (i = 0; i < this.mAtomList[sourceAtom].length; i++)
      destMol.mAtomList[destAtom][i] = this.mAtomList[sourceAtom][i];
  }
  if (jsNotEquals(destMol.mAtomCustomLabel, null))
    destMol.mAtomCustomLabel[destAtom] = null;
  if (jsNotEquals(this.mAtomCustomLabel, null) && jsNotEquals(this.mAtomCustomLabel[sourceAtom], null)) {
    if (jsEquals(destMol.mAtomCustomLabel, null))
      destMol.mAtomCustomLabel = initUnidimensionalArray(cggl.B_classLit, {93:1, 4:1, 1:1, 8:1}, 9, destMol.mAtomicNo.length, 0, 2);
    destMol.mAtomCustomLabel[destAtom] = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mAtomCustomLabel[sourceAtom].length, 15, 1);
    for (i = 0; i < this.mAtomCustomLabel[sourceAtom].length; i++)
      destMol.mAtomCustomLabel[destAtom][i] = this.mAtomCustomLabel[sourceAtom][i];
  }
  if (esrGroup != -1) {
    destMol.mAtomFlags[destAtom] &= ~65011712;
    destMol.mAtomFlags[destAtom] |= esrGroup << 21;
  }
  destMol.mAllAtoms++;
  destMol.mValidHelperArrays = 0;
  return destAtom;
}
;
_.copyBond_0 = function copyBond(destMol, sourceBond, esrGroupOffsetAND, esrGroupOffsetOR, destAtom1, destAtom2, useBondTypeDelocalized){
  var bondType, destBond, esrGroup, esrType;
  destBond = destMol.mAllBonds;
  if (destBond >= destMol.mMaxBonds)
    destMol.setMaxBonds_0(destMol.mMaxBonds * 2);
  esrType = this.getBondESRType_0(sourceBond);
  esrGroup = -1;
  if (esrType == 1) {
    if (esrGroupOffsetAND == -1)
      esrGroup = destMol.renumberESRGroups_0(esrType);
    else 
      esrGroup = $wnd.Math.min(32, esrGroupOffsetAND + this.getBondESRGroup_0(sourceBond));
  }
  if (esrType == 2) {
    if (esrGroupOffsetOR == -1)
      esrGroup = destMol.renumberESRGroups_0(esrType);
    else 
      esrGroup = $wnd.Math.min(32, esrGroupOffsetOR + this.getBondESRGroup_0(sourceBond));
  }
  destMol.mBondAtom[0][destBond] = destAtom1;
  destMol.mBondAtom[1][destBond] = destAtom2;
  bondType = useBondTypeDelocalized && (this.mBondFlags[sourceBond] & 512) != 0?64:this.mBondType[sourceBond];
  destMol.mBondType[destBond] = bondType;
  destMol.mBondFlags[destBond] = this.mBondFlags[sourceBond];
  destMol.mBondQueryFeatures[destBond] = destMol.mIsFragment?this.mBondQueryFeatures[sourceBond]:0;
  if (esrGroup != -1) {
    destMol.mBondFlags[destBond] &= ~126976;
    destMol.mBondFlags[destBond] |= esrGroup << 12;
  }
  destMol.mAllBonds++;
  destMol.mValidHelperArrays = 0;
  return destBond;
}
;
_.copyBond_1 = function copyBond_0(destMol, sourceBond, esrGroupOffsetAND, esrGroupOffsetOR, atomMap, useBondTypeDelocalized){
  return this.copyBond_0(destMol, sourceBond, esrGroupOffsetAND, esrGroupOffsetOR, jsEquals(atomMap, null)?this.mBondAtom[0][sourceBond]:atomMap[this.mBondAtom[0][sourceBond]], jsEquals(atomMap, null)?this.mBondAtom[1][sourceBond]:atomMap[this.mBondAtom[1][sourceBond]], useBondTypeDelocalized);
}
;
_.copyMolecule_0 = function copyMolecule(destMol){
  var atom, bnd;
  destMol.mAtomList = null;
  destMol.mAtomCustomLabel = null;
  destMol.mIsFragment = this.mIsFragment;
  destMol.mAllAtoms = 0;
  for (atom = 0; atom < this.mAllAtoms; atom++)
    this.copyAtom_0(destMol, atom, 0, 0);
  destMol.mAllBonds = 0;
  for (bnd = 0; bnd < this.mAllBonds; bnd++)
    this.copyBond_1(destMol, bnd, 0, 0, null, false);
  this.copyMoleculeProperties_0(destMol);
}
;
_.copyMoleculeProperties_0 = function copyMoleculeProperties(destMol){
  destMol.mIsFragment = this.mIsFragment;
  destMol.mIsRacemate = this.mIsRacemate;
  destMol.mProtectHydrogen = this.mProtectHydrogen;
  destMol.mChirality = this.mChirality;
  destMol.mName = jsEquals(this.mName, null)?null:jl.$create_4(this.mName);
  destMol.mValidHelperArrays = this.mValidHelperArrays & (4 | 8);
}
;
_.deleteAtom_0 = function deleteAtom(atom){
  var bnd, bonds, i, j;
  for (bnd = 0; bnd < this.mAllBonds; bnd++) {
    for (i = 0; i < 2; i++) {
      if (this.mBondAtom[i][bnd] == atom) {
        this.mBondType[bnd] = 128;
        bonds = 0;
        for (j = 0; j < this.mAllBonds; j++) {
          if (j == bnd)
            continue;
          if (this.mBondAtom[0][j] == this.mBondAtom[1 - i][bnd] || this.mBondAtom[1][j] == this.mBondAtom[1 - i][bnd])
            bonds++;
        }
        if (bonds == 0) {
          this.removeMappingNo(this.mAtomMapNo[this.mBondAtom[1 - i][bnd]]);
          this.mAtomicNo[this.mBondAtom[1 - i][bnd]] = -1;
        }
      }
    }
  }
  this.removeMappingNo(this.mAtomMapNo[atom]);
  this.mAtomicNo[atom] = -1;
  if (jsNotEquals(this.mAtomList, null))
    this.mAtomList[atom] = null;
  if (jsNotEquals(this.mAtomCustomLabel, null))
    this.mAtomCustomLabel[atom] = null;
  this.compressMolTable();
  this.mValidHelperArrays = 0;
}
;
_.deleteAtomOrBond_0 = function deleteAtomOrBond(x_0, y_0){
  var atom, bnd;
  atom = this.findAtom_0(x_0, y_0);
  if (atom != -1) {
    if ((this.mAtomFlags[atom] & 512) != 0)
      this.deleteSelectedAtoms_0();
    else 
      this.deleteAtom_0(atom);
    this.mValidHelperArrays = 0;
    return true;
  }
  bnd = this.findBond_0(x_0, y_0);
  if (bnd != -1) {
    if ((this.mAtomFlags[this.mBondAtom[0][bnd]] & this.mAtomFlags[this.mBondAtom[1][bnd]] & 512) != 0)
      this.deleteSelectedAtoms_0();
    else 
      this.deleteBondAndSurrounding_0(bnd);
    this.mValidHelperArrays = 0;
    return true;
  }
  return false;
}
;
_.deleteAtoms_0 = function deleteAtoms(atomList){
  var i;
  if (atomList.length == 0)
    return null;
  for (i = 0; i < atomList.length; i++)
    this.markAtomForDeletion_0(atomList[i]);
  return this.deleteMarkedAtomsAndBonds_0();
}
;
_.deleteBond_0 = function deleteBond(bond){
  this.mBondType[bond] = 128;
  this.compressMolTable();
  this.mValidHelperArrays = 0;
}
;
_.deleteBondAndSurrounding_0 = function deleteBondAndSurrounding(bond){
  var bonds, i, j;
  for (i = 0; i < 2; i++) {
    bonds = 0;
    for (j = 0; j < this.mAllBonds; j++) {
      if (j == bond)
        continue;
      if (this.mBondAtom[0][j] == this.mBondAtom[i][bond] || this.mBondAtom[1][j] == this.mBondAtom[i][bond])
        bonds++;
    }
    if (bonds == 0) {
      this.removeMappingNo(this.mAtomMapNo[this.mBondAtom[i][bond]]);
      this.mAtomicNo[this.mBondAtom[i][bond]] = -1;
    }
  }
  this.mBondType[bond] = 128;
  this.compressMolTable();
  this.mValidHelperArrays = 0;
}
;
_.deleteMarkedAtomsAndBonds_0 = function deleteMarkedAtomsAndBonds(){
  var atom, bond, found;
  found = false;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    if (this.mAtomicNo[atom] == -1) {
      found = true;
      this.removeMappingNo(this.mAtomMapNo[atom]);
    }
  }
  for (bond = 0; bond < this.mAllBonds; bond++) {
    if (this.mBondType[bond] == 128) {
      found = true;
    }
     else if (this.mAtomicNo[this.mBondAtom[0][bond]] == -1 || this.mAtomicNo[this.mBondAtom[1][bond]] == -1) {
      this.mBondType[bond] = 128;
      found = true;
    }
  }
  if (found) {
    this.mValidHelperArrays = 0;
    return this.compressMolTable();
  }
  return null;
}
;
_.deleteMolecule_0 = function deleteMolecule(){
  this.mAllAtoms = 0;
  this.mAllBonds = 0;
  this.mIsFragment = false;
  this.mIsRacemate = false;
  this.mChirality = 0;
  this.mAtomList = null;
  this.mAtomCustomLabel = null;
  this.mName = null;
  this.mValidHelperArrays = 0;
}
;
_.deleteSelectedAtoms_0 = function deleteSelectedAtoms(){
  var atom, found;
  found = false;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    if ((this.mAtomFlags[atom] & 512) != 0) {
      this.markAtomForDeletion_0(atom);
      found = true;
    }
  }
  return found?jsNotEquals(this.deleteMarkedAtomsAndBonds_0(), null):false;
}
;
_.findAtom_0 = function findAtom(pickx, picky){
  var atom, avbl, distanceSquare, foundAtom, foundDistanceSquare, maxDistanceSquare, x_0, y_0;
  foundAtom = -1;
  avbl = this.getAverageBondLength_0();
  foundDistanceSquare = 1.7976931348623157E308;
  maxDistanceSquare = avbl * avbl / 12;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    x_0 = this.mCoordinates[atom].x_0;
    y_0 = this.mCoordinates[atom].y_0;
    distanceSquare = (pickx - x_0) * (pickx - x_0) + (picky - y_0) * (picky - y_0);
    if (distanceSquare < maxDistanceSquare && distanceSquare < foundDistanceSquare) {
      foundDistanceSquare = distanceSquare;
      foundAtom = atom;
    }
  }
  return foundAtom;
}
;
_.findBond_0 = function findBond(pickx, picky){
  var bond, bondLength, centralX, centralY, constA, constC, distance, dx, dy, foundBond, foundDistance, maxDistance, x1, x2, y1, y2;
  foundBond = -1;
  maxDistance = this.getAverageBondLength_0();
  foundDistance = 1.7976931348623157E308;
  for (bond = 0; bond < this.mAllBonds; bond++) {
    x1 = this.mCoordinates[this.mBondAtom[0][bond]].x_0;
    y1 = this.mCoordinates[this.mBondAtom[0][bond]].y_0;
    x2 = this.mCoordinates[this.mBondAtom[1][bond]].x_0;
    y2 = this.mCoordinates[this.mBondAtom[1][bond]].y_0;
    dx = x2 - x1;
    dy = y2 - y1;
    bondLength = $wnd.Math.sqrt(dx * dx + dy * dy);
    centralX = (x1 + x2) / 2;
    centralY = (y1 + y2) / 2;
    dx = pickx - centralX;
    dy = picky - centralY;
    if ($wnd.Math.sqrt(dx * dx + dy * dy) > bondLength / 2)
      continue;
    if (x2 == x1)
      distance = $wnd.Math.abs(x1 - pickx);
    else {
      constA = (y2 - y1) / (x1 - x2);
      constC = -constA * x1 - y1;
      distance = $wnd.Math.abs((constA * pickx + picky + constC) / $wnd.Math.sqrt(constA * constA + 1));
    }
    if (distance < maxDistance && distance < foundDistance) {
      foundDistance = distance;
      foundBond = bond;
    }
  }
  return foundBond;
}
;
_.getAllAtoms_0 = function getAllAtoms(){
  return this.mAllAtoms;
}
;
_.getAllBonds_0 = function getAllBonds(){
  return this.mAllBonds;
}
;
_.getAtomAbnormalValence_0 = function getAtomAbnormalValence(atom){
  return ((this.mAtomFlags[atom] & -268435456) >>> 28) - 1;
}
;
_.getAtomCIPParity_0 = function getAtomCIPParity(atom){
  return (this.mAtomFlags[atom] & 98304) >> 15;
}
;
_.getAtomCharge_0 = function getAtomCharge(atom){
  return this.mAtomCharge[atom];
}
;
_.getAtomColor_0 = function getAtomColor(atom){
  return this.mAtomFlags[atom] & 448;
}
;
_.getAtomCustomLabel_0 = function getAtomCustomLabel(atom){
  return jsEquals(this.mAtomCustomLabel, null)?null:jsEquals(this.mAtomCustomLabel[atom], null)?null:jl.$create_7(this.mAtomCustomLabel[atom]);
}
;
_.getAtomCustomLabelBytes = function getAtomCustomLabelBytes(atom){
  return jsEquals(this.mAtomCustomLabel, null)?null:this.mAtomCustomLabel[atom];
}
;
_.getAtomESRGroup_0 = function getAtomESRGroup(atom){
  if (this.getAtomESRType_0(atom) != 1 && this.getAtomESRType_0(atom) != 2)
    return -1;
  else 
    return (this.mAtomFlags[atom] & 65011712) >> 21;
}
;
_.getAtomESRType_0 = function getAtomESRType(atom){
  return (this.mAtomFlags[atom] & 1572864) >> 19;
}
;
_.getAtomLabel_0 = function getAtomLabel(atom){
  return carc.cAtomLabel[this.mAtomicNo[atom]];
}
;
_.getAtomList_0 = function getAtomList(atom){
  return jsEquals(this.mAtomList, null)?null:this.mAtomList[atom];
}
;
_.getAtomListString_0 = function getAtomListString(atom){
  var atomicNo, i, listString;
  if (jsEquals(this.mAtomList, null) || jsEquals(this.mAtomList[atom], null))
    return (this.mAtomQueryFeatures[atom] & 1) != 0?'':carc.cAtomLabel[this.mAtomicNo[atom]];
  listString = '';
  for (i = 0; i < this.mAtomList[atom].length; i++) {
    if (i > 0)
      listString = jl.concat_Ljava_lang_String__Ljava_lang_String___devirtual$(listString, ',');
    atomicNo = this.mAtomList[atom][i];
    listString = jl.concat_Ljava_lang_String__Ljava_lang_String___devirtual$(listString, carc.cAtomLabel[atomicNo]);
  }
  return listString;
}
;
_.getAtomMapNo_0 = function getAtomMapNo(atom){
  return $wnd.Math.abs(this.mAtomMapNo[atom]);
}
;
_.getAtomMass_0 = function getAtomMass(atom){
  return this.mAtomMass[atom];
}
;
_.getAtomParity_0 = function getAtomParity(atom){
  return this.mAtomFlags[atom] & 3;
}
;
_.getAtomQueryFeatures_0 = function getAtomQueryFeatures(atom){
  return this.mAtomQueryFeatures[atom];
}
;
_.getAtomRadical_0 = function getAtomRadical(atom){
  return this.mAtomFlags[atom] & 48;
}
;
_.getAtomX_1 = function getAtomX_0(atom){
  return this.mCoordinates[atom].x_0;
}
;
_.getAtomY_1 = function getAtomY_0(atom){
  return this.mCoordinates[atom].y_0;
}
;
_.getAtomZ_0 = function getAtomZ(atom){
  return this.mCoordinates[atom].z_0;
}
;
_.getAtomicNo_0 = function getAtomicNo(atom){
  return this.mAtomicNo[atom];
}
;
_.getAverageBondLength_0 = function getAverageBondLength(){
  return this.getAverageBondLength_2(this.mAllAtoms, this.mAllBonds, carc.sDefaultAVBL);
}
;
_.getAverageBondLength_1 = function getAverageBondLength_0(atoms, bonds){
  return this.getAverageBondLength_2(atoms, bonds, carc.sDefaultAVBL);
}
;
_.getAverageBondLength_2 = function getAverageBondLength_1(atoms, bonds, defaultBondLength){
  var atom1, atom2, avblSum, bond, bond0, bond1, considerMetalBonds, consideredBonds, distance, lowDistance;
  considerMetalBonds = false;
  consideredBonds = 0;
  for (bond0 = 0; bond0 < bonds; bond0++)
    if (this.mBondType[bond0] != 32 && (this.mBondQueryFeatures[bond0] & 32640) == 0)
      consideredBonds++;
  if (consideredBonds == 0) {
    for (bond1 = 0; bond1 < bonds; bond1++)
      if ((this.mBondQueryFeatures[bond1] & 32640) == 0)
        consideredBonds++;
    considerMetalBonds = true;
  }
  if (consideredBonds == 0) {
    if (atoms < 2)
      return defaultBondLength;
    lowDistance = 1.7976931348623157E308;
    for (atom1 = 1; atom1 < atoms; atom1++) {
      for (atom2 = 0; atom2 < atom1; atom2++) {
        distance = this.mCoordinates[atom1].distance(this.mCoordinates[atom2]);
        if (distance > 0 && distance < lowDistance)
          lowDistance = distance;
      }
    }
    return lowDistance != 1.7976931348623157E308?0.6 * lowDistance:defaultBondLength;
  }
  avblSum = 0;
  for (bond = 0; bond < bonds; bond++) {
    if ((considerMetalBonds || this.mBondType[bond] != 32) && (this.mBondQueryFeatures[bond] & 32640) == 0)
      avblSum += this.mCoordinates[this.mBondAtom[1][bond]].distance(this.mCoordinates[this.mBondAtom[0][bond]]);
  }
  return avblSum / consideredBonds;
}
;
_.getBondAngle_0 = function getBondAngle(atom1, atom2){
  return carc.getAngle(this.mCoordinates[atom1].x_0, this.mCoordinates[atom1].y_0, this.mCoordinates[atom2].x_0, this.mCoordinates[atom2].y_0);
}
;
_.getBondAtom_0 = function getBondAtom(no, bond){
  return this.mBondAtom[no][bond];
}
;
_.getBondBridgeMaxSize_0 = function getBondBridgeMaxSize(bond){
  return ((this.mBondQueryFeatures[bond] & 1920) >> 7) + ((this.mBondQueryFeatures[bond] & 30720) >> 11);
}
;
_.getBondBridgeMinSize_0 = function getBondBridgeMinSize(bond){
  return (this.mBondQueryFeatures[bond] & 1920) >> 7;
}
;
_.getBondCIPParity_0 = function getBondCIPParity(bond){
  return (this.mBondFlags[bond] & 48) >> 4;
}
;
_.getBondESRGroup_0 = function getBondESRGroup(bond){
  if (this.getBondESRType_0(bond) != 1 && this.getBondESRType_0(bond) != 2)
    return -1;
  else 
    return (this.mBondFlags[bond] & 126976) >> 12;
}
;
_.getBondESRType_0 = function getBondESRType(bond){
  return (this.mBondFlags[bond] & 3072) >> 10;
}
;
_.getBondLength_0 = function getBondLength(bond){
  var atom1, atom2, xdif, ydif;
  atom1 = this.mBondAtom[0][bond];
  atom2 = this.mBondAtom[1][bond];
  xdif = this.mCoordinates[atom2].x_0 - this.mCoordinates[atom1].x_0;
  ydif = this.mCoordinates[atom2].y_0 - this.mCoordinates[atom1].y_0;
  return $wnd.Math.sqrt(xdif * xdif + ydif * ydif);
}
;
_.getBondNo = function getBondNo(atm1, atm2){
  var bnd;
  for (bnd = 0; bnd < this.mAllBonds; bnd++)
    if (this.mBondAtom[0][bnd] == atm1 && this.mBondAtom[1][bnd] == atm2 || this.mBondAtom[0][bnd] == atm2 && this.mBondAtom[1][bnd] == atm1)
      if (this.mBondType[bnd] != 128)
        return bnd;
  return -1;
}
;
_.getBondOrder_0 = function getBondOrder(bond){
  switch (this.mBondType[bond] & 103) {
    case 1:
    case 64:
      return 1;
    case 2:
      return 2;
    case 4:
      return 3;
    default:return 0;
  }
}
;
_.getBondParity_0 = function getBondParity(bnd){
  return this.mBondFlags[bnd] & 3;
}
;
_.getBondQueryFeatures_0 = function getBondQueryFeatures(bnd){
  return this.mBondQueryFeatures[bnd];
}
;
_.getBondType_0 = function getBondType(bond){
  return this.mBondType[bond];
}
;
_.getBondTypeSimple_0 = function getBondTypeSimple(bond){
  return this.mBondType[bond] & 103;
}
;
_.getChirality_0 = function getChirality(){
  return this.mChirality;
}
;
_.getDefaultMaxValenceUncharged_0 = function getDefaultMaxValenceUncharged(atom){
  var valenceList;
  valenceList = this.mAtomicNo[atom] < carc.cAtomValence.length?carc.cAtomValence[this.mAtomicNo[atom]]:null;
  return jsEquals(valenceList, null)?6:valenceList[valenceList.length - 1];
}
;
_.getElectronValenceCorrection_0 = function getElectronValenceCorrection(atom, occupiedValence){
  var charge, correction;
  if (this.mAtomicNo[atom] >= 171 && this.mAtomicNo[atom] <= 190)
    return 0;
  correction = 0;
  if ((this.mAtomFlags[atom] & 48) == 32)
    correction -= 1;
  if ((this.mAtomFlags[atom] & 48) == 16 || (this.mAtomFlags[atom] & 48) == 48)
    correction -= 2;
  charge = this.mAtomCharge[atom];
  if (charge == 0 && this.mIsFragment) {
    if ((this.mAtomQueryFeatures[atom] & 234881024) == 67108864 + 134217728)
      charge = -1;
    if ((this.mAtomQueryFeatures[atom] & 234881024) == 67108864 + 33554432)
      charge = 1;
  }
  if (this.mAtomicNo[atom] == 7 || this.mAtomicNo[atom] == 8 || this.mAtomicNo[atom] == 9)
    correction += charge;
  else if (this.mAtomicNo[atom] == 6 || this.mAtomicNo[atom] == 14 || this.mAtomicNo[atom] == 32)
    correction -= $wnd.Math.abs(charge);
  else if (this.mAtomicNo[atom] == 15 || this.mAtomicNo[atom] == 33) {
    if (occupiedValence - correction - charge <= 3)
      correction += charge;
    else 
      correction -= charge;
  }
   else if (this.mAtomicNo[atom] == 16 || this.mAtomicNo[atom] == 34 || this.mAtomicNo[atom] == 52) {
    if (occupiedValence - correction - charge <= 4)
      correction += charge;
    else 
      correction -= $wnd.Math.abs(charge);
  }
   else if (this.mAtomicNo[atom] == 17 || this.mAtomicNo[atom] == 35 || this.mAtomicNo[atom] == 53) {
    if (occupiedValence - correction - charge <= 5)
      correction += charge;
    else 
      correction -= $wnd.Math.abs(charge);
  }
   else {
    correction -= charge;
  }
  return correction;
}
;
_.getMaxAtoms_0 = function getMaxAtoms(){
  return this.mMaxAtoms;
}
;
_.getMaxBonds_0 = function getMaxBonds(){
  return this.mMaxBonds;
}
;
_.getMaxValence_0 = function getMaxValence(atom){
  var valence;
  valence = this.getMaxValenceUncharged_0(atom);
  return valence + this.getElectronValenceCorrection_0(atom, valence);
}
;
_.getMaxValenceUncharged_0 = function getMaxValenceUncharged(atom){
  var valence;
  valence = this.getAtomAbnormalValence_0(atom);
  if (valence == -1)
    valence = this.getDefaultMaxValenceUncharged_0(atom);
  return valence;
}
;
_.getMaximumBondOrder = function getMaximumBondOrder(bond){
  var atom, i, max_0, maxBondOrder;
  maxBondOrder = 3;
  for (i = 0; i < 2; i++) {
    atom = this.mBondAtom[i][bond];
    max_0 = this.getBondOrder_0(bond) + this.getMaxValence_0(atom) - this.getOccupiedValence_0(atom);
    if (maxBondOrder > max_0)
      maxBondOrder = max_0;
  }
  return maxBondOrder;
}
;
_.getMoleculeColor_0 = function getMoleculeColor(){
  return this.mMoleculeColor;
}
;
_.getName_0 = function getName(){
  return this.mName;
}
;
_.getOccupiedValence_0 = function getOccupiedValence(atom){
  return this.simpleGetValence(atom);
}
;
_.getStereoProblem_0 = function getStereoProblem(atom){
  return (this.mAtomFlags[atom] & 131072) != 0;
}
;
_.incrementBondOrder = function incrementBondOrder(bond){
  var hasMetal, maxBondOrder, startBond;
  maxBondOrder = this.getMaximumBondOrder(bond);
  hasMetal = this.isMetalAtom_0(this.mBondAtom[0][bond]) || this.isMetalAtom_0(this.mBondAtom[1][bond]);
  startBond = hasMetal?32:1;
  if (this.mBondType[bond] == 4) {
    this.mBondType[bond] = startBond;
    this.mValidHelperArrays = 0;
    return true;
  }
  if (this.mBondType[bond] == 2) {
    this.mBondType[bond] = 26;
    this.mValidHelperArrays &= 3;
    if ((this.mBondFlags[bond] & 128) == 0)
      return true;
  }
  if (this.mBondType[bond] == 26) {
    if (maxBondOrder == 3)
      this.mBondType[bond] = 4;
    else 
      this.mBondType[bond] = startBond;
    this.mValidHelperArrays = 0;
    return true;
  }
  if ((24 & this.mBondType[bond]) != 0) {
    this.mBondType[bond] = 1;
    this.mValidHelperArrays &= 3;
    return true;
  }
  if (!hasMetal && maxBondOrder < 2)
    return false;
  if (this.mBondType[bond] == 1) {
    this.mBondType[bond] = 2;
    this.mValidHelperArrays = 0;
    return true;
  }
  if (maxBondOrder < 1)
    return false;
  if (this.mBondType[bond] == 32) {
    this.mBondType[bond] = 1;
    this.mValidHelperArrays = 0;
    return true;
  }
  return false;
}
;
_.init_1 = function init_1(){
  var i;
  this.mValidHelperArrays = 0;
  this.mAtomicNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxAtoms, 15, 1);
  this.mAtomCharge = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxAtoms, 15, 1);
  this.mAtomMapNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxAtoms, 15, 1);
  this.mCoordinates = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_Coordinates_2_classLit, {351:1, 4:1, 1:1, 8:1}, 47, this.mMaxAtoms, 0, 1);
  for (i = 0; i < this.mMaxAtoms; i++)
    this.mCoordinates[i] = new carc.Coordinates_0;
  this.mAtomMass = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxAtoms, 15, 1);
  this.mAtomFlags = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxAtoms, 15, 1);
  this.mAtomQueryFeatures = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxAtoms, 15, 1);
  this.mAtomList = null;
  this.mAtomCustomLabel = null;
  this.mBondAtom = initMultidimensionalArray(cggl.I_classLit, [{31:1, 4:1, 1:1, 8:1}, {6:1, 4:1, 1:1}], [6, 5], 15, [2, this.mMaxBonds], 2);
  this.mBondType = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxBonds, 15, 1);
  this.mBondFlags = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxBonds, 15, 1);
  this.mBondQueryFeatures = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxBonds, 15, 1);
}
;
_.invalidateHelperArrays_0 = function invalidateHelperArrays(helperBits){
  this.mValidHelperArrays &= ~helperBits;
}
;
_.isAtomConfigurationUnknown_0 = function isAtomConfigurationUnknown(atom){
  return (this.mAtomFlags[atom] & 67108864) != 0;
}
;
_.isAtomMarkedForDeletion_0 = function isAtomMarkedForDeletion(atom){
  return this.mAtomicNo[atom] == -1;
}
;
_.isAtomParityPseudo_0 = function isAtomParityPseudo(atom){
  return (this.mAtomFlags[atom] & 4) != 0;
}
;
_.isAtomStereoCenter_0 = function isAtomStereoCenter(atom){
  return (this.mAtomFlags[atom] & 134217728) != 0;
}
;
_.isAutoMappedAtom_0 = function isAutoMappedAtom(atom){
  return this.mAtomMapNo[atom] < 0;
}
;
_.isBondBackgroundHilited_0 = function isBondBackgroundHilited(bond){
  return (this.mBondFlags[bond] & 131072) != 0;
}
;
_.isBondBridge_0 = function isBondBridge(bond){
  return (this.mBondQueryFeatures[bond] & 32640) != 0;
}
;
_.isBondForegroundHilited_0 = function isBondForegroundHilited(bond){
  return (this.mBondFlags[bond] & 262144) != 0;
}
;
_.isBondMarkedForDeletion_0 = function isBondMarkedForDeletion(bond){
  return this.mBondType[bond] == 128;
}
;
_.isBondParityPseudo_0 = function isBondParityPseudo(bond){
  return (this.mBondFlags[bond] & 4) != 0;
}
;
_.isBondParityUnknownOrNone_0 = function isBondParityUnknownOrNone(bond){
  return (this.mBondFlags[bond] & 16777216) != 0;
}
;
_.isElectronegative_0 = function isElectronegative(atom){
  return carc.isAtomicNoElectronegative(this.mAtomicNo[atom]);
}
;
_.isElectropositive_0 = function isElectropositive(atom){
  return carc.isAtomicNoElectropositive(this.mAtomicNo[atom]);
}
;
_.isFragment_0 = function isFragment_0(){
  return this.mIsFragment;
}
;
_.isMarkedAtom_0 = function isMarkedAtom(atom){
  return (this.mAtomFlags[atom] & 262144) != 0;
}
;
_.isMetalAtom_0 = function isMetalAtom(atom){
  var atomicNo;
  atomicNo = this.mAtomicNo[atom];
  return atomicNo >= 3 && atomicNo <= 4 || atomicNo >= 11 && atomicNo <= 13 || atomicNo >= 19 && atomicNo <= 31 || atomicNo >= 37 && atomicNo <= 51 || atomicNo >= 55 && atomicNo <= 84 || atomicNo >= 87 && atomicNo <= 103;
}
;
_.isNaturalAbundance_0 = function isNaturalAbundance(atom){
  return this.mAtomMass[atom] == 0;
}
;
_.isOrganicAtom_0 = function isOrganicAtom(atom){
  var atomicNo;
  atomicNo = this.mAtomicNo[atom];
  return atomicNo == 1 || atomicNo >= 5 && atomicNo <= 9 || atomicNo >= 14 && atomicNo <= 17 || atomicNo >= 32 && atomicNo <= 35 || atomicNo >= 52 && atomicNo <= 53;
}
;
_.isPurelyOrganic_0 = function isPurelyOrganic(){
  var atom;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    switch (this.mAtomicNo[atom]) {
      case 1:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 14:
      case 15:
      case 16:
      case 17:
      case 33:
      case 34:
      case 35:
      case 52:
      case 53:
        continue;
      default:return false;
    }
  }
  return true;
}
;
_.isSelectedAtom_0 = function isSelectedAtom(atom){
  return (this.mAtomFlags[atom] & 512) != 0;
}
;
_.isSelectedBond_0 = function isSelectedBond(bond){
  return (this.mAtomFlags[this.mBondAtom[0][bond]] & this.mAtomFlags[this.mBondAtom[1][bond]] & 512) != 0;
}
;
_.isStereoBond_0 = function isStereoBond(bond){
  return this.mBondType[bond] == 17 || this.mBondType[bond] == 9;
}
;
_.isStereoBond_1 = function isStereoBond_0(bond, atom){
  return (this.mBondType[bond] == 17 || this.mBondType[bond] == 9) && this.mBondAtom[0][bond] == atom;
}
;
_.markAtomForDeletion_0 = function markAtomForDeletion(atom){
  this.mAtomicNo[atom] = -1;
}
;
_.markBondForDeletion_0 = function markBondForDeletion(bond){
  this.mBondType[bond] = 128;
}
;
_.polygon = function polygon(atom, bonds, endAtm, aromatic, actlAngle, angleChange){
  var actlAtm, bnd, bondLength, dblBnd, i, newx, newy, remoteAtm, step, xdiff, ydiff;
  bondLength = 0;
  if (atom == endAtm) {
    bondLength = this.getAverageBondLength_0();
  }
   else {
    xdiff = this.mCoordinates[atom].x_0 - this.mCoordinates[endAtm].x_0;
    ydiff = this.mCoordinates[atom].y_0 - this.mCoordinates[endAtm].y_0;
    bondLength = $wnd.Math.sqrt(xdiff * xdiff + ydiff * ydiff);
  }
  actlAtm = atom;
  dblBnd = !(this.simpleGetValence(atom) == 3);
  for (step = 1; step < bonds; step++) {
    newx = this.mCoordinates[actlAtm].x_0 + bondLength * $wnd.Math.sin(actlAngle);
    newy = this.mCoordinates[actlAtm].y_0 + bondLength * $wnd.Math.cos(actlAngle);
    remoteAtm = -1;
    for (i = 0; i < this.mAllAtoms; i++) {
      if ($wnd.Math.abs(newx - this.mCoordinates[i].x_0) < 4 && $wnd.Math.abs(newy - this.mCoordinates[i].y_0) < 4) {
        remoteAtm = i;
        break;
      }
    }
    if (remoteAtm == -1) {
      remoteAtm = this.addAtom_0(newx, newy);
      this.mCoordinates[remoteAtm].x_0 = newx;
      this.mCoordinates[remoteAtm].y_0 = newy;
      this.mCoordinates[remoteAtm].z_0 = 0;
    }
    bnd = this.getBondNo(actlAtm, remoteAtm);
    if (bnd == -1) {
      bnd = this.addBond_1(actlAtm, remoteAtm, this.suggestBondType_0(actlAtm, remoteAtm));
      if (aromatic) {
        if (dblBnd) {
          if (this.simpleGetValence(this.mBondAtom[0][bnd]) < 4 && this.simpleGetValence(this.mBondAtom[1][bnd]) < 3)
            this.mBondType[bnd] = 2;
        }
        dblBnd = !dblBnd;
      }
    }
    actlAtm = remoteAtm;
    actlAngle += angleChange;
  }
  bnd = this.getBondNo(actlAtm, endAtm);
  if (bnd == -1)
    bnd = this.addBond_1(actlAtm, endAtm, this.suggestBondType_0(actlAtm, endAtm));
  if (aromatic)
    if (dblBnd)
      if (this.simpleGetValence(this.mBondAtom[0][bnd]) < 4 && this.simpleGetValence(this.mBondAtom[1][bnd]) < 4)
        this.mBondType[bnd] = 2;
}
;
_.qualifiesAsStereoBond = function qualifiesAsStereoBond(bond, atom){
  var i, i0;
  if (this.getBondOrder_0(bond) != 1)
    return false;
  if ((this.mAtomFlags[atom] & 3) != 0)
    return true;
  for (i0 = 0; i0 < this.mAllBonds; i0++)
    if (i0 != bond && this.mBondType[i0] == 2 && (this.mBondAtom[0][i0] == atom && (this.mAtomFlags[this.mBondAtom[1][i0]] & 3) != 0 || this.mBondAtom[1][i0] == atom && (this.mAtomFlags[this.mBondAtom[0][i0]] & 3) != 0))
      return true;
  for (i = 0; i < this.mAllBonds; i++)
    if (i != bond && this.mBondType[i] == 1 && (this.mBondAtom[0][i] == atom || this.mBondAtom[1][i] == atom) && (this.mBondFlags[i] & 3) != 0)
      return true;
  return false;
}
;
_.removeAtomColors_0 = function removeAtomColors(){
  var i;
  for (i = 0; i < this.mAllAtoms; i++)
    this.mAtomFlags[i] &= ~448;
}
;
_.removeAtomCustomLabels_0 = function removeAtomCustomLabels(){
  this.mAtomCustomLabel = null;
}
;
_.removeAtomMarkers_0 = function removeAtomMarkers(){
  var i;
  for (i = 0; i < this.mAllAtoms; i++)
    this.mAtomFlags[i] &= ~262144;
}
;
_.removeAtomSelection_0 = function removeAtomSelection(){
  var i;
  for (i = 0; i < this.mAllAtoms; i++)
    this.mAtomFlags[i] &= ~512;
}
;
_.removeBondHiliting_0 = function removeBondHiliting(){
  var i;
  for (i = 0; i < this.mAllBonds; i++)
    this.mBondFlags[i] &= ~(131072 | 262144);
}
;
_.removeMappingNo = function removeMappingNo(mapNo){
  var atom;
  for (atom = 0; atom < this.mAllAtoms; atom++)
    if ($wnd.Math.abs(this.mAtomMapNo[atom]) == $wnd.Math.abs(mapNo))
      this.mAtomMapNo[atom] = 0;
}
;
_.removeQueryFeatures_0 = function removeQueryFeatures(){
  var atom, bond, isChanged;
  isChanged = false;
  if (jsNotEquals(this.mAtomList, null)) {
    this.mAtomList = null;
    isChanged = true;
  }
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    if (this.mAtomQueryFeatures[atom] != 0) {
      this.mAtomQueryFeatures[atom] = 0;
      isChanged = true;
    }
  }
  for (bond = 0; bond < this.mAllBonds; bond++) {
    if (this.mBondQueryFeatures[bond] != 0) {
      this.mBondQueryFeatures[bond] = 0;
      isChanged = true;
    }
    if (this.mBondType[bond] == 64) {
      this.mBondType[bond] = 1;
      isChanged = true;
    }
  }
  if (isChanged)
    this.mValidHelperArrays = 0;
  return isChanged;
}
;
_.renumberESRGroups_0 = function renumberESRGroups(type_0){
  var atom, atom0, bond, bond0, group, groupUsed, i, newGroup, newIndex;
  if (type_0 == 0)
    return 0;
  groupUsed = null;
  for (atom0 = 0; atom0 < this.mAllAtoms; atom0++) {
    if (this.getAtomESRType_0(atom0) == type_0) {
      if (jsEquals(groupUsed, null))
        groupUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 32, 16, 1);
      groupUsed[this.getAtomESRGroup_0(atom0)] = true;
    }
  }
  for (bond0 = 0; bond0 < this.mAllBonds; bond0++) {
    if (this.getBondESRType_0(bond0) == type_0) {
      if (jsEquals(groupUsed, null))
        groupUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 32, 16, 1);
      groupUsed[this.getBondESRGroup_0(bond0)] = true;
    }
  }
  newIndex = 0;
  if (jsNotEquals(groupUsed, null)) {
    newGroup = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 32, 15, 1);
    for (i = 0; i < 32; i++)
      if (groupUsed[i])
        newGroup[i] = newIndex++;
    for (atom = 0; atom < this.mAllAtoms; atom++) {
      if (this.getAtomESRType_0(atom) == type_0) {
        group = newGroup[this.getAtomESRGroup_0(atom)];
        this.mAtomFlags[atom] &= ~65011712;
        this.mAtomFlags[atom] |= group << 21;
      }
    }
    for (bond = 0; bond < this.mAllBonds; bond++) {
      if (this.getBondESRType_0(bond) == type_0) {
        group = newGroup[this.getBondESRGroup_0(bond)];
        this.mBondFlags[bond] &= ~126976;
        this.mBondFlags[bond] |= group << 12;
      }
    }
  }
  return newIndex;
}
;
_.scaleCoords_0 = function scaleCoords(f){
  var i;
  for (i = 0; i < this.mAllAtoms; i++) {
    this.mCoordinates[i].x_0 *= f;
    this.mCoordinates[i].y_0 *= f;
  }
}
;
_.setAllAtoms_0 = function setAllAtoms(no){
  this.mAllAtoms = no;
  this.mValidHelperArrays = 0;
}
;
_.setAllBonds_0 = function setAllBonds(no){
  this.mAllBonds = no;
  this.mValidHelperArrays = 0;
}
;
_.setAtomAbnormalValence_0 = function setAtomAbnormalValence(atom, valence){
  if (valence >= -1 && valence <= 14) {
    this.mAtomFlags[atom] &= ~-268435456;
    this.mAtomFlags[atom] |= 1 + valence << 28;
    if (this.mAtomicNo[atom] == 6) {
      if (valence == -1 || valence == 0 || valence == 2 || valence == 4) {
        this.mAtomFlags[atom] &= ~48;
        if (valence == 2)
          this.mAtomFlags[atom] |= 16;
      }
    }
  }
}
;
_.setAtomCIPParity_0 = function setAtomCIPParity(atom, parity){
  this.mAtomFlags[atom] &= ~98304;
  this.mAtomFlags[atom] |= parity << 15;
}
;
_.setAtomCharge_0 = function setAtomCharge(atom, charge){
  this.mAtomCharge[atom] = charge;
  this.mValidHelperArrays = 0;
}
;
_.setAtomColor_0 = function setAtomColor(atom, color_0){
  this.mAtomFlags[atom] &= ~448;
  this.mAtomFlags[atom] |= color_0;
}
;
_.setAtomConfigurationUnknown_0 = function setAtomConfigurationUnknown(atom, u){
  if (u)
    this.mAtomFlags[atom] |= 67108864;
  else 
    this.mAtomFlags[atom] &= ~67108864;
  this.mValidHelperArrays &= 3;
}
;
_.setAtomCustomLabel_0 = function setAtomCustomLabel(atom, label_0){
  var atomicNo;
  if (jsNotEquals(label_0, null)) {
    if (jl.length__I__devirtual$_0(label_0) == 0)
      label_0 = null;
    else {
      atomicNo = carc.getAtomicNoFromLabel(label_0);
      if (atomicNo != 0 && jl.equals_Ljava_lang_Object__Z__devirtual$_2(label_0, carc.cAtomLabel[atomicNo]) || jl.equals_Ljava_lang_Object__Z__devirtual$_2(label_0, '?')) {
        this.setAtomicNo_0(atom, atomicNo);
        label_0 = null;
      }
    }
  }
  if (jsEquals(label_0, null)) {
    if (jsNotEquals(this.mAtomCustomLabel, null))
      this.mAtomCustomLabel[atom] = null;
  }
   else {
    if (jsEquals(this.mAtomCustomLabel, null))
      this.mAtomCustomLabel = initUnidimensionalArray(cggl.B_classLit, {93:1, 4:1, 1:1, 8:1}, 9, this.mMaxAtoms, 0, 2);
    this.mAtomCustomLabel[atom] = jl.getBytes___B__devirtual$(label_0);
  }
}
;
_.setAtomCustomLabel_1 = function setAtomCustomLabel_0(atom, label_0){
  if (jsNotEquals(label_0, null) && label_0.length == 0)
    label_0 = null;
  if (jsEquals(label_0, null)) {
    if (jsNotEquals(this.mAtomCustomLabel, null))
      this.mAtomCustomLabel[atom] = null;
  }
   else {
    if (jsEquals(this.mAtomCustomLabel, null))
      this.mAtomCustomLabel = initUnidimensionalArray(cggl.B_classLit, {93:1, 4:1, 1:1, 8:1}, 9, this.mMaxAtoms, 0, 2);
    this.mAtomCustomLabel[atom] = label_0;
  }
}
;
_.setAtomESR_0 = function setAtomESR(atom, type_0, group){
  var i, i0, maxGroup;
  if (type_0 == 0) {
    this.mAtomFlags[atom] &= ~66584576;
    this.mAtomFlags[atom] |= type_0 << 19;
  }
   else {
    if (group >= 32)
      return;
    if (group == -1) {
      maxGroup = -1;
      for (i0 = 0; i0 < this.mAllAtoms; i0++)
        if (i0 != atom && type_0 == this.getAtomESRType_0(i0) && maxGroup < this.getAtomESRGroup_0(i0))
          maxGroup = this.getAtomESRGroup_0(i0);
      for (i = 0; i < this.mAllBonds; i++)
        if (type_0 == this.getBondESRType_0(i) && maxGroup < this.getBondESRGroup_0(i))
          maxGroup = this.getBondESRGroup_0(i);
      group = maxGroup + 1;
      if (group >= 32)
        return;
    }
    this.mAtomFlags[atom] &= ~66584576;
    this.mAtomFlags[atom] |= type_0 << 19 | group << 21;
  }
  this.mValidHelperArrays &= 3;
}
;
_.setAtomList_0 = function setAtomList(atom, list){
  if (jsEquals(this.mAtomList, null))
    this.mAtomList = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mMaxAtoms, 0, 2);
  if (jsNotEquals(list, null))
    ju.sort_3(list);
  this.mAtomList[atom] = list;
  this.mValidHelperArrays = 0;
  this.mIsFragment = true;
}
;
_.setAtomList_1 = function setAtomList_0(atom, list, isExcludeList){
  var atomicNo;
  if (jsEquals(list, null)) {
    if (jsNotEquals(this.mAtomList, null))
      this.mAtomList[atom] = null;
    return;
  }
  if (list.length == 1 && !isExcludeList) {
    atomicNo = list[0];
    if (this.mAtomicNo[atom] != atomicNo)
      this.changeAtom_0(atom, atomicNo, 0, -1, 0);
    if (jsNotEquals(this.mAtomList, null))
      this.mAtomList[atom] = null;
    return;
  }
  if (jsEquals(this.mAtomList, null))
    this.mAtomList = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mMaxAtoms, 0, 2);
  this.mAtomList[atom] = list;
  if (isExcludeList)
    this.mAtomQueryFeatures[atom] |= 1;
  this.mValidHelperArrays = 0;
  this.mIsFragment = true;
}
;
_.setAtomMapNo_0 = function setAtomMapNo(atom, mapNo, autoMapped){
  this.mAtomMapNo[atom] = autoMapped?-mapNo:mapNo;
}
;
_.setAtomMarker_0 = function setAtomMarker(atom, s){
  if (s)
    this.mAtomFlags[atom] |= 262144;
  else 
    this.mAtomFlags[atom] &= ~262144;
}
;
_.setAtomMass_0 = function setAtomMass(atom, mass){
  this.mAtomMass[atom] = mass;
  this.mValidHelperArrays &= 3;
}
;
_.setAtomParity_0 = function setAtomParity(atom, parity, isPseudo){
  this.mAtomFlags[atom] &= ~(3 | 4);
  this.mAtomFlags[atom] |= parity;
  if (isPseudo)
    this.mAtomFlags[atom] |= 4;
}
;
_.setAtomQueryFeature_0 = function setAtomQueryFeature(atom, feature, value_0){
  if (value_0)
    this.mAtomQueryFeatures[atom] |= feature;
  else 
    this.mAtomQueryFeatures[atom] &= ~feature;
  this.mValidHelperArrays = 0;
  this.mIsFragment = true;
}
;
_.setAtomRadical_0 = function setAtomRadical(atom, radical){
  this.mAtomFlags[atom] &= ~48;
  this.mAtomFlags[atom] |= radical;
  this.mValidHelperArrays &= 3;
}
;
_.setAtomSelection_0 = function setAtomSelection(atom, s){
  if (s)
    this.mAtomFlags[atom] |= 512;
  else 
    this.mAtomFlags[atom] &= ~512;
}
;
_.setAtomStereoCenter = function setAtomStereoCenter(atom, isStereoCenter){
  this.mAtomFlags[atom] &= ~134217728;
  if (isStereoCenter)
    this.mAtomFlags[atom] |= 134217728;
}
;
_.setAtomX_0 = function setAtomX(atom, x_0){
  this.mCoordinates[atom].x_0 = x_0;
  this.mValidHelperArrays &= 3;
}
;
_.setAtomY_0 = function setAtomY(atom, y_0){
  this.mCoordinates[atom].y_0 = y_0;
  this.mValidHelperArrays &= 3;
}
;
_.setAtomZ_0 = function setAtomZ(atom, z_0){
  this.mCoordinates[atom].z_0 = z_0;
  this.mValidHelperArrays &= 3;
}
;
_.setAtomicNo_0 = function setAtomicNo(atom, no){
  if (no >= 0 && no <= 190) {
    if (no == 151 || no == 152) {
      this.mAtomicNo[atom] = 1;
      this.mAtomMass[atom] = no - 149;
    }
     else {
      this.mAtomicNo[atom] = no;
      this.mAtomMass[atom] = 0;
    }
    this.mAtomFlags[atom] &= ~-268435456;
    this.mValidHelperArrays = 0;
  }
}
;
_.setBondAtom_0 = function setBondAtom(no, bond, atom){
  this.mBondAtom[no][bond] = atom;
  this.mValidHelperArrays = 0;
}
;
_.setBondBackgroundHiliting_0 = function setBondBackgroundHiliting(bond, s){
  if (s)
    this.mBondFlags[bond] |= 131072;
  else 
    this.mBondFlags[bond] &= ~131072;
}
;
_.setBondCIPParity_0 = function setBondCIPParity(bond, parity){
  this.mBondFlags[bond] &= ~48;
  this.mBondFlags[bond] |= parity << 4;
}
;
_.setBondESR_0 = function setBondESR(bond, type_0, group){
  var i, i0, maxGroup;
  if (type_0 == 0) {
    this.mBondFlags[bond] &= ~130048;
    this.mBondFlags[bond] |= type_0 << 10;
  }
   else {
    if (group >= 32)
      return;
    if (group == -1) {
      maxGroup = -1;
      for (i0 = 0; i0 < this.mAllAtoms; i0++)
        if (type_0 == this.getAtomESRType_0(i0) && maxGroup < this.getAtomESRGroup_0(i0))
          maxGroup = this.getAtomESRGroup_0(i0);
      for (i = 0; i < this.mAllBonds; i++)
        if (i != bond && type_0 == this.getBondESRType_0(i) && maxGroup < this.getBondESRGroup_0(i))
          maxGroup = this.getBondESRGroup_0(i);
      group = maxGroup + 1;
      if (group >= 32)
        return;
    }
    this.mBondFlags[bond] &= ~130048;
    this.mBondFlags[bond] |= type_0 << 10 | group << 12;
  }
  this.mValidHelperArrays &= 3;
}
;
_.setBondForegroundHiliting_0 = function setBondForegroundHiliting(bond, s){
  if (s)
    this.mBondFlags[bond] |= 262144;
  else 
    this.mBondFlags[bond] &= ~262144;
}
;
_.setBondOrder_0 = function setBondOrder(bond, order){
  this.mBondType[bond] = order == 1?1:order == 2?2:order == 3?4:32;
  this.mValidHelperArrays = 0;
}
;
_.setBondParity_0 = function setBondParity(bond, parity, isPseudo){
  this.mBondFlags[bond] &= ~(3 | 4 | 16777216);
  this.mBondFlags[bond] |= parity;
  if (isPseudo)
    this.mBondFlags[bond] |= 4;
}
;
_.setBondParityUnknownOrNone_0 = function setBondParityUnknownOrNone(bond){
  this.mBondFlags[bond] |= 16777216;
}
;
_.setBondQueryFeature_0 = function setBondQueryFeature(bond, feature, value_0){
  if (value_0)
    this.mBondQueryFeatures[bond] |= feature;
  else 
    this.mBondQueryFeatures[bond] &= ~feature;
  this.mValidHelperArrays = 0;
  this.mIsFragment = true;
}
;
_.setBondType_0 = function setBondType(bond, type_0){
  this.mBondType[bond] = type_0;
  this.mValidHelperArrays = 0;
}
;
_.setChirality_0 = function setChirality(c){
  this.mChirality = c;
}
;
_.setFragment_0 = function setFragment(isFragment){
  if (this.mIsFragment != isFragment) {
    this.mIsFragment = isFragment;
    if (!isFragment)
      this.removeQueryFeatures_0();
    this.mValidHelperArrays = 0;
  }
}
;
_.setHelperValidity_0 = function setHelperValidity(helperValidity){
  this.mValidHelperArrays = helperValidity;
}
;
_.setHydrogenProtection_0 = function setHydrogenProtection(protectHydrogen){
  this.mProtectHydrogen = protectHydrogen;
}
;
_.setMaxAtoms_0 = function setMaxAtoms(v){
  var i, orig;
  this.mAtomicNo = ju.copyOf_0(this.mAtomicNo, v);
  this.mAtomCharge = ju.copyOf_0(this.mAtomCharge, v);
  this.mAtomMapNo = ju.copyOf_0(this.mAtomMapNo, v);
  orig = this.mCoordinates.length;
  this.mCoordinates = castTo(ju.copyOf_1(this.mCoordinates, v), 351);
  for (i = orig; i < v; i++)
    this.mCoordinates[i] = new carc.Coordinates_0;
  this.mAtomMass = ju.copyOf_0(this.mAtomMass, v);
  this.mAtomFlags = ju.copyOf_0(this.mAtomFlags, v);
  this.mAtomQueryFeatures = ju.copyOf_0(this.mAtomQueryFeatures, v);
  if (jsNotEquals(this.mAtomList, null))
    this.mAtomList = castTo(ju.copyOf_1(this.mAtomList, v), 31);
  if (jsNotEquals(this.mAtomCustomLabel, null))
    this.mAtomCustomLabel = castTo(ju.copyOf_1(this.mAtomCustomLabel, v), 93);
  this.mMaxAtoms = v;
}
;
_.setMaxBonds_0 = function setMaxBonds(v){
  this.mBondAtom[0] = ju.copyOf_0(this.mBondAtom[0], v);
  this.mBondAtom[1] = ju.copyOf_0(this.mBondAtom[1], v);
  this.mBondType = ju.copyOf_0(this.mBondType, v);
  this.mBondFlags = ju.copyOf_0(this.mBondFlags, v);
  this.mBondQueryFeatures = ju.copyOf_0(this.mBondQueryFeatures, v);
  this.mMaxBonds = v;
}
;
_.setMoleculeColor_0 = function setMoleculeColor(color_0){
  this.mMoleculeColor = color_0;
}
;
_.setName_0 = function setName(name_0){
  this.mName = name_0;
}
;
_.setStereoProblem = function setStereoProblem(atom){
  this.mAtomFlags[atom] |= 131072;
}
;
_.setToRacemate_0 = function setToRacemate(){
  this.mIsRacemate = true;
}
;
_.simpleGetValence = function simpleGetValence(atom){
  var bnd, val;
  val = 0;
  for (bnd = 0; bnd < this.mAllBonds; bnd++)
    if (this.mBondAtom[0][bnd] == atom || this.mBondAtom[1][bnd] == atom)
      val += this.getBondOrder_0(bnd);
  return val;
}
;
_.stripIsotopInfo_0 = function stripIsotopInfo(){
  var atom, found, hydrogenIsotopFound;
  found = false;
  hydrogenIsotopFound = false;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    if (this.mAtomMass[atom] != 0) {
      this.mAtomMass[atom] = 0;
      found = true;
      if (this.mAtomicNo[atom] == 1)
        hydrogenIsotopFound = true;
    }
  }
  if (hydrogenIsotopFound)
    this.mValidHelperArrays = 0;
  return found;
}
;
_.suggestBondType_0 = function suggestBondType(atom1, atom2){
  return this.isMetalAtom_0(atom1) || this.isMetalAtom_0(atom2)?32:1;
}
;
_.swapAtoms = function swapAtoms(atom1, atom2){
  var bond, i, tempCoords, tempInt, tempList;
  tempInt = this.mAtomicNo[atom1];
  this.mAtomicNo[atom1] = this.mAtomicNo[atom2];
  this.mAtomicNo[atom2] = tempInt;
  tempInt = this.mAtomCharge[atom1];
  this.mAtomCharge[atom1] = this.mAtomCharge[atom2];
  this.mAtomCharge[atom2] = tempInt;
  tempInt = this.mAtomMass[atom1];
  this.mAtomMass[atom1] = this.mAtomMass[atom2];
  this.mAtomMass[atom2] = tempInt;
  tempInt = this.mAtomFlags[atom1];
  this.mAtomFlags[atom1] = this.mAtomFlags[atom2];
  this.mAtomFlags[atom2] = tempInt;
  tempInt = this.mAtomQueryFeatures[atom1];
  this.mAtomQueryFeatures[atom1] = this.mAtomQueryFeatures[atom2];
  this.mAtomQueryFeatures[atom2] = tempInt;
  tempInt = this.mAtomMapNo[atom1];
  this.mAtomMapNo[atom1] = this.mAtomMapNo[atom2];
  this.mAtomMapNo[atom2] = tempInt;
  tempCoords = this.mCoordinates[atom1];
  this.mCoordinates[atom1] = this.mCoordinates[atom2];
  this.mCoordinates[atom2] = tempCoords;
  if (jsNotEquals(this.mAtomList, null)) {
    tempList = this.mAtomList[atom1];
    this.mAtomList[atom1] = this.mAtomList[atom2];
    this.mAtomList[atom2] = tempList;
  }
  if (jsNotEquals(this.mAtomCustomLabel, null)) {
    tempList = this.mAtomCustomLabel[atom1];
    this.mAtomCustomLabel[atom1] = this.mAtomCustomLabel[atom2];
    this.mAtomCustomLabel[atom2] = tempList;
  }
  for (bond = 0; bond < this.mAllBonds; bond++) {
    for (i = 0; i < 2; i++) {
      if (this.mBondAtom[i][bond] == atom1)
        this.mBondAtom[i][bond] = atom2;
      else if (this.mBondAtom[i][bond] == atom2)
        this.mBondAtom[i][bond] = atom1;
    }
  }
  this.mValidHelperArrays = 0;
}
;
_.translateCoords_0 = function translateCoords(dx, dy){
  var i;
  for (i = 0; i < this.mAllAtoms; i++) {
    this.mCoordinates[i].x_0 += dx;
    this.mCoordinates[i].y_0 += dy;
  }
  this.mZoomRotationX += dx;
  this.mZoomRotationY += dy;
}
;
_.validateBondType = function validateBondType(bond, type_0){
  var maxBondOrder, simpleType;
  simpleType = type_0 & 103;
  maxBondOrder = this.getMaximumBondOrder(bond);
  switch (simpleType) {
    case 1:
    case 64:
      return maxBondOrder >= 1;
    case 2:
      return maxBondOrder >= 2;
    case 4:
      return maxBondOrder >= 3;
    case 32:
      return true;
    default:return false;
  }
}
;
_.zoomAndRotate_0 = function zoomAndRotate(zoom, angle, selected){
  var atom, newAngle, newDistance;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    if (!selected || this.isSelectedAtom_0(atom)) {
      newDistance = this.mOriginalDistance[atom] * zoom;
      newAngle = this.mOriginalAngle[atom] - angle;
      this.mCoordinates[atom].x_0 = this.mZoomRotationX + newDistance * $wnd.Math.sin(newAngle);
      this.mCoordinates[atom].y_0 = this.mZoomRotationY + newDistance * $wnd.Math.cos(newAngle);
    }
  }
  if (selected)
    this.mValidHelperArrays &= 3;
}
;
_.zoomAndRotateInit_0 = function zoomAndRotateInit(x_0, y_0){
  var atom, dx, dy;
  this.mZoomRotationX = x_0;
  this.mZoomRotationY = y_0;
  this.mOriginalAngle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  this.mOriginalDistance = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    dx = x_0 - this.mCoordinates[atom].x_0;
    dy = y_0 - this.mCoordinates[atom].y_0;
    this.mOriginalDistance[atom] = $wnd.Math.sqrt(dx * dx + dy * dy);
    this.mOriginalAngle[atom] = carc.getAngle(x_0, y_0, this.mCoordinates[atom].x_0, this.mCoordinates[atom].y_0);
  }
}
;
_.mAllAtoms = 0;
_.mAllBonds = 0;
_.mChirality = 0;
_.mIsFragment = false;
_.mIsRacemate = false;
_.mMaxAtoms = 0;
_.mMaxBonds = 0;
_.mMoleculeColor = 0;
_.mProtectHydrogen = false;
_.mValidHelperArrays = 0;
_.mZoomRotationX = 0;
_.mZoomRotationY = 0;
carc.cAtomCIPParityNone = 0;
carc.cAtomCIPParityProblem = 3;
carc.cAtomCIPParityRorM = 1;
carc.cAtomCIPParitySorP = 2;
carc.cAtomColorBlue = 64;
carc.cAtomColorDarkGreen = 384;
carc.cAtomColorDarkRed = 448;
carc.cAtomColorGreen = 192;
carc.cAtomColorMagenta = 256;
carc.cAtomColorNone = 0;
carc.cAtomColorOrange = 320;
carc.cAtomColorRed = 128;
carc.cAtomFlagAllylic = 8192;
carc.cAtomFlagAromatic = 4096;
carc.cAtomFlagConfigurationUnknown = 67108864;
carc.cAtomFlagIsStereoCenter = 134217728;
carc.cAtomFlagMarked = 262144;
carc.cAtomFlagSelected = 512;
carc.cAtomFlagSmallRing = 8;
carc.cAtomFlagStabilized = 16384;
carc.cAtomFlagStereoProblem = 131072;
carc.cAtomFlags2RingBonds = 1024;
carc.cAtomFlags3RingBonds = 2048;
carc.cAtomFlags4RingBonds = 3072;
carc.cAtomFlagsCIPParity = 98304;
carc.cAtomFlagsCIPParityShift = 15;
carc.cAtomFlagsColor = 448;
carc.cAtomFlagsESR = 66584576;
carc.cAtomFlagsESRGroup = 65011712;
carc.cAtomFlagsESRGroupShift = 21;
carc.cAtomFlagsESRType = 1572864;
carc.cAtomFlagsESRTypeShift = 19;
carc.cAtomFlagsHelper = 261135;
carc.cAtomFlagsHelper2 = 31752;
carc.cAtomFlagsHelper3 = 134447111;
carc.cAtomFlagsParity = 3;
carc.cAtomFlagsRingBonds = 3072;
carc.cAtomFlagsValence = -268435456;
carc.cAtomFlagsValenceShift = 28;
carc.cAtomParity1 = 1;
carc.cAtomParity2 = 2;
carc.cAtomParityIsPseudo = 4;
carc.cAtomParityNone = 0;
carc.cAtomParityUnknown = 3;
carc.cAtomQFAny = 1;
carc.cAtomQFAromState = 6;
carc.cAtomQFAromStateBits = 2;
carc.cAtomQFAromStateShift = 1;
carc.cAtomQFAromatic = 2;
carc.cAtomQFCharge = 234881024;
carc.cAtomQFChargeBits = 3;
carc.cAtomQFChargeShift = 25;
carc.cAtomQFExcludeGroup = 536870912;
carc.cAtomQFFlatNitrogen = 268435456;
carc.cAtomQFHydrogen = 1920;
carc.cAtomQFHydrogenBits = 4;
carc.cAtomQFHydrogenShift = 7;
carc.cAtomQFMatchStereo = 8192;
carc.cAtomQFMoreNeighbours = 4096;
carc.cAtomQFNarrowing = 239060990;
carc.cAtomQFNeighbourBits = 5;
carc.cAtomQFNeighbourShift = 17;
carc.cAtomQFNeighbours = 4063232;
carc.cAtomQFNoMoreNeighbours = 2048;
carc.cAtomQFNoOfBits = 30;
carc.cAtomQFNot0Hydrogen = 128;
carc.cAtomQFNot0Neighbours = 131072;
carc.cAtomQFNot0PiElectrons = 16384;
carc.cAtomQFNot1Hydrogen = 256;
carc.cAtomQFNot1Neighbour = 262144;
carc.cAtomQFNot1PiElectron = 32768;
carc.cAtomQFNot2Hydrogen = 512;
carc.cAtomQFNot2Neighbours = 524288;
carc.cAtomQFNot2PiElectrons = 65536;
carc.cAtomQFNot2RingBonds = 16;
carc.cAtomQFNot3Hydrogen = 1024;
carc.cAtomQFNot3Neighbours = 1048576;
carc.cAtomQFNot3RingBonds = 32;
carc.cAtomQFNot4Neighbours = 2097152;
carc.cAtomQFNot4RingBonds = 64;
carc.cAtomQFNotAromatic = 4;
carc.cAtomQFNotChain = 8;
carc.cAtomQFNotCharge0 = 67108864;
carc.cAtomQFNotChargeNeg = 33554432;
carc.cAtomQFNotChargePos = 134217728;
carc.cAtomQFPiElectronBits = 3;
carc.cAtomQFPiElectronShift = 14;
carc.cAtomQFPiElectrons = 114688;
carc.cAtomQFRingSize = 29360128;
carc.cAtomQFRingSizeBits = 3;
carc.cAtomQFRingSizeShift = 22;
carc.cAtomQFRingState = 120;
carc.cAtomQFRingStateBits = 4;
carc.cAtomQFRingStateShift = 3;
carc.cAtomQFSimpleFeatures = 239060990;
carc.cAtomRadicalState = 48;
carc.cAtomRadicalStateD = 32;
carc.cAtomRadicalStateNone = 0;
carc.cAtomRadicalStateS = 16;
carc.cAtomRadicalStateShift = 4;
carc.cAtomRadicalStateT = 48;
carc.cBondCIPParityEorP = 1;
carc.cBondCIPParityNone = 0;
carc.cBondCIPParityProblem = 3;
carc.cBondCIPParityZorM = 2;
carc.cBondFlagAromatic = 256;
carc.cBondFlagBGHilited = 131072;
carc.cBondFlagDelocalized = 512;
carc.cBondFlagFGHilited = 262144;
carc.cBondFlagRing = 64;
carc.cBondFlagSmallRing = 128;
carc.cBondFlagsCIPParity = 48;
carc.cBondFlagsCIPParityShift = 4;
carc.cBondFlagsESR = 130048;
carc.cBondFlagsESRGroup = 126976;
carc.cBondFlagsESRGroupShift = 12;
carc.cBondFlagsESRType = 3072;
carc.cBondFlagsESRTypeShift = 10;
carc.cBondFlagsHelper2 = 960;
carc.cBondFlagsHelper3 = 63;
carc.cBondFlagsParity = 3;
carc.cBondParityEor1 = 1;
carc.cBondParityIsPseudo = 4;
carc.cBondParityNone = 0;
carc.cBondParityUnknown = 3;
carc.cBondParityUnknownOrNone = 16777216;
carc.cBondParityZor2 = 2;
carc.cBondQFAllFeatures = 2097151;
carc.cBondQFAromState = 1572864;
carc.cBondQFAromStateBits = 2;
carc.cBondQFAromStateShift = 19;
carc.cBondQFAromatic = 524288;
carc.cBondQFBondTypes = 31;
carc.cBondQFBondTypesBits = 5;
carc.cBondQFBondTypesShift = 0;
carc.cBondQFBridge = 32640;
carc.cBondQFBridgeBits = 8;
carc.cBondQFBridgeMin = 1920;
carc.cBondQFBridgeMinBits = 4;
carc.cBondQFBridgeMinShift = 7;
carc.cBondQFBridgeShift = 7;
carc.cBondQFBridgeSpan = 30720;
carc.cBondQFBridgeSpanBits = 4;
carc.cBondQFBridgeSpanShift = 11;
carc.cBondQFDelocalized = 8;
carc.cBondQFDouble = 2;
carc.cBondQFMatchStereo = 262144;
carc.cBondQFMetalLigand = 16;
carc.cBondQFNarrowing = 1572960;
carc.cBondQFNoOfBits = 21;
carc.cBondQFNotAromatic = 1048576;
carc.cBondQFNotRing = 32;
carc.cBondQFRing = 64;
carc.cBondQFRingSize = 229376;
carc.cBondQFRingSizeBits = 3;
carc.cBondQFRingSizeShift = 15;
carc.cBondQFRingState = 96;
carc.cBondQFRingStateBits = 2;
carc.cBondQFRingStateShift = 5;
carc.cBondQFSimpleFeatures = 1572991;
carc.cBondQFSingle = 1;
carc.cBondQFTriple = 4;
carc.cBondTypeCross = 26;
carc.cBondTypeDeleted = 128;
carc.cBondTypeDelocalized = 64;
carc.cBondTypeDouble = 2;
carc.cBondTypeDown = 9;
carc.cBondTypeIncreaseOrder = 127;
carc.cBondTypeMaskSimple = 103;
carc.cBondTypeMaskStereo = 24;
carc.cBondTypeMetalLigand = 32;
carc.cBondTypeSingle = 1;
carc.cBondTypeTriple = 4;
carc.cBondTypeUp = 17;
carc.cChiralityDiastereomers = 458752;
carc.cChiralityEpimers = 393216;
carc.cChiralityIsomerCountMask = 65535;
carc.cChiralityKnownEnantiomer = 262144;
carc.cChiralityMeso = 131072;
carc.cChiralityNotChiral = 65536;
carc.cChiralityRacemic = 196608;
carc.cChiralityUnknown = 0;
carc.cChiralityUnknownEnantiomer = 327680;
carc.cDefaultAVBL = 24;
carc.cDefaultAtomValence = 6;
carc.cESRGroupBits = 5;
carc.cESRMaxGroups = 32;
carc.cESRTypeAbs = 0;
carc.cESRTypeAnd = 1;
carc.cESRTypeOr = 2;
carc.cHelperBitCIP = 8;
carc.cHelperBitIncludeNitrogenParities = 128;
carc.cHelperBitNeighbours = 1;
carc.cHelperBitParities = 4;
carc.cHelperBitRings = 2;
carc.cHelperBitSymmetryDiastereotopic = 32;
carc.cHelperBitSymmetryEnantiotopic = 64;
carc.cHelperBitSymmetrySimple = 16;
carc.cHelperBitsStereo = 252;
carc.cHelperCIP = 0;
carc.cHelperNeighbours = 1;
carc.cHelperNone = 0;
carc.cHelperParities = 0;
carc.cHelperRings = 0;
carc.cHelperSymmetryDiastereotopic = 0;
carc.cHelperSymmetryEnantiotopic = 0;
carc.cHelperSymmetrySimple = 0;
carc.cMaxAtomicNo = 190;
carc.cMoleculeColorDefault = 0;
carc.cMoleculeColorNeutral = 1;
carc.sDefaultAVBL = 24;
carc.serialVersionUID = 537920272;
cggl.Lcom_actelion_research_chem_Molecule_2_classLit = createForClass('com.actelion.research.chem', 'Molecule', 90, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_ExtendedMolecule = function $clinit_ExtendedMolecule(){
  carc.$clinit_ExtendedMolecule = emptyMethod;
  carc.$clinit_Molecule();
  carc.FISCHER_PROJECTION_LIMIT = 3.141592653589793 / 36;
  carc.STEREO_ANGLE_LIMIT = 3.141592653589793 / 36;
}
;
carc.ExtendedMolecule = function ExtendedMolecule(maxAtoms, maxBonds){
  carc.$clinit_ExtendedMolecule();
  carc.Molecule.call(this, maxAtoms, maxBonds);
  this.$init_20();
}
;
carc.ExtendedMolecule_0 = function ExtendedMolecule_0(mol){
  carc.$clinit_ExtendedMolecule();
  carc.Molecule.call(this, isNull(mol)?256:mol.getMaxAtoms_0(), isNull(mol)?256:mol.getMaxBonds_0());
  this.$init_20();
  if (isNotNull(mol))
    mol.copyMolecule_0(this);
}
;
defineClass(89, 90, {4:1, 1:1});
_.$init_20 = function $init_20(){
}
;
_.addFragment_0 = function addFragment(sourceMol, rootAtom, atomMap){
  var bond, candidate, current, esrGroupCountAND, esrGroupCountOR, graphAtom, highest, i, isFragmentMember;
  sourceMol.ensureHelperArrays_0(1);
  if (jsEquals(atomMap, null))
    atomMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, sourceMol.mAllAtoms, 15, 1);
  esrGroupCountAND = this.renumberESRGroups_0(1);
  esrGroupCountOR = this.renumberESRGroups_0(2);
  isFragmentMember = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, sourceMol.mAllAtoms, 16, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, sourceMol.mAllAtoms, 15, 1);
  graphAtom[0] = rootAtom;
  isFragmentMember[rootAtom] = true;
  atomMap[rootAtom] = sourceMol.copyAtom_0(this, rootAtom, esrGroupCountAND, esrGroupCountOR);
  current = 0;
  highest = 0;
  while (current <= highest) {
    for (i = 0; i < sourceMol.getAllConnAtoms_0(graphAtom[current]); i++) {
      candidate = sourceMol.mConnAtom[graphAtom[current]][i];
      if (!isFragmentMember[candidate]) {
        graphAtom[++highest] = candidate;
        isFragmentMember[candidate] = true;
        atomMap[candidate] = sourceMol.copyAtom_0(this, candidate, esrGroupCountAND, esrGroupCountOR);
      }
    }
    current++;
  }
  for (bond = 0; bond < sourceMol.mAllBonds; bond++)
    if (isFragmentMember[sourceMol.mBondAtom[0][bond]])
      sourceMol.copyBond_1(this, bond, esrGroupCountAND, esrGroupCountOR, atomMap, false);
  this.renumberESRGroups_0(1);
  this.renumberESRGroups_0(2);
  this.mValidHelperArrays = 0;
}
;
_.bondsAreParallel = function bondsAreParallel(angle1, angle2){
  var angleDif;
  angleDif = $wnd.Math.abs(carc.getAngleDif(angle1, angle2));
  return angleDif < 0.08 || angleDif > 3.141592653589793 - 0.08;
}
;
_.calculateNeighbours = function calculateNeighbours(){
  var allConnAtoms, atom, atom0, atom1, atom2, bnd, bnd0, bnd1, bnd2, connCount, i, metalBondFound, order;
  this.mConnAtoms = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  this.mAllConnAtoms = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  this.mConnAtom = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mAllAtoms, 0, 2);
  this.mConnBond = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mAllAtoms, 0, 2);
  this.mConnBondOrder = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mAllAtoms, 0, 2);
  this.mPi = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtoms, 15, 1);
  connCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  for (bnd0 = 0; bnd0 < this.mAllBonds; bnd0++) {
    connCount[this.mBondAtom[0][bnd0]]++;
    connCount[this.mBondAtom[1][bnd0]]++;
  }
  for (atom0 = 0; atom0 < this.mAllAtoms; atom0++) {
    this.mConnAtom[atom0] = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, connCount[atom0], 15, 1);
    this.mConnBond[atom0] = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, connCount[atom0], 15, 1);
    this.mConnBondOrder[atom0] = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, connCount[atom0], 15, 1);
  }
  metalBondFound = false;
  for (bnd1 = 0; bnd1 < this.mBonds; bnd1++) {
    order = this.getBondOrder_0(bnd1);
    if (order == 0) {
      metalBondFound = true;
      continue;
    }
    for (i = 0; i < 2; i++) {
      atom1 = this.mBondAtom[i][bnd1];
      allConnAtoms = this.mAllConnAtoms[atom1];
      this.mConnBondOrder[atom1][allConnAtoms] = order;
      this.mConnAtom[atom1][allConnAtoms] = this.mBondAtom[1 - i][bnd1];
      this.mConnBond[atom1][allConnAtoms] = bnd1;
      this.mAllConnAtoms[atom1]++;
      this.mConnAtoms[atom1]++;
      if (atom1 < this.mAtoms) {
        if (order > 1)
          this.mPi[atom1] += order + order - 2;
        else if (this.mBondType[bnd1] == 64)
          this.mPi[atom1] = 2;
      }
    }
  }
  for (bnd2 = this.mBonds; bnd2 < this.mAllBonds; bnd2++) {
    order = this.getBondOrder_0(bnd2);
    if (order == 0) {
      metalBondFound = true;
      continue;
    }
    for (i = 0; i < 2; i++) {
      atom1 = this.mBondAtom[i][bnd2];
      allConnAtoms = this.mAllConnAtoms[atom1];
      this.mConnBondOrder[atom1][allConnAtoms] = order;
      this.mConnAtom[atom1][allConnAtoms] = this.mBondAtom[1 - i][bnd2];
      this.mConnBond[atom1][allConnAtoms] = bnd2;
      this.mAllConnAtoms[atom1]++;
      if (this.mBondAtom[1 - i][bnd2] < this.mAtoms)
        this.mConnAtoms[atom1]++;
    }
  }
  if (metalBondFound) {
    allConnAtoms = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
    for (atom1 = 0; atom1 < this.mAllAtoms; atom1++)
      allConnAtoms[atom1] = this.mAllConnAtoms[atom1];
    for (bnd = 0; bnd < this.mAllBonds; bnd++) {
      order = this.getBondOrder_0(bnd);
      if (order == 0) {
        for (i = 0; i < 2; i++) {
          atom2 = this.mBondAtom[i][bnd];
          this.mConnBondOrder[atom2][allConnAtoms[atom2]] = order;
          this.mConnAtom[atom2][allConnAtoms[atom2]] = this.mBondAtom[1 - i][bnd];
          this.mConnBond[atom2][allConnAtoms[atom2]] = bnd;
          allConnAtoms[atom2]++;
        }
      }
    }
  }
  for (atom = 0; atom < this.mAtoms; atom++)
    this.mPi[atom] = narrow_int(this.mPi[atom] / 2);
}
;
_.canonizeCharge_0 = function canonizeCharge(allowUnbalancedCharge){
  var atom, atom0, atom1, atom2, atom3, bond, bondOrder, chargeReduction, i, negativeAdjustableCharge, negativeAtom, negativeAtomCount, overallCharge, overallChargeChange;
  this.ensureHelperArrays_0(1);
  for (bond = 0; bond < this.mAllBonds; bond++) {
    bondOrder = this.getBondOrder_0(bond);
    if (bondOrder == 1 || bondOrder == 2) {
      if (this.mAtomCharge[this.mBondAtom[0][bond]] > 0 && this.mAtomCharge[this.mBondAtom[1][bond]] < 0) {
        atom1 = this.mBondAtom[0][bond];
        atom2 = this.mBondAtom[1][bond];
      }
       else if (this.mAtomCharge[this.mBondAtom[0][bond]] < 0 && this.mAtomCharge[this.mBondAtom[1][bond]] > 0) {
        atom1 = this.mBondAtom[1][bond];
        atom2 = this.mBondAtom[0][bond];
      }
       else 
        continue;
      if (this.isMetalAtom_0(atom1) || this.isMetalAtom_0(atom2))
        continue;
      if (this.mAtomicNo[atom1] < 9 && this.getOccupiedValence_0(atom1) > 3 || this.mAtomicNo[atom2] < 9 && this.getOccupiedValence_0(atom2) > 3)
        continue;
      this.mAtomCharge[atom1] -= 1;
      this.mAtomCharge[atom2] += 1;
      if (bondOrder == 1)
        this.mBondType[bond] = 2;
      else 
        this.mBondType[bond] = 4;
      this.mValidHelperArrays = 0;
    }
  }
  overallCharge = 0;
  negativeAtomCount = 0;
  negativeAdjustableCharge = 0;
  for (atom0 = 0; atom0 < this.mAllAtoms; atom0++) {
    overallCharge += this.mAtomCharge[atom0];
    if (this.mAtomCharge[atom0] < 0 && !this.hasPositiveNeighbour(atom0)) {
      negativeAtomCount++;
      if (this.isElectronegative_0(atom0))
        negativeAdjustableCharge -= this.mAtomCharge[atom0];
    }
  }
  if (!allowUnbalancedCharge && overallCharge != 0)
    throw toJs(new jl.Exception_1("molecule's overall charges are not balanced"));
  this.ensureHelperArrays_0(1);
  overallChargeChange = 0;
  for (atom3 = 0; atom3 < this.mAllAtoms; atom3++) {
    if (this.mAtomCharge[atom3] > 0) {
      if (!this.hasNegativeNeighbour(atom3) && this.isElectronegative_0(atom3)) {
        chargeReduction = $wnd.Math.min(this.getImplicitHydrogens_0(atom3), this.mAtomCharge[atom3]);
        if (chargeReduction != 0 && negativeAdjustableCharge >= chargeReduction) {
          overallCharge -= chargeReduction;
          overallChargeChange -= chargeReduction;
          negativeAdjustableCharge -= chargeReduction;
          this.mAtomCharge[atom3] -= chargeReduction;
          this.mValidHelperArrays &= 1;
        }
      }
    }
  }
  if (overallChargeChange < 0) {
    negativeAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, negativeAtomCount, 15, 1);
    negativeAtomCount = 0;
    for (atom1 = 0; atom1 < this.mAllAtoms; atom1++) {
      if (this.mAtomCharge[atom1] < 0 && !this.hasPositiveNeighbour(atom1)) {
        negativeAtom[negativeAtomCount++] = (this.mAtomicNo[atom1] << 16) + atom1;
      }
    }
    ju.sort_3(negativeAtom);
    for (i = negativeAtom.length - 1; overallCharge < 0 && i >= negativeAtom.length - negativeAtomCount; i--) {
      atom = negativeAtom[i] & 65535;
      if (this.isElectronegative_0(atom)) {
        chargeReduction = $wnd.Math.min(-overallChargeChange, -this.mAtomCharge[atom]);
        overallCharge += chargeReduction;
        overallChargeChange += chargeReduction;
        this.mAtomCharge[atom] += chargeReduction;
        this.mValidHelperArrays &= 1;
      }
    }
  }
  return overallCharge;
}
;
_.convertStereoBondsToSingleBonds_0 = function convertStereoBondsToSingleBonds(atom){
  var connBond, i;
  for (i = 0; i < this.mAllConnAtoms[atom]; i++) {
    connBond = this.mConnBond[atom][i];
    if (this.isStereoBond_1(connBond, atom))
      this.mBondType[connBond] = 1;
  }
}
;
_.copyMoleculeByAtoms_0 = function copyMoleculeByAtoms(destMol, includeAtom, recognizeDelocalizedBonds, atomMap){
  var atom, atom1, atom2, atomCount, bnd;
  if (recognizeDelocalizedBonds)
    this.ensureHelperArrays_0(3);
  destMol.mAtomList = null;
  if (this.mIsFragment)
    destMol.setFragment_0(true);
  atomCount = includeAtom.length;
  if (jsEquals(atomMap, null))
    atomMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atomCount, 15, 1);
  destMol.mAllAtoms = 0;
  for (atom = 0; atom < atomCount; atom++)
    atomMap[atom] = includeAtom[atom]?this.copyAtom_0(destMol, atom, 0, 0):-1;
  destMol.mAllBonds = 0;
  for (bnd = 0; bnd < this.mAllBonds; bnd++) {
    atom1 = this.mBondAtom[0][bnd];
    atom2 = this.mBondAtom[1][bnd];
    if (atom1 < atomCount && atom2 < atomCount) {
      if (includeAtom[atom1] && includeAtom[atom2])
        this.copyBond_1(destMol, bnd, 0, 0, atomMap, recognizeDelocalizedBonds);
      else if (this.mAtomCharge[atom1] != 0 && this.mAtomCharge[atom2] != 0 && this.mAtomCharge[atom1] < 0 ^ this.mAtomCharge[atom2] < 0) {
        if (includeAtom[atom1])
          destMol.mAtomCharge[atomMap[atom1]] += this.mAtomCharge[atom1] < 0?1:-1;
        if (includeAtom[atom2])
          destMol.mAtomCharge[atomMap[atom2]] += this.mAtomCharge[atom2] < 0?1:-1;
      }
    }
  }
  this.copyMoleculeProperties_0(destMol);
  destMol.mValidHelperArrays = 0;
  destMol.renumberESRGroups_0(1);
  destMol.renumberESRGroups_0(2);
  if (destMol.mAllAtoms != atomCount)
    destMol.setFragment_0(true);
  if (recognizeDelocalizedBonds)
    (new carc.AromaticityResolver(destMol)).locateDelocalizedDoubleBonds(null);
}
;
_.copyMoleculeByBonds_0 = function copyMoleculeByBonds(destMol, includeBond, recognizeDelocalizedBonds, atomMap){
  var atom, atom1, atom2, bnd, i;
  if (recognizeDelocalizedBonds)
    this.ensureHelperArrays_0(3);
  destMol.mAtomList = null;
  if (this.mIsFragment)
    destMol.setFragment_0(true);
  if (jsEquals(atomMap, null))
    atomMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  destMol.mAllAtoms = 0;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    atomMap[atom] = -1;
    for (i = 0; i < this.mConnAtoms[atom]; i++) {
      if (includeBond[this.mConnBond[atom][i]]) {
        atomMap[atom] = this.copyAtom_0(destMol, atom, 0, 0);
        break;
      }
    }
  }
  destMol.mAllBonds = 0;
  for (bnd = 0; bnd < this.mAllBonds; bnd++)
    if (includeBond[bnd]) {
      this.copyBond_1(destMol, bnd, 0, 0, atomMap, recognizeDelocalizedBonds);
    }
     else {
      atom1 = this.mBondAtom[0][bnd];
      atom2 = this.mBondAtom[1][bnd];
      if (atomMap[atom1] == -1 ^ atomMap[atom2] == -1) {
        if (this.mAtomCharge[atom1] != 0 && this.mAtomCharge[atom2] != 0 && this.mAtomCharge[atom1] < 0 ^ this.mAtomCharge[atom2] < 0) {
          if (atomMap[atom1] != -1)
            destMol.mAtomCharge[atomMap[atom1]] += this.mAtomCharge[atom1] < 0?1:-1;
          if (atomMap[atom2] != -1)
            destMol.mAtomCharge[atomMap[atom2]] += this.mAtomCharge[atom2] < 0?1:-1;
        }
      }
    }
  this.copyMoleculeProperties_0(destMol);
  destMol.mValidHelperArrays = 0;
  destMol.renumberESRGroups_0(1);
  destMol.renumberESRGroups_0(2);
  if (destMol.mAllAtoms != this.mAllAtoms)
    destMol.setFragment_0(true);
  if (recognizeDelocalizedBonds)
    (new carc.AromaticityResolver(destMol)).locateDelocalizedDoubleBonds(null);
  return atomMap;
}
;
_.ensureHelperArrays_0 = function ensureHelperArrays(required){
  var atom, atom0, atom1, bond, bond0, candidate, connAtom, connBond, found, i, j;
  if ((required & ~this.mValidHelperArrays) == 0)
    return;
  if ((this.mValidHelperArrays & 1) == 0) {
    this.handleHydrogens();
    this.calculateNeighbours();
    this.mValidHelperArrays |= 1;
    if (this.validateQueryFeatures()) {
      this.handleHydrogens();
      this.calculateNeighbours();
    }
  }
  if ((required & ~this.mValidHelperArrays) == 0)
    return;
  if ((this.mValidHelperArrays & 2) == 0) {
    for (atom0 = 0; atom0 < this.mAtoms; atom0++)
      this.mAtomFlags[atom0] &= ~31752;
    for (bond0 = 0; bond0 < this.mBonds; bond0++)
      this.mBondFlags[bond0] &= ~960;
    this.findRings();
    for (bond = 0; bond < this.mBonds; bond++) {
      if (this.mBondType[bond] == 64) {
        this.mAtomFlags[this.mBondAtom[0][bond]] |= 4096;
        this.mAtomFlags[this.mBondAtom[1][bond]] |= 4096;
        this.mBondFlags[bond] |= 256;
        this.mBondFlags[bond] |= 512;
      }
    }
    for (atom1 = 0; atom1 < this.mAtoms; atom1++) {
      for (i = 0; i < this.mConnAtoms[atom1]; i++) {
        connBond = this.mConnBond[atom1][i];
        if (this.isAromaticBond_0(connBond))
          continue;
        connAtom = this.mConnAtom[atom1][i];
        for (j = 0; j < this.mConnAtoms[connAtom]; j++) {
          if (this.mConnBond[connAtom][j] == connBond)
            continue;
          if (this.mConnBondOrder[connAtom][j] > 1) {
            if (this.mAtomicNo[this.mConnAtom[connAtom][j]] == 6)
              this.mAtomFlags[atom1] |= 8192;
            else {
              if (!this.isAromaticBond_0(this.mConnBond[connAtom][j]) && this.isElectronegative_0(this.mConnAtom[connAtom][j]))
                this.mAtomFlags[atom1] |= 16384;
            }
          }
        }
      }
    }
    while (true) {
      found = false;
      for (atom = 0; atom < this.mAtoms; atom++) {
        if (this.mPi[atom] > 0 && ((16384 | 4096) & this.mAtomFlags[atom]) == 16384) {
          for (i = 0; i < this.mConnAtoms[atom]; i++) {
            if (this.mConnBondOrder[atom][i] > 1) {
              connAtom = this.mConnAtom[atom][i];
              connBond = this.mConnBond[atom][i];
              for (j = 0; j < this.mConnAtoms[connAtom]; j++) {
                if (this.mConnBond[connAtom][j] != connBond) {
                  candidate = this.mConnAtom[connAtom][j];
                  if ((this.mAtomFlags[candidate] & 16384) == 0) {
                    this.mAtomFlags[candidate] |= 16384;
                    found = true;
                  }
                }
              }
            }
          }
        }
      }
      if (!found)
        break;
    }
    this.mValidHelperArrays |= 2;
  }
}
;
_.findAlleneCenterAtom_0 = function findAlleneCenterAtom(atom){
  var center, connAtom, endAtom, i, j;
  center = -1;
  if (this.mPi[atom] == 1) {
    for (i = 0; i < this.mConnAtoms[atom]; i++) {
      if (this.mConnBondOrder[atom][i] == 2) {
        connAtom = this.mConnAtom[atom][i];
        if (this.mConnAtoms[connAtom] == 2 && this.mPi[connAtom] == 2) {
          for (j = 0; j < 2; j++) {
            endAtom = this.mConnAtom[connAtom][j];
            if (endAtom != atom && this.mPi[endAtom] == 1) {
              center = connAtom;
              break;
            }
          }
        }
        break;
      }
    }
  }
  return center;
}
;
_.findBINAPChiralityBond_0 = function findBINAPChiralityBond(atom){
  var i;
  if (this.mConnAtoms[atom] == 3 && this.isAromaticAtom_1(atom) && this.getAtomRingSize_0(atom) >= 6)
    for (i = 0; i < this.mConnAtoms[atom]; i++)
      if (this.isBINAPChiralityBond_0(this.mConnBond[atom][i]))
        return this.mConnBond[atom][i];
  return -1;
}
;
_.findRingSystem_0 = function findRingSystem(startAtom, aromaticOnly, isMemberAtom, isMemberBond){
  var candidateAtom, candidateBond, current, graphAtom, highest, i;
  this.ensureHelperArrays_0(3);
  if (!this.isRingAtom_0(startAtom) || aromaticOnly && !this.isAromaticAtom_1(startAtom))
    return;
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtoms, 15, 1);
  graphAtom[0] = startAtom;
  isMemberAtom[startAtom] = true;
  current = 0;
  highest = 0;
  while (current <= highest) {
    for (i = 0; i < this.mConnAtoms[graphAtom[current]]; i++) {
      candidateBond = this.mConnBond[graphAtom[current]][i];
      if (!isMemberBond[candidateBond] && this.isRingBond_0(candidateBond) && (!aromaticOnly || this.isAromaticBond_0(candidateBond))) {
        isMemberBond[candidateBond] = true;
        candidateAtom = this.mConnAtom[graphAtom[current]][i];
        if (!isMemberAtom[candidateAtom]) {
          isMemberAtom[candidateAtom] = true;
          graphAtom[++highest] = candidateAtom;
        }
      }
    }
    current++;
  }
}
;
_.findRings = function findRings(){
  var atom, atomRingBondCount, bond, i, ringAtom, ringAtoms, ringBond, ringNo;
  this.mRingSet = new carc.RingCollection(this, 7);
  atomRingBondCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtoms, 15, 1);
  for (bond = 0; bond < this.mBonds; bond++) {
    if (this.mRingSet.getBondRingSize_0(bond) != 0) {
      this.mBondFlags[bond] |= 64;
      atomRingBondCount[this.mBondAtom[0][bond]]++;
      atomRingBondCount[this.mBondAtom[1][bond]]++;
    }
  }
  for (atom = 0; atom < this.mAtoms; atom++) {
    if (atomRingBondCount[atom] == 2)
      this.mAtomFlags[atom] |= 1024;
    else if (atomRingBondCount[atom] == 3)
      this.mAtomFlags[atom] |= 2048;
    else if (atomRingBondCount[atom] > 3)
      this.mAtomFlags[atom] |= 3072;
  }
  for (ringNo = 0; ringNo < this.mRingSet.getSize_0(); ringNo++) {
    ringAtom = this.mRingSet.getRingAtoms_0(ringNo);
    ringBond = this.mRingSet.getRingBonds_0(ringNo);
    ringAtoms = ringAtom.length;
    for (i = 0; i < ringAtoms; i++) {
      this.mAtomFlags[ringAtom[i]] |= 8;
      this.mBondFlags[ringBond[i]] |= 128;
      if (this.mRingSet.isAromatic_0(ringNo)) {
        this.mAtomFlags[ringAtom[i]] |= 4096;
        this.mBondFlags[ringBond[i]] |= 256;
      }
      if (this.mRingSet.isDelocalized_0(ringNo))
        this.mBondFlags[ringBond[i]] |= 512;
      if (this.mBondType[ringBond[i]] == 26)
        this.mBondType[ringBond[i]] = 2;
    }
  }
}
;
_.findSimpleHydrogens = function findSimpleHydrogens(){
  var atom, atom0, atom1, atom2, bond, bond0, isSimpleHydrogen, oneBondFound;
  isSimpleHydrogen = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mAllAtoms, 16, 1);
  for (atom0 = 0; atom0 < this.mAllAtoms; atom0++)
    isSimpleHydrogen[atom0] = this.isSimpleHydrogen_0(atom0);
  oneBondFound = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mAllAtoms, 16, 1);
  for (bond0 = 0; bond0 < this.mAllBonds; bond0++) {
    atom1 = this.mBondAtom[0][bond0];
    atom2 = this.mBondAtom[1][bond0];
    if (this.getBondOrder_0(bond0) != 1) {
      isSimpleHydrogen[atom1] = false;
      isSimpleHydrogen[atom2] = false;
      continue;
    }
    if (oneBondFound[atom1])
      isSimpleHydrogen[atom1] = false;
    if (oneBondFound[atom2])
      isSimpleHydrogen[atom2] = false;
    if (isSimpleHydrogen[atom1] && this.isMetalAtom_0(atom2))
      isSimpleHydrogen[atom1] = false;
    if (isSimpleHydrogen[atom2] && this.isMetalAtom_0(atom1))
      isSimpleHydrogen[atom2] = false;
    oneBondFound[atom1] = true;
    oneBondFound[atom2] = true;
  }
  for (bond = 0; bond < this.mAllBonds; bond++) {
    if (isSimpleHydrogen[this.mBondAtom[0][bond]] && isSimpleHydrogen[this.mBondAtom[1][bond]]) {
      isSimpleHydrogen[this.mBondAtom[0][bond]] = false;
      isSimpleHydrogen[this.mBondAtom[1][bond]] = false;
    }
  }
  for (atom = 0; atom < this.mAllAtoms; atom++)
    if (!oneBondFound[atom])
      isSimpleHydrogen[atom] = false;
  return isSimpleHydrogen;
}
;
_.getAllConnAtoms_0 = function getAllConnAtoms(atom){
  return this.mAllConnAtoms[atom];
}
;
_.getAllConnAtomsPlusMetalBonds_0 = function getAllConnAtomsPlusMetalBonds(atom){
  return this.mConnAtom[atom].length;
}
;
_.getAllHydrogens_0 = function getAllHydrogens(atom){
  return this.getExplicitHydrogens_0(atom) + this.getImplicitHydrogens_0(atom);
}
;
_.getAromaticRingCount_0 = function getAromaticRingCount(){
  var count, i;
  this.ensureHelperArrays_0(3);
  count = 0;
  for (i = 0; i < this.mRingSet.getSize_0(); i++)
    if (this.mRingSet.isAromatic_0(i))
      count++;
  return count;
}
;
_.getAtomPi_0 = function getAtomPi(atom){
  return this.mPi[atom];
}
;
_.getAtomPreferredStereoBond_0 = function getAtomPreferredStereoBond(atom){
  this.ensureHelperArrays_0(3);
  if (this.mPi[atom] == 2 && this.mConnAtoms[atom] == 2)
    return this.preferredAlleneStereoBond(atom);
  else 
    return this.preferredTHStereoBond(atom);
}
;
_.getAtomRingBondCount_0 = function getAtomRingBondCount(atom){
  var flags;
  flags = this.mAtomFlags[atom] & 3072;
  return flags == 0?0:flags == 1024?2:flags == 2048?3:4;
}
;
_.getAtomRingCount_0 = function getAtomRingCount(atom, maxRingSize){
  var bond1, bond2, bondTouched, count, i, isIndependentRing, j, k, neglectBond, pathBond, pathLength, ringAtom;
  this.ensureHelperArrays_0(3);
  bondTouched = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mBonds, 16, 1);
  neglectBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mBonds, 16, 1);
  ringAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtoms, 15, 1);
  count = 0;
  for (i = 1; i < this.mConnAtoms[atom]; i++) {
    bond1 = this.mConnBond[atom][i];
    if (this.isRingBond_0(bond1)) {
      for (j = 0; j < i; j++) {
        bond2 = this.mConnBond[atom][j];
        if (this.isRingBond_0(bond2)) {
          neglectBond[bond1] = true;
          neglectBond[bond2] = true;
          pathLength = this.getPath_0(ringAtom, this.mConnAtom[atom][i], this.mConnAtom[atom][j], maxRingSize - 2, neglectBond);
          neglectBond[bond1] = false;
          neglectBond[bond2] = false;
          if (pathLength != -1) {
            isIndependentRing = false;
            pathBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, pathLength, 15, 1);
            this.getPathBonds_0(ringAtom, pathBond, pathLength);
            for (k = 0; k < pathLength; k++) {
              if (!bondTouched[pathBond[k]]) {
                bondTouched[pathBond[k]] = true;
                isIndependentRing = true;
              }
            }
            if (isIndependentRing)
              count++;
          }
        }
      }
    }
  }
  return count;
}
;
_.getAtomRingSize_0 = function getAtomRingSize(atom){
  return isNotNull(this.mRingSet) && atom < this.mAtoms?this.mRingSet.getAtomRingSize_0(atom):0;
}
;
_.getAtoms_0 = function getAtoms(){
  return this.mAtoms;
}
;
_.getAverageBondLength_3 = function getAverageBondLength_2(nonHydrogenBondsOnly){
  if (nonHydrogenBondsOnly) {
    this.ensureHelperArrays_0(1);
    return this.getAverageBondLength_1(this.mAtoms, this.mBonds);
  }
   else {
    return this.getAverageBondLength_1(this.mAllAtoms, this.mAllBonds);
  }
}
;
_.getAverageTopologicalAtomDistance_0 = function getAverageTopologicalAtomDistance(){
  var candidate, current, graphAtom, graphLevel, highest, i, meanDistance, startAtom;
  this.ensureHelperArrays_0(1);
  meanDistance = initUnidimensionalArray(cggl.F_classLit, {4:1, 1:1}, 5, this.mAtoms, 15, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtoms, 15, 1);
  for (startAtom = 0; startAtom < this.mAtoms; startAtom++) {
    graphAtom[0] = startAtom;
    graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtoms, 15, 1);
    graphLevel[startAtom] = 1;
    current = 0;
    highest = 0;
    while (current <= highest) {
      for (i = 0; i < this.mConnAtoms[graphAtom[current]]; i++) {
        candidate = this.mConnAtom[graphAtom[current]][i];
        if (graphLevel[candidate] == 0) {
          graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
          graphAtom[++highest] = candidate;
          meanDistance[startAtom] += graphLevel[candidate] - 1;
        }
      }
      current++;
    }
    meanDistance[startAtom] /= highest;
  }
  return meanDistance;
}
;
_.getBond_0 = function getBond(atom1, atom2){
  var i;
  for (i = 0; i < this.getAllConnAtomsPlusMetalBonds_0(atom1); i++)
    if (this.mConnAtom[atom1][i] == atom2)
      return this.mConnBond[atom1][i];
  return -1;
}
;
_.getBondPreferredStereoBond_0 = function getBondPreferredStereoBond(bond){
  return this.preferredBinapStereoBond(bond);
}
;
_.getBondRingSize_0 = function getBondRingSize(bond){
  return isNotNull(this.mRingSet) && bond < this.mBonds?this.mRingSet.getBondRingSize_0(bond):0;
}
;
_.getBonds_0 = function getBonds(){
  return this.mBonds;
}
;
_.getChiralText_0 = function getChiralText(){
  return null;
}
;
_.getConnAtom_0 = function getConnAtom(atom, i){
  return this.mConnAtom[atom][i];
}
;
_.getConnAtoms_0 = function getConnAtoms(atom){
  return this.mConnAtoms[atom];
}
;
_.getConnBond_0 = function getConnBond(atom, i){
  return this.mConnBond[atom][i];
}
;
_.getConnBondOrder_0 = function getConnBondOrder(atom, i){
  return this.mConnBondOrder[atom][i];
}
;
_.getExcludeGroupValence_0 = function getExcludeGroupValence(atom){
  var i, valence;
  this.ensureHelperArrays_0(1);
  valence = 0;
  for (i = 0; i < this.mAllConnAtoms[atom]; i++)
    if (this.mIsFragment && (this.mAtomQueryFeatures[this.mConnAtom[atom][i]] & 536870912) != 0)
      valence += this.mConnBondOrder[atom][i];
  return valence;
}
;
_.getExplicitHydrogens_0 = function getExplicitHydrogens(atom){
  return this.mAllConnAtoms[atom] - this.mConnAtoms[atom];
}
;
_.getFisherProjectionBondDirections = function getFisherProjectionBondDirections(atom, sortedConnMap, angle, direction){
  var a, allConnAtoms, i, isUsed;
  allConnAtoms = this.mAllConnAtoms[atom];
  if (this.mPi[atom] != 0 || this.isAromaticAtom_1(atom) || this.mConnAtoms[atom] < 3 || allConnAtoms > 4)
    return false;
  isUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 4, 16, 1);
  for (i = 0; i < allConnAtoms; i++) {
    a = 3.141592653589793 * 5 / 4 - angle[i];
    if ($wnd.Math.abs(3.141592653589793 / 4 - a % (3.141592653589793 / 2)) > 0.0872664675116539)
      return false;
    direction[i] = 3 & round_int(a / (3.141592653589793 / 2));
    if (isUsed[direction[i]])
      return false;
    isUsed[direction[i]] = true;
    if ((direction[i] & 1) == 0) {
      if (this.mBondType[this.mConnBond[atom][sortedConnMap[i]]] != 1)
        return false;
    }
     else {
      if (!this.isStereoBond_1(this.mConnBond[atom][sortedConnMap[i]], atom))
        return false;
    }
  }
  return isUsed[0] && isUsed[2];
}
;
_.getFisherProjectionParity_0 = function getFisherProjectionParity(atom, sortedConnMap, angle, direction){
  var allConnAtoms, bondType, dif, horizontalBondType, i, index_0, is4thConnHorizontal, isClockwise;
  allConnAtoms = this.mAllConnAtoms[atom];
  if (jsEquals(direction, null))
    direction = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, allConnAtoms, 15, 1);
  if (!this.getFisherProjectionBondDirections(atom, sortedConnMap, angle, direction))
    return 3;
  horizontalBondType = -1;
  for (i = 0; i < allConnAtoms; i++) {
    if ((direction[i] & 1) == 1) {
      bondType = this.mBondType[this.mConnBond[atom][sortedConnMap[i]]];
      if (horizontalBondType != -1 && horizontalBondType != bondType)
        return 3;
      horizontalBondType = bondType;
    }
  }
  index_0 = $wnd.Math.abs(direction[0] - direction[1]) == 2?1:0;
  dif = direction[index_0] - direction[index_0 + 1];
  isClockwise = $wnd.Math.abs(dif) == 3 ^ direction[index_0] < direction[index_0 + 1];
  is4thConnHorizontal = allConnAtoms == 3 || (direction[3] & 1) == 1;
  return isClockwise ^ is4thConnHorizontal ^ horizontalBondType == 9?1:2;
}
;
_.getFragmentAtoms_0 = function getFragmentAtoms(rootAtom, considerMetalBonds){
  var atom, candidate, connAtoms, current, fragmentMember, fragmentMembers, graphAtom, highest, i, isFragmentMember;
  this.ensureHelperArrays_0(1);
  isFragmentMember = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mAllAtoms, 16, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  graphAtom[0] = rootAtom;
  isFragmentMember[rootAtom] = true;
  current = 0;
  highest = 0;
  fragmentMembers = 1;
  while (current <= highest) {
    connAtoms = considerMetalBonds?this.getAllConnAtomsPlusMetalBonds_0(graphAtom[current]):this.mAllConnAtoms[graphAtom[current]];
    for (i = 0; i < connAtoms; i++) {
      candidate = this.mConnAtom[graphAtom[current]][i];
      if (!isFragmentMember[candidate]) {
        graphAtom[++highest] = candidate;
        isFragmentMember[candidate] = true;
        fragmentMembers++;
      }
    }
    current++;
  }
  fragmentMember = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragmentMembers, 15, 1);
  fragmentMembers = 0;
  for (atom = 0; atom < this.mAllAtoms; atom++)
    if (isFragmentMember[atom])
      fragmentMember[fragmentMembers++] = atom;
  return fragmentMember;
}
;
_.getFragmentNumbers_0 = function getFragmentNumbers(fragmentNo, markedAtomsOnly, considerMetalBonds){
  var atom, atom0, candidate, connAtoms, current, fragments, graphAtom, highest, i;
  this.ensureHelperArrays_0(1);
  for (atom0 = 0; atom0 < this.mAllAtoms; atom0++)
    fragmentNo[atom0] = -1;
  fragments = 0;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    if (fragmentNo[atom] == -1 && (!markedAtomsOnly || this.isMarkedAtom_0(atom))) {
      fragmentNo[atom] = fragments;
      graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
      graphAtom[0] = atom;
      current = 0;
      highest = 0;
      while (current <= highest) {
        connAtoms = considerMetalBonds?this.getAllConnAtomsPlusMetalBonds_0(graphAtom[current]):this.mAllConnAtoms[graphAtom[current]];
        for (i = 0; i < connAtoms; i++) {
          candidate = this.mConnAtom[graphAtom[current]][i];
          if (fragmentNo[candidate] == -1 && (!markedAtomsOnly || this.isMarkedAtom_0(candidate))) {
            graphAtom[++highest] = candidate;
            fragmentNo[candidate] = fragments;
          }
        }
        current++;
      }
      fragments++;
    }
  }
  return fragments;
}
;
_.getFreeValence_0 = function getFreeValence(atom){
  return this.getMaxValence_0(atom) - this.getOccupiedValence_0(atom);
}
;
_.getHandleHydrogenMap_0 = function getHandleHydrogenMap(){
  var atom, i, isSimpleHydrogen, lastNonHAtom, map_0, temp, tempIndex;
  map_0 = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  for (i = 0; i < this.mAllAtoms; i++)
    map_0[i] = i;
  isSimpleHydrogen = this.findSimpleHydrogens();
  lastNonHAtom = this.mAllAtoms;
  do 
    lastNonHAtom--;
  while (lastNonHAtom >= 0 && isSimpleHydrogen[lastNonHAtom]);
  for (atom = 0; atom < lastNonHAtom; atom++) {
    if (isSimpleHydrogen[atom]) {
      tempIndex = map_0[atom];
      map_0[atom] = map_0[lastNonHAtom];
      map_0[lastNonHAtom] = tempIndex;
      temp = isSimpleHydrogen[atom];
      isSimpleHydrogen[atom] = isSimpleHydrogen[lastNonHAtom];
      isSimpleHydrogen[lastNonHAtom] = temp;
      do 
        lastNonHAtom--;
      while (isSimpleHydrogen[lastNonHAtom]);
    }
  }
  return map_0;
}
;
_.getHelperArrayStatus_0 = function getHelperArrayStatus(){
  return this.mValidHelperArrays;
}
;
_.getImplicitHigherValence_0 = function getImplicitHigherValence(atom, neglectExplicitHydrogen){
  var i, occupiedValence, valence, valenceList;
  occupiedValence = this.getOccupiedValence_0(atom);
  occupiedValence -= this.getElectronValenceCorrection_0(atom, occupiedValence);
  if (neglectExplicitHydrogen)
    occupiedValence -= this.mAllConnAtoms[atom] - this.mConnAtoms[atom];
  valenceList = this.mAtomicNo[atom] < (carc.$clinit_Molecule() , carc.cAtomValence).length?(carc.$clinit_Molecule() , carc.cAtomValence)[this.mAtomicNo[atom]]:null;
  valence = jsEquals(valenceList, null)?6:valenceList[0];
  if (occupiedValence <= valence)
    return -1;
  if (jsNotEquals(valenceList, null))
    for (i = 1; valence < occupiedValence && i < valenceList.length; i++)
      valence = valenceList[i];
  return $wnd.Math.max(valence, occupiedValence);
}
;
_.getImplicitHydrogens_0 = function getImplicitHydrogens(atom){
  var delocalizedBonds, i, i0, maxValence, occupiedValence, valenceList;
  if (this.mIsFragment && (this.mAtomQueryFeatures[atom] & 2048) == 0)
    return 0;
  if (!this.supportsImplicitHydrogen_0(atom))
    return 0;
  this.ensureHelperArrays_0(1);
  occupiedValence = 0;
  for (i0 = 0; i0 < this.mAllConnAtoms[atom]; i0++)
    occupiedValence += this.mConnBondOrder[atom][i0];
  if (this.mIsFragment) {
    delocalizedBonds = 1;
    for (i = 0; i < this.mConnAtoms[atom]; i++)
      if (this.mBondType[this.mConnBond[atom][i]] == 64)
        delocalizedBonds++;
    occupiedValence += delocalizedBonds >> 1;
  }
  occupiedValence -= this.getElectronValenceCorrection_0(atom, occupiedValence);
  maxValence = this.getAtomAbnormalValence_0(atom);
  if (maxValence == -1) {
    if (this.mAtomicNo[atom] >= 171 && this.mAtomicNo[atom] <= 190) {
      maxValence = 2;
    }
     else {
      valenceList = this.mAtomicNo[atom] < (carc.$clinit_Molecule() , carc.cAtomValence).length?(carc.$clinit_Molecule() , carc.cAtomValence)[this.mAtomicNo[atom]]:null;
      if (jsEquals(valenceList, null)) {
        maxValence = 6;
      }
       else {
        maxValence = valenceList[0];
        for (i = 1; maxValence < occupiedValence && i < valenceList.length; i++)
          maxValence = valenceList[i];
      }
    }
  }
  return $wnd.Math.max(0, maxValence - occupiedValence);
}
;
_.getLowestFreeValence_0 = function getLowestFreeValence(atom){
  var i, occupiedValence, valence, valenceList;
  occupiedValence = this.getOccupiedValence_0(atom);
  occupiedValence += this.getElectronValenceCorrection_0(atom, occupiedValence);
  valence = this.getAtomAbnormalValence_0(atom);
  if (valence == -1) {
    valenceList = this.mAtomicNo[atom] < (carc.$clinit_Molecule() , carc.cAtomValence).length?(carc.$clinit_Molecule() , carc.cAtomValence)[this.mAtomicNo[atom]]:null;
    if (jsEquals(valenceList, null)) {
      valence = 6;
    }
     else {
      i = 0;
      while (occupiedValence > valenceList[i] && i < valenceList.length - 1)
        i++;
      valence = valenceList[i];
    }
  }
  return valence - occupiedValence;
}
;
_.getMetalBondedConnAtoms_0 = function getMetalBondedConnAtoms(atom){
  return this.mConnAtom[atom].length - this.mAllConnAtoms[atom];
}
;
_.getMolweight_0 = function getMolweight(){
  var atom, connAtoms, mass, molweight;
  this.ensureHelperArrays_0(1);
  molweight = 0;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    mass = this.mAtomMass[atom] != 0?this.mAtomMass[atom]:(carc.$clinit_Molecule() , carc.cRoundedMass)[this.mAtomicNo[atom]];
    molweight += mass + this.getImplicitHydrogens_0(atom) * (carc.$clinit_Molecule() , carc.cRoundedMass)[1];
    if (this.mAtomicNo[atom] >= 171 && this.mAtomicNo[atom] <= 190) {
      connAtoms = this.mAllConnAtoms[atom];
      if (connAtoms > 2)
        molweight -= (connAtoms - 2) * (carc.$clinit_Molecule() , carc.cRoundedMass)[1];
    }
  }
  return molweight;
}
;
_.getNonHydrogenNeighbourCount_0 = function getNonHydrogenNeighbourCount(atom){
  var count, i;
  count = this.mConnAtoms[atom];
  for (i = 0; i < this.mConnAtoms[atom]; i++)
    if (this.mAtomicNo[this.mConnAtom[atom][i]] == 1)
      count--;
  return count;
}
;
_.getOccupiedValence_0 = function getOccupiedValence_0(atom){
  var i, valence;
  this.ensureHelperArrays_0(1);
  valence = 0;
  for (i = 0; i < this.mAllConnAtoms[atom]; i++)
    valence += this.mConnBondOrder[atom][i];
  return valence;
}
;
_.getPath_0 = function getPath(pathAtom, atom1, atom2, maxLength, neglectBond){
  var candidate, current, graphAtom, graphLevel, highest, i, index_0, parent_0, parentAtom;
  if (atom1 == atom2) {
    pathAtom[0] = atom1;
    return 0;
  }
  this.ensureHelperArrays_0(1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  parentAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  graphAtom[0] = atom1;
  graphLevel[atom1] = 1;
  current = 0;
  highest = 0;
  while (current <= highest && graphLevel[graphAtom[current]] <= maxLength) {
    parent_0 = graphAtom[current];
    for (i = 0; i < this.mAllConnAtoms[parent_0]; i++) {
      if (jsEquals(neglectBond, null) || neglectBond.length <= this.mConnBond[parent_0][i] || !neglectBond[this.mConnBond[parent_0][i]]) {
        candidate = this.mConnAtom[parent_0][i];
        if (candidate == atom2) {
          index_0 = graphLevel[parent_0];
          pathAtom[index_0] = candidate;
          pathAtom[--index_0] = parent_0;
          while (index_0 > 0) {
            pathAtom[index_0 - 1] = parentAtom[pathAtom[index_0]];
            index_0--;
          }
          return graphLevel[parent_0];
        }
        if (graphLevel[candidate] == 0) {
          graphAtom[++highest] = candidate;
          graphLevel[candidate] = graphLevel[parent_0] + 1;
          parentAtom[candidate] = parent_0;
        }
      }
    }
    current++;
  }
  return -1;
}
;
_.getPathBonds_0 = function getPathBonds(pathAtom, pathBond, pathLength){
  var i, j;
  this.ensureHelperArrays_0(1);
  for (i = 0; i < pathLength; i++) {
    for (j = 0; j < this.mAllConnAtoms[pathAtom[i]]; j++) {
      if (this.mConnAtom[pathAtom[i]][j] == pathAtom[i + 1]) {
        pathBond[i] = this.mConnBond[pathAtom[i]][j];
        break;
      }
    }
  }
}
;
_.getPathLength_0 = function getPathLength(atom1, atom2){
  var candidate, current, graphAtom, graphLevel, highest, i;
  if (atom1 == atom2)
    return 0;
  this.ensureHelperArrays_0(1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  graphAtom[0] = atom1;
  graphLevel[atom1] = 1;
  current = 0;
  highest = 0;
  while (current <= highest) {
    for (i = 0; i < this.mAllConnAtoms[graphAtom[current]]; i++) {
      candidate = this.mConnAtom[graphAtom[current]][i];
      if (candidate == atom2)
        return graphLevel[graphAtom[current]];
      if (graphLevel[candidate] == 0) {
        graphAtom[++highest] = candidate;
        graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
      }
    }
    current++;
  }
  return -1;
}
;
_.getPathLength_1 = function getPathLength_0(atom1, atom2, maxLength, neglectAtom){
  var candidate, current, graphAtom, graphLevel, highest, i;
  if (atom1 == atom2)
    return 0;
  this.ensureHelperArrays_0(1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  graphAtom[0] = atom1;
  graphLevel[atom1] = 1;
  current = 0;
  highest = 0;
  while (current <= highest && graphLevel[graphAtom[current]] <= maxLength) {
    for (i = 0; i < this.mAllConnAtoms[graphAtom[current]]; i++) {
      candidate = this.mConnAtom[graphAtom[current]][i];
      if (candidate == atom2)
        return graphLevel[graphAtom[current]];
      if (graphLevel[candidate] == 0 && (jsEquals(neglectAtom, null) || neglectAtom.length <= candidate || !neglectAtom[candidate])) {
        graphAtom[++highest] = candidate;
        graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
      }
    }
    current++;
  }
  return -1;
}
;
_.getRingSet_0 = function getRingSet(){
  this.ensureHelperArrays_0(3);
  return this.mRingSet;
}
;
_.getRotatableBondCount_0 = function getRotatableBondCount(){
  var atom1, atom2, bond, connAtom, connBond, i, isRotatable, j, rCount;
  rCount = 0;
  this.ensureHelperArrays_0(3);
  for (bond = 0; bond < this.mBonds; bond++) {
    if (this.getBondOrder_0(bond) == 1 && !this.isRingBond_0(bond)) {
      isRotatable = true;
      for (i = 0; i < 2; i++) {
        atom1 = this.mBondAtom[i][bond];
        if (this.mConnAtoms[atom1] == 1) {
          isRotatable = false;
          break;
        }
        if (this.mAtomicNo[atom1] == 7 && !this.isAromaticAtom_1(atom1)) {
          atom2 = this.mBondAtom[1 - i][bond];
          for (j = 0; j < this.mConnAtoms[atom2]; j++) {
            connAtom = this.mConnAtom[atom2][j];
            connBond = this.mConnBond[atom2][j];
            if (connBond != bond && this.getBondOrder_0(connBond) > 1 && !this.isAromaticAtom_1(connAtom) && this.isElectronegative_0(connAtom)) {
              isRotatable = false;
              break;
            }
          }
        }
      }
      if (isRotatable && !this.isPseudoRotatableBond_0(bond))
        rCount++;
    }
  }
  return rCount;
}
;
_.getSortedConnMap = function getSortedConnMap(atom){
  var connAtoms, i, i0, indexMap;
  connAtoms = this.mAllConnAtoms[atom];
  indexMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, connAtoms, 15, 1);
  for (i0 = 0; i0 < connAtoms; i0++)
    indexMap[i0] = (this.mConnAtom[atom][i0] << 16) + i0;
  ju.sort_3(indexMap);
  for (i = 0; i < connAtoms; i++)
    indexMap[i] &= 65535;
  return indexMap;
}
;
_.getStereoBond_0 = function getStereoBond(atom){
  var i, j;
  this.ensureHelperArrays_0(1);
  if (this.mConnAtoms[atom] == 2 && this.mConnBondOrder[atom][0] == 2 && this.mConnBondOrder[atom][1] == 2) {
    for (i = 0; i < 2; i++)
      for (j = 0; j < this.mAllConnAtoms[this.mConnAtom[atom][i]]; j++)
        if (this.isStereoBond_1(this.mConnBond[this.mConnAtom[atom][i]][j], this.mConnAtom[atom][i]))
          return this.mConnBond[this.mConnAtom[atom][i]][j];
  }
   else {
    for (i = 0; i < this.mAllConnAtoms[atom]; i++)
      if (this.isStereoBond_1(this.mConnBond[atom][i], atom))
        return this.mConnBond[atom][i];
  }
  return -1;
}
;
_.getStereoBondScore = function getStereoBondScore(bond, atom){
  if (this.getBondOrder_0(bond) != 1)
    return 0;
  return 16 - this.mAllConnAtoms[atom] + (this.mAtomicNo[atom] == 1?4096:0) + ((this.mBondType[bond] & 24) == 0 || this.mBondAtom[0][bond] != atom?2048:0) + (this.getAtomParity_0(atom) == 0?1024:0) + (!this.isRingBond_0(bond)?512:0) + (this.mAtomicNo[atom] != 6?256:0);
}
;
_.getSubstituent_0 = function getSubstituent(coreAtom, firstAtom, isMemberAtom, substituent, atomMap){
  var candidate, connAtoms, current, graphAtom, highest, i;
  this.ensureHelperArrays_0(1);
  if (isNotNull(substituent)) {
    substituent.deleteMolecule_0();
    substituent.mIsFragment = false;
  }
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  if (jsEquals(isMemberAtom, null))
    isMemberAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mAllAtoms, 16, 1);
  else 
    ju.fill_2(isMemberAtom, false);
  graphAtom[0] = coreAtom;
  graphAtom[1] = firstAtom;
  isMemberAtom[coreAtom] = true;
  isMemberAtom[firstAtom] = true;
  current = 1;
  highest = 1;
  while (current <= highest) {
    connAtoms = this.getAllConnAtomsPlusMetalBonds_0(graphAtom[current]);
    for (i = 0; i < connAtoms; i++) {
      candidate = this.mConnAtom[graphAtom[current]][i];
      if (candidate == coreAtom) {
        if (current != 1)
          return -1;
      }
      if (!isMemberAtom[candidate]) {
        isMemberAtom[candidate] = true;
        graphAtom[++highest] = candidate;
      }
    }
    current++;
  }
  if (isNotNull(substituent)) {
    if (jsEquals(atomMap, null))
      atomMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, isMemberAtom.length, 15, 1);
    this.copyMoleculeByAtoms_0(substituent, isMemberAtom, false, atomMap);
    substituent.changeAtom_0(atomMap[coreAtom], 0, 0, -1, 0);
  }
  isMemberAtom[coreAtom] = false;
  return highest;
}
;
_.getSubstituentSize_0 = function getSubstituentSize(coreAtom, firstAtom){
  var candidate, current, graphAtom, highest, i, isMember;
  this.ensureHelperArrays_0(1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAtoms, 15, 1);
  isMember = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mAtoms, 16, 1);
  graphAtom[0] = coreAtom;
  graphAtom[1] = firstAtom;
  isMember[coreAtom] = true;
  isMember[firstAtom] = true;
  current = 1;
  highest = 1;
  while (current <= highest) {
    for (i = 0; i < this.mConnAtoms[graphAtom[current]]; i++) {
      candidate = this.mConnAtom[graphAtom[current]][i];
      if (candidate == coreAtom) {
        if (current != 1)
          return -1;
      }
      if (!isMember[candidate]) {
        isMember[candidate] = true;
        graphAtom[++highest] = candidate;
      }
    }
    current++;
  }
  return highest;
}
;
_.getZNeighbour_0 = function getZNeighbour(connAtom, bond){
  var atom1, atom2, conn, found, highConn, i, j, j0, lowConn, other1, parity;
  if (this.getBondOrder_0(bond) != 2 && !this.isAromaticBond_0(bond))
    return -1;
  parity = this.getBondParity_0(bond);
  if (parity != 1 && parity != 2)
    return -1;
  for (i = 0; i < 2; i++) {
    atom1 = this.mBondAtom[i][bond];
    atom2 = this.mBondAtom[1 - i][bond];
    other1 = -1;
    found = false;
    for (j0 = 0; j0 < this.mConnAtoms[atom1]; j0++) {
      conn = this.mConnAtom[atom1][j0];
      if (conn != atom2) {
        if (conn == connAtom)
          found = true;
        else 
          other1 = conn;
      }
    }
    if (found) {
      lowConn = -1;
      highConn = -1;
      for (j = 0; j < this.mConnAtoms[atom2]; j++) {
        conn = this.mConnAtom[atom2][j];
        if (conn != atom1) {
          if (lowConn == -1)
            lowConn = conn;
          else if (conn > lowConn)
            highConn = conn;
          else {
            highConn = lowConn;
            lowConn = conn;
          }
        }
      }
      if (this.mConnAtoms[atom1] == 2) {
        if (this.mConnAtoms[atom2] == 2)
          return parity == 2?lowConn:-1;
        return parity == 2?lowConn:highConn;
      }
       else {
        if (this.mConnAtoms[atom2] == 2)
          return parity == 2 ^ connAtom < other1?-1:lowConn;
        return parity == 2 ^ connAtom < other1?highConn:lowConn;
      }
    }
  }
  return -1;
}
;
_.handleHydrogens = function handleHydrogens(){
  var atom, atom1, atom2, bond, bond0, isHydrogenBond, isSimpleHydrogen, lastNonHAtom, lastNonHBond, temp, tempInt;
  isSimpleHydrogen = this.findSimpleHydrogens();
  lastNonHAtom = this.mAllAtoms;
  do 
    lastNonHAtom--;
  while (lastNonHAtom >= 0 && isSimpleHydrogen[lastNonHAtom]);
  for (atom = 0; atom < lastNonHAtom; atom++) {
    if (isSimpleHydrogen[atom]) {
      this.swapAtoms(atom, lastNonHAtom);
      temp = isSimpleHydrogen[atom];
      isSimpleHydrogen[atom] = isSimpleHydrogen[lastNonHAtom];
      isSimpleHydrogen[lastNonHAtom] = temp;
      do 
        lastNonHAtom--;
      while (isSimpleHydrogen[lastNonHAtom]);
    }
  }
  this.mAtoms = lastNonHAtom + 1;
  if (this.mAllAtoms == this.mAtoms) {
    this.mBonds = this.mAllBonds;
    return;
  }
  isHydrogenBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mAllBonds, 16, 1);
  for (bond0 = 0; bond0 < this.mAllBonds; bond0++) {
    atom1 = this.mBondAtom[0][bond0];
    atom2 = this.mBondAtom[1][bond0];
    if (isSimpleHydrogen[atom1] || isSimpleHydrogen[atom2])
      isHydrogenBond[bond0] = true;
  }
  lastNonHBond = this.mAllBonds;
  do 
    lastNonHBond--;
  while (lastNonHBond >= 0 && isHydrogenBond[lastNonHBond]);
  for (bond = 0; bond < lastNonHBond; bond++) {
    if (isHydrogenBond[bond]) {
      tempInt = this.mBondAtom[0][bond];
      this.mBondAtom[0][bond] = this.mBondAtom[0][lastNonHBond];
      this.mBondAtom[0][lastNonHBond] = tempInt;
      tempInt = this.mBondAtom[1][bond];
      this.mBondAtom[1][bond] = this.mBondAtom[1][lastNonHBond];
      this.mBondAtom[1][lastNonHBond] = tempInt;
      tempInt = this.mBondType[bond];
      this.mBondType[bond] = this.mBondType[lastNonHBond];
      this.mBondType[lastNonHBond] = tempInt;
      isHydrogenBond[bond] = false;
      do 
        lastNonHBond--;
      while (isHydrogenBond[lastNonHBond]);
    }
  }
  this.mBonds = lastNonHBond + 1;
}
;
_.hasNegativeNeighbour = function hasNegativeNeighbour(atom){
  var i;
  for (i = 0; i < this.mConnAtoms[atom]; i++)
    if (this.mAtomCharge[this.mConnAtom[atom][i]] < 0)
      return true;
  return false;
}
;
_.hasPositiveNeighbour = function hasPositiveNeighbour(atom){
  var i;
  for (i = 0; i < this.mConnAtoms[atom]; i++)
    if (this.mAtomCharge[this.mConnAtom[atom][i]] > 0)
      return true;
  return false;
}
;
_.isAlkaliMetal_0 = function isAlkaliMetal(atom){
  var atomicNo;
  atomicNo = this.mAtomicNo[atom];
  return atomicNo == 3 || atomicNo == 11 || atomicNo == 19 || atomicNo == 37 || atomicNo == 55;
}
;
_.isAllylicAtom_0 = function isAllylicAtom(atom){
  return (this.mAtomFlags[atom] & 8192) != 0;
}
;
_.isAmideTypeBond_0 = function isAmideTypeBond(bond){
  var atom1, atom2, connAtom, connBond, i, j;
  this.ensureHelperArrays_0(1);
  for (i = 0; i < 2; i++) {
    atom1 = this.mBondAtom[i][bond];
    if (this.mAtomicNo[atom1] == 7) {
      atom2 = this.mBondAtom[1 - i][bond];
      for (j = 0; j < this.mConnAtoms[atom2]; j++) {
        connAtom = this.mConnAtom[atom2][j];
        connBond = this.mConnBond[atom2][j];
        if ((this.mAtomicNo[connAtom] == 7 || this.mAtomicNo[connAtom] == 8 || this.mAtomicNo[connAtom] == 16) && this.getBondOrder_0(connBond) >= 2)
          return true;
      }
    }
  }
  return false;
}
;
_.isAromaticAtom_1 = function isAromaticAtom_1(atom){
  return (this.mAtomFlags[atom] & 4096) != 0;
}
;
_.isAromaticBond_0 = function isAromaticBond_0(bnd){
  return (this.mBondFlags[bnd] & 256) != 0;
}
;
_.isBINAPChiralityBond_0 = function isBINAPChiralityBond(bond){
  var atom1, atom2, connAtom, j, j0, orthoSubstituentCount;
  if (this.mBondType[bond] != 1 || this.isAromaticBond_0(bond) || this.isRingBond_0(bond) && this.getBondRingSize_0(bond) < 7)
    return false;
  atom1 = this.mBondAtom[0][bond];
  if (!this.isAromaticAtom_1(atom1) || this.getAtomRingSize_0(atom1) < 6)
    return false;
  atom2 = this.mBondAtom[1][bond];
  if (!this.isAromaticAtom_1(atom2) || this.getAtomRingSize_0(atom2) < 6)
    return false;
  orthoSubstituentCount = 0;
  for (j0 = 0; j0 < this.mConnAtoms[atom1]; j0++) {
    connAtom = this.mConnAtom[atom1][j0];
    if (connAtom != atom2 && this.mConnAtoms[connAtom] > 2)
      orthoSubstituentCount++;
  }
  for (j = 0; j < this.mConnAtoms[atom2]; j++) {
    connAtom = this.mConnAtom[atom2][j];
    if (connAtom != atom1 && this.mConnAtoms[connAtom] > 2)
      orthoSubstituentCount++;
  }
  return orthoSubstituentCount > 2;
}
;
_.isChalcogene_0 = function isChalcogene(atom){
  var atomicNo;
  atomicNo = this.mAtomicNo[atom];
  return atomicNo == 8 || atomicNo == 16 || atomicNo == 34 || atomicNo == 52;
}
;
_.isDelocalizedBond_0 = function isDelocalizedBond(bond){
  return (this.mBondFlags[bond] & 512) != 0;
}
;
_.isEarthAlkaliMetal_0 = function isEarthAlkaliMetal(atom){
  var atomicNo;
  atomicNo = this.mAtomicNo[atom];
  return atomicNo == 12 || atomicNo == 20 || atomicNo == 38 || atomicNo == 56;
}
;
_.isFlatNitrogen_0 = function isFlatNitrogen(atom){
  var atomicNo, connAtom, hasCompetitor, heteroCount, i, i0, isStabilized, j, j0, ortho, orthoSubstituentCount;
  if (this.mAtomicNo[atom] != 7)
    return false;
  if (this.isAromaticAtom_1(atom) || this.mPi[atom] != 0 || (this.mAtomQueryFeatures[atom] & 268435456) != 0)
    return true;
  if (this.mAtomCharge[atom] == 1)
    return false;
  heteroCount = 0;
  for (i0 = 0; i0 < this.mConnAtoms[atom]; i0++) {
    if (this.mConnBondOrder[atom][i0] == 1) {
      atomicNo = this.mAtomicNo[this.mConnAtom[atom][i0]];
      if (atomicNo == 8 || atomicNo == 9 || atomicNo == 17)
        heteroCount++;
    }
  }
  if (heteroCount == 0) {
    for (i = 0; i < this.mConnAtoms[atom]; i++) {
      connAtom = this.mConnAtom[atom][i];
      if (this.mPi[connAtom] != 0) {
        if (this.isAromaticAtom_1(connAtom)) {
          if (this.getAtomRingSize_0(connAtom) >= 5) {
            orthoSubstituentCount = 0;
            for (j0 = 0; j0 < this.mConnAtoms[connAtom]; j0++) {
              ortho = this.mConnAtom[connAtom][j0];
              if (ortho != atom && this.mConnAtoms[ortho] >= 3)
                orthoSubstituentCount++;
            }
            if (orthoSubstituentCount == 2 || orthoSubstituentCount == 1 && this.mConnAtoms[atom] == 3)
              continue;
          }
          return true;
        }
        for (j = 0; j < this.mConnAtoms[connAtom]; j++) {
          if ((this.mConnBondOrder[connAtom][j] == 2 || this.isAromaticBond_0(this.mConnBond[connAtom][j])) && this.isStabilizedAtom_0(this.mConnAtom[connAtom][j]))
            return true;
        }
      }
    }
  }
  if (heteroCount < 2) {
    for (i = 0; i < this.mConnAtoms[atom]; i++) {
      connAtom = this.mConnAtom[atom][i];
      isStabilized = false;
      hasCompetitor = false;
      for (j = 0; j < this.mConnAtoms[connAtom]; j++) {
        if (this.mConnAtom[connAtom][j] != atom) {
          if (this.mConnBondOrder[connAtom][j] != 1 && (this.mAtomicNo[this.mConnAtom[connAtom][j]] == 7 || this.mAtomicNo[this.mConnAtom[connAtom][j]] == 8 || this.mAtomicNo[this.mConnAtom[connAtom][j]] == 16))
            isStabilized = true;
          if (this.mConnBondOrder[connAtom][j] == 1 && this.mAtomicNo[this.mConnAtom[connAtom][j]] == 7)
            hasCompetitor = true;
        }
      }
      if (isStabilized && (!hasCompetitor || heteroCount == 0))
        return true;
    }
  }
  return false;
}
;
_.isHalogene_0 = function isHalogene(atom){
  var atomicNo;
  atomicNo = this.mAtomicNo[atom];
  return atomicNo == 9 || atomicNo == 17 || atomicNo == 35 || atomicNo == 53;
}
;
_.isNitrogenFamily_0 = function isNitrogenFamily(atom){
  var atomicNo;
  atomicNo = this.mAtomicNo[atom];
  return atomicNo == 7 || atomicNo == 15 || atomicNo == 33;
}
;
_.isPseudoRotatableBond_0 = function isPseudoRotatableBond(bond){
  var atom, connAtom, connBond, i, j, rearAtom;
  if (this.getBondOrder_0(bond) != 1)
    return false;
  for (i = 0; i < 2; i++) {
    atom = this.mBondAtom[i][bond];
    rearAtom = this.mBondAtom[1 - i][bond];
    while (this.mPi[atom] == 2 && this.mConnAtoms[atom] == 2 && this.mAtomicNo[atom] < 10) {
      for (j = 0; j < 2; j++) {
        connAtom = this.mConnAtom[atom][j];
        if (connAtom != rearAtom) {
          if (this.mConnAtoms[connAtom] == 1)
            return true;
          connBond = this.mConnBond[atom][j];
          if (this.getBondOrder_0(connBond) == 1 && connBond < bond)
            return true;
          rearAtom = atom;
          atom = connAtom;
          break;
        }
      }
    }
    if (this.mConnAtoms[atom] == 1)
      return true;
  }
  return false;
}
;
_.isRingAtom_0 = function isRingAtom(atom){
  return (this.mAtomFlags[atom] & 3072) != 0;
}
;
_.isRingBond_0 = function isRingBond(bnd){
  return (this.mBondFlags[bnd] & 64) != 0;
}
;
_.isSimpleHydrogen_0 = function isSimpleHydrogen_0(atom){
  return this.mAtomicNo[atom] == 1 && this.mAtomMass[atom] == 0 && this.mAtomCharge[atom] == 0 && (jsEquals(this.mAtomCustomLabel, null) || jsEquals(this.mAtomCustomLabel[atom], null));
}
;
_.isSmallRingAtom_0 = function isSmallRingAtom(atom){
  return (this.mAtomFlags[atom] & 8) != 0;
}
;
_.isSmallRingBond_0 = function isSmallRingBond(bond){
  return (this.mBondFlags[bond] & 128) != 0;
}
;
_.isStabilizedAtom_0 = function isStabilizedAtom(atom){
  return (this.mAtomFlags[atom] & 16384) != 0;
}
;
_.normalizeAmbiguousBonds_0 = function normalizeAmbiguousBonds(){
  var atom, atom0, bond, bondDeleted, connAtom, connBond, found, i, valence;
  this.ensureHelperArrays_0(1);
  found = false;
  for (atom0 = 0; atom0 < this.mAtoms; atom0++) {
    if (this.mAtomicNo[atom0] == 7 && this.mAtomCharge[atom0] == 0) {
      valence = this.getOccupiedValence_0(atom0);
      if (valence == 4) {
        for (i = 0; i < this.mConnAtoms[atom0]; i++) {
          connAtom = this.mConnAtom[atom0][i];
          if (this.mConnBondOrder[atom0][i] == 1 && this.mAtomicNo[connAtom] == 8 && this.mConnAtoms[connAtom] == 1 && this.mAtomCharge[connAtom] == 0) {
            found = true;
            this.mAtomCharge[atom0]++;
            this.mAtomCharge[connAtom]--;
            break;
          }
        }
      }
       else if (valence == 5) {
        for (i = 0; i < this.mConnAtoms[atom0]; i++) {
          connAtom = this.mConnAtom[atom0][i];
          connBond = this.mConnBond[atom0][i];
          if (this.mConnBondOrder[atom0][i] == 2 && this.mAtomicNo[connAtom] == 8) {
            found = true;
            this.mAtomCharge[atom0]++;
            this.mAtomCharge[connAtom]--;
            this.mBondType[connBond] = 1;
            break;
          }
          if (this.mConnBondOrder[atom0][i] == 3 && this.mAtomicNo[connAtom] == 7) {
            found = true;
            this.mAtomCharge[atom0]++;
            this.mAtomCharge[connAtom]--;
            this.mBondType[connBond] = 2;
            break;
          }
        }
      }
    }
  }
  bondDeleted = false;
  for (bond = 0; bond < this.mBonds; bond++) {
    for (i = 0; i < 2; i++) {
      if (this.isElectronegative_0(this.mBondAtom[i][bond])) {
        atom = this.mBondAtom[1 - i][bond];
        if (this.isAlkaliMetal_0(atom) || this.isEarthAlkaliMetal_0(atom)) {
          if (this.getBondOrder_0(bond) == 1) {
            this.mAtomCharge[atom]++;
            this.mAtomCharge[this.mBondAtom[i][bond]]--;
            this.mBondType[bond] = 128;
            bondDeleted = true;
          }
           else if (this.mBondType[bond] == 32) {
            this.mBondType[bond] = 128;
            bondDeleted = true;
          }
        }
        break;
      }
    }
  }
  if (bondDeleted) {
    this.compressMolTable();
    found = true;
  }
  if (found)
    this.mValidHelperArrays = 0;
  return found;
}
;
_.preferredAlleneStereoBond = function preferredAlleneStereoBond(atom){
  var alleneAtom, bestScore, connAtom, connBond, i, j, preferredBond, score;
  preferredBond = -1;
  bestScore = 0;
  for (i = 0; i < 2; i++) {
    alleneAtom = this.mConnAtom[atom][i];
    for (j = 0; j < this.mAllConnAtoms[alleneAtom]; j++) {
      connAtom = this.mConnAtom[alleneAtom][j];
      if (connAtom != atom) {
        connBond = this.mConnBond[alleneAtom][j];
        score = this.getStereoBondScore(connBond, connAtom);
        if (bestScore < score) {
          bestScore = score;
          preferredBond = connBond;
        }
      }
    }
  }
  return preferredBond;
}
;
_.preferredBinapStereoBond = function preferredBinapStereoBond(bond){
  var atom, bestScore, connAtom, connBond, i, j, preferredBond, score;
  preferredBond = -1;
  bestScore = 0;
  for (i = 0; i < 2; i++) {
    atom = this.mBondAtom[i][bond];
    for (j = 0; j < this.mAllConnAtoms[atom]; j++) {
      connAtom = this.mConnAtom[atom][j];
      if (connAtom != this.mBondAtom[1 - i][bond]) {
        connBond = this.mConnBond[atom][j];
        score = this.getStereoBondScore(connBond, connAtom);
        if (bestScore < score) {
          bestScore = score;
          preferredBond = connBond;
        }
      }
    }
  }
  return preferredBond;
}
;
_.preferredTHStereoBond = function preferredTHStereoBond(atom){
  var allConnAtoms, angle, angleDistanceSum1, angleDistanceSum2, bestScore, bond, connAtom, connBond, i, i0, i1, j, k, preferredBond, score;
  allConnAtoms = this.mAllConnAtoms[atom];
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, allConnAtoms, 15, 1);
  for (i0 = 0; i0 < allConnAtoms; i0++)
    angle[i0] = this.getBondAngle_0(atom, this.mConnAtom[atom][i0]);
  for (i1 = 1; i1 < allConnAtoms; i1++) {
    for (j = 0; j < i1; j++) {
      if (this.bondsAreParallel(angle[i1], angle[j])) {
        angleDistanceSum1 = 0;
        angleDistanceSum2 = 0;
        for (k = 0; k < allConnAtoms; k++) {
          if (k != i1 && k != j) {
            angleDistanceSum1 += $wnd.Math.abs(caru.difference(angle[i1], angle[k]));
            angleDistanceSum2 += $wnd.Math.abs(caru.difference(angle[j], angle[k]));
          }
        }
        bond = angleDistanceSum1 < angleDistanceSum2?this.mConnBond[atom][i1]:this.mConnBond[atom][j];
        if (this.getBondOrder_0(bond) == 1)
          return bond;
      }
    }
  }
  preferredBond = -1;
  bestScore = 0;
  for (i = 0; i < allConnAtoms; i++) {
    connAtom = this.mConnAtom[atom][i];
    connBond = this.mConnBond[atom][i];
    score = this.getStereoBondScore(connBond, connAtom);
    if (bestScore < score) {
      bestScore = score;
      preferredBond = connBond;
    }
  }
  return preferredBond;
}
;
_.removeExplicitHydrogens_0 = function removeExplicitHydrogens(){
  var abnormalValence, atom, explicitAbnormalValence, newAbnormalValence;
  this.ensureHelperArrays_0(7);
  this.mAllAtoms = this.mAtoms;
  this.mAllBonds = this.mBonds;
  for (atom = 0; atom < this.mAtoms; atom++) {
    if (this.mAllConnAtoms[atom] != this.mConnAtoms[atom]) {
      abnormalValence = this.getImplicitHigherValence_0(atom, false);
      this.mAllConnAtoms[atom] = this.mConnAtoms[atom];
      if (abnormalValence != -1) {
        newAbnormalValence = this.getImplicitHigherValence_0(atom, true);
        if (abnormalValence != newAbnormalValence) {
          explicitAbnormalValence = this.getAtomAbnormalValence_0(atom);
          if (explicitAbnormalValence == -1 || explicitAbnormalValence < abnormalValence)
            this.setAtomAbnormalValence_0(atom, abnormalValence);
        }
      }
    }
  }
  this.setStereoBondsFromParity_0();
  this.mValidHelperArrays = 0;
}
;
_.setAlleneStereoBondFromParity = function setAlleneStereoBondFromParity(atom){
  var alleneAngle, alleneAtom, angleDif, bestScore, connAtom, connBond, highPriorityAtom, hpAngleDif, i, i0, i1, i2, j, j0, lpAngleDif, oppositeAlleneAtom, oppositeAtom, oppositeAtoms, preferredAlleneAtom, preferredAtom, preferredBond, score, temp;
  if (this.mConnAtoms[atom] != 2 || this.mConnBondOrder[atom][0] != 2 || this.mConnBondOrder[atom][1] != 2 || this.mConnAtoms[this.mConnAtom[atom][0]] < 2 || this.mConnAtoms[this.mConnAtom[atom][1]] < 2 || this.mPi[this.mConnAtom[atom][0]] != 1 || this.mPi[this.mConnAtom[atom][1]] != 1) {
    this.setAtomParity_0(atom, 0, false);
    return;
  }
  preferredBond = -1;
  preferredAtom = -1;
  preferredAlleneAtom = -1;
  oppositeAlleneAtom = -1;
  bestScore = 0;
  for (i0 = 0; i0 < 2; i0++) {
    alleneAtom = this.mConnAtom[atom][i0];
    for (j0 = 0; j0 < this.mAllConnAtoms[alleneAtom]; j0++) {
      connAtom = this.mConnAtom[alleneAtom][j0];
      if (connAtom != atom) {
        connBond = this.mConnBond[alleneAtom][j0];
        score = this.getStereoBondScore(connBond, connAtom);
        if (bestScore < score) {
          bestScore = score;
          preferredAtom = connAtom;
          preferredBond = connBond;
          preferredAlleneAtom = alleneAtom;
          oppositeAlleneAtom = this.mConnAtom[atom][1 - i0];
        }
      }
    }
  }
  if (preferredAtom == -1)
    return;
  for (i1 = 0; i1 < 2; i1++)
    for (j = 0; j < this.mAllConnAtoms[this.mConnAtom[atom][i1]]; j++)
      if (this.mConnAtom[this.mConnAtom[atom][i1]][j] != atom)
        this.mBondType[this.mConnBond[this.mConnAtom[atom][i1]][j]] = 1;
  if (this.mBondAtom[1][preferredBond] != preferredAtom) {
    this.mBondAtom[0][preferredBond] = this.mBondAtom[1][preferredBond];
    this.mBondAtom[1][preferredBond] = preferredAtom;
  }
  highPriorityAtom = 2147483647;
  for (i2 = 0; i2 < this.mConnAtoms[preferredAlleneAtom]; i2++) {
    connAtom = this.mConnAtom[preferredAlleneAtom][i2];
    if (connAtom != atom && highPriorityAtom > connAtom)
      highPriorityAtom = connAtom;
  }
  oppositeAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  oppositeAtoms = 0;
  for (i = 0; i < this.mConnAtoms[oppositeAlleneAtom]; i++) {
    connAtom = this.mConnAtom[oppositeAlleneAtom][i];
    if (connAtom != atom)
      oppositeAtom[oppositeAtoms++] = connAtom;
  }
  alleneAngle = this.getBondAngle_0(atom, oppositeAlleneAtom);
  angleDif = 0;
  if (oppositeAtoms == 2) {
    if (oppositeAtom[0] > oppositeAtom[1]) {
      temp = oppositeAtom[0];
      oppositeAtom[0] = oppositeAtom[1];
      oppositeAtom[1] = temp;
    }
    hpAngleDif = carc.getAngleDif(alleneAngle, this.getBondAngle_0(oppositeAlleneAtom, oppositeAtom[0]));
    lpAngleDif = carc.getAngleDif(alleneAngle, this.getBondAngle_0(oppositeAlleneAtom, oppositeAtom[1]));
    angleDif = hpAngleDif - lpAngleDif;
  }
   else {
    angleDif = carc.getAngleDif(alleneAngle, this.getBondAngle_0(oppositeAlleneAtom, oppositeAtom[0]));
  }
  if (angleDif < 0 ^ this.getAtomParity_0(atom) == 1 ^ highPriorityAtom == preferredAtom)
    this.mBondType[preferredBond] = 17;
  else 
    this.mBondType[preferredBond] = 9;
}
;
_.setFisherProjectionStereoBondsFromParity = function setFisherProjectionStereoBondsFromParity(atom, sortedConnMap, angle){
  var allConnAtoms, bond, bondType, direction, i, parity;
  allConnAtoms = this.mAllConnAtoms[atom];
  direction = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, allConnAtoms, 15, 1);
  parity = this.getFisherProjectionParity_0(atom, sortedConnMap, angle, direction);
  if (parity == 3)
    return false;
  bondType = this.getAtomParity_0(atom) == parity?17:9;
  for (i = 0; i < allConnAtoms; i++) {
    if ((direction[i] & 1) == 1) {
      bond = this.mConnBond[atom][sortedConnMap[i]];
      this.mBondType[bond] = bondType;
      if (this.mBondAtom[0][bond] != atom) {
        this.mBondAtom[1][bond] = this.mBondAtom[0][bond];
        this.mBondAtom[0][bond] = atom;
      }
    }
  }
  return true;
}
;
_.setParitiesValid_0 = function setParitiesValid(helperStereoBits){
  this.mValidHelperArrays |= 252 & (4 | helperStereoBits);
}
;
_.setStereoBondFromAtomParity_0 = function setStereoBondFromAtomParity(atom){
  var allConnAtoms, angle, bondType, connBond, i, i0, i1, i2, i3, i4, inverted, order, preferredBond, preferredBondIndex, singleBondFound, sortedConnMap, up_down;
  if (this.getAtomParity_0(atom) == 0 || this.getAtomParity_0(atom) == 3)
    return;
  if (this.mPi[atom] == 2 && this.mConnAtoms[atom] == 2) {
    this.setAlleneStereoBondFromParity(atom);
    return;
  }
  if (this.mConnAtoms[atom] < 3 || this.mConnAtoms[atom] > 4) {
    this.setAtomParity_0(atom, 0, false);
    return;
  }
  allConnAtoms = this.mAllConnAtoms[atom];
  singleBondFound = false;
  for (i0 = 0; i0 < allConnAtoms; i0++) {
    if (this.getBondOrder_0(this.mConnBond[atom][i0]) == 1) {
      singleBondFound = true;
      break;
    }
  }
  if (!singleBondFound)
    return;
  sortedConnMap = this.getSortedConnMap(atom);
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, allConnAtoms, 15, 1);
  for (i1 = 0; i1 < allConnAtoms; i1++)
    angle[i1] = this.getBondAngle_0(this.mConnAtom[atom][sortedConnMap[i1]], atom);
  for (i2 = 0; i2 < allConnAtoms; i2++)
    if (this.mBondAtom[0][this.mConnBond[atom][i2]] == atom && this.getBondOrder_0(this.mConnBond[atom][i2]) == 1)
      this.mBondType[this.mConnBond[atom][i2]] = 1;
  if (this.setFisherProjectionStereoBondsFromParity(atom, sortedConnMap, angle))
    return;
  preferredBond = -1;
  for (i3 = 0; i3 < allConnAtoms; i3++) {
    connBond = this.mConnBond[atom][i3];
    if (this.isStereoBond_1(connBond, atom)) {
      this.mBondType[this.mConnBond[atom][i3]] = 1;
      if (preferredBond == -1)
        preferredBond = connBond;
      else 
        preferredBond = -2;
    }
  }
  if (preferredBond < 0)
    preferredBond = this.preferredTHStereoBond(atom);
  if (this.mBondAtom[0][preferredBond] != atom) {
    this.mBondAtom[1][preferredBond] = this.mBondAtom[0][preferredBond];
    this.mBondAtom[0][preferredBond] = atom;
  }
  preferredBondIndex = -1;
  for (i4 = 0; i4 < allConnAtoms; i4++) {
    if (preferredBond == this.mConnBond[atom][sortedConnMap[i4]]) {
      preferredBondIndex = i4;
      break;
    }
  }
  up_down = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 2), {31:1, 4:1, 1:1, 8:1}, 6, 0, [stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2, 1, 2, 1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [1, 2, 2, 1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [1, 1, 2, 2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2, 1, 1, 2]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2, 2, 1, 1]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [1, 2, 1, 2])]);
  for (i = 1; i < allConnAtoms; i++)
    if (angle[i] < angle[0])
      angle[i] += 3.141592653589793 * 2;
  if (allConnAtoms == 3) {
    inverted = false;
    switch (preferredBondIndex) {
      case 0:
        inverted = angle[1] < angle[2] && angle[2] - angle[1] < 3.141592653589793 || angle[1] > angle[2] && angle[1] - angle[2] > 3.141592653589793;
        break;
      case 1:
        inverted = angle[2] - angle[0] > 3.141592653589793;
        break;
      case 2:
        inverted = angle[1] - angle[0] < 3.141592653589793;
        break;
    }
    bondType = this.getAtomParity_0(atom) == 1 ^ inverted?17:9;
  }
   else {
    order = 0;
    if (angle[1] <= angle[2] && angle[2] <= angle[3])
      order = 0;
    else if (angle[1] <= angle[3] && angle[3] <= angle[2])
      order = 1;
    else if (angle[2] <= angle[1] && angle[1] <= angle[3])
      order = 2;
    else if (angle[2] <= angle[3] && angle[3] <= angle[1])
      order = 3;
    else if (angle[3] <= angle[1] && angle[1] <= angle[2])
      order = 4;
    else if (angle[3] <= angle[2] && angle[2] <= angle[1])
      order = 5;
    bondType = this.getAtomParity_0(atom) == 1 ^ up_down[order][preferredBondIndex] == 1?9:17;
  }
  this.mBondType[preferredBond] = bondType;
}
;
_.setStereoBondFromBondParity_0 = function setStereoBondFromBondParity(bond){
  var angleDif, atom, bestScore, binapAngle, connAtom, connBond, highPriorityAtom, hpAngleDif, i, i0, i1, i2, j, lpAngleDif, oppositeAtom, oppositeAtoms, oppositeBINAPAtom, preferredAtom, preferredBINAPAtom, preferredBond, score, temp;
  if (this.getBondParity_0(bond) == 0 || this.getBondParity_0(bond) == 3 || !this.isBINAPChiralityBond_0(bond))
    return;
  preferredBond = -1;
  preferredAtom = -1;
  preferredBINAPAtom = -1;
  oppositeBINAPAtom = -1;
  bestScore = 0;
  for (i0 = 0; i0 < 2; i0++) {
    atom = this.mBondAtom[i0][bond];
    for (j = 0; j < this.mAllConnAtoms[atom]; j++) {
      connBond = this.mConnBond[atom][j];
      if (connBond != bond && this.getBondOrder_0(connBond) == 1) {
        connAtom = this.mConnAtom[atom][j];
        score = this.getStereoBondScore(connBond, connAtom);
        if (bestScore < score) {
          bestScore = score;
          preferredAtom = connAtom;
          preferredBond = connBond;
          preferredBINAPAtom = atom;
          oppositeBINAPAtom = this.mBondAtom[1 - i0][bond];
        }
      }
    }
  }
  if (preferredAtom == -1)
    return;
  for (i1 = 0; i1 < 2; i1++) {
    for (j = 0; j < this.mAllConnAtoms[this.mBondAtom[i1][bond]]; j++) {
      connBond = this.mConnBond[this.mBondAtom[i1][bond]][j];
      if (connBond != bond && this.getBondOrder_0(connBond) == 1)
        this.mBondType[connBond] = 1;
    }
  }
  if (this.mBondAtom[1][preferredBond] != preferredAtom) {
    this.mBondAtom[0][preferredBond] = this.mBondAtom[1][preferredBond];
    this.mBondAtom[1][preferredBond] = preferredAtom;
  }
  highPriorityAtom = 2147483647;
  for (i2 = 0; i2 < this.mConnAtoms[preferredBINAPAtom]; i2++) {
    connAtom = this.mConnAtom[preferredBINAPAtom][i2];
    if (this.mConnBond[preferredBINAPAtom][i2] != bond && highPriorityAtom > connAtom)
      highPriorityAtom = connAtom;
  }
  oppositeAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  oppositeAtoms = 0;
  for (i = 0; i < this.mConnAtoms[oppositeBINAPAtom]; i++)
    if (this.mConnBond[oppositeBINAPAtom][i] != bond)
      oppositeAtom[oppositeAtoms++] = this.mConnAtom[oppositeBINAPAtom][i];
  binapAngle = this.getBondAngle_0(preferredBINAPAtom, oppositeBINAPAtom);
  angleDif = 0;
  if (oppositeAtoms == 2) {
    if (oppositeAtom[0] > oppositeAtom[1]) {
      temp = oppositeAtom[0];
      oppositeAtom[0] = oppositeAtom[1];
      oppositeAtom[1] = temp;
    }
    hpAngleDif = carc.getAngleDif(binapAngle, this.getBondAngle_0(oppositeBINAPAtom, oppositeAtom[0]));
    lpAngleDif = carc.getAngleDif(binapAngle, this.getBondAngle_0(oppositeBINAPAtom, oppositeAtom[1]));
    angleDif = hpAngleDif - lpAngleDif;
  }
   else {
    angleDif = carc.getAngleDif(binapAngle, this.getBondAngle_0(oppositeBINAPAtom, oppositeAtom[0]));
  }
  if (angleDif < 0 ^ this.getBondParity_0(bond) == 2 ^ highPriorityAtom == preferredAtom)
    this.mBondType[preferredBond] = 17;
  else 
    this.mBondType[preferredBond] = 9;
}
;
_.setStereoBondsFromParity_0 = function setStereoBondsFromParity(){
  var atom, bond, bond0;
  this.ensureHelperArrays_0(3);
  for (atom = 0; atom < this.mAtoms; atom++)
    this.setStereoBondFromAtomParity_0(atom);
  for (bond0 = 0; bond0 < this.mBonds; bond0++)
    this.setStereoBondFromBondParity_0(bond0);
  for (bond = 0; bond < this.mBonds; bond++)
    if (this.mBondType[bond] == 2 && this.getBondParity_0(bond) == 3)
      this.mBondType[bond] = 26;
}
;
_.shareSameFragment_0 = function shareSameFragment(atom1, atom2){
  return this.getPathLength_0(atom1, atom2) != -1;
}
;
_.stripSmallFragments_0 = function stripSmallFragments(considerMetalBonds){
  var atom, atom0, atomMap, bond, e, fragmentCount, fragmentNo, fragmentSize, i, largestFragment, largestSize;
  fragmentNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  fragmentCount = this.getFragmentNumbers_0(fragmentNo, false, considerMetalBonds);
  if (fragmentCount <= 1)
    return null;
  fragmentSize = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragmentCount, 15, 1);
  for (atom0 = 0; atom0 < this.mAtoms; atom0++)
    fragmentSize[fragmentNo[atom0]]++;
  largestFragment = 0;
  largestSize = fragmentSize[0];
  for (i = 1; i < fragmentCount; i++) {
    if (largestSize < fragmentSize[i]) {
      largestSize = fragmentSize[i];
      largestFragment = i;
    }
  }
  for (atom = 0; atom < this.mAllAtoms; atom++)
    if (fragmentNo[atom] != largestFragment)
      this.mAtomicNo[atom] = -1;
  for (bond = 0; bond < this.mAllBonds; bond++)
    if (!considerMetalBonds && this.mBondType[bond] == 32 || fragmentNo[this.mBondAtom[0][bond]] != largestFragment)
      this.mBondType[bond] = 128;
  atomMap = this.compressMolTable();
  this.mValidHelperArrays = 0;
  try {
    this.canonizeCharge_0(true);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 11)) {
      e = $e0;
    }
     else 
      throw toJs($e0);
  }
  return atomMap;
}
;
_.supportsImplicitHydrogen_0 = function supportsImplicitHydrogen(atom){
  if ((this.mAtomFlags[atom] & -268435456) != 0)
    return true;
  if (this.mAtomicNo[atom] == 1)
    return false;
  return this.isOrganicAtom_0(atom) || this.mAtomicNo[atom] == 13 || this.mAtomicNo[atom] >= 171;
}
;
_.validate_0 = function validate(){
  var allCharge, atom, atom1, atom2, avbl, minDistanceSquare, xdif, ydif;
  avbl = this.getAverageBondLength_0();
  minDistanceSquare = avbl * avbl / 16;
  for (atom1 = 1; atom1 < this.mAllAtoms; atom1++) {
    for (atom2 = 0; atom2 < atom1; atom2++) {
      xdif = this.mCoordinates[atom2].x_0 - this.mCoordinates[atom1].x_0;
      ydif = this.mCoordinates[atom2].y_0 - this.mCoordinates[atom1].y_0;
      if (xdif * xdif + ydif * ydif < minDistanceSquare)
        throw toJs(new jl.Exception_1('The distance between two atoms is too close.'));
    }
  }
  this.ensureHelperArrays_0(1);
  allCharge = 0;
  for (atom = 0; atom < this.mAtoms; atom++) {
    if (this.getOccupiedValence_0(atom) > this.getMaxValence_0(atom))
      throw toJs(new jl.Exception_1('atom valence exceeded'));
    allCharge += this.mAtomCharge[atom];
  }
  if (allCharge != 0)
    throw toJs(new jl.Exception_1('unbalanced atom charge'));
}
;
_.validateBondType = function validateBondType_0(bond, type_0){
  var ok;
  ok = getClassPrototype(90).validateBondType.call(this, bond, type_0);
  if (ok && type_0 == 26) {
    this.ensureHelperArrays_0(3);
    ok = ok & !this.isSmallRingBond_0(bond);
  }
  return ok;
}
;
_.validateQueryFeatures = function validateQueryFeatures(){
  var atom, atom0, connBond, deleteHydrogens, explicitHydrogens, freeValence, i, queryFeatureHydrogens, queryFeatureShift, queryFeatures;
  if (!this.mIsFragment)
    return false;
  for (atom0 = 0; atom0 < this.mAllAtoms; atom0++) {
    if (this.getFreeValence_0(atom0) <= 0 && !(this.mAtomCharge[atom0] == 0 && (this.mAtomicNo[atom0] == 5 || this.isNitrogenFamily_0(atom0) || this.isChalcogene_0(atom0))))
      this.mAtomQueryFeatures[atom0] &= ~(2048 | 4096);
  }
  deleteHydrogens = false;
  for (atom = 0; atom < this.mAtoms; atom++) {
    explicitHydrogens = this.getExplicitHydrogens_0(atom);
    if (!this.mProtectHydrogen && explicitHydrogens > 0) {
      if ((this.mAtomQueryFeatures[atom] & 2048) == 0) {
        queryFeatureHydrogens = (this.mAtomQueryFeatures[atom] & 1920) == (128 | 256 | 512)?3:(this.mAtomQueryFeatures[atom] & 1920) == (128 | 256)?2:(this.mAtomQueryFeatures[atom] & 128) == 128?1:0;
        freeValence = this.getFreeValence_0(atom);
        if (this.mAtomCharge[atom] == 0 && (this.mAtomQueryFeatures[atom] & 234881024) == 0 && this.mAtomicNo[atom] != 6)
          freeValence++;
        queryFeatureShift = explicitHydrogens;
        if (queryFeatureShift > 3 - queryFeatureHydrogens)
          queryFeatureShift = 3 - queryFeatureHydrogens;
        if (queryFeatureShift > freeValence + explicitHydrogens - queryFeatureHydrogens)
          queryFeatureShift = freeValence + explicitHydrogens - queryFeatureHydrogens;
        if (queryFeatureShift > 0) {
          queryFeatures = queryFeatureHydrogens == 0?0:(this.mAtomQueryFeatures[atom] & 1920) << queryFeatureShift;
          queryFeatures |= (queryFeatureShift == 3?7:explicitHydrogens == 2?3:1) << 7;
          this.mAtomQueryFeatures[atom] &= ~1920;
          this.mAtomQueryFeatures[atom] |= 1920 & queryFeatures;
        }
      }
      for (i = this.mConnAtoms[atom]; i < this.mAllConnAtoms[atom]; i++) {
        connBond = this.mConnBond[atom][i];
        if (this.mBondType[connBond] == 1) {
          this.mAtomicNo[this.mConnAtom[atom][i]] = -1;
          this.mBondType[connBond] = 128;
          deleteHydrogens = true;
        }
      }
    }
    if ((this.mAtomQueryFeatures[atom] & 2) != 0)
      this.mAtomQueryFeatures[atom] &= ~8;
    if (this.mAtomCharge[atom] != 0)
      this.mAtomFlags[atom] &= ~234881024;
  }
  if (deleteHydrogens)
    this.compressMolTable();
  return deleteHydrogens;
}
;
_.mAtoms = 0;
_.mBonds = 0;
carc.FISCHER_PROJECTION_LIMIT = 0;
carc.STEREO_ANGLE_LIMIT = 0;
carc.cMaxConnAtoms = 16;
carc.serialVersionUID_0 = 537316094;
cggl.Lcom_actelion_research_chem_ExtendedMolecule_2_classLit = createForClass('com.actelion.research.chem', 'ExtendedMolecule', 89, cggl.Lcom_actelion_research_chem_Molecule_2_classLit);
carc.$clinit_IDCodeParserWithoutCoordinateInvention = function $clinit_IDCodeParserWithoutCoordinateInvention(){
  carc.$clinit_IDCodeParserWithoutCoordinateInvention = emptyMethod;
  jl.$clinit_Object();
}
;
carc.IDCodeParserWithoutCoordinateInvention = function IDCodeParserWithoutCoordinateInvention(){
  carc.$clinit_IDCodeParserWithoutCoordinateInvention();
  Object_0.call(this);
  this.$init_21();
}
;
defineClass(147, 1, {1:1}, carc.IDCodeParserWithoutCoordinateInvention);
_.$init_21 = function $init_21(){
}
;
_.decodeAVBL = function decodeAVBL(value_0, binCount){
  return $wnd.Math.pow(10, jl.log10(200 / 0.1) * value_0 / (binCount - 1) - 1);
}
;
_.decodeBits = function decodeBits(bits){
  var allBits, data_0;
  allBits = bits;
  data_0 = 0;
  while (bits != 0) {
    if (this.mIDCodeBitsAvail == 0) {
      this.mIDCodeTempData = (this.mDecodingBytes[++this.mIDCodeBufferIndex] & 63) << 11;
      this.mIDCodeBitsAvail = 6;
    }
    data_0 |= (65536 & this.mIDCodeTempData) >> 16 - allBits + bits;
    this.mIDCodeTempData <<= 1;
    bits--;
    this.mIDCodeBitsAvail--;
  }
  return data_0;
}
;
_.decodeBitsStart = function decodeBitsStart(bytes, offset){
  this.mIDCodeBitsAvail = 6;
  this.mIDCodeBufferIndex = offset;
  this.mDecodingBytes = bytes;
  this.mIDCodeTempData = (bytes[this.mIDCodeBufferIndex] & 63) << 11;
}
;
_.decodeShift = function decodeShift(value_0, binCount){
  var doubleValue, halfBinCount, isNegative, steepness;
  halfBinCount = narrow_int(binCount / 2);
  isNegative = value_0 >= halfBinCount;
  if (isNegative)
    value_0 -= halfBinCount;
  steepness = narrow_int(binCount / 32);
  doubleValue = steepness * value_0 / (halfBinCount - value_0);
  return isNegative?-doubleValue:doubleValue;
}
;
_.ensure2DCoordinates = function ensure2DCoordinates_0(){
  return false;
}
;
_.getCompactMolecule = function getCompactMolecule(idcode){
  return jsEquals(idcode, null) || jl.length__I__devirtual$_0(idcode) == 0?null:this.getCompactMolecule_2(jl.getBytes___B__devirtual$(idcode), null);
}
;
_.getCompactMolecule_0 = function getCompactMolecule_0(idcode, coordinates){
  return jsEquals(idcode, null)?null:this.getCompactMolecule_2(jl.getBytes___B__devirtual$(idcode), jsEquals(coordinates, null)?null:jl.getBytes___B__devirtual$(coordinates));
}
;
_.getCompactMolecule_1 = function getCompactMolecule_1(idcode){
  return this.getCompactMolecule_2(idcode, null);
}
;
_.getCompactMolecule_2 = function getCompactMolecule_2(idcode, coordinates){
  return this.getCompactMolecule_3(idcode, coordinates, 0, 0);
}
;
_.getCompactMolecule_3 = function getCompactMolecule_3(idcode, coordinates, idcodeStart, coordsStart){
  var abits, allAtoms, allBonds, bbits, mol;
  if (jsEquals(idcode, null))
    return null;
  this.decodeBitsStart(idcode, idcodeStart);
  abits = this.decodeBits(4);
  bbits = this.decodeBits(4);
  if (abits > 8)
    abits = bbits;
  allAtoms = this.decodeBits(abits);
  allBonds = this.decodeBits(bbits);
  mol = new carc.StereoMolecule(allAtoms, allBonds);
  this.parse_0(mol, idcode, coordinates, idcodeStart, coordsStart);
  return mol;
}
;
_.inventCoordinates_0 = function inventCoordinates(mol){
  throw toJs(new jl.Exception_1('Unexpected request to invent coordinates. Check source code logic!'));
}
;
_.parse_0 = function parse_0(mol, idcode, coordinates, idcodeStart, coordsStart){
  var EZCount, THCount, abits, allAtoms, allBonds, aromState, aromaticSPBond, atom, atom0, atom1, atom2, atomList, atomicNo, atoms, avbl, avblDefault, avblInt, base, bbits, binCount, bond, bond$array, bond$index, bond$max, bond0, bondOrder, bondTypes, bridgeData, charge, chargedAtoms, closureBonds, coords2DAvailable, coordsAre3D, coordsAreAbsolute, count, dataType, dbits, decodeOldCoordinates, dif, dx, dy, dz, e, f, factor, from, hCount, hydrogen, hydrogenCount, i, i0, i1, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i2, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i3, i30, i31, i32, i33, i34, i4, i5, i6, i7, i8, i9, index_0, isAromaticBond, j, label_0, lbits, mass, neighbours, nitrogens, no, offset, otherAtoms, oxygens, parity, piElectrons, resolutionBits, ringSize, ringState, targetAVBL, version, xInt, xOffset, yInt, yOffset, zInt, zOffset;
  mol.deleteMolecule_0();
  if (jsEquals(idcode, null) || idcodeStart >= idcode.length)
    return;
  this.mMol = mol;
  version = 8;
  if (jsNotEquals(coordinates, null) && coordsStart >= coordinates.length)
    coordinates = null;
  this.decodeBitsStart(idcode, idcodeStart);
  abits = this.decodeBits(4);
  bbits = this.decodeBits(4);
  if (abits > 8) {
    version = abits;
    abits = bbits;
  }
  if (abits == 0) {
    this.mMol.setFragment_0(this.decodeBits(1) == 1?true:false);
    return;
  }
  allAtoms = this.decodeBits(abits);
  allBonds = this.decodeBits(bbits);
  nitrogens = this.decodeBits(abits);
  oxygens = this.decodeBits(abits);
  otherAtoms = this.decodeBits(abits);
  chargedAtoms = this.decodeBits(abits);
  for (atom0 = 0; atom0 < allAtoms; atom0++)
    this.mMol.addAtom_2(6);
  for (i0 = 0; i0 < nitrogens; i0++)
    this.mMol.setAtomicNo_0(this.decodeBits(abits), 7);
  for (i1 = 0; i1 < oxygens; i1++)
    this.mMol.setAtomicNo_0(this.decodeBits(abits), 8);
  for (i2 = 0; i2 < otherAtoms; i2++)
    this.mMol.setAtomicNo_0(this.decodeBits(abits), this.decodeBits(8));
  for (i3 = 0; i3 < chargedAtoms; i3++)
    this.mMol.setAtomCharge_0(this.decodeBits(abits), this.decodeBits(4) - 8);
  closureBonds = 1 + allBonds - allAtoms;
  dbits = this.decodeBits(4);
  base = 0;
  this.mMol.setAtomX_0(0, 0);
  this.mMol.setAtomY_0(0, 0);
  this.mMol.setAtomZ_0(0, 0);
  decodeOldCoordinates = jsNotEquals(coordinates, null) && coordinates[0] >= 39;
  targetAVBL = 0;
  xOffset = 0;
  yOffset = 0;
  zOffset = 0;
  coordsAre3D = false;
  coordsAreAbsolute = false;
  if (decodeOldCoordinates) {
    if (coordinates.length > 2 * allAtoms - 2 && coordinates[2 * allAtoms - 2] == 39 || coordinates.length > 3 * allAtoms - 3 && coordinates[3 * allAtoms - 3] == 39) {
      coordsAreAbsolute = true;
      coordsAre3D = coordinates.length == 3 * allAtoms - 3 + 9;
      index_0 = coordsAre3D?3 * allAtoms - 3:2 * allAtoms - 2;
      avblInt = 86 * (coordinates[index_0 + 1] - 40) + coordinates[index_0 + 2] - 40;
      targetAVBL = $wnd.Math.pow(10, avblInt / 2000 - 1);
      index_0 += 2;
      xInt = 86 * (coordinates[index_0 + 1] - 40) + coordinates[index_0 + 2] - 40;
      xOffset = $wnd.Math.pow(10, xInt / 1500 - 1);
      index_0 += 2;
      yInt = 86 * (coordinates[index_0 + 1] - 40) + coordinates[index_0 + 2] - 40;
      yOffset = $wnd.Math.pow(10, yInt / 1500 - 1);
      if (coordsAre3D) {
        index_0 += 2;
        zInt = 86 * (coordinates[index_0 + 1] - 40) + coordinates[index_0 + 2] - 40;
        zOffset = $wnd.Math.pow(10, zInt / 1500 - 1);
      }
    }
     else {
      coordsAre3D = coordinates.length == 3 * allAtoms - 3;
    }
  }
  if (this.ensure2DCoordinates() && coordsAre3D) {
    coordinates = null;
    decodeOldCoordinates = false;
  }
  for (i4 = 1; i4 < allAtoms; i4++) {
    dif = this.decodeBits(dbits);
    if (dif == 0) {
      if (decodeOldCoordinates) {
        this.mMol.setAtomX_0(i4, this.mMol.getAtomX_1(0) + 8 * (coordinates[i4 * 2 - 2] - 83));
        this.mMol.setAtomY_0(i4, this.mMol.getAtomY_1(0) + 8 * (coordinates[i4 * 2 - 1] - 83));
        if (coordsAre3D)
          this.mMol.setAtomZ_0(i4, this.mMol.getAtomZ_0(0) + 8 * (coordinates[2 * allAtoms - 3 + i4] - 83));
      }
      closureBonds++;
      continue;
    }
    base += dif - 1;
    if (decodeOldCoordinates) {
      this.mMol.setAtomX_0(i4, this.mMol.getAtomX_1(base) + coordinates[i4 * 2 - 2] - 83);
      this.mMol.setAtomY_0(i4, this.mMol.getAtomY_1(base) + coordinates[i4 * 2 - 1] - 83);
      if (coordsAre3D)
        this.mMol.setAtomZ_0(i4, this.mMol.getAtomZ_0(base) + (coordinates[2 * allAtoms - 3 + i4] - 83));
    }
    this.mMol.addBond_1(base, i4, 1);
  }
  for (i5 = 0; i5 < closureBonds; i5++)
    this.mMol.addBond_1(this.decodeBits(abits), this.decodeBits(abits), 1);
  isAromaticBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, allBonds, 16, 1);
  for (bond0 = 0; bond0 < allBonds; bond0++) {
    bondOrder = this.decodeBits(2);
    switch (bondOrder) {
      case 0:
        isAromaticBond[bond0] = true;
        break;
      case 2:
        this.mMol.setBondType_0(bond0, 2);
        break;
      case 3:
        this.mMol.setBondType_0(bond0, 4);
        break;
    }
  }
  THCount = this.decodeBits(abits);
  for (i6 = 0; i6 < THCount; i6++) {
    atom = this.decodeBits(abits);
    if (version == 8) {
      parity = this.decodeBits(2);
      if (parity == 3) {
        this.mMol.setAtomESR_0(atom, 1, 0);
        this.mMol.setAtomParity_0(atom, 1, false);
      }
       else {
        this.mMol.setAtomParity_0(atom, parity, false);
      }
    }
     else {
      parity = this.decodeBits(3);
      switch (parity) {
        case 4:
          this.mMol.setAtomParity_0(atom, 1, false);
          this.mMol.setAtomESR_0(atom, 1, this.decodeBits(3));
          break;
        case 5:
          this.mMol.setAtomParity_0(atom, 2, false);
          this.mMol.setAtomESR_0(atom, 1, this.decodeBits(3));
          break;
        case 6:
          this.mMol.setAtomParity_0(atom, 1, false);
          this.mMol.setAtomESR_0(atom, 2, this.decodeBits(3));
          break;
        case 7:
          this.mMol.setAtomParity_0(atom, 2, false);
          this.mMol.setAtomESR_0(atom, 2, this.decodeBits(3));
          break;
        default:this.mMol.setAtomParity_0(atom, parity, false);
      }
    }
  }
  if (version == 8)
    if (this.decodeBits(1) == 0)
      this.mMol.setToRacemate_0();
  EZCount = this.decodeBits(bbits);
  for (i7 = 0; i7 < EZCount; i7++) {
    bond = this.decodeBits(bbits);
    if (this.mMol.getBondType_0(bond) == 1) {
      parity = this.decodeBits(3);
      switch (parity) {
        case 4:
          this.mMol.setBondParity_0(bond, 1, false);
          this.mMol.setBondESR_0(bond, 1, this.decodeBits(3));
          break;
        case 5:
          this.mMol.setBondParity_0(bond, 2, false);
          this.mMol.setBondESR_0(bond, 1, this.decodeBits(3));
          break;
        case 6:
          this.mMol.setBondParity_0(bond, 1, false);
          this.mMol.setBondESR_0(bond, 2, this.decodeBits(3));
          break;
        case 7:
          this.mMol.setBondParity_0(bond, 2, false);
          this.mMol.setBondESR_0(bond, 2, this.decodeBits(3));
          break;
        default:this.mMol.setBondParity_0(bond, parity, false);
      }
    }
     else {
      this.mMol.setBondParity_0(bond, this.decodeBits(2), false);
    }
  }
  this.mMol.setFragment_0(this.decodeBits(1) == 1?true:false);
  aromaticSPBond = null;
  offset = 0;
  while (this.decodeBits(1) == 1) {
    dataType = offset + this.decodeBits(4);
    switch (dataType) {
      case 0:
        no = this.decodeBits(abits);
        for (i8 = 0; i8 < no; i8++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomQueryFeature_0(atom, 2048, true);
        }

        break;
      case 1:
        no = this.decodeBits(abits);
        for (i9 = 0; i9 < no; i9++) {
          atom = this.decodeBits(abits);
          mass = this.decodeBits(8);
          this.mMol.setAtomMass_0(atom, mass);
        }

        break;
      case 2:
        no = this.decodeBits(bbits);
        for (i10 = 0; i10 < no; i10++) {
          bond = this.decodeBits(bbits);
          this.mMol.setBondType_0(bond, 64);
        }

        break;
      case 3:
        no = this.decodeBits(abits);
        for (i11 = 0; i11 < no; i11++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomQueryFeature_0(atom, 4096, true);
        }

        break;
      case 4:
        no = this.decodeBits(abits);
        for (i12 = 0; i12 < no; i12++) {
          atom = this.decodeBits(abits);
          ringState = this.decodeBits(4) << 3;
          this.mMol.setAtomQueryFeature_0(atom, ringState, true);
        }

        break;
      case 5:
        no = this.decodeBits(abits);
        for (i13 = 0; i13 < no; i13++) {
          atom = this.decodeBits(abits);
          aromState = this.decodeBits(2) << 1;
          this.mMol.setAtomQueryFeature_0(atom, aromState, true);
        }

        break;
      case 6:
        no = this.decodeBits(abits);
        for (i14 = 0; i14 < no; i14++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomQueryFeature_0(atom, 1, true);
        }

        break;
      case 7:
        no = this.decodeBits(abits);
        for (i15 = 0; i15 < no; i15++) {
          atom = this.decodeBits(abits);
          hydrogen = this.decodeBits(4) << 7;
          this.mMol.setAtomQueryFeature_0(atom, hydrogen, true);
        }

        break;
      case 8:
        no = this.decodeBits(abits);
        for (i16 = 0; i16 < no; i16++) {
          atom = this.decodeBits(abits);
          atoms = this.decodeBits(4);
          atomList = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atoms, 15, 1);
          for (j = 0; j < atoms; j++) {
            atomicNo = this.decodeBits(8);
            atomList[j] = atomicNo;
          }
          this.mMol.setAtomList_0(atom, atomList);
        }

        break;
      case 9:
        no = this.decodeBits(bbits);
        for (i17 = 0; i17 < no; i17++) {
          bond = this.decodeBits(bbits);
          ringState = this.decodeBits(2) << 5;
          this.mMol.setBondQueryFeature_0(bond, ringState, true);
        }

        break;
      case 10:
        no = this.decodeBits(bbits);
        for (i18 = 0; i18 < no; i18++) {
          bond = this.decodeBits(bbits);
          bondTypes = this.decodeBits(5) << 0;
          this.mMol.setBondQueryFeature_0(bond, bondTypes, true);
        }

        break;
      case 11:
        no = this.decodeBits(abits);
        for (i19 = 0; i19 < no; i19++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomQueryFeature_0(atom, 8192, true);
        }

        break;
      case 12:
        no = this.decodeBits(bbits);
        for (i20 = 0; i20 < no; i20++) {
          bond = this.decodeBits(bbits);
          bridgeData = this.decodeBits(8) << 7;
          this.mMol.setBondQueryFeature_0(bond, bridgeData, true);
        }

        break;
      case 13:
        no = this.decodeBits(abits);
        for (i21 = 0; i21 < no; i21++) {
          atom = this.decodeBits(abits);
          piElectrons = this.decodeBits(3) << 14;
          this.mMol.setAtomQueryFeature_0(atom, piElectrons, true);
        }

        break;
      case 14:
        no = this.decodeBits(abits);
        for (i22 = 0; i22 < no; i22++) {
          atom = this.decodeBits(abits);
          neighbours = this.decodeBits(5) << 17;
          this.mMol.setAtomQueryFeature_0(atom, neighbours, true);
        }

        break;
      case 15:
        offset = 16;
        break;
      case 16:
        no = this.decodeBits(abits);
        for (i23 = 0; i23 < no; i23++) {
          atom = this.decodeBits(abits);
          ringSize = this.decodeBits(3) << 22;
          this.mMol.setAtomQueryFeature_0(atom, ringSize, true);
        }

        break;
      case 17:
        no = this.decodeBits(abits);
        for (i24 = 0; i24 < no; i24++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomAbnormalValence_0(atom, this.decodeBits(4));
        }

        break;
      case 18:
        no = this.decodeBits(abits);
        lbits = this.decodeBits(4);
        for (i25 = 0; i25 < no; i25++) {
          atom = this.decodeBits(abits);
          count = this.decodeBits(lbits);
          label_0 = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, count, 15, 1);
          for (j = 0; j < count; j++)
            label_0[j] = narrow_byte(this.decodeBits(7));
          this.mMol.setAtomCustomLabel_0(atom, jl.$create_7(label_0));
        }

        break;
      case 19:
        no = this.decodeBits(abits);
        for (i26 = 0; i26 < no; i26++) {
          atom = this.decodeBits(abits);
          charge = this.decodeBits(3) << 25;
          this.mMol.setAtomQueryFeature_0(atom, charge, true);
        }

        break;
      case 20:
        no = this.decodeBits(bbits);
        for (i27 = 0; i27 < no; i27++) {
          bond = this.decodeBits(bbits);
          ringSize = this.decodeBits(3) << 15;
          this.mMol.setBondQueryFeature_0(bond, ringSize, true);
        }

        break;
      case 21:
        no = this.decodeBits(abits);
        for (i28 = 0; i28 < no; i28++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomRadical_0(atom, this.decodeBits(2) << 4);
        }

        break;
      case 22:
        no = this.decodeBits(abits);
        for (i29 = 0; i29 < no; i29++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomQueryFeature_0(atom, 268435456, true);
        }

        break;
      case 23:
        no = this.decodeBits(bbits);
        for (i30 = 0; i30 < no; i30++) {
          bond = this.decodeBits(bbits);
          this.mMol.setBondQueryFeature_0(bond, 262144, true);
        }

        break;
      case 24:
        no = this.decodeBits(bbits);
        for (i31 = 0; i31 < no; i31++) {
          bond = this.decodeBits(bbits);
          aromState = this.decodeBits(2) << 19;
          this.mMol.setBondQueryFeature_0(bond, aromState, true);
        }

        break;
      case 25:
        for (i32 = 0; i32 < allAtoms; i32++)
          if (this.decodeBits(1) == 1)
            this.mMol.setAtomSelection_0(i32, true);
        break;
      case 26:
        no = this.decodeBits(bbits);
        aromaticSPBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, no, 15, 1);
        for (i33 = 0; i33 < no; i33++)
          aromaticSPBond[i33] = this.decodeBits(bbits);
        break;
      case 27:
        no = this.decodeBits(abits);
        for (i34 = 0; i34 < no; i34++) {
          atom = this.decodeBits(abits);
          this.mMol.setAtomQueryFeature_0(atom, 536870912, true);
        }

        break;
      case 28:
        no = this.decodeBits(bbits);
        for (i = 0; i < no; i++)
          this.mMol.setBondType_0(this.decodeBits(bbits), 32);
        break;
    }
  }
  (new carc.AromaticityResolver(this.mMol)).locateDelocalizedDoubleBonds(isAromaticBond);
  if (jsNotEquals(aromaticSPBond, null))
    for (bond$array = aromaticSPBond , bond$index = 0 , bond$max = bond$array.length; bond$index < bond$max; ++bond$index) {
      bond = bond$array[bond$index];
      this.mMol.setBondType_0(bond, this.mMol.getBondType_0(bond) == 2?4:2);
    }
  if (jsEquals(coordinates, null) && idcode.length > this.mIDCodeBufferIndex + 1 && (idcode[this.mIDCodeBufferIndex + 1] == 32 || idcode[this.mIDCodeBufferIndex + 1] == 9)) {
    coordinates = idcode;
    coordsStart = this.mIDCodeBufferIndex + 2;
  }
  if (jsNotEquals(coordinates, null)) {
    try {
      if (coordinates[coordsStart] == 33 || coordinates[coordsStart] == 35) {
        this.decodeBitsStart(coordinates, coordsStart + 1);
        coordsAre3D = this.decodeBits(1) == 1;
        coordsAreAbsolute = this.decodeBits(1) == 1;
        resolutionBits = 2 * this.decodeBits(4);
        binCount = 1 << resolutionBits;
        factor = 0;
        from = 0;
        bond = 0;
        for (atom1 = 1; atom1 < allAtoms; atom1++) {
          if (bond < allBonds && this.mMol.getBondAtom_0(1, bond) == atom1) {
            from = this.mMol.getBondAtom_0(0, bond++);
            factor = 1;
          }
           else {
            from = 0;
            factor = 8;
          }
          this.mMol.setAtomX_0(atom1, this.mMol.getAtomX_1(from) + factor * (this.decodeBits(resolutionBits) - narrow_int(binCount / 2)));
          this.mMol.setAtomY_0(atom1, this.mMol.getAtomY_1(from) + factor * (this.decodeBits(resolutionBits) - narrow_int(binCount / 2)));
          if (coordsAre3D)
            this.mMol.setAtomZ_0(atom1, this.mMol.getAtomZ_0(from) + factor * (this.decodeBits(resolutionBits) - narrow_int(binCount / 2)));
        }
        avblDefault = coordsAre3D?1.5:carc.getDefaultAverageBondLength();
        avbl = this.mMol.getAverageBondLength_2(allAtoms, allBonds, avblDefault);
        if (coordinates[coordsStart] == 35) {
          hydrogenCount = 0;
          hCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, allAtoms, 15, 1);
          for (atom2 = 0; atom2 < allAtoms; atom2++)
            hydrogenCount += hCount[atom2] = this.mMol.getImplicitHydrogens_0(atom2);
          for (atom = 0; atom < allAtoms; atom++) {
            for (i = 0; i < hCount[atom]; i++) {
              hydrogen = this.mMol.addAtom_2(1);
              this.mMol.addBond_1(atom, hydrogen, 1);
              this.mMol.setAtomX_0(hydrogen, this.mMol.getAtomX_1(atom) + (this.decodeBits(resolutionBits) - narrow_int(binCount / 2)));
              this.mMol.setAtomY_0(hydrogen, this.mMol.getAtomY_1(atom) + (this.decodeBits(resolutionBits) - narrow_int(binCount / 2)));
              if (coordsAre3D)
                this.mMol.setAtomZ_0(hydrogen, this.mMol.getAtomZ_0(atom) + (this.decodeBits(resolutionBits) - narrow_int(binCount / 2)));
            }
          }
          allAtoms += hydrogenCount;
          allBonds += hydrogenCount;
        }
        if (coordsAreAbsolute) {
          targetAVBL = this.decodeAVBL(this.decodeBits(resolutionBits), binCount);
          xOffset = targetAVBL * this.decodeShift(this.decodeBits(resolutionBits), binCount);
          yOffset = targetAVBL * this.decodeShift(this.decodeBits(resolutionBits), binCount);
          if (coordsAre3D)
            zOffset = targetAVBL * this.decodeShift(this.decodeBits(resolutionBits), binCount);
          factor = targetAVBL / avbl;
          for (atom = 0; atom < allAtoms; atom++) {
            this.mMol.setAtomX_0(atom, xOffset + factor * this.mMol.getAtomX_1(atom));
            this.mMol.setAtomY_0(atom, yOffset + factor * this.mMol.getAtomY_1(atom));
            if (coordsAre3D)
              this.mMol.setAtomZ_0(atom, zOffset + factor * this.mMol.getAtomZ_0(atom));
          }
        }
         else {
          targetAVBL = 1.5;
          factor = targetAVBL / avbl;
          for (atom = 0; atom < allAtoms; atom++) {
            this.mMol.setAtomX_0(atom, factor * this.mMol.getAtomX_1(atom));
            this.mMol.setAtomY_0(atom, factor * this.mMol.getAtomY_1(atom));
            if (coordsAre3D)
              this.mMol.setAtomZ_0(atom, factor * this.mMol.getAtomZ_0(atom));
          }
        }
      }
       else {
        if (coordsAre3D && !coordsAreAbsolute && targetAVBL == 0)
          targetAVBL = 1.5;
        if (targetAVBL != 0 && this.mMol.getAllBonds_0() != 0) {
          avbl = 0;
          for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
            dx = this.mMol.getAtomX_1(this.mMol.getBondAtom_0(0, bond)) - this.mMol.getAtomX_1(this.mMol.getBondAtom_0(1, bond));
            dy = this.mMol.getAtomY_1(this.mMol.getBondAtom_0(0, bond)) - this.mMol.getAtomY_1(this.mMol.getBondAtom_0(1, bond));
            dz = coordsAre3D?this.mMol.getAtomZ_0(this.mMol.getBondAtom_0(0, bond)) - this.mMol.getAtomZ_0(this.mMol.getBondAtom_0(1, bond)):0;
            avbl += $wnd.Math.sqrt(dx * dx + dy * dy + dz * dz);
          }
          avbl /= this.mMol.getAllBonds_0();
          f = targetAVBL / avbl;
          for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
            this.mMol.setAtomX_0(atom, this.mMol.getAtomX_1(atom) * f + xOffset);
            this.mMol.setAtomY_0(atom, this.mMol.getAtomY_1(atom) * f + yOffset);
            if (coordsAre3D)
              this.mMol.setAtomZ_0(atom, this.mMol.getAtomZ_0(atom) * f + zOffset);
          }
        }
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        e.printStackTrace();
        (jl.$clinit_System() , jl.err).println('Faulty id-coordinates:' + e.toString_0() + ' ' + jl.$create_7(idcode) + ' ' + jl.$create_7(coordinates));
        coordinates = null;
        coordsAre3D = false;
      }
       else 
        throw toJs($e0);
    }
  }
  coords2DAvailable = jsNotEquals(coordinates, null) && !coordsAre3D;
  if (coords2DAvailable || this.ensure2DCoordinates()) {
    this.mMol.ensureHelperArrays_0(3);
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
      if (this.mMol.getBondOrder_0(bond) == 2 && !this.mMol.isSmallRingBond_0(bond) && this.mMol.getBondParity_0(bond) == 0)
        this.mMol.setBondParityUnknownOrNone_0(bond);
  }
  if (!coords2DAvailable && this.ensure2DCoordinates()) {
    this.mMol.setParitiesValid_0(0);
    try {
      this.inventCoordinates_0(this.mMol);
      coords2DAvailable = true;
    }
     catch ($e1) {
      $e1 = toJava($e1);
      if (instanceOf($e1, 11)) {
        e = $e1;
        e.printStackTrace();
        (jl.$clinit_System() , jl.err).println('2D-coordinate creation failed:' + e.toString_0() + ' ' + jl.$create_7(idcode));
      }
       else 
        throw toJs($e1);
    }
  }
  if (coords2DAvailable) {
    this.mMol.setStereoBondsFromParity_0();
    this.mMol.setUnknownParitiesToExplicitlyUnknown_0();
  }
   else if (!coordsAre3D) {
    this.mMol.setParitiesValid_0(0);
  }
}
;
_.mIDCodeBitsAvail = 0;
_.mIDCodeBufferIndex = 0;
_.mIDCodeTempData = 0;
cggl.Lcom_actelion_research_chem_IDCodeParserWithoutCoordinateInvention_2_classLit = createForClass('com.actelion.research.chem', 'IDCodeParserWithoutCoordinateInvention', 147, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_IDCodeParser = function $clinit_IDCodeParser(){
  carc.$clinit_IDCodeParser = emptyMethod;
  carc.$clinit_IDCodeParserWithoutCoordinateInvention();
}
;
carc.IDCodeParser = function IDCodeParser(ensure2DCoordinates){
  carc.$clinit_IDCodeParser();
  carc.IDCodeParserWithoutCoordinateInvention.call(this);
  this.$init_22();
  this.mEnsure2DCoordinates = ensure2DCoordinates;
}
;
defineClass(45, 147, {1:1}, carc.IDCodeParser);
_.$init_22 = function $init_22(){
}
;
_.ensure2DCoordinates = function ensure2DCoordinates_1(){
  return this.mEnsure2DCoordinates;
}
;
_.inventCoordinates_0 = function inventCoordinates_0(mol){
  var inventor;
  inventor = new carcc2.CoordinateInventor;
  inventor.setRandomSeed(78187493520);
  inventor.invent(mol);
}
;
_.mEnsure2DCoordinates = false;
cggl.Lcom_actelion_research_chem_IDCodeParser_2_classLit = createForClass('com.actelion.research.chem', 'IDCodeParser', 45, cggl.Lcom_actelion_research_chem_IDCodeParserWithoutCoordinateInvention_2_classLit);
carc.$clinit_Isotope = function $clinit_Isotope(){
  carc.$clinit_Isotope = emptyMethod;
  jl.$clinit_Object();
}
;
carc.Isotope = function Isotope(neutrones, absoluteMass, percentage){
  carc.$clinit_Isotope();
  Object_0.call(this);
  this.$init_23();
  this.neutrones = neutrones;
  this.absoluteMass = absoluteMass;
  this.percentage = percentage;
}
;
defineClass(3, 1, {3:1, 1:1}, carc.Isotope);
_.$init_23 = function $init_23(){
}
;
_.absoluteMass = 0;
_.neutrones = 0;
_.percentage = 0;
cggl.Lcom_actelion_research_chem_Isotope_2_classLit = createForClass('com.actelion.research.chem', 'Isotope', 3, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_IsotopeHelper = function $clinit_IsotopeHelper(){
  carc.$clinit_IsotopeHelper = emptyMethod;
  jl.$clinit_Object();
  carc.sIsotope = stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 2), {4:1, 1:1, 8:1}, 10, 0, [null, stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(0, 1.007825032, 100), new carc.Isotope(1, 2.014101778, 0.015), new carc.Isotope(2, 3.016049268, 0), new carc.Isotope(3, 4.027834627, 0), new carc.Isotope(4, 5.039542911, 0), new carc.Isotope(5, 6.044942608, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(1, 3.01602931, 1.0E-4), new carc.Isotope(2, 4.00260325, 100), new carc.Isotope(3, 5.012223628, 0), new carc.Isotope(4, 6.018888072, 0), new carc.Isotope(5, 7.028030527, 0), new carc.Isotope(6, 8.033921838, 0), new carc.Isotope(7, 9.043820323, 0), new carc.Isotope(8, 10.052399713, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(1, 4.027182329, 0), new carc.Isotope(2, 5.012537796, 0), new carc.Isotope(3, 6.015122281, 8.1081), new carc.Isotope(4, 7.016004049, 100), new carc.Isotope(5, 8.02248667, 0), new carc.Isotope(6, 9.026789122, 0), new carc.Isotope(7, 10.035480884, 0), new carc.Isotope(8, 11.043796166, 0), new carc.Isotope(9, 12.05378, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(1, 5.04079, 0), new carc.Isotope(2, 6.019725804, 0), new carc.Isotope(3, 7.016929246, 0), new carc.Isotope(4, 8.005305094, 0), new carc.Isotope(5, 9.012182135, 100), new carc.Isotope(6, 10.01353372, 0), new carc.Isotope(7, 11.021657653, 0), new carc.Isotope(8, 12.026920631, 0), new carc.Isotope(9, 13.036133834, 0), new carc.Isotope(10, 14.042815522, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(2, 7.029917389, 0), new carc.Isotope(3, 8.024606713, 0), new carc.Isotope(4, 9.013328806, 0), new carc.Isotope(5, 10.012937027, 24.8439), new carc.Isotope(6, 11.009305466, 100), new carc.Isotope(7, 12.014352109, 0), new carc.Isotope(8, 13.017780267, 0), new carc.Isotope(9, 14.025404064, 0), new carc.Isotope(10, 15.031097291, 0), new carc.Isotope(11, 16.039808836, 0), new carc.Isotope(12, 17.046931399, 0), new carc.Isotope(13, 18.05617, 0), new carc.Isotope(14, 19.06373, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(2, 8.037675026, 0), new carc.Isotope(3, 9.031040087, 0), new carc.Isotope(4, 10.01685311, 0), new carc.Isotope(5, 11.011433818, 0), new carc.Isotope(6, 12, 100), new carc.Isotope(7, 13.003354838, 1.1122), new carc.Isotope(8, 14.003241988, 0), new carc.Isotope(9, 15.010599258, 0), new carc.Isotope(10, 16.014701243, 0), new carc.Isotope(11, 17.022583712, 0), new carc.Isotope(12, 18.026757058, 0), new carc.Isotope(13, 19.035248094, 0), new carc.Isotope(14, 20.040322395, 0), new carc.Isotope(15, 21.04934, 0), new carc.Isotope(16, 22.05645, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(3, 10.042618, 0), new carc.Isotope(4, 11.026796226, 0), new carc.Isotope(5, 12.018613202, 0), new carc.Isotope(6, 13.005738584, 0), new carc.Isotope(7, 14.003074005, 100), new carc.Isotope(8, 15.000108898, 0.3673), new carc.Isotope(9, 16.006101417, 0), new carc.Isotope(10, 17.008449673, 0), new carc.Isotope(11, 18.014081827, 0), new carc.Isotope(12, 19.017026896, 0), new carc.Isotope(13, 20.023367295, 0), new carc.Isotope(14, 21.027087574, 0), new carc.Isotope(15, 22.034440259, 0), new carc.Isotope(16, 23.04051, 0), new carc.Isotope(17, 24.0505, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(4, 12.034404776, 0), new carc.Isotope(5, 13.0248104, 0), new carc.Isotope(6, 14.008595285, 0), new carc.Isotope(7, 15.003065386, 0), new carc.Isotope(8, 15.994914622, 100), new carc.Isotope(9, 16.999131501, 0.0381), new carc.Isotope(10, 17.999160419, 0.2005), new carc.Isotope(11, 19.00357873, 0), new carc.Isotope(12, 20.00407615, 0), new carc.Isotope(13, 21.008654631, 0), new carc.Isotope(14, 22.009967157, 0), new carc.Isotope(15, 23.015691325, 0), new carc.Isotope(16, 24.020369922, 0), new carc.Isotope(17, 25.02914, 0), new carc.Isotope(18, 26.03775, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(5, 14.03608, 0), new carc.Isotope(6, 15.018010856, 0), new carc.Isotope(7, 16.01146573, 0), new carc.Isotope(8, 17.002095238, 0), new carc.Isotope(9, 18.000937667, 0), new carc.Isotope(10, 18.998403205, 100), new carc.Isotope(11, 19.999981324, 0), new carc.Isotope(12, 20.999948921, 0), new carc.Isotope(13, 22.00299925, 0), new carc.Isotope(14, 23.003574385, 0), new carc.Isotope(15, 24.008099371, 0), new carc.Isotope(16, 25.012094963, 0), new carc.Isotope(17, 26.019633157, 0), new carc.Isotope(18, 27.026892316, 0), new carc.Isotope(19, 28.03567, 0), new carc.Isotope(20, 29.04326, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(6, 16.025756907, 0), new carc.Isotope(7, 17.017697565, 0), new carc.Isotope(8, 18.005697066, 0), new carc.Isotope(9, 19.001879839, 0), new carc.Isotope(10, 19.992440176, 100), new carc.Isotope(11, 20.993846744, 0.2983), new carc.Isotope(12, 21.99138551, 10.1867), new carc.Isotope(13, 22.994467337, 0), new carc.Isotope(14, 23.993615074, 0), new carc.Isotope(15, 24.997789899, 0), new carc.Isotope(16, 26.000461498, 0), new carc.Isotope(17, 27.0076152, 0), new carc.Isotope(18, 28.012108072, 0), new carc.Isotope(19, 29.019345902, 0), new carc.Isotope(20, 30.023872, 0), new carc.Isotope(21, 31.03311, 0), new carc.Isotope(22, 32.03991, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(7, 18.02718, 0), new carc.Isotope(8, 19.01387945, 0), new carc.Isotope(9, 20.00734826, 0), new carc.Isotope(10, 20.997655099, 0), new carc.Isotope(11, 21.994436782, 0), new carc.Isotope(12, 22.989769675, 100), new carc.Isotope(13, 23.990963332, 0), new carc.Isotope(14, 24.989954352, 0), new carc.Isotope(15, 25.992589898, 0), new carc.Isotope(16, 26.994008702, 0), new carc.Isotope(17, 27.99889041, 0), new carc.Isotope(18, 29.002811301, 0), new carc.Isotope(19, 30.009226487, 0), new carc.Isotope(20, 31.013595108, 0), new carc.Isotope(21, 32.019649792, 0), new carc.Isotope(22, 33.027386, 0), new carc.Isotope(23, 34.0349, 0), new carc.Isotope(24, 35.04418, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(8, 20.018862744, 0), new carc.Isotope(9, 21.011714174, 0), new carc.Isotope(10, 21.999574055, 0), new carc.Isotope(11, 22.99412485, 0), new carc.Isotope(12, 23.985041898, 100), new carc.Isotope(13, 24.985837023, 12.6598), new carc.Isotope(14, 25.98259304, 13.938), new carc.Isotope(15, 26.984340742, 0), new carc.Isotope(16, 27.983876703, 0), new carc.Isotope(17, 28.988554743, 0), new carc.Isotope(18, 29.990464529, 0), new carc.Isotope(19, 30.996548459, 0), new carc.Isotope(20, 31.999145889, 0), new carc.Isotope(21, 33.005586975, 0), new carc.Isotope(22, 34.00907244, 0), new carc.Isotope(23, 35.018669, 0), new carc.Isotope(24, 36.02245, 0), new carc.Isotope(25, 37.03124, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(8, 21.02804, 0), new carc.Isotope(9, 22.01952, 0), new carc.Isotope(10, 23.0072649, 0), new carc.Isotope(11, 23.999940911, 0), new carc.Isotope(12, 24.990428555, 0), new carc.Isotope(13, 25.986891659, 0), new carc.Isotope(14, 26.981538441, 100), new carc.Isotope(15, 27.981910184, 0), new carc.Isotope(16, 28.980444848, 0), new carc.Isotope(17, 29.982960304, 0), new carc.Isotope(18, 30.983946023, 0), new carc.Isotope(19, 31.988124379, 0), new carc.Isotope(20, 32.990869587, 0), new carc.Isotope(21, 33.996927255, 0), new carc.Isotope(22, 34.99993765, 0), new carc.Isotope(23, 36.006351501, 0), new carc.Isotope(24, 37.01031, 0), new carc.Isotope(25, 38.0169, 0), new carc.Isotope(26, 39.0219, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(8, 22.03453, 0), new carc.Isotope(9, 23.02552, 0), new carc.Isotope(10, 24.011545711, 0), new carc.Isotope(11, 25.00410664, 0), new carc.Isotope(12, 25.992329935, 0), new carc.Isotope(13, 26.986704764, 0), new carc.Isotope(14, 27.976926533, 100), new carc.Isotope(15, 28.976494719, 5.0634), new carc.Isotope(16, 29.973770218, 3.3612), new carc.Isotope(17, 30.975363275, 0), new carc.Isotope(18, 31.974148129, 0), new carc.Isotope(19, 32.97800052, 0), new carc.Isotope(20, 33.978575745, 0), new carc.Isotope(21, 34.984584158, 0), new carc.Isotope(22, 35.986687363, 0), new carc.Isotope(23, 36.99299599, 0), new carc.Isotope(24, 37.99598, 0), new carc.Isotope(25, 39.0023, 0), new carc.Isotope(26, 40.0058, 0), new carc.Isotope(27, 41.0127, 0), new carc.Isotope(28, 42.0161, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(9, 24.03435, 0), new carc.Isotope(10, 25.02026, 0), new carc.Isotope(11, 26.01178, 0), new carc.Isotope(12, 26.999191645, 0), new carc.Isotope(13, 27.99231233, 0), new carc.Isotope(14, 28.981801376, 0), new carc.Isotope(15, 29.978313807, 0), new carc.Isotope(16, 30.973761512, 100), new carc.Isotope(17, 31.973907163, 0), new carc.Isotope(18, 32.971725281, 0), new carc.Isotope(19, 33.973636381, 0), new carc.Isotope(20, 34.973314249, 0), new carc.Isotope(21, 35.978259824, 0), new carc.Isotope(22, 36.979608338, 0), new carc.Isotope(23, 37.98447, 0), new carc.Isotope(24, 38.98642, 0), new carc.Isotope(25, 39.99105, 0), new carc.Isotope(26, 40.9948, 0), new carc.Isotope(27, 42.00009, 0), new carc.Isotope(28, 43.00331, 0), new carc.Isotope(29, 44.00988, 0), new carc.Isotope(30, 45.01514, 0), new carc.Isotope(31, 46.02383, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(10, 26.02788, 0), new carc.Isotope(11, 27.018795, 0), new carc.Isotope(12, 28.004372661, 0), new carc.Isotope(13, 28.996608805, 0), new carc.Isotope(14, 29.984902954, 0), new carc.Isotope(15, 30.979554421, 0), new carc.Isotope(16, 31.97207069, 100), new carc.Isotope(17, 32.971458497, 0.7893), new carc.Isotope(18, 33.967866831, 4.4306), new carc.Isotope(19, 34.96903214, 0), new carc.Isotope(20, 35.96708088, 0.022), new carc.Isotope(21, 36.971125716, 0), new carc.Isotope(22, 37.971163443, 0), new carc.Isotope(23, 38.975135275, 0), new carc.Isotope(24, 39.97547, 0), new carc.Isotope(25, 40.98003, 0), new carc.Isotope(26, 41.98149, 0), new carc.Isotope(27, 42.9866, 0), new carc.Isotope(28, 43.98832, 0), new carc.Isotope(29, 44.99482, 0), new carc.Isotope(30, 45.99957, 0), new carc.Isotope(31, 47.00762, 0), new carc.Isotope(32, 48.01299, 0), new carc.Isotope(33, 49.02201, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(11, 28.02851, 0), new carc.Isotope(12, 29.01411, 0), new carc.Isotope(13, 30.00477, 0), new carc.Isotope(14, 30.992416014, 0), new carc.Isotope(15, 31.985688908, 0), new carc.Isotope(16, 32.977451798, 0), new carc.Isotope(17, 33.973761967, 0), new carc.Isotope(18, 34.968852707, 100), new carc.Isotope(19, 35.968306945, 0), new carc.Isotope(20, 36.9659026, 31.978), new carc.Isotope(21, 37.96801055, 0), new carc.Isotope(22, 38.968007677, 0), new carc.Isotope(23, 39.970415555, 0), new carc.Isotope(24, 40.970650212, 0), new carc.Isotope(25, 41.973174994, 0), new carc.Isotope(26, 42.974203385, 0), new carc.Isotope(27, 43.978538712, 0), new carc.Isotope(28, 44.9797, 0), new carc.Isotope(29, 45.98412, 0), new carc.Isotope(30, 46.98795, 0), new carc.Isotope(31, 47.99485, 0), new carc.Isotope(32, 48.99989, 0), new carc.Isotope(33, 50.00773, 0), new carc.Isotope(34, 51.01353, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(12, 30.02156, 0), new carc.Isotope(13, 31.012126, 0), new carc.Isotope(14, 31.99766066, 0), new carc.Isotope(15, 32.989928719, 0), new carc.Isotope(16, 33.980270118, 0), new carc.Isotope(17, 34.975256726, 0), new carc.Isotope(18, 35.967546282, 0.338), new carc.Isotope(19, 36.966775912, 0), new carc.Isotope(20, 37.962732161, 0.063), new carc.Isotope(21, 38.964313413, 0), new carc.Isotope(22, 39.962383123, 100), new carc.Isotope(23, 40.964500828, 0), new carc.Isotope(24, 41.963046386, 0), new carc.Isotope(25, 42.965670701, 0), new carc.Isotope(26, 43.965365269, 0), new carc.Isotope(27, 44.968094979, 0), new carc.Isotope(28, 45.968093467, 0), new carc.Isotope(29, 46.972186238, 0), new carc.Isotope(30, 47.97507, 0), new carc.Isotope(31, 48.98218, 0), new carc.Isotope(32, 49.98594, 0), new carc.Isotope(33, 50.99324, 0), new carc.Isotope(34, 51.99817, 0), new carc.Isotope(35, 53.006227, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(13, 32.02192, 0), new carc.Isotope(14, 33.00726, 0), new carc.Isotope(15, 33.99841, 0), new carc.Isotope(16, 34.988011615, 0), new carc.Isotope(17, 35.981293405, 0), new carc.Isotope(18, 36.973376915, 0), new carc.Isotope(19, 37.969080107, 0), new carc.Isotope(20, 38.963706861, 100), new carc.Isotope(21, 39.963998672, 0.013), new carc.Isotope(22, 40.961825972, 7.217), new carc.Isotope(23, 41.962403059, 0), new carc.Isotope(24, 42.960715746, 0), new carc.Isotope(25, 43.961556146, 0), new carc.Isotope(26, 44.960699658, 0), new carc.Isotope(27, 45.961976203, 0), new carc.Isotope(28, 46.961677807, 0), new carc.Isotope(29, 47.965512946, 0), new carc.Isotope(30, 48.967450084, 0), new carc.Isotope(31, 49.972782832, 0), new carc.Isotope(32, 50.97638, 0), new carc.Isotope(33, 51.98261, 0), new carc.Isotope(34, 52.98712, 0), new carc.Isotope(35, 53.99399, 0), new carc.Isotope(36, 54.999388, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(14, 34.01412, 0), new carc.Isotope(15, 35.004765, 0), new carc.Isotope(16, 35.993087234, 0), new carc.Isotope(17, 36.985871505, 0), new carc.Isotope(18, 37.976318637, 0), new carc.Isotope(19, 38.970717729, 0), new carc.Isotope(20, 39.962591155, 100), new carc.Isotope(21, 40.962278349, 0), new carc.Isotope(22, 41.958618337, 0.6674), new carc.Isotope(23, 42.958766833, 0.1393), new carc.Isotope(24, 43.955481094, 2.1518), new carc.Isotope(25, 44.956185938, 0), new carc.Isotope(26, 45.953692759, 0.0041), new carc.Isotope(27, 46.954546459, 0), new carc.Isotope(28, 47.952533512, 0.1929), new carc.Isotope(29, 48.955673302, 0), new carc.Isotope(30, 49.957518286, 0), new carc.Isotope(31, 50.961474238, 0), new carc.Isotope(32, 51.9651, 0), new carc.Isotope(33, 52.97005, 0), new carc.Isotope(34, 53.97468, 0), new carc.Isotope(35, 54.98055, 0), new carc.Isotope(36, 55.98579, 0), new carc.Isotope(37, 56.992356, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(15, 36.01492, 0), new carc.Isotope(16, 37.00305, 0), new carc.Isotope(17, 37.9947, 0), new carc.Isotope(18, 38.984790009, 0), new carc.Isotope(19, 39.977964014, 0), new carc.Isotope(20, 40.969251316, 0), new carc.Isotope(21, 41.965516761, 0), new carc.Isotope(22, 42.96115098, 0), new carc.Isotope(23, 43.959403048, 0), new carc.Isotope(24, 44.955910243, 100), new carc.Isotope(25, 45.95517025, 0), new carc.Isotope(26, 46.952408027, 0), new carc.Isotope(27, 47.952234991, 0), new carc.Isotope(28, 48.950024065, 0), new carc.Isotope(29, 49.952187008, 0), new carc.Isotope(30, 50.9536027, 0), new carc.Isotope(31, 51.95665, 0), new carc.Isotope(32, 52.95817, 0), new carc.Isotope(33, 53.963, 0), new carc.Isotope(34, 54.9694, 0), new carc.Isotope(35, 55.97266, 0), new carc.Isotope(36, 56.97704, 0), new carc.Isotope(37, 57.98307, 0), new carc.Isotope(38, 58.988041, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(16, 38.00977, 0), new carc.Isotope(17, 39.001323, 0), new carc.Isotope(18, 39.990498907, 0), new carc.Isotope(19, 40.983131, 0), new carc.Isotope(20, 41.973031622, 0), new carc.Isotope(21, 42.968523342, 0), new carc.Isotope(22, 43.959690235, 0), new carc.Isotope(23, 44.958124349, 0), new carc.Isotope(24, 45.952629491, 10.8401), new carc.Isotope(25, 46.951763792, 9.8916), new carc.Isotope(26, 47.947947053, 100), new carc.Isotope(27, 48.947870789, 7.4526), new carc.Isotope(28, 49.944792069, 7.3171), new carc.Isotope(29, 50.946616017, 0), new carc.Isotope(30, 51.946898175, 0), new carc.Isotope(31, 52.949731709, 0), new carc.Isotope(32, 53.95087, 0), new carc.Isotope(33, 54.95512, 0), new carc.Isotope(34, 55.95799, 0), new carc.Isotope(35, 56.9643, 0), new carc.Isotope(36, 57.96611, 0), new carc.Isotope(37, 58.97196, 0), new carc.Isotope(38, 59.97564, 0), new carc.Isotope(39, 60.982018, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(17, 40.01109, 0), new carc.Isotope(18, 40.99974, 0), new carc.Isotope(19, 41.99123, 0), new carc.Isotope(20, 42.98065, 0), new carc.Isotope(21, 43.9744, 0), new carc.Isotope(22, 44.965782286, 0), new carc.Isotope(23, 45.960199491, 0), new carc.Isotope(24, 46.954906918, 0), new carc.Isotope(25, 47.95225448, 0), new carc.Isotope(26, 48.948516914, 0), new carc.Isotope(27, 49.947162792, 0.251), new carc.Isotope(28, 50.943963675, 100), new carc.Isotope(29, 51.944779658, 0), new carc.Isotope(30, 52.944342517, 0), new carc.Isotope(31, 53.946444381, 0), new carc.Isotope(32, 54.947238194, 0), new carc.Isotope(33, 55.95036, 0), new carc.Isotope(34, 56.95236, 0), new carc.Isotope(35, 57.95665, 0), new carc.Isotope(36, 58.9593, 0), new carc.Isotope(37, 59.9645, 0), new carc.Isotope(38, 60.96741, 0), new carc.Isotope(39, 61.97314, 0), new carc.Isotope(40, 62.97675, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(18, 42.00643, 0), new carc.Isotope(19, 42.997707, 0), new carc.Isotope(20, 43.98547, 0), new carc.Isotope(21, 44.97916, 0), new carc.Isotope(22, 45.968361649, 0), new carc.Isotope(23, 46.962906512, 0), new carc.Isotope(24, 47.954035861, 0), new carc.Isotope(25, 48.951341135, 0), new carc.Isotope(26, 49.946049607, 5.1915), new carc.Isotope(27, 50.944771767, 0), new carc.Isotope(28, 51.940511904, 100), new carc.Isotope(29, 52.940653781, 11.3379), new carc.Isotope(30, 53.938884921, 2.8166), new carc.Isotope(31, 54.940844164, 0), new carc.Isotope(32, 55.940645238, 0), new carc.Isotope(33, 56.9437538, 0), new carc.Isotope(34, 57.94425, 0), new carc.Isotope(35, 58.94863, 0), new carc.Isotope(36, 59.94973, 0), new carc.Isotope(37, 60.95409, 0), new carc.Isotope(38, 61.9558, 0), new carc.Isotope(39, 62.96186, 0), new carc.Isotope(40, 63.9642, 0), new carc.Isotope(41, 64.97037, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(19, 44.00687, 0), new carc.Isotope(20, 44.99451, 0), new carc.Isotope(21, 45.98672, 0), new carc.Isotope(22, 46.9761, 0), new carc.Isotope(23, 47.96887, 0), new carc.Isotope(24, 48.959623415, 0), new carc.Isotope(25, 49.95424396, 0), new carc.Isotope(26, 50.948215487, 0), new carc.Isotope(27, 51.945570079, 0), new carc.Isotope(28, 52.941294702, 0), new carc.Isotope(29, 53.940363247, 0), new carc.Isotope(30, 54.938049636, 100), new carc.Isotope(31, 55.938909366, 0), new carc.Isotope(32, 56.938287458, 0), new carc.Isotope(33, 57.939986451, 0), new carc.Isotope(34, 58.940447166, 0), new carc.Isotope(35, 59.943193998, 0), new carc.Isotope(36, 60.94446, 0), new carc.Isotope(37, 61.94797, 0), new carc.Isotope(38, 62.94981, 0), new carc.Isotope(39, 63.95373, 0), new carc.Isotope(40, 64.9561, 0), new carc.Isotope(41, 65.96082, 0), new carc.Isotope(42, 66.96382, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(19, 45.01456, 0), new carc.Isotope(20, 46.00081, 0), new carc.Isotope(21, 46.99289, 0), new carc.Isotope(22, 47.98056, 0), new carc.Isotope(23, 48.97361, 0), new carc.Isotope(24, 49.962993316, 0), new carc.Isotope(25, 50.956824936, 0), new carc.Isotope(26, 51.948116526, 0), new carc.Isotope(27, 52.945312282, 0), new carc.Isotope(28, 53.939614836, 6.3236), new carc.Isotope(29, 54.938298029, 0), new carc.Isotope(30, 55.934942133, 100), new carc.Isotope(31, 56.935398707, 2.3986), new carc.Isotope(32, 57.933280458, 0.3053), new carc.Isotope(33, 58.934880493, 0), new carc.Isotope(34, 59.934076943, 0), new carc.Isotope(35, 60.936749461, 0), new carc.Isotope(36, 61.936770495, 0), new carc.Isotope(37, 62.940118442, 0), new carc.Isotope(38, 63.94087, 0), new carc.Isotope(39, 64.94494, 0), new carc.Isotope(40, 65.94598, 0), new carc.Isotope(41, 66.95, 0), new carc.Isotope(42, 67.95251, 0), new carc.Isotope(43, 68.9577, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(21, 48.00176, 0), new carc.Isotope(22, 48.98972, 0), new carc.Isotope(23, 49.98154, 0), new carc.Isotope(24, 50.97072, 0), new carc.Isotope(25, 51.96359, 0), new carc.Isotope(26, 52.954224985, 0), new carc.Isotope(27, 53.948464147, 0), new carc.Isotope(28, 54.942003149, 0), new carc.Isotope(29, 55.939843937, 0), new carc.Isotope(30, 56.936296235, 0), new carc.Isotope(31, 57.935757571, 0), new carc.Isotope(32, 58.933200194, 100), new carc.Isotope(33, 59.933822196, 0), new carc.Isotope(34, 60.932479381, 0), new carc.Isotope(35, 61.934054212, 0), new carc.Isotope(36, 62.933615218, 0), new carc.Isotope(37, 63.935813523, 0), new carc.Isotope(38, 64.936484581, 0), new carc.Isotope(39, 65.939825412, 0), new carc.Isotope(40, 66.94061, 0), new carc.Isotope(41, 67.94436, 0), new carc.Isotope(42, 68.9452, 0), new carc.Isotope(43, 69.94981, 0), new carc.Isotope(44, 70.95173, 0), new carc.Isotope(45, 71.95641, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(22, 49.99593, 0), new carc.Isotope(23, 50.98772, 0), new carc.Isotope(24, 51.97568, 0), new carc.Isotope(25, 52.96846, 0), new carc.Isotope(26, 53.957910508, 0), new carc.Isotope(27, 54.951336329, 0), new carc.Isotope(28, 55.942136339, 0), new carc.Isotope(29, 56.939800489, 0), new carc.Isotope(30, 57.935347922, 100), new carc.Isotope(31, 58.934351553, 0), new carc.Isotope(32, 59.930790633, 38.2305), new carc.Isotope(33, 60.931060442, 1.6552), new carc.Isotope(34, 61.928348763, 5.2585), new carc.Isotope(35, 62.929672948, 0), new carc.Isotope(36, 63.927969574, 1.3329), new carc.Isotope(37, 64.930088013, 0), new carc.Isotope(38, 65.929115232, 0), new carc.Isotope(39, 66.931569638, 0), new carc.Isotope(40, 67.931844932, 0), new carc.Isotope(41, 68.935181837, 0), new carc.Isotope(42, 69.93614, 0), new carc.Isotope(43, 70.94, 0), new carc.Isotope(44, 71.9413, 0), new carc.Isotope(45, 72.94608, 0), new carc.Isotope(46, 73.94791, 0), new carc.Isotope(47, 74.95297, 0), new carc.Isotope(48, 75.95533, 0), new carc.Isotope(49, 76.96083, 0), new carc.Isotope(50, 77.9638, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(23, 51.99718, 0), new carc.Isotope(24, 52.98555, 0), new carc.Isotope(25, 53.97671, 0), new carc.Isotope(26, 54.96605, 0), new carc.Isotope(27, 55.95856, 0), new carc.Isotope(28, 56.949215695, 0), new carc.Isotope(29, 57.944540734, 0), new carc.Isotope(30, 58.939504114, 0), new carc.Isotope(31, 59.937368123, 0), new carc.Isotope(32, 60.933462181, 0), new carc.Isotope(33, 61.932587299, 0), new carc.Isotope(34, 62.929601079, 100), new carc.Isotope(35, 63.929767865, 0), new carc.Isotope(36, 64.927793707, 44.571), new carc.Isotope(37, 65.928873041, 0), new carc.Isotope(38, 66.927750294, 0), new carc.Isotope(39, 67.929637875, 0), new carc.Isotope(40, 68.929425281, 0), new carc.Isotope(41, 69.932409287, 0), new carc.Isotope(42, 70.932619818, 0), new carc.Isotope(43, 71.93552, 0), new carc.Isotope(44, 72.93649, 0), new carc.Isotope(45, 73.9402, 0), new carc.Isotope(46, 74.9417, 0), new carc.Isotope(47, 75.94599, 0), new carc.Isotope(48, 76.94795, 0), new carc.Isotope(49, 77.95281, 0), new carc.Isotope(50, 78.95528, 0), new carc.Isotope(51, 79.96189, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(24, 53.99295, 0), new carc.Isotope(25, 54.98398, 0), new carc.Isotope(26, 55.97238, 0), new carc.Isotope(27, 56.96491, 0), new carc.Isotope(28, 57.954596465, 0), new carc.Isotope(29, 58.949267074, 0), new carc.Isotope(30, 59.941832031, 0), new carc.Isotope(31, 60.939513907, 0), new carc.Isotope(32, 61.934334132, 0), new carc.Isotope(33, 62.933215563, 0), new carc.Isotope(34, 63.929146578, 100), new carc.Isotope(35, 64.929245079, 0), new carc.Isotope(36, 65.926036763, 57.4074), new carc.Isotope(37, 66.927130859, 8.4362), new carc.Isotope(38, 67.924847566, 38.6831), new carc.Isotope(39, 68.926553538, 0), new carc.Isotope(40, 69.92532487, 1.2346), new carc.Isotope(41, 70.927727195, 0), new carc.Isotope(42, 71.926861122, 0), new carc.Isotope(43, 72.929779469, 0), new carc.Isotope(44, 73.929458261, 0), new carc.Isotope(45, 74.932937379, 0), new carc.Isotope(46, 75.933394207, 0), new carc.Isotope(47, 76.937085857, 0), new carc.Isotope(48, 77.938569576, 0), new carc.Isotope(49, 78.942095175, 0), new carc.Isotope(50, 79.944414722, 0), new carc.Isotope(51, 80.95048, 0), new carc.Isotope(52, 81.95484, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(25, 55.99491, 0), new carc.Isotope(26, 56.98293, 0), new carc.Isotope(27, 57.97425, 0), new carc.Isotope(28, 58.96337, 0), new carc.Isotope(29, 59.95706, 0), new carc.Isotope(30, 60.94917, 0), new carc.Isotope(31, 61.944179608, 0), new carc.Isotope(32, 62.939141527, 0), new carc.Isotope(33, 63.936838307, 0), new carc.Isotope(34, 64.932739322, 0), new carc.Isotope(35, 65.931592355, 0), new carc.Isotope(36, 66.928204915, 0), new carc.Isotope(37, 67.927983497, 0), new carc.Isotope(38, 68.925580912, 100), new carc.Isotope(39, 69.926027741, 0), new carc.Isotope(40, 70.92470501, 66.389), new carc.Isotope(41, 71.92636935, 0), new carc.Isotope(42, 72.925169832, 0), new carc.Isotope(43, 73.926940999, 0), new carc.Isotope(44, 74.926500645, 0), new carc.Isotope(45, 75.928928262, 0), new carc.Isotope(46, 76.929281189, 0), new carc.Isotope(47, 77.93165595, 0), new carc.Isotope(48, 78.932916371, 0), new carc.Isotope(49, 79.936588154, 0), new carc.Isotope(50, 80.937752955, 0), new carc.Isotope(51, 81.94316, 0), new carc.Isotope(52, 82.94687, 0), new carc.Isotope(53, 83.95234, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(26, 57.99101, 0), new carc.Isotope(27, 58.98175, 0), new carc.Isotope(28, 59.97019, 0), new carc.Isotope(29, 60.96379, 0), new carc.Isotope(30, 61.95465, 0), new carc.Isotope(31, 62.94964, 0), new carc.Isotope(32, 63.941572638, 0), new carc.Isotope(33, 64.939440762, 0), new carc.Isotope(34, 65.933846798, 0), new carc.Isotope(35, 66.932738415, 0), new carc.Isotope(36, 67.928097266, 0), new carc.Isotope(37, 68.927972002, 0), new carc.Isotope(38, 69.924250365, 56.1644), new carc.Isotope(39, 70.924953991, 0), new carc.Isotope(40, 71.922076184, 75.0685), new carc.Isotope(41, 72.923459361, 21.3698), new carc.Isotope(42, 73.921178213, 100), new carc.Isotope(43, 74.922859494, 21.3698), new carc.Isotope(44, 75.921402716, 0), new carc.Isotope(45, 76.923548462, 0), new carc.Isotope(46, 77.922852886, 0), new carc.Isotope(47, 78.92540156, 0), new carc.Isotope(48, 79.925444764, 0), new carc.Isotope(49, 80.928821065, 0), new carc.Isotope(50, 81.929550326, 0), new carc.Isotope(51, 82.93451, 0), new carc.Isotope(52, 83.93731, 0), new carc.Isotope(53, 84.94269, 0), new carc.Isotope(54, 85.94627, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(27, 59.99313, 0), new carc.Isotope(28, 60.98062, 0), new carc.Isotope(29, 61.9732, 0), new carc.Isotope(30, 62.96369, 0), new carc.Isotope(31, 63.957572, 0), new carc.Isotope(32, 64.949484, 0), new carc.Isotope(33, 65.944099147, 0), new carc.Isotope(34, 66.939190417, 0), new carc.Isotope(35, 67.936792976, 0), new carc.Isotope(36, 68.932280154, 0), new carc.Isotope(37, 69.930927811, 0), new carc.Isotope(38, 70.927114724, 0), new carc.Isotope(39, 71.926752647, 0), new carc.Isotope(40, 72.923825288, 0), new carc.Isotope(41, 73.923929076, 0), new carc.Isotope(42, 74.921596417, 100), new carc.Isotope(43, 75.922393933, 0), new carc.Isotope(44, 76.920647703, 0), new carc.Isotope(45, 77.921828577, 0), new carc.Isotope(46, 78.920948498, 0), new carc.Isotope(47, 79.922578162, 0), new carc.Isotope(48, 80.922132884, 0), new carc.Isotope(49, 81.924504668, 0), new carc.Isotope(50, 82.924980625, 0), new carc.Isotope(51, 83.92906, 0), new carc.Isotope(52, 84.93181, 0), new carc.Isotope(53, 85.93623, 0), new carc.Isotope(54, 86.93958, 0), new carc.Isotope(55, 87.94456, 0), new carc.Isotope(56, 88.94923, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(31, 64.96466, 0), new carc.Isotope(32, 65.95521, 0), new carc.Isotope(33, 66.95009, 0), new carc.Isotope(34, 67.94187, 0), new carc.Isotope(35, 68.939562155, 0), new carc.Isotope(36, 69.933504, 0), new carc.Isotope(37, 70.931868378, 0), new carc.Isotope(38, 71.927112313, 0), new carc.Isotope(39, 72.9267668, 0), new carc.Isotope(40, 73.922476561, 1.8145), new carc.Isotope(41, 74.922523571, 0), new carc.Isotope(42, 75.919214107, 18.1451), new carc.Isotope(43, 76.91991461, 15.3226), new carc.Isotope(44, 77.917309522, 47.379), new carc.Isotope(45, 78.918499802, 0), new carc.Isotope(46, 79.916521828, 100), new carc.Isotope(47, 80.917992931, 0), new carc.Isotope(48, 81.9167, 18.9516), new carc.Isotope(49, 82.919119072, 0), new carc.Isotope(50, 83.918464523, 0), new carc.Isotope(51, 84.922244678, 0), new carc.Isotope(52, 85.924271165, 0), new carc.Isotope(53, 86.928520749, 0), new carc.Isotope(54, 87.931423982, 0), new carc.Isotope(55, 88.93602, 0), new carc.Isotope(56, 89.93942, 0), new carc.Isotope(57, 90.94537, 0), new carc.Isotope(58, 91.94933, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(32, 66.96479, 0), new carc.Isotope(33, 67.958248, 0), new carc.Isotope(34, 68.950178, 0), new carc.Isotope(35, 69.944208, 0), new carc.Isotope(36, 70.939246, 0), new carc.Isotope(37, 71.936496876, 0), new carc.Isotope(38, 72.931794889, 0), new carc.Isotope(39, 73.929891152, 0), new carc.Isotope(40, 74.92577641, 0), new carc.Isotope(41, 75.924541974, 0), new carc.Isotope(42, 76.921380123, 0), new carc.Isotope(43, 77.92114613, 0), new carc.Isotope(44, 78.918337647, 100), new carc.Isotope(45, 79.918529952, 0), new carc.Isotope(46, 80.91629106, 97.2776), new carc.Isotope(47, 81.916804666, 0), new carc.Isotope(48, 82.915180219, 0), new carc.Isotope(49, 83.916503685, 0), new carc.Isotope(50, 84.915608027, 0), new carc.Isotope(51, 85.918797162, 0), new carc.Isotope(52, 86.920710713, 0), new carc.Isotope(53, 87.924065908, 0), new carc.Isotope(54, 88.92638726, 0), new carc.Isotope(55, 89.930634988, 0), new carc.Isotope(56, 90.9339653, 0), new carc.Isotope(57, 91.939255258, 0), new carc.Isotope(58, 92.9431, 0), new carc.Isotope(59, 93.94868, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(33, 68.96532, 0), new carc.Isotope(34, 69.95601, 0), new carc.Isotope(35, 70.95051, 0), new carc.Isotope(36, 71.94190754, 0), new carc.Isotope(37, 72.938931115, 0), new carc.Isotope(38, 73.933258225, 0), new carc.Isotope(39, 74.931033794, 0), new carc.Isotope(40, 75.925948304, 0), new carc.Isotope(41, 76.92466788, 0), new carc.Isotope(42, 77.920386271, 85.910614), new carc.Isotope(43, 78.920082992, 0), new carc.Isotope(44, 79.91637804, 0.614), new carc.Isotope(45, 80.916592419, 0), new carc.Isotope(46, 81.913484601, 3.9474), new carc.Isotope(47, 82.914135952, 20.3509), new carc.Isotope(48, 83.911506627, 100), new carc.Isotope(49, 84.912526954, 0), new carc.Isotope(50, 85.910610313, 30.3509), new carc.Isotope(51, 86.913354251, 0), new carc.Isotope(52, 87.914446951, 0), new carc.Isotope(53, 88.917632505, 0), new carc.Isotope(54, 89.919523803, 0), new carc.Isotope(55, 90.923442418, 0), new carc.Isotope(56, 91.926152752, 0), new carc.Isotope(57, 92.931265246, 0), new carc.Isotope(58, 93.934362, 0), new carc.Isotope(59, 94.93984, 0), new carc.Isotope(60, 95.94307, 0), new carc.Isotope(61, 96.94856, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(34, 70.96532, 0), new carc.Isotope(35, 71.95908, 0), new carc.Isotope(36, 72.950366, 0), new carc.Isotope(37, 73.944470376, 0), new carc.Isotope(38, 74.938569199, 0), new carc.Isotope(39, 75.935071448, 0), new carc.Isotope(40, 76.930406599, 0), new carc.Isotope(41, 77.928141485, 0), new carc.Isotope(42, 78.923996719, 0), new carc.Isotope(43, 79.922519322, 0), new carc.Isotope(44, 80.918994165, 0), new carc.Isotope(45, 81.918207691, 0), new carc.Isotope(46, 82.915111951, 0), new carc.Isotope(47, 83.914384676, 0), new carc.Isotope(48, 84.911789341, 100), new carc.Isotope(49, 85.91116708, 0), new carc.Isotope(50, 86.909183465, 38.571), new carc.Isotope(51, 87.911318556, 0), new carc.Isotope(52, 88.912279939, 0), new carc.Isotope(53, 89.914808941, 0), new carc.Isotope(54, 90.91653416, 0), new carc.Isotope(55, 91.919725442, 0), new carc.Isotope(56, 92.922032765, 0), new carc.Isotope(57, 93.926407326, 0), new carc.Isotope(58, 94.92931926, 0), new carc.Isotope(59, 95.934283962, 0), new carc.Isotope(60, 96.937342863, 0), new carc.Isotope(61, 97.941703557, 0), new carc.Isotope(62, 98.945420616, 0), new carc.Isotope(63, 99.94987, 0), new carc.Isotope(64, 100.953195994, 0), new carc.Isotope(65, 101.95921, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(35, 72.96597, 0), new carc.Isotope(36, 73.95631, 0), new carc.Isotope(37, 74.94992, 0), new carc.Isotope(38, 75.94161, 0), new carc.Isotope(39, 76.937761511, 0), new carc.Isotope(40, 77.932179362, 0), new carc.Isotope(41, 78.929707076, 0), new carc.Isotope(42, 79.924524588, 0), new carc.Isotope(43, 80.923213095, 0), new carc.Isotope(44, 81.918401258, 0), new carc.Isotope(45, 82.917555029, 0), new carc.Isotope(46, 83.913424778, 0.6781), new carc.Isotope(47, 84.912932689, 0), new carc.Isotope(48, 85.909262351, 11.9399), new carc.Isotope(49, 86.908879316, 8.4766), new carc.Isotope(50, 87.905614339, 100), new carc.Isotope(51, 88.907452906, 0), new carc.Isotope(52, 89.907737596, 0), new carc.Isotope(53, 90.910209845, 0), new carc.Isotope(54, 91.911029895, 0), new carc.Isotope(55, 92.91402241, 0), new carc.Isotope(56, 93.915359856, 0), new carc.Isotope(57, 94.919358213, 0), new carc.Isotope(58, 95.921680473, 0), new carc.Isotope(59, 96.926148757, 0), new carc.Isotope(60, 97.928471177, 0), new carc.Isotope(61, 98.933315038, 0), new carc.Isotope(62, 99.935351729, 0), new carc.Isotope(63, 100.940517434, 0), new carc.Isotope(64, 101.943018795, 0), new carc.Isotope(65, 102.94895, 0), new carc.Isotope(66, 103.95233, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(38, 76.94962, 0), new carc.Isotope(39, 77.9435, 0), new carc.Isotope(40, 78.937350712, 0), new carc.Isotope(41, 79.931982402, 0), new carc.Isotope(42, 80.929128719, 0), new carc.Isotope(43, 81.926792071, 0), new carc.Isotope(44, 82.922352572, 0), new carc.Isotope(45, 83.920387768, 0), new carc.Isotope(46, 84.916427076, 0), new carc.Isotope(47, 85.914887724, 0), new carc.Isotope(48, 86.910877833, 0), new carc.Isotope(49, 87.909503361, 0), new carc.Isotope(50, 88.905847902, 100), new carc.Isotope(51, 89.907151443, 0), new carc.Isotope(52, 90.907303415, 0), new carc.Isotope(53, 91.908946832, 0), new carc.Isotope(54, 92.909581582, 0), new carc.Isotope(55, 93.911594008, 0), new carc.Isotope(56, 94.912823709, 0), new carc.Isotope(57, 95.915897787, 0), new carc.Isotope(58, 96.918131017, 0), new carc.Isotope(59, 97.922219525, 0), new carc.Isotope(60, 98.924634736, 0), new carc.Isotope(61, 99.927756402, 0), new carc.Isotope(62, 100.930313395, 0), new carc.Isotope(63, 101.933555501, 0), new carc.Isotope(64, 102.93694, 0), new carc.Isotope(65, 103.94145, 0), new carc.Isotope(66, 104.94509, 0), new carc.Isotope(67, 105.95022, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(39, 78.94916, 0), new carc.Isotope(40, 79.94055, 0), new carc.Isotope(41, 80.936815296, 0), new carc.Isotope(42, 81.931086249, 0), new carc.Isotope(43, 82.92865213, 0), new carc.Isotope(44, 83.92325, 0), new carc.Isotope(45, 84.92146522, 0), new carc.Isotope(46, 85.916472851, 0), new carc.Isotope(47, 86.914816578, 0), new carc.Isotope(48, 87.910226179, 0), new carc.Isotope(49, 88.908888916, 0), new carc.Isotope(50, 89.904703679, 100), new carc.Isotope(51, 90.905644968, 21.9048), new carc.Isotope(52, 91.905040106, 33.3822), new carc.Isotope(53, 92.906475627, 0), new carc.Isotope(54, 93.906315765, 33.6832), new carc.Isotope(55, 94.908042739, 0), new carc.Isotope(56, 95.908275675, 5.4033), new carc.Isotope(57, 96.910950716, 0), new carc.Isotope(58, 97.912746366, 0), new carc.Isotope(59, 98.916511084, 0), new carc.Isotope(60, 99.917761704, 0), new carc.Isotope(61, 100.921139958, 0), new carc.Isotope(62, 101.922981089, 0), new carc.Isotope(63, 102.926597062, 0), new carc.Isotope(64, 103.92878, 0), new carc.Isotope(65, 104.93305, 0), new carc.Isotope(66, 105.93591, 0), new carc.Isotope(67, 106.94086, 0), new carc.Isotope(68, 107.94428, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(40, 80.94905, 0), new carc.Isotope(41, 81.94313, 0), new carc.Isotope(42, 82.936703713, 0), new carc.Isotope(43, 83.93357, 0), new carc.Isotope(44, 84.927906486, 0), new carc.Isotope(45, 85.925037588, 0), new carc.Isotope(46, 86.920361435, 0), new carc.Isotope(47, 87.91833144, 0), new carc.Isotope(48, 88.913495503, 0), new carc.Isotope(49, 89.911264109, 0), new carc.Isotope(50, 90.906990538, 0), new carc.Isotope(51, 91.907193214, 0), new carc.Isotope(52, 92.906377543, 100), new carc.Isotope(53, 93.907283457, 0), new carc.Isotope(54, 94.906835178, 0), new carc.Isotope(55, 95.908100076, 0), new carc.Isotope(56, 96.908097144, 0), new carc.Isotope(57, 97.91033069, 0), new carc.Isotope(58, 98.911617864, 0), new carc.Isotope(59, 99.914181434, 0), new carc.Isotope(60, 100.915251567, 0), new carc.Isotope(61, 101.918037417, 0), new carc.Isotope(62, 102.919141297, 0), new carc.Isotope(63, 103.922459464, 0), new carc.Isotope(64, 104.923934023, 0), new carc.Isotope(65, 105.92819, 0), new carc.Isotope(66, 106.93031, 0), new carc.Isotope(67, 107.93501, 0), new carc.Isotope(68, 108.93763, 0), new carc.Isotope(69, 109.94268, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(41, 82.94874, 0), new carc.Isotope(42, 83.94009, 0), new carc.Isotope(43, 84.93659, 0), new carc.Isotope(44, 85.930695167, 0), new carc.Isotope(45, 86.92732683, 0), new carc.Isotope(46, 87.921952728, 0), new carc.Isotope(47, 88.919480562, 0), new carc.Isotope(48, 89.913936161, 0), new carc.Isotope(49, 90.911750754, 0), new carc.Isotope(50, 91.90681048, 61.5002), new carc.Isotope(51, 92.906812213, 0), new carc.Isotope(52, 93.905087578, 38.334), new carc.Isotope(53, 94.905841487, 65.976), new carc.Isotope(54, 95.904678904, 69.1256), new carc.Isotope(55, 96.906021033, 39.5773), new carc.Isotope(56, 97.905407846, 100), new carc.Isotope(57, 98.907711598, 0), new carc.Isotope(58, 99.907477149, 39.9088), new carc.Isotope(59, 100.910346543, 0), new carc.Isotope(60, 101.910297162, 0), new carc.Isotope(61, 102.913204596, 0), new carc.Isotope(62, 103.913758387, 0), new carc.Isotope(63, 104.916972087, 0), new carc.Isotope(64, 105.918134284, 0), new carc.Isotope(65, 106.921694724, 0), new carc.Isotope(66, 107.923973837, 0), new carc.Isotope(67, 108.92781, 0), new carc.Isotope(68, 109.92973, 0), new carc.Isotope(69, 110.93451, 0), new carc.Isotope(70, 111.93684, 0), new carc.Isotope(71, 112.94203, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(42, 84.94894, 0), new carc.Isotope(43, 85.94288, 0), new carc.Isotope(44, 86.93653, 0), new carc.Isotope(45, 87.93283, 0), new carc.Isotope(46, 88.92754288, 0), new carc.Isotope(47, 89.92355583, 0), new carc.Isotope(48, 90.9184282, 0), new carc.Isotope(49, 91.915259655, 0), new carc.Isotope(50, 92.910248473, 0), new carc.Isotope(51, 93.909656309, 0), new carc.Isotope(52, 94.907656454, 0), new carc.Isotope(53, 95.907870803, 0), new carc.Isotope(54, 96.906364843, 0), new carc.Isotope(55, 97.907215692, 0), new carc.Isotope(56, 98.906254554, 0), new carc.Isotope(57, 99.907657594, 0), new carc.Isotope(58, 100.90731438, 0), new carc.Isotope(59, 101.909212938, 0), new carc.Isotope(60, 102.909178805, 0), new carc.Isotope(61, 103.911444898, 0), new carc.Isotope(62, 104.911658043, 0), new carc.Isotope(63, 105.914355408, 0), new carc.Isotope(64, 106.915081691, 0), new carc.Isotope(65, 107.918479973, 0), new carc.Isotope(66, 108.919980998, 0), new carc.Isotope(67, 109.92339, 0), new carc.Isotope(68, 110.92505, 0), new carc.Isotope(69, 111.92924, 0), new carc.Isotope(70, 112.93133, 0), new carc.Isotope(71, 113.93588, 0), new carc.Isotope(72, 114.93828, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(43, 86.94918, 0), new carc.Isotope(44, 87.94042, 0), new carc.Isotope(45, 88.93611, 0), new carc.Isotope(46, 89.92978, 0), new carc.Isotope(47, 90.926377434, 0), new carc.Isotope(48, 91.92012, 0), new carc.Isotope(49, 92.917051523, 0), new carc.Isotope(50, 93.911359569, 0), new carc.Isotope(51, 94.910412729, 0), new carc.Isotope(52, 95.907597681, 17.4684), new carc.Isotope(53, 96.907554546, 0), new carc.Isotope(54, 97.905287111, 5.9494), new carc.Isotope(55, 98.905939307, 40.1899), new carc.Isotope(56, 99.904219664, 39.8734), new carc.Isotope(57, 100.905582219, 53.7975), new carc.Isotope(58, 101.904349503, 100), new carc.Isotope(59, 102.906323677, 0), new carc.Isotope(60, 103.905430145, 59.1772), new carc.Isotope(61, 104.907750341, 0), new carc.Isotope(62, 105.907326913, 0), new carc.Isotope(63, 106.909907207, 0), new carc.Isotope(64, 107.910192211, 0), new carc.Isotope(65, 108.913201565, 0), new carc.Isotope(66, 109.913966185, 0), new carc.Isotope(67, 110.91756, 0), new carc.Isotope(68, 111.918821673, 0), new carc.Isotope(69, 112.92254, 0), new carc.Isotope(70, 113.923891981, 0), new carc.Isotope(71, 114.92831, 0), new carc.Isotope(72, 115.93016, 0), new carc.Isotope(73, 116.93479, 0), new carc.Isotope(74, 117.93703, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(44, 88.94938, 0), new carc.Isotope(45, 89.94287, 0), new carc.Isotope(46, 90.93655, 0), new carc.Isotope(47, 91.93198, 0), new carc.Isotope(48, 92.92574, 0), new carc.Isotope(49, 93.921698, 0), new carc.Isotope(50, 94.915898541, 0), new carc.Isotope(51, 95.914518212, 0), new carc.Isotope(52, 96.911336643, 0), new carc.Isotope(53, 97.910716431, 0), new carc.Isotope(54, 98.908132101, 0), new carc.Isotope(55, 99.90811663, 0), new carc.Isotope(56, 100.906163526, 0), new carc.Isotope(57, 101.906842845, 0), new carc.Isotope(58, 102.905504182, 100), new carc.Isotope(59, 103.906655315, 0), new carc.Isotope(60, 104.905692444, 0), new carc.Isotope(61, 105.907284615, 0), new carc.Isotope(62, 106.90675054, 0), new carc.Isotope(63, 107.908730768, 0), new carc.Isotope(64, 108.908735621, 0), new carc.Isotope(65, 109.910949525, 0), new carc.Isotope(66, 110.91166, 0), new carc.Isotope(67, 111.913969253, 0), new carc.Isotope(68, 112.91542, 0), new carc.Isotope(69, 113.91734336, 0), new carc.Isotope(70, 114.920124676, 0), new carc.Isotope(71, 115.922746643, 0), new carc.Isotope(72, 116.92535, 0), new carc.Isotope(73, 117.92943, 0), new carc.Isotope(74, 118.93136, 0), new carc.Isotope(75, 119.93578, 0), new carc.Isotope(76, 120.93808, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(45, 90.94948, 0), new carc.Isotope(46, 91.94042, 0), new carc.Isotope(47, 92.93591, 0), new carc.Isotope(48, 93.92877, 0), new carc.Isotope(49, 94.92469, 0), new carc.Isotope(50, 95.91822194, 0), new carc.Isotope(51, 96.916478921, 0), new carc.Isotope(52, 97.912720751, 0), new carc.Isotope(53, 98.911767757, 0), new carc.Isotope(54, 99.908504596, 0), new carc.Isotope(55, 100.908289144, 0), new carc.Isotope(56, 101.905607716, 3.7322), new carc.Isotope(57, 102.906087204, 0), new carc.Isotope(58, 103.904034912, 40.7611), new carc.Isotope(59, 104.905084046, 81.7051), new carc.Isotope(60, 105.903483087, 100), new carc.Isotope(61, 106.905128453, 0), new carc.Isotope(62, 107.903894451, 96.8167), new carc.Isotope(63, 108.905953535, 0), new carc.Isotope(64, 109.905152385, 42.8833), new carc.Isotope(65, 110.907643952, 0), new carc.Isotope(66, 111.907313277, 0), new carc.Isotope(67, 112.910151346, 0), new carc.Isotope(68, 113.910365322, 0), new carc.Isotope(69, 114.91368341, 0), new carc.Isotope(70, 115.914158288, 0), new carc.Isotope(71, 116.91784, 0), new carc.Isotope(72, 117.918983915, 0), new carc.Isotope(73, 118.92268, 0), new carc.Isotope(74, 119.92403, 0), new carc.Isotope(75, 120.92818, 0), new carc.Isotope(76, 121.9298, 0), new carc.Isotope(77, 122.93426, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(47, 93.94278, 0), new carc.Isotope(48, 94.93548, 0), new carc.Isotope(49, 95.93068, 0), new carc.Isotope(50, 96.924, 0), new carc.Isotope(51, 97.921759995, 0), new carc.Isotope(52, 98.917597103, 0), new carc.Isotope(53, 99.916069387, 0), new carc.Isotope(54, 100.912802135, 0), new carc.Isotope(55, 101.911999996, 0), new carc.Isotope(56, 102.908972453, 0), new carc.Isotope(57, 103.908628228, 0), new carc.Isotope(58, 104.906528234, 0), new carc.Isotope(59, 105.906666431, 0), new carc.Isotope(60, 106.90509302, 100), new carc.Isotope(61, 107.905953705, 0), new carc.Isotope(62, 108.904755514, 92.905), new carc.Isotope(63, 109.90611046, 0), new carc.Isotope(64, 110.905294679, 0), new carc.Isotope(65, 111.907004132, 0), new carc.Isotope(66, 112.906565708, 0), new carc.Isotope(67, 113.908807907, 0), new carc.Isotope(68, 114.908762282, 0), new carc.Isotope(69, 115.911359558, 0), new carc.Isotope(70, 116.911684187, 0), new carc.Isotope(71, 117.914582383, 0), new carc.Isotope(72, 118.915666045, 0), new carc.Isotope(73, 119.918788609, 0), new carc.Isotope(74, 120.919851074, 0), new carc.Isotope(75, 121.92332, 0), new carc.Isotope(76, 122.9249, 0), new carc.Isotope(77, 123.92853, 0), new carc.Isotope(78, 124.93054, 0), new carc.Isotope(79, 125.9345, 0), new carc.Isotope(80, 126.93688, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(48, 95.93977, 0), new carc.Isotope(49, 96.93494, 0), new carc.Isotope(50, 97.927579, 0), new carc.Isotope(51, 98.92501, 0), new carc.Isotope(52, 99.920230232, 0), new carc.Isotope(53, 100.918681442, 0), new carc.Isotope(54, 101.914777255, 0), new carc.Isotope(55, 102.913418952, 0), new carc.Isotope(56, 103.909848091, 0), new carc.Isotope(57, 104.909467818, 0), new carc.Isotope(58, 105.906458007, 4.3508), new carc.Isotope(59, 106.906614232, 0), new carc.Isotope(60, 107.904183403, 3.0978), new carc.Isotope(61, 108.904985569, 0), new carc.Isotope(62, 109.903005578, 43.4737), new carc.Isotope(63, 110.904181628, 44.5527), new carc.Isotope(64, 111.902757226, 83.9888), new carc.Isotope(65, 112.904400947, 42.5339), new carc.Isotope(66, 113.903358121, 100), new carc.Isotope(67, 114.905430553, 0), new carc.Isotope(68, 115.904755434, 26.0703), new carc.Isotope(69, 116.907218242, 0), new carc.Isotope(70, 117.906914144, 0), new carc.Isotope(71, 118.909922582, 0), new carc.Isotope(72, 119.909851352, 0), new carc.Isotope(73, 120.91298039, 0), new carc.Isotope(74, 121.9135, 0), new carc.Isotope(75, 122.917003675, 0), new carc.Isotope(76, 123.917648302, 0), new carc.Isotope(77, 124.92124717, 0), new carc.Isotope(78, 125.922353996, 0), new carc.Isotope(79, 126.926434822, 0), new carc.Isotope(80, 127.927760617, 0), new carc.Isotope(81, 128.93226, 0), new carc.Isotope(82, 129.93398, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(49, 97.94224, 0), new carc.Isotope(50, 98.93461, 0), new carc.Isotope(51, 99.931149033, 0), new carc.Isotope(52, 100.92656, 0), new carc.Isotope(53, 101.924707541, 0), new carc.Isotope(54, 102.919913896, 0), new carc.Isotope(55, 103.918338416, 0), new carc.Isotope(56, 104.914673434, 0), new carc.Isotope(57, 105.913461134, 0), new carc.Isotope(58, 106.910292195, 0), new carc.Isotope(59, 107.909719683, 0), new carc.Isotope(60, 108.907154078, 0), new carc.Isotope(61, 109.907168783, 0), new carc.Isotope(62, 110.905110677, 0), new carc.Isotope(63, 111.905533338, 0), new carc.Isotope(64, 112.904061223, 4.4932), new carc.Isotope(65, 113.904916758, 0), new carc.Isotope(66, 114.903878328, 100), new carc.Isotope(67, 115.905259995, 0), new carc.Isotope(68, 116.904515731, 0), new carc.Isotope(69, 117.906354623, 0), new carc.Isotope(70, 118.905846334, 0), new carc.Isotope(71, 119.907961505, 0), new carc.Isotope(72, 120.907848847, 0), new carc.Isotope(73, 121.910277103, 0), new carc.Isotope(74, 122.910438951, 0), new carc.Isotope(75, 123.913175916, 0), new carc.Isotope(76, 124.913601387, 0), new carc.Isotope(77, 125.916464532, 0), new carc.Isotope(78, 126.917344048, 0), new carc.Isotope(79, 127.920170658, 0), new carc.Isotope(80, 128.921657958, 0), new carc.Isotope(81, 129.924854941, 0), new carc.Isotope(82, 130.926767408, 0), new carc.Isotope(83, 131.932919005, 0), new carc.Isotope(84, 132.93834, 0), new carc.Isotope(85, 133.94466, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(50, 99.938954, 0), new carc.Isotope(51, 100.93606, 0), new carc.Isotope(52, 101.93049, 0), new carc.Isotope(53, 102.92813, 0), new carc.Isotope(54, 103.923185469, 0), new carc.Isotope(55, 104.921390409, 0), new carc.Isotope(56, 105.916880472, 0), new carc.Isotope(57, 106.915666702, 0), new carc.Isotope(58, 107.911965339, 0), new carc.Isotope(59, 108.911286879, 0), new carc.Isotope(60, 109.907852688, 0), new carc.Isotope(61, 110.907735404, 0), new carc.Isotope(62, 111.90482081, 3.0864), new carc.Isotope(63, 112.905173373, 0), new carc.Isotope(64, 113.902781816, 2.1605), new carc.Isotope(65, 114.903345973, 1.2346), new carc.Isotope(66, 115.901744149, 45.3704), new carc.Isotope(67, 116.902953765, 23.7654), new carc.Isotope(68, 117.901606328, 75), new carc.Isotope(69, 118.90330888, 26.5432), new carc.Isotope(70, 119.902196571, 100), new carc.Isotope(71, 120.904236867, 0), new carc.Isotope(72, 121.903440138, 14.1975), new carc.Isotope(73, 122.905721901, 0), new carc.Isotope(74, 123.90527463, 17.284), new carc.Isotope(75, 124.907784924, 0), new carc.Isotope(76, 125.907653953, 0), new carc.Isotope(77, 126.91035098, 0), new carc.Isotope(78, 127.910534953, 0), new carc.Isotope(79, 128.913439976, 0), new carc.Isotope(80, 129.913852185, 0), new carc.Isotope(81, 130.916919144, 0), new carc.Isotope(82, 131.917744455, 0), new carc.Isotope(83, 132.923814085, 0), new carc.Isotope(84, 133.928463576, 0), new carc.Isotope(85, 134.93473, 0), new carc.Isotope(86, 135.93934, 0), new carc.Isotope(87, 136.94579, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(52, 102.94012, 0), new carc.Isotope(53, 103.936287, 0), new carc.Isotope(54, 104.931528593, 0), new carc.Isotope(55, 105.928183134, 0), new carc.Isotope(56, 106.92415, 0), new carc.Isotope(57, 107.92216, 0), new carc.Isotope(58, 108.918136092, 0), new carc.Isotope(59, 109.917533911, 0), new carc.Isotope(60, 110.912534147, 0), new carc.Isotope(61, 111.91239464, 0), new carc.Isotope(62, 112.909377941, 0), new carc.Isotope(63, 113.909095876, 0), new carc.Isotope(64, 114.906598812, 0), new carc.Isotope(65, 115.906797235, 0), new carc.Isotope(66, 116.90483959, 0), new carc.Isotope(67, 117.905531885, 0), new carc.Isotope(68, 118.90394646, 0), new carc.Isotope(69, 119.905074315, 0), new carc.Isotope(70, 120.903818044, 100), new carc.Isotope(71, 121.905175415, 0), new carc.Isotope(72, 122.904215696, 74.5201), new carc.Isotope(73, 123.905937525, 0), new carc.Isotope(74, 124.905247804, 0), new carc.Isotope(75, 125.907248153, 0), new carc.Isotope(76, 126.906914564, 0), new carc.Isotope(77, 127.90916733, 0), new carc.Isotope(78, 128.909150092, 0), new carc.Isotope(79, 129.911546459, 0), new carc.Isotope(80, 130.911946487, 0), new carc.Isotope(81, 131.914413247, 0), new carc.Isotope(82, 132.915236466, 0), new carc.Isotope(83, 133.920551554, 0), new carc.Isotope(84, 134.925167962, 0), new carc.Isotope(85, 135.93066, 0), new carc.Isotope(86, 136.93531, 0), new carc.Isotope(87, 137.94096, 0), new carc.Isotope(88, 138.94571, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(54, 105.937702, 0), new carc.Isotope(55, 106.935036, 0), new carc.Isotope(56, 107.929486838, 0), new carc.Isotope(57, 108.927456483, 0), new carc.Isotope(58, 109.922407164, 0), new carc.Isotope(59, 110.921120589, 0), new carc.Isotope(60, 111.917061617, 0), new carc.Isotope(61, 112.915452551, 0), new carc.Isotope(62, 113.912498025, 0), new carc.Isotope(63, 114.911578627, 0), new carc.Isotope(64, 115.908420253, 0), new carc.Isotope(65, 116.90863418, 0), new carc.Isotope(66, 117.905825187, 0), new carc.Isotope(67, 118.90640811, 0), new carc.Isotope(68, 119.904019891, 0.284), new carc.Isotope(69, 120.904929815, 0), new carc.Isotope(70, 121.903047064, 7.6923), new carc.Isotope(71, 122.904272951, 2.6864), new carc.Isotope(72, 123.902819466, 14.2485), new carc.Isotope(73, 124.904424718, 21.1243), new carc.Isotope(74, 125.903305543, 56.0651), new carc.Isotope(75, 126.90521729, 0), new carc.Isotope(76, 127.904461383, 93.7574), new carc.Isotope(77, 128.906595593, 0), new carc.Isotope(78, 129.906222753, 100), new carc.Isotope(79, 130.90852188, 0), new carc.Isotope(80, 131.908523782, 0), new carc.Isotope(81, 132.910939068, 0), new carc.Isotope(82, 133.911540546, 0), new carc.Isotope(83, 134.916450782, 0), new carc.Isotope(84, 135.920103155, 0), new carc.Isotope(85, 136.925324769, 0), new carc.Isotope(86, 137.92922, 0), new carc.Isotope(87, 138.93473, 0), new carc.Isotope(88, 139.9387, 0), new carc.Isotope(89, 140.94439, 0), new carc.Isotope(90, 141.9485, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(55, 107.943291, 0), new carc.Isotope(56, 108.938191658, 0), new carc.Isotope(57, 109.934634181, 0), new carc.Isotope(58, 110.930276, 0), new carc.Isotope(59, 111.92797, 0), new carc.Isotope(60, 112.923644245, 0), new carc.Isotope(61, 113.92185, 0), new carc.Isotope(62, 114.918272, 0), new carc.Isotope(63, 115.916735014, 0), new carc.Isotope(64, 116.913647692, 0), new carc.Isotope(65, 117.91337523, 0), new carc.Isotope(66, 118.910180837, 0), new carc.Isotope(67, 119.910047843, 0), new carc.Isotope(68, 120.907366063, 0), new carc.Isotope(69, 121.907592451, 0), new carc.Isotope(70, 122.905597944, 0), new carc.Isotope(71, 123.906211423, 0), new carc.Isotope(72, 124.90462415, 0), new carc.Isotope(73, 125.905619387, 0), new carc.Isotope(74, 126.90446842, 100), new carc.Isotope(75, 127.905805254, 0), new carc.Isotope(76, 128.904987487, 0), new carc.Isotope(77, 129.906674018, 0), new carc.Isotope(78, 130.906124168, 0), new carc.Isotope(79, 131.907994525, 0), new carc.Isotope(80, 132.907806465, 0), new carc.Isotope(81, 133.909876552, 0), new carc.Isotope(82, 134.91005031, 0), new carc.Isotope(83, 135.914655105, 0), new carc.Isotope(84, 136.917872653, 0), new carc.Isotope(85, 137.922383666, 0), new carc.Isotope(86, 138.926093402, 0), new carc.Isotope(87, 139.93121, 0), new carc.Isotope(88, 140.93483, 0), new carc.Isotope(89, 141.94018, 0), new carc.Isotope(90, 142.94407, 0), new carc.Isotope(91, 143.94961, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(56, 109.944476, 0), new carc.Isotope(57, 110.941632, 0), new carc.Isotope(58, 111.93566535, 0), new carc.Isotope(59, 112.933382836, 0), new carc.Isotope(60, 113.928145, 0), new carc.Isotope(61, 114.926979032, 0), new carc.Isotope(62, 115.921394197, 0), new carc.Isotope(63, 116.920564355, 0), new carc.Isotope(64, 117.91657092, 0), new carc.Isotope(65, 118.915554295, 0), new carc.Isotope(66, 119.91215199, 0), new carc.Isotope(67, 120.911386497, 0), new carc.Isotope(68, 121.908548396, 0), new carc.Isotope(69, 122.908470748, 0), new carc.Isotope(70, 123.905895774, 0.3717), new carc.Isotope(71, 124.906398236, 0), new carc.Isotope(72, 125.904268868, 0.3346), new carc.Isotope(73, 126.905179581, 0), new carc.Isotope(74, 127.903530436, 7.1004), new carc.Isotope(75, 128.904779458, 98.1413), new carc.Isotope(76, 129.903507903, 15.2416), new carc.Isotope(77, 130.90508192, 78.8104), new carc.Isotope(78, 131.904154457, 100), new carc.Isotope(79, 132.90590566, 0), new carc.Isotope(80, 133.905394504, 38.6617), new carc.Isotope(81, 134.907207499, 0), new carc.Isotope(82, 135.907219526, 33.0855), new carc.Isotope(83, 136.911562939, 0), new carc.Isotope(84, 137.913988549, 0), new carc.Isotope(85, 138.918786859, 0), new carc.Isotope(86, 139.921635665, 0), new carc.Isotope(87, 140.926646282, 0), new carc.Isotope(88, 141.929702981, 0), new carc.Isotope(89, 142.93489, 0), new carc.Isotope(90, 143.93823, 0), new carc.Isotope(91, 144.94367, 0), new carc.Isotope(92, 145.9473, 0), new carc.Isotope(93, 146.95301, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(57, 111.950331, 0), new carc.Isotope(58, 112.944535512, 0), new carc.Isotope(59, 113.940841319, 0), new carc.Isotope(60, 114.935939, 0), new carc.Isotope(61, 115.932914152, 0), new carc.Isotope(62, 116.928639484, 0), new carc.Isotope(63, 117.926554883, 0), new carc.Isotope(64, 118.922370879, 0), new carc.Isotope(65, 119.920678219, 0), new carc.Isotope(66, 120.917183637, 0), new carc.Isotope(67, 121.916121946, 0), new carc.Isotope(68, 122.912990168, 0), new carc.Isotope(69, 123.912245731, 0), new carc.Isotope(70, 124.909724871, 0), new carc.Isotope(71, 125.909447953, 0), new carc.Isotope(72, 126.9074176, 0), new carc.Isotope(73, 127.907747919, 0), new carc.Isotope(74, 128.906063369, 0), new carc.Isotope(75, 129.906706163, 0), new carc.Isotope(76, 130.905460232, 0), new carc.Isotope(77, 131.906429799, 0), new carc.Isotope(78, 132.90544687, 100), new carc.Isotope(79, 133.906713419, 0), new carc.Isotope(80, 134.905971903, 0), new carc.Isotope(81, 135.907305741, 0), new carc.Isotope(82, 136.907083505, 0), new carc.Isotope(83, 137.911010537, 0), new carc.Isotope(84, 138.913357921, 0), new carc.Isotope(85, 139.917277075, 0), new carc.Isotope(86, 140.920043984, 0), new carc.Isotope(87, 141.924292317, 0), new carc.Isotope(88, 142.927330292, 0), new carc.Isotope(89, 143.932027373, 0), new carc.Isotope(90, 144.935388226, 0), new carc.Isotope(91, 145.940162028, 0), new carc.Isotope(92, 146.943864435, 0), new carc.Isotope(93, 147.948899539, 0), new carc.Isotope(94, 148.95272, 0), new carc.Isotope(95, 149.95797, 0), new carc.Isotope(96, 150.962, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(58, 113.950941, 0), new carc.Isotope(59, 114.94771, 0), new carc.Isotope(60, 115.94168, 0), new carc.Isotope(61, 116.937700229, 0), new carc.Isotope(62, 117.93344, 0), new carc.Isotope(63, 118.931051927, 0), new carc.Isotope(64, 119.926045941, 0), new carc.Isotope(65, 120.924485908, 0), new carc.Isotope(66, 121.92026, 0), new carc.Isotope(67, 122.91885, 0), new carc.Isotope(68, 123.915088437, 0), new carc.Isotope(69, 124.914620234, 0), new carc.Isotope(70, 125.911244146, 0), new carc.Isotope(71, 126.911121328, 0), new carc.Isotope(72, 127.90830887, 0), new carc.Isotope(73, 128.908673749, 0), new carc.Isotope(74, 129.906310478, 0.1478), new carc.Isotope(75, 130.906930798, 0), new carc.Isotope(76, 131.905056152, 0.1409), new carc.Isotope(77, 132.906002368, 0), new carc.Isotope(78, 133.904503347, 3.371), new carc.Isotope(79, 134.905682749, 9.1939), new carc.Isotope(80, 135.904570109, 10.954), new carc.Isotope(81, 136.905821414, 15.6625), new carc.Isotope(82, 137.905241273, 100), new carc.Isotope(83, 138.908835384, 0), new carc.Isotope(84, 139.910599485, 0), new carc.Isotope(85, 140.914406439, 0), new carc.Isotope(86, 141.916448175, 0), new carc.Isotope(87, 142.920617184, 0), new carc.Isotope(88, 143.922940468, 0), new carc.Isotope(89, 144.926923807, 0), new carc.Isotope(90, 145.930106645, 0), new carc.Isotope(91, 146.933992519, 0), new carc.Isotope(92, 147.937682377, 0), new carc.Isotope(93, 148.94246, 0), new carc.Isotope(94, 149.94562, 0), new carc.Isotope(95, 150.9507, 0), new carc.Isotope(96, 151.95416, 0), new carc.Isotope(97, 152.95961, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(60, 116.95001, 0), new carc.Isotope(61, 117.94657, 0), new carc.Isotope(62, 118.94099, 0), new carc.Isotope(63, 119.93807, 0), new carc.Isotope(64, 120.93301, 0), new carc.Isotope(65, 121.93071, 0), new carc.Isotope(66, 122.92624, 0), new carc.Isotope(67, 123.92453, 0), new carc.Isotope(68, 124.92067, 0), new carc.Isotope(69, 125.91937, 0), new carc.Isotope(70, 126.91616, 0), new carc.Isotope(71, 127.91544794, 0), new carc.Isotope(72, 128.912667334, 0), new carc.Isotope(73, 129.91232, 0), new carc.Isotope(74, 130.910108489, 0), new carc.Isotope(75, 131.910110399, 0), new carc.Isotope(76, 132.908396372, 0), new carc.Isotope(77, 133.908489607, 0), new carc.Isotope(78, 134.906971003, 0), new carc.Isotope(79, 135.907651181, 0), new carc.Isotope(80, 136.906465656, 0), new carc.Isotope(81, 137.907106826, 0.0901), new carc.Isotope(82, 138.90634816, 100), new carc.Isotope(83, 139.909472552, 0), new carc.Isotope(84, 140.910957016, 0), new carc.Isotope(85, 141.914074489, 0), new carc.Isotope(86, 142.916058646, 0), new carc.Isotope(87, 143.919591666, 0), new carc.Isotope(88, 144.92163837, 0), new carc.Isotope(89, 145.925700146, 0), new carc.Isotope(90, 146.927819639, 0), new carc.Isotope(91, 147.932191197, 0), new carc.Isotope(92, 148.93437, 0), new carc.Isotope(93, 149.93857, 0), new carc.Isotope(94, 150.94156, 0), new carc.Isotope(95, 151.94611, 0), new carc.Isotope(96, 152.94945, 0), new carc.Isotope(97, 153.9544, 0), new carc.Isotope(98, 154.95813, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(61, 118.95276, 0), new carc.Isotope(62, 119.94664, 0), new carc.Isotope(63, 120.94367, 0), new carc.Isotope(64, 121.93801, 0), new carc.Isotope(65, 122.93551, 0), new carc.Isotope(66, 123.93052, 0), new carc.Isotope(67, 124.92854, 0), new carc.Isotope(68, 125.9241, 0), new carc.Isotope(69, 126.92275, 0), new carc.Isotope(70, 127.91887, 0), new carc.Isotope(71, 128.918679183, 0), new carc.Isotope(72, 129.914339361, 0), new carc.Isotope(73, 130.914424137, 0), new carc.Isotope(74, 131.91149, 0), new carc.Isotope(75, 132.91155, 0), new carc.Isotope(76, 133.909026379, 0), new carc.Isotope(77, 134.909145555, 0), new carc.Isotope(78, 135.907143574, 0.2147), new carc.Isotope(79, 136.907777634, 0), new carc.Isotope(80, 137.905985574, 0.2825), new carc.Isotope(81, 138.906646605, 0), new carc.Isotope(82, 139.905434035, 100), new carc.Isotope(83, 140.908271103, 0), new carc.Isotope(84, 141.909239733, 12.5226), new carc.Isotope(85, 142.912381158, 0), new carc.Isotope(86, 143.913642686, 0), new carc.Isotope(87, 144.917227871, 0), new carc.Isotope(88, 145.918689722, 0), new carc.Isotope(89, 146.922510962, 0), new carc.Isotope(90, 147.924394738, 0), new carc.Isotope(91, 148.928289207, 0), new carc.Isotope(92, 149.930226399, 0), new carc.Isotope(93, 150.93404, 0), new carc.Isotope(94, 151.93638, 0), new carc.Isotope(95, 152.94058, 0), new carc.Isotope(96, 153.94332, 0), new carc.Isotope(97, 154.94804, 0), new carc.Isotope(98, 155.95126, 0), new carc.Isotope(99, 156.95634, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(62, 120.955364, 0), new carc.Isotope(63, 121.95165, 0), new carc.Isotope(64, 122.94596, 0), new carc.Isotope(65, 123.94296, 0), new carc.Isotope(66, 124.93783, 0), new carc.Isotope(67, 125.93531, 0), new carc.Isotope(68, 126.93083, 0), new carc.Isotope(69, 127.9288, 0), new carc.Isotope(70, 128.92486, 0), new carc.Isotope(71, 129.92338, 0), new carc.Isotope(72, 130.920060245, 0), new carc.Isotope(73, 131.91912, 0), new carc.Isotope(74, 132.9162, 0), new carc.Isotope(75, 133.915672, 0), new carc.Isotope(76, 134.91313914, 0), new carc.Isotope(77, 135.912646935, 0), new carc.Isotope(78, 136.910678351, 0), new carc.Isotope(79, 137.910748891, 0), new carc.Isotope(80, 138.908932181, 0), new carc.Isotope(81, 139.909071204, 0), new carc.Isotope(82, 140.907647726, 100), new carc.Isotope(83, 141.910039865, 0), new carc.Isotope(84, 142.910812233, 0), new carc.Isotope(85, 143.913300595, 0), new carc.Isotope(86, 144.914506897, 0), new carc.Isotope(87, 145.917588016, 0), new carc.Isotope(88, 146.918979001, 0), new carc.Isotope(89, 147.922183237, 0), new carc.Isotope(90, 148.923791056, 0), new carc.Isotope(91, 149.926995031, 0), new carc.Isotope(92, 150.928227869, 0), new carc.Isotope(93, 151.9316, 0), new carc.Isotope(94, 152.93365, 0), new carc.Isotope(95, 153.93739, 0), new carc.Isotope(96, 154.93999, 0), new carc.Isotope(97, 155.94412, 0), new carc.Isotope(98, 156.94717, 0), new carc.Isotope(99, 157.95178, 0), new carc.Isotope(100, 158.95523, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(66, 125.94307, 0), new carc.Isotope(67, 126.9405, 0), new carc.Isotope(68, 127.93539, 0), new carc.Isotope(69, 128.932385, 0), new carc.Isotope(70, 129.92878, 0), new carc.Isotope(71, 130.927102697, 0), new carc.Isotope(72, 131.92312, 0), new carc.Isotope(73, 132.92221, 0), new carc.Isotope(74, 133.918645, 0), new carc.Isotope(75, 134.91824, 0), new carc.Isotope(76, 135.915020542, 0), new carc.Isotope(77, 136.91463973, 0), new carc.Isotope(78, 137.91291745, 0), new carc.Isotope(79, 138.91192415, 0), new carc.Isotope(80, 139.909309824, 0), new carc.Isotope(81, 140.9096048, 0), new carc.Isotope(82, 141.907718643, 100), new carc.Isotope(83, 142.909809626, 44.8949), new carc.Isotope(84, 143.910082629, 87.7258), new carc.Isotope(85, 144.912568847, 30.5934), new carc.Isotope(86, 145.913112139, 63.3616), new carc.Isotope(87, 146.916095794, 0), new carc.Isotope(88, 147.916888516, 21.2311), new carc.Isotope(89, 148.92014419, 0), new carc.Isotope(90, 149.920886563, 20.7888), new carc.Isotope(91, 150.923824739, 0), new carc.Isotope(92, 151.924682428, 0), new carc.Isotope(93, 152.927694534, 0), new carc.Isotope(94, 153.929483295, 0), new carc.Isotope(95, 154.932629551, 0), new carc.Isotope(96, 155.9352, 0), new carc.Isotope(97, 156.93927, 0), new carc.Isotope(98, 157.94187, 0), new carc.Isotope(99, 158.94639, 0), new carc.Isotope(100, 159.94939, 0), new carc.Isotope(101, 160.95433, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(67, 127.94826, 0), new carc.Isotope(68, 128.94316, 0), new carc.Isotope(69, 129.94045, 0), new carc.Isotope(70, 130.9358, 0), new carc.Isotope(71, 131.93375, 0), new carc.Isotope(72, 132.92972, 0), new carc.Isotope(73, 133.92849, 0), new carc.Isotope(74, 134.924617, 0), new carc.Isotope(75, 135.923447865, 0), new carc.Isotope(76, 136.920713, 0), new carc.Isotope(77, 137.920432261, 0), new carc.Isotope(78, 138.916759814, 0), new carc.Isotope(79, 139.915801649, 0), new carc.Isotope(80, 140.913606636, 0), new carc.Isotope(81, 141.912950738, 0), new carc.Isotope(82, 142.910927571, 0), new carc.Isotope(83, 143.912585768, 0), new carc.Isotope(84, 144.912743879, 0), new carc.Isotope(85, 145.914692165, 0), new carc.Isotope(86, 146.915133898, 0), new carc.Isotope(87, 147.917467786, 0), new carc.Isotope(88, 148.918329195, 0), new carc.Isotope(89, 149.920979477, 0), new carc.Isotope(90, 150.921202693, 0), new carc.Isotope(91, 151.923490557, 0), new carc.Isotope(92, 152.924113189, 0), new carc.Isotope(93, 153.926547019, 0), new carc.Isotope(94, 154.928097047, 0), new carc.Isotope(95, 155.931060357, 0), new carc.Isotope(96, 156.9332, 0), new carc.Isotope(97, 157.93669, 0), new carc.Isotope(98, 158.93913, 0), new carc.Isotope(99, 159.94299, 0), new carc.Isotope(100, 160.94586, 0), new carc.Isotope(101, 161.95029, 0), new carc.Isotope(102, 162.95352, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(68, 129.94863, 0), new carc.Isotope(69, 130.94589, 0), new carc.Isotope(70, 131.94082, 0), new carc.Isotope(71, 132.93873, 0), new carc.Isotope(72, 133.93402, 0), new carc.Isotope(73, 134.93235, 0), new carc.Isotope(74, 135.9283, 0), new carc.Isotope(75, 136.927046709, 0), new carc.Isotope(76, 137.92354, 0), new carc.Isotope(77, 138.922302, 0), new carc.Isotope(78, 139.918991, 0), new carc.Isotope(79, 140.918468512, 0), new carc.Isotope(80, 141.915193274, 0), new carc.Isotope(81, 142.914623555, 0), new carc.Isotope(82, 143.91199473, 11.654), new carc.Isotope(83, 144.913405611, 0), new carc.Isotope(84, 145.91303676, 0), new carc.Isotope(85, 146.914893275, 56.767), new carc.Isotope(86, 147.914817914, 42.481), new carc.Isotope(87, 148.917179521, 52.256), new carc.Isotope(88, 149.917271454, 27.82), new carc.Isotope(89, 150.919928351, 0), new carc.Isotope(90, 151.919728244, 100), new carc.Isotope(91, 152.922093907, 0), new carc.Isotope(92, 153.922205303, 84.962), new carc.Isotope(93, 154.92463594, 0), new carc.Isotope(94, 155.925526236, 0), new carc.Isotope(95, 156.928354506, 0), new carc.Isotope(96, 157.929987938, 0), new carc.Isotope(97, 158.9332, 0), new carc.Isotope(98, 159.93514, 0), new carc.Isotope(99, 160.93883, 0), new carc.Isotope(100, 161.94122, 0), new carc.Isotope(101, 162.94536, 0), new carc.Isotope(102, 163.94828, 0), new carc.Isotope(103, 164.95298, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(69, 131.95416, 0), new carc.Isotope(70, 132.9489, 0), new carc.Isotope(71, 133.94632, 0), new carc.Isotope(72, 134.94172, 0), new carc.Isotope(73, 135.9395, 0), new carc.Isotope(74, 136.93521, 0), new carc.Isotope(75, 137.93345, 0), new carc.Isotope(76, 138.92882915, 0), new carc.Isotope(77, 139.928083921, 0), new carc.Isotope(78, 140.924885867, 0), new carc.Isotope(79, 141.923400033, 0), new carc.Isotope(80, 142.920286634, 0), new carc.Isotope(81, 143.918774116, 0), new carc.Isotope(82, 144.916261285, 0), new carc.Isotope(83, 145.917199714, 0), new carc.Isotope(84, 146.916741206, 0), new carc.Isotope(85, 147.918153775, 0), new carc.Isotope(86, 148.917925922, 0), new carc.Isotope(87, 149.919698294, 0), new carc.Isotope(88, 150.919846022, 91.5709), new carc.Isotope(89, 151.921740399, 0), new carc.Isotope(90, 152.921226219, 100), new carc.Isotope(91, 153.922975386, 0), new carc.Isotope(92, 154.922889429, 0), new carc.Isotope(93, 155.924750855, 0), new carc.Isotope(94, 156.925419435, 0), new carc.Isotope(95, 157.927841923, 0), new carc.Isotope(96, 158.9290845, 0), new carc.Isotope(97, 159.931460406, 0), new carc.Isotope(98, 160.93368, 0), new carc.Isotope(99, 161.93704, 0), new carc.Isotope(100, 162.93921, 0), new carc.Isotope(101, 163.94299, 0), new carc.Isotope(102, 164.94572, 0), new carc.Isotope(103, 165.94997, 0), new carc.Isotope(104, 166.95305, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(72, 135.94707, 0), new carc.Isotope(73, 136.94465, 0), new carc.Isotope(74, 137.93997, 0), new carc.Isotope(75, 138.93808, 0), new carc.Isotope(76, 139.933236934, 0), new carc.Isotope(77, 140.93221, 0), new carc.Isotope(78, 141.927908919, 0), new carc.Isotope(79, 142.926738636, 0), new carc.Isotope(80, 143.923390357, 0), new carc.Isotope(81, 144.921687498, 0), new carc.Isotope(82, 145.918305344, 0), new carc.Isotope(83, 146.919089446, 0), new carc.Isotope(84, 147.918109771, 0), new carc.Isotope(85, 148.919336427, 0), new carc.Isotope(86, 149.918655455, 0), new carc.Isotope(87, 150.920344273, 0), new carc.Isotope(88, 151.919787882, 0.8052), new carc.Isotope(89, 152.921746283, 0), new carc.Isotope(90, 153.920862271, 8.7762), new carc.Isotope(91, 154.922618801, 59.5813), new carc.Isotope(92, 155.922119552, 82.4074), new carc.Isotope(93, 156.923956686, 63.0032), new carc.Isotope(94, 157.924100533, 100), new carc.Isotope(95, 158.926385075, 0), new carc.Isotope(96, 159.927050616, 88.0032), new carc.Isotope(97, 160.929665688, 0), new carc.Isotope(98, 161.930981211, 0), new carc.Isotope(99, 162.93399, 0), new carc.Isotope(100, 163.93586, 0), new carc.Isotope(101, 164.93938, 0), new carc.Isotope(102, 165.9416, 0), new carc.Isotope(103, 166.94557, 0), new carc.Isotope(104, 167.94836, 0), new carc.Isotope(105, 168.95287, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(73, 137.95287, 0), new carc.Isotope(74, 138.94803, 0), new carc.Isotope(75, 139.945367985, 0), new carc.Isotope(76, 140.94116, 0), new carc.Isotope(77, 141.939073781, 0), new carc.Isotope(78, 142.93475, 0), new carc.Isotope(79, 143.93253, 0), new carc.Isotope(80, 144.92888, 0), new carc.Isotope(81, 145.927180629, 0), new carc.Isotope(82, 146.924037176, 0), new carc.Isotope(83, 147.924298636, 0), new carc.Isotope(84, 148.92324163, 0), new carc.Isotope(85, 149.923654158, 0), new carc.Isotope(86, 150.923098169, 0), new carc.Isotope(87, 151.924071324, 0), new carc.Isotope(88, 152.923430858, 0), new carc.Isotope(89, 153.924686236, 0), new carc.Isotope(90, 154.923500411, 0), new carc.Isotope(91, 155.924743749, 0), new carc.Isotope(92, 156.924021155, 0), new carc.Isotope(93, 157.92541026, 0), new carc.Isotope(94, 158.925343135, 100), new carc.Isotope(95, 159.927164021, 0), new carc.Isotope(96, 160.927566289, 0), new carc.Isotope(97, 161.929484803, 0), new carc.Isotope(98, 162.930643942, 0), new carc.Isotope(99, 163.933347253, 0), new carc.Isotope(100, 164.93488, 0), new carc.Isotope(101, 165.93805, 0), new carc.Isotope(102, 166.94005, 0), new carc.Isotope(103, 167.94364, 0), new carc.Isotope(104, 168.94622, 0), new carc.Isotope(105, 169.95025, 0), new carc.Isotope(106, 170.9533, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(74, 139.95379, 0), new carc.Isotope(75, 140.95119, 0), new carc.Isotope(76, 141.946695946, 0), new carc.Isotope(77, 142.94383, 0), new carc.Isotope(78, 143.93907, 0), new carc.Isotope(79, 144.936717, 0), new carc.Isotope(80, 145.932720118, 0), new carc.Isotope(81, 146.930878496, 0), new carc.Isotope(82, 147.927177882, 0), new carc.Isotope(83, 148.927333981, 0), new carc.Isotope(84, 149.925579728, 0), new carc.Isotope(85, 150.92617963, 0), new carc.Isotope(86, 151.924713874, 0), new carc.Isotope(87, 152.925760865, 0), new carc.Isotope(88, 153.924422046, 0), new carc.Isotope(89, 154.92574895, 0), new carc.Isotope(90, 155.924278273, 0.2128), new carc.Isotope(91, 156.925461256, 0), new carc.Isotope(92, 157.924404637, 0.3546), new carc.Isotope(93, 158.92573566, 0), new carc.Isotope(94, 159.925193718, 8.2979), new carc.Isotope(95, 160.926929595, 67.0212), new carc.Isotope(96, 161.926794731, 90.4255), new carc.Isotope(97, 162.928727532, 88.2978), new carc.Isotope(98, 163.929171165, 100), new carc.Isotope(99, 164.931699828, 0), new carc.Isotope(100, 165.932803241, 0), new carc.Isotope(101, 166.935649025, 0), new carc.Isotope(102, 167.93723, 0), new carc.Isotope(103, 168.940303648, 0), new carc.Isotope(104, 169.94267, 0), new carc.Isotope(105, 170.94648, 0), new carc.Isotope(106, 171.94911, 0), new carc.Isotope(107, 172.95344, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(75, 141.95986, 0), new carc.Isotope(76, 142.95469, 0), new carc.Isotope(77, 143.95164, 0), new carc.Isotope(78, 144.94688, 0), new carc.Isotope(79, 145.9441, 0), new carc.Isotope(80, 146.93984, 0), new carc.Isotope(81, 147.937269, 0), new carc.Isotope(82, 148.933789944, 0), new carc.Isotope(83, 149.932760914, 0), new carc.Isotope(84, 150.931680791, 0), new carc.Isotope(85, 151.931740598, 0), new carc.Isotope(86, 152.930194506, 0), new carc.Isotope(87, 153.930596268, 0), new carc.Isotope(88, 154.929079084, 0), new carc.Isotope(89, 155.929001869, 0), new carc.Isotope(90, 156.928188059, 0), new carc.Isotope(91, 157.92894573, 0), new carc.Isotope(92, 158.927708537, 0), new carc.Isotope(93, 159.928725679, 0), new carc.Isotope(94, 160.927851662, 0), new carc.Isotope(95, 161.92909242, 0), new carc.Isotope(96, 162.928730286, 0), new carc.Isotope(97, 163.930230577, 0), new carc.Isotope(98, 164.930319169, 100), new carc.Isotope(99, 165.932281267, 0), new carc.Isotope(100, 166.933126195, 0), new carc.Isotope(101, 167.935496424, 0), new carc.Isotope(102, 168.936868306, 0), new carc.Isotope(103, 169.939614951, 0), new carc.Isotope(104, 170.941461227, 0), new carc.Isotope(105, 171.94482, 0), new carc.Isotope(106, 172.94729, 0), new carc.Isotope(107, 173.95115, 0), new carc.Isotope(108, 174.95405, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(76, 143.96059, 0), new carc.Isotope(77, 144.95746, 0), new carc.Isotope(78, 145.95212, 0), new carc.Isotope(79, 146.94931, 0), new carc.Isotope(80, 147.94444, 0), new carc.Isotope(81, 148.942780527, 0), new carc.Isotope(82, 149.937171034, 0), new carc.Isotope(83, 150.93746, 0), new carc.Isotope(84, 151.935078452, 0), new carc.Isotope(85, 152.935093125, 0), new carc.Isotope(86, 153.932777294, 0), new carc.Isotope(87, 154.933204273, 0), new carc.Isotope(88, 155.931015001, 0), new carc.Isotope(89, 156.931945517, 0), new carc.Isotope(90, 157.929912, 0), new carc.Isotope(91, 158.930680718, 0), new carc.Isotope(92, 159.929078924, 0), new carc.Isotope(93, 160.930001348, 0), new carc.Isotope(94, 161.928774923, 0.4167), new carc.Isotope(95, 162.930029273, 0), new carc.Isotope(96, 163.929196996, 4.7917), new carc.Isotope(97, 164.9307228, 0), new carc.Isotope(98, 165.93028997, 100), new carc.Isotope(99, 166.932045448, 68.3036), new carc.Isotope(100, 167.932367781, 79.7619), new carc.Isotope(101, 168.934588082, 0), new carc.Isotope(102, 169.935460334, 44.3452), new carc.Isotope(103, 170.938025885, 0), new carc.Isotope(104, 171.939352149, 0), new carc.Isotope(105, 172.9424, 0), new carc.Isotope(106, 173.94434, 0), new carc.Isotope(107, 174.94793, 0), new carc.Isotope(108, 175.95029, 0), new carc.Isotope(109, 176.95437, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(77, 145.966495, 0), new carc.Isotope(78, 146.961081, 0), new carc.Isotope(79, 147.95755, 0), new carc.Isotope(80, 148.95265, 0), new carc.Isotope(81, 149.94967, 0), new carc.Isotope(82, 150.944842, 0), new carc.Isotope(83, 151.9443, 0), new carc.Isotope(84, 152.942027631, 0), new carc.Isotope(85, 153.940832325, 0), new carc.Isotope(86, 154.939191562, 0), new carc.Isotope(87, 155.939006895, 0), new carc.Isotope(88, 156.936756069, 0), new carc.Isotope(89, 157.936996, 0), new carc.Isotope(90, 158.934808966, 0), new carc.Isotope(91, 159.935090772, 0), new carc.Isotope(92, 160.933398042, 0), new carc.Isotope(93, 161.933970147, 0), new carc.Isotope(94, 162.932647648, 0), new carc.Isotope(95, 163.933450972, 0), new carc.Isotope(96, 164.932432463, 0), new carc.Isotope(97, 165.933553133, 0), new carc.Isotope(98, 166.932848844, 0), new carc.Isotope(99, 167.934170375, 0), new carc.Isotope(100, 168.934211117, 100), new carc.Isotope(101, 169.935797877, 0), new carc.Isotope(102, 170.936425817, 0), new carc.Isotope(103, 171.938396118, 0), new carc.Isotope(104, 172.939600336, 0), new carc.Isotope(105, 173.942164618, 0), new carc.Isotope(106, 174.943832897, 0), new carc.Isotope(107, 175.946991412, 0), new carc.Isotope(108, 176.94904, 0), new carc.Isotope(109, 177.95264, 0), new carc.Isotope(110, 178.95534, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(78, 147.96676, 0), new carc.Isotope(79, 148.96348, 0), new carc.Isotope(80, 149.95799, 0), new carc.Isotope(81, 150.954657965, 0), new carc.Isotope(82, 151.950167, 0), new carc.Isotope(83, 152.94921, 0), new carc.Isotope(84, 153.945651145, 0), new carc.Isotope(85, 154.945792, 0), new carc.Isotope(86, 155.942847109, 0), new carc.Isotope(87, 156.94265865, 0), new carc.Isotope(88, 157.939857897, 0), new carc.Isotope(89, 158.940153735, 0), new carc.Isotope(90, 159.93756, 0), new carc.Isotope(91, 160.937357719, 0), new carc.Isotope(92, 161.93575, 0), new carc.Isotope(93, 162.936265492, 0), new carc.Isotope(94, 163.93452, 0), new carc.Isotope(95, 164.935397592, 0), new carc.Isotope(96, 165.933879623, 0), new carc.Isotope(97, 166.934946862, 0), new carc.Isotope(98, 167.933894465, 0.4088), new carc.Isotope(99, 168.93518712, 0), new carc.Isotope(100, 169.934758652, 9.5912), new carc.Isotope(101, 170.936322297, 44.9686), new carc.Isotope(102, 171.936377696, 68.8679), new carc.Isotope(103, 172.938206756, 50.6918), new carc.Isotope(104, 173.938858101, 100), new carc.Isotope(105, 174.941272494, 0), new carc.Isotope(106, 175.942568409, 39.9371), new carc.Isotope(107, 176.945257126, 0), new carc.Isotope(108, 177.946643396, 0), new carc.Isotope(109, 178.95017, 0), new carc.Isotope(110, 179.95233, 0), new carc.Isotope(111, 180.95615, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(79, 149.972668, 0), new carc.Isotope(80, 150.967147, 0), new carc.Isotope(81, 151.96361, 0), new carc.Isotope(82, 152.95869, 0), new carc.Isotope(83, 153.9571, 0), new carc.Isotope(84, 154.953641324, 0), new carc.Isotope(85, 155.952907, 0), new carc.Isotope(86, 156.950101536, 0), new carc.Isotope(87, 157.948577981, 0), new carc.Isotope(88, 158.946615113, 0), new carc.Isotope(89, 159.945383, 0), new carc.Isotope(90, 160.943047504, 0), new carc.Isotope(91, 161.943222, 0), new carc.Isotope(92, 162.941203796, 0), new carc.Isotope(93, 163.941215, 0), new carc.Isotope(94, 164.939605886, 0), new carc.Isotope(95, 165.939762646, 0), new carc.Isotope(96, 166.938307056, 0), new carc.Isotope(97, 167.938698576, 0), new carc.Isotope(98, 168.937648757, 0), new carc.Isotope(99, 169.93847219, 0), new carc.Isotope(100, 170.937909903, 0), new carc.Isotope(101, 171.939082239, 0), new carc.Isotope(102, 172.938926901, 0), new carc.Isotope(103, 173.940333522, 0), new carc.Isotope(104, 174.940767904, 100), new carc.Isotope(105, 175.942682399, 2.6694), new carc.Isotope(106, 176.943754987, 0), new carc.Isotope(107, 177.945951366, 0), new carc.Isotope(108, 178.947324216, 0), new carc.Isotope(109, 179.949879968, 0), new carc.Isotope(110, 180.95197, 0), new carc.Isotope(111, 181.95521, 0), new carc.Isotope(112, 182.95757, 0), new carc.Isotope(113, 183.96117, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(82, 153.96425, 0), new carc.Isotope(83, 154.96276, 0), new carc.Isotope(84, 155.959247, 0), new carc.Isotope(85, 156.958127, 0), new carc.Isotope(86, 157.95405528, 0), new carc.Isotope(87, 158.954003, 0), new carc.Isotope(88, 159.950713588, 0), new carc.Isotope(89, 160.950330852, 0), new carc.Isotope(90, 161.947202977, 0), new carc.Isotope(91, 162.947057, 0), new carc.Isotope(92, 163.944422, 0), new carc.Isotope(93, 164.94454, 0), new carc.Isotope(94, 165.94225, 0), new carc.Isotope(95, 166.9426, 0), new carc.Isotope(96, 167.94063, 0), new carc.Isotope(97, 168.941158567, 0), new carc.Isotope(98, 169.93965, 0), new carc.Isotope(99, 170.94049, 0), new carc.Isotope(100, 171.93945798, 0), new carc.Isotope(101, 172.94065, 0), new carc.Isotope(102, 173.940040159, 0.4545), new carc.Isotope(103, 174.941502991, 0), new carc.Isotope(104, 175.941401828, 14.7727), new carc.Isotope(105, 176.943220013, 52.8409), new carc.Isotope(106, 177.943697732, 76.9886), new carc.Isotope(107, 178.945815073, 39.0341), new carc.Isotope(108, 179.94654876, 100), new carc.Isotope(109, 180.949099124, 0), new carc.Isotope(110, 181.950552893, 0), new carc.Isotope(111, 182.953531012, 0), new carc.Isotope(112, 183.95544788, 0), new carc.Isotope(113, 184.95878, 0), new carc.Isotope(114, 185.96092, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(83, 155.971689, 0), new carc.Isotope(84, 156.968145, 0), new carc.Isotope(85, 157.966368, 0), new carc.Isotope(86, 158.96232309, 0), new carc.Isotope(87, 159.961358, 0), new carc.Isotope(88, 160.958372992, 0), new carc.Isotope(89, 161.956556553, 0), new carc.Isotope(90, 162.95431665, 0), new carc.Isotope(91, 163.95357, 0), new carc.Isotope(92, 164.950817, 0), new carc.Isotope(93, 165.95047, 0), new carc.Isotope(94, 166.948639, 0), new carc.Isotope(95, 167.947787, 0), new carc.Isotope(96, 168.94592, 0), new carc.Isotope(97, 169.94609, 0), new carc.Isotope(98, 170.94446, 0), new carc.Isotope(99, 171.944739818, 0), new carc.Isotope(100, 172.94459, 0), new carc.Isotope(101, 173.944167937, 0), new carc.Isotope(102, 174.94365, 0), new carc.Isotope(103, 175.944740551, 0), new carc.Isotope(104, 176.944471766, 0), new carc.Isotope(105, 177.945750349, 0), new carc.Isotope(106, 178.945934113, 0), new carc.Isotope(107, 179.947465655, 0.012), new carc.Isotope(108, 180.947996346, 100), new carc.Isotope(109, 181.950152414, 0), new carc.Isotope(110, 182.951373188, 0), new carc.Isotope(111, 183.954009331, 0), new carc.Isotope(112, 184.955559086, 0), new carc.Isotope(113, 185.9585501, 0), new carc.Isotope(114, 186.96041, 0), new carc.Isotope(115, 187.96371, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(84, 157.973939, 0), new carc.Isotope(85, 158.97228, 0), new carc.Isotope(86, 159.968369, 0), new carc.Isotope(87, 160.967089, 0), new carc.Isotope(88, 161.962750303, 0), new carc.Isotope(89, 162.962532, 0), new carc.Isotope(90, 163.95898381, 0), new carc.Isotope(91, 164.958335962, 0), new carc.Isotope(92, 165.955019896, 0), new carc.Isotope(93, 166.954672, 0), new carc.Isotope(94, 167.951863, 0), new carc.Isotope(95, 168.951759, 0), new carc.Isotope(96, 169.948473988, 0), new carc.Isotope(97, 170.94946, 0), new carc.Isotope(98, 171.948228837, 0), new carc.Isotope(99, 172.948884, 0), new carc.Isotope(100, 173.94616, 0), new carc.Isotope(101, 174.94677, 0), new carc.Isotope(102, 175.94559, 0), new carc.Isotope(103, 176.94662, 0), new carc.Isotope(104, 177.945848364, 0), new carc.Isotope(105, 178.947071733, 0), new carc.Isotope(106, 179.946705734, 0.4239), new carc.Isotope(107, 180.948198054, 0), new carc.Isotope(108, 181.948205519, 85.7515), new carc.Isotope(109, 182.950224458, 46.6254), new carc.Isotope(110, 183.950932553, 100), new carc.Isotope(111, 184.953420586, 0), new carc.Isotope(112, 185.954362204, 93.2507), new carc.Isotope(113, 186.957158365, 0), new carc.Isotope(114, 187.958486954, 0), new carc.Isotope(115, 188.96191222, 0), new carc.Isotope(116, 189.963179541, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(85, 159.981485, 0), new carc.Isotope(86, 160.977661, 0), new carc.Isotope(87, 161.975707, 0), new carc.Isotope(88, 162.971375872, 0), new carc.Isotope(89, 163.970319, 0), new carc.Isotope(90, 164.967050268, 0), new carc.Isotope(91, 165.965211372, 0), new carc.Isotope(92, 166.962564, 0), new carc.Isotope(93, 167.961609, 0), new carc.Isotope(94, 168.95883, 0), new carc.Isotope(95, 169.958163, 0), new carc.Isotope(96, 170.955547, 0), new carc.Isotope(97, 171.955285, 0), new carc.Isotope(98, 172.953062, 0), new carc.Isotope(99, 173.952114, 0), new carc.Isotope(100, 174.951393, 0), new carc.Isotope(101, 175.95157, 0), new carc.Isotope(102, 176.95027, 0), new carc.Isotope(103, 177.950851081, 0), new carc.Isotope(104, 178.949981038, 0), new carc.Isotope(105, 179.95078768, 0), new carc.Isotope(106, 180.950064596, 0), new carc.Isotope(107, 181.951211444, 0), new carc.Isotope(108, 182.950821349, 0), new carc.Isotope(109, 183.952524289, 0), new carc.Isotope(110, 184.952955747, 59.7444), new carc.Isotope(111, 185.954986529, 0), new carc.Isotope(112, 186.955750787, 100), new carc.Isotope(113, 187.958112287, 0), new carc.Isotope(114, 188.959228359, 0), new carc.Isotope(115, 189.961816139, 0), new carc.Isotope(116, 190.963123592, 0), new carc.Isotope(117, 191.96596, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(86, 161.983819, 0), new carc.Isotope(87, 162.982048, 0), new carc.Isotope(88, 163.977927, 0), new carc.Isotope(89, 164.976475, 0), new carc.Isotope(90, 165.971934911, 0), new carc.Isotope(91, 166.971554, 0), new carc.Isotope(92, 167.967832911, 0), new carc.Isotope(93, 168.967076205, 0), new carc.Isotope(94, 169.963569716, 0), new carc.Isotope(95, 170.96304, 0), new carc.Isotope(96, 171.960078, 0), new carc.Isotope(97, 172.959791, 0), new carc.Isotope(98, 173.956307704, 0), new carc.Isotope(99, 174.95708, 0), new carc.Isotope(100, 175.953757941, 0), new carc.Isotope(101, 176.955045, 0), new carc.Isotope(102, 177.953348225, 0), new carc.Isotope(103, 178.953951, 0), new carc.Isotope(104, 179.952308241, 0), new carc.Isotope(105, 180.953274494, 0), new carc.Isotope(106, 181.952186222, 0), new carc.Isotope(107, 182.95311, 0), new carc.Isotope(108, 183.952490808, 0.488), new carc.Isotope(109, 184.954043023, 0), new carc.Isotope(110, 185.953838355, 3.8537), new carc.Isotope(111, 186.955747928, 3.9024), new carc.Isotope(112, 187.955835993, 32.439), new carc.Isotope(113, 188.958144866, 39.2683), new carc.Isotope(114, 189.95844521, 64.3902), new carc.Isotope(115, 190.960927951, 0), new carc.Isotope(116, 191.961479047, 100), new carc.Isotope(117, 192.964148083, 0), new carc.Isotope(118, 193.965179314, 0), new carc.Isotope(119, 194.968123889, 0), new carc.Isotope(120, 195.96962255, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(88, 164.98758, 0), new carc.Isotope(89, 165.985506, 0), new carc.Isotope(90, 166.980951577, 0), new carc.Isotope(91, 167.979966, 0), new carc.Isotope(92, 168.976390868, 0), new carc.Isotope(93, 169.974441697, 0), new carc.Isotope(94, 170.971779, 0), new carc.Isotope(95, 171.970643, 0), new carc.Isotope(96, 172.967707, 0), new carc.Isotope(97, 173.966804, 0), new carc.Isotope(98, 174.964279, 0), new carc.Isotope(99, 175.963511, 0), new carc.Isotope(100, 176.96117, 0), new carc.Isotope(101, 177.960084944, 0), new carc.Isotope(102, 178.95915, 0), new carc.Isotope(103, 179.958555615, 0), new carc.Isotope(104, 180.957642156, 0), new carc.Isotope(105, 181.958127689, 0), new carc.Isotope(106, 182.956814, 0), new carc.Isotope(107, 183.957388318, 0), new carc.Isotope(108, 184.95659, 0), new carc.Isotope(109, 185.957951104, 0), new carc.Isotope(110, 186.95736083, 0), new carc.Isotope(111, 187.958851962, 0), new carc.Isotope(112, 188.958716473, 0), new carc.Isotope(113, 189.960592299, 0), new carc.Isotope(114, 190.960591191, 59.4896), new carc.Isotope(115, 191.962602198, 0), new carc.Isotope(116, 192.9629237, 100), new carc.Isotope(117, 193.96507561, 0), new carc.Isotope(118, 194.9659768, 0), new carc.Isotope(119, 195.968379906, 0), new carc.Isotope(120, 196.969636496, 0), new carc.Isotope(121, 197.97228, 0), new carc.Isotope(122, 198.973787159, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(90, 167.988035, 0), new carc.Isotope(91, 168.986421, 0), new carc.Isotope(92, 169.981734918, 0), new carc.Isotope(93, 170.981251, 0), new carc.Isotope(94, 171.977376138, 0), new carc.Isotope(95, 172.976499642, 0), new carc.Isotope(96, 173.972811276, 0), new carc.Isotope(97, 174.972276, 0), new carc.Isotope(98, 175.969, 0), new carc.Isotope(99, 176.968453, 0), new carc.Isotope(100, 177.964894223, 0), new carc.Isotope(101, 178.965475, 0), new carc.Isotope(102, 179.962023729, 0), new carc.Isotope(103, 180.963177, 0), new carc.Isotope(104, 181.961267637, 0), new carc.Isotope(105, 182.961729, 0), new carc.Isotope(106, 183.959851685, 0), new carc.Isotope(107, 184.960753782, 0), new carc.Isotope(108, 185.959432346, 0), new carc.Isotope(109, 186.960697, 0), new carc.Isotope(110, 187.959395697, 0), new carc.Isotope(111, 188.9608319, 0), new carc.Isotope(112, 189.959930073, 0.0296), new carc.Isotope(113, 190.961684653, 0), new carc.Isotope(114, 191.961035158, 2.3373), new carc.Isotope(115, 192.962984504, 0), new carc.Isotope(116, 193.962663581, 97.3373), new carc.Isotope(117, 194.964774449, 100), new carc.Isotope(118, 195.964934884, 74.8521), new carc.Isotope(119, 196.967323401, 0), new carc.Isotope(120, 197.967876009, 21.3018), new carc.Isotope(121, 198.970576213, 0), new carc.Isotope(122, 199.971423885, 0), new carc.Isotope(123, 200.974496467, 0), new carc.Isotope(124, 201.97574, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(92, 170.991183, 0), new carc.Isotope(93, 171.990109, 0), new carc.Isotope(94, 172.986398138, 0), new carc.Isotope(95, 173.984325861, 0), new carc.Isotope(96, 174.981552, 0), new carc.Isotope(97, 175.980269, 0), new carc.Isotope(98, 176.977215, 0), new carc.Isotope(99, 177.975975, 0), new carc.Isotope(100, 178.973412, 0), new carc.Isotope(101, 179.972396, 0), new carc.Isotope(102, 180.969948, 0), new carc.Isotope(103, 181.968621416, 0), new carc.Isotope(104, 182.96762, 0), new carc.Isotope(105, 183.966776046, 0), new carc.Isotope(106, 184.965806956, 0), new carc.Isotope(107, 185.965997671, 0), new carc.Isotope(108, 186.964562, 0), new carc.Isotope(109, 187.965321662, 0), new carc.Isotope(110, 188.9642243, 0), new carc.Isotope(111, 189.964698757, 0), new carc.Isotope(112, 190.963649239, 0), new carc.Isotope(113, 191.964810107, 0), new carc.Isotope(114, 192.964131745, 0), new carc.Isotope(115, 193.96533889, 0), new carc.Isotope(116, 194.965017928, 0), new carc.Isotope(117, 195.966551315, 0), new carc.Isotope(118, 196.966551609, 100), new carc.Isotope(119, 197.968225244, 0), new carc.Isotope(120, 198.968748016, 0), new carc.Isotope(121, 199.970717886, 0), new carc.Isotope(122, 200.971640839, 0), new carc.Isotope(123, 201.973788431, 0), new carc.Isotope(124, 202.975137256, 0), new carc.Isotope(125, 203.977705, 0), new carc.Isotope(126, 204.97961, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(95, 174.991411, 0), new carc.Isotope(96, 175.987413248, 0), new carc.Isotope(97, 176.986336874, 0), new carc.Isotope(98, 177.982476325, 0), new carc.Isotope(99, 178.981783, 0), new carc.Isotope(100, 179.978322, 0), new carc.Isotope(101, 180.977806, 0), new carc.Isotope(102, 181.97393546, 0), new carc.Isotope(103, 182.974561, 0), new carc.Isotope(104, 183.970705219, 0), new carc.Isotope(105, 184.971983, 0), new carc.Isotope(106, 185.969460021, 0), new carc.Isotope(107, 186.969785, 0), new carc.Isotope(108, 187.967511693, 0), new carc.Isotope(109, 188.968733187, 0), new carc.Isotope(110, 189.966958568, 0), new carc.Isotope(111, 190.96706311, 0), new carc.Isotope(112, 191.965921572, 0), new carc.Isotope(113, 192.966644169, 0), new carc.Isotope(114, 193.965381832, 0), new carc.Isotope(115, 194.966638981, 0), new carc.Isotope(116, 195.965814846, 0.5059), new carc.Isotope(117, 196.967195333, 0), new carc.Isotope(118, 197.96675183, 34.0641), new carc.Isotope(119, 198.968262489, 57.3356), new carc.Isotope(120, 199.968308726, 77.9089), new carc.Isotope(121, 200.970285275, 44.5194), new carc.Isotope(122, 201.970625604, 100), new carc.Isotope(123, 202.972857096, 0), new carc.Isotope(124, 203.97347564, 22.9342), new carc.Isotope(125, 204.976056104, 0), new carc.Isotope(126, 205.977498672, 0), new carc.Isotope(127, 206.982577025, 0), new carc.Isotope(128, 207.98594, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(96, 176.996881, 0), new carc.Isotope(97, 177.994637, 0), new carc.Isotope(98, 178.991466, 0), new carc.Isotope(99, 179.990194, 0), new carc.Isotope(100, 180.986904, 0), new carc.Isotope(101, 181.98561, 0), new carc.Isotope(102, 182.982697, 0), new carc.Isotope(103, 183.98176, 0), new carc.Isotope(104, 184.9791, 0), new carc.Isotope(105, 185.977549881, 0), new carc.Isotope(106, 186.97617, 0), new carc.Isotope(107, 187.97592, 0), new carc.Isotope(108, 188.974290451, 0), new carc.Isotope(109, 189.974473379, 0), new carc.Isotope(110, 190.972261952, 0), new carc.Isotope(111, 191.972770785, 0), new carc.Isotope(112, 192.970548, 0), new carc.Isotope(113, 193.971053, 0), new carc.Isotope(114, 194.96965, 0), new carc.Isotope(115, 195.970515, 0), new carc.Isotope(116, 196.9695362, 0), new carc.Isotope(117, 197.970466294, 0), new carc.Isotope(118, 198.969813837, 0), new carc.Isotope(119, 199.970945394, 0), new carc.Isotope(120, 200.97080377, 0), new carc.Isotope(121, 201.972090569, 0), new carc.Isotope(122, 202.972329088, 41.8922), new carc.Isotope(123, 203.973848646, 0), new carc.Isotope(124, 204.97441227, 100), new carc.Isotope(125, 205.976095321, 0), new carc.Isotope(126, 206.977407908, 0), new carc.Isotope(127, 207.982004653, 0), new carc.Isotope(128, 208.985349125, 0), new carc.Isotope(129, 209.990065574, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(99, 180.996714, 0), new carc.Isotope(100, 181.992676101, 0), new carc.Isotope(101, 182.99193, 0), new carc.Isotope(102, 183.988198, 0), new carc.Isotope(103, 184.98758, 0), new carc.Isotope(104, 185.983485388, 0), new carc.Isotope(105, 186.98403, 0), new carc.Isotope(106, 187.979869108, 0), new carc.Isotope(107, 188.98088, 0), new carc.Isotope(108, 189.978180008, 0), new carc.Isotope(109, 190.9782, 0), new carc.Isotope(110, 191.975719811, 0), new carc.Isotope(111, 192.97608, 0), new carc.Isotope(112, 193.974648056, 0), new carc.Isotope(113, 194.975920279, 0), new carc.Isotope(114, 195.97271, 0), new carc.Isotope(115, 196.97338, 0), new carc.Isotope(116, 197.97198, 0), new carc.Isotope(117, 198.972909384, 0), new carc.Isotope(118, 199.97181556, 0), new carc.Isotope(119, 200.972846589, 0), new carc.Isotope(120, 201.972143786, 0), new carc.Isotope(121, 202.973375491, 0), new carc.Isotope(122, 203.973028761, 2.6718), new carc.Isotope(123, 204.974467112, 0), new carc.Isotope(124, 205.974449002, 45.9923), new carc.Isotope(125, 206.975880605, 42.1756), new carc.Isotope(126, 207.97663585, 100), new carc.Isotope(127, 208.981074801, 0), new carc.Isotope(128, 209.984173129, 0), new carc.Isotope(129, 210.988731474, 0), new carc.Isotope(130, 211.991887495, 0), new carc.Isotope(131, 212.9965, 0), new carc.Isotope(132, 213.999798147, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(102, 184.997708, 0), new carc.Isotope(103, 185.99648, 0), new carc.Isotope(104, 186.993458, 0), new carc.Isotope(105, 187.992173, 0), new carc.Isotope(106, 188.989505, 0), new carc.Isotope(107, 189.987520007, 0), new carc.Isotope(108, 190.986053, 0), new carc.Isotope(109, 191.985368, 0), new carc.Isotope(110, 192.983662229, 0), new carc.Isotope(111, 193.983430186, 0), new carc.Isotope(112, 194.98112697, 0), new carc.Isotope(113, 195.981236107, 0), new carc.Isotope(114, 196.978934287, 0), new carc.Isotope(115, 197.979024396, 0), new carc.Isotope(116, 198.977576953, 0), new carc.Isotope(117, 199.978141983, 0), new carc.Isotope(118, 200.976970721, 0), new carc.Isotope(119, 201.977674504, 0), new carc.Isotope(120, 202.976868118, 0), new carc.Isotope(121, 203.977805161, 0), new carc.Isotope(122, 204.977374688, 0), new carc.Isotope(123, 205.978482854, 0), new carc.Isotope(124, 206.978455217, 0), new carc.Isotope(125, 207.979726699, 0), new carc.Isotope(126, 208.980383241, 100), new carc.Isotope(127, 209.984104944, 0), new carc.Isotope(128, 210.987258139, 0), new carc.Isotope(129, 211.991271542, 0), new carc.Isotope(130, 212.994374836, 0), new carc.Isotope(131, 213.998698664, 0), new carc.Isotope(132, 215.001832349, 0), new carc.Isotope(133, 216.006199, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(106, 189.994293888, 0), new carc.Isotope(107, 190.994653, 0), new carc.Isotope(108, 191.99033039, 0), new carc.Isotope(109, 192.991102, 0), new carc.Isotope(110, 193.988284107, 0), new carc.Isotope(111, 194.988045, 0), new carc.Isotope(112, 195.985469432, 0), new carc.Isotope(113, 196.985567, 0), new carc.Isotope(114, 197.984024384, 0), new carc.Isotope(115, 198.985044507, 0), new carc.Isotope(116, 199.981735, 0), new carc.Isotope(117, 200.982209, 0), new carc.Isotope(118, 201.980704, 0), new carc.Isotope(119, 202.981412863, 0), new carc.Isotope(120, 203.980307113, 0), new carc.Isotope(121, 204.981165396, 0), new carc.Isotope(122, 205.980465241, 0), new carc.Isotope(123, 206.981578228, 0), new carc.Isotope(124, 207.981231059, 0), new carc.Isotope(125, 208.982415788, 0), new carc.Isotope(126, 209.982857396, 0), new carc.Isotope(127, 210.986636869, 0), new carc.Isotope(128, 211.988851755, 0), new carc.Isotope(129, 212.992842522, 0), new carc.Isotope(130, 213.995185949, 0), new carc.Isotope(131, 214.999414609, 0), new carc.Isotope(132, 216.001905198, 0), new carc.Isotope(133, 217.006253, 0), new carc.Isotope(134, 218.008965773, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(108, 193.000188, 0), new carc.Isotope(109, 193.997973, 0), new carc.Isotope(110, 194.996554, 0), new carc.Isotope(111, 195.995702, 0), new carc.Isotope(112, 196.993891293, 0), new carc.Isotope(113, 197.99343368, 0), new carc.Isotope(114, 198.991008569, 0), new carc.Isotope(115, 199.990920883, 0), new carc.Isotope(116, 200.988486908, 0), new carc.Isotope(117, 201.988448629, 0), new carc.Isotope(118, 202.986847216, 0), new carc.Isotope(119, 203.987261559, 0), new carc.Isotope(120, 204.986036352, 0), new carc.Isotope(121, 205.986599242, 0), new carc.Isotope(122, 206.985775861, 0), new carc.Isotope(123, 207.986582508, 0), new carc.Isotope(124, 208.986158678, 0), new carc.Isotope(125, 209.987131308, 0), new carc.Isotope(126, 210.987480806, 0), new carc.Isotope(127, 211.990734657, 0), new carc.Isotope(128, 212.99292115, 0), new carc.Isotope(129, 213.996356412, 0), new carc.Isotope(130, 214.998641245, 0), new carc.Isotope(131, 216.002408839, 0), new carc.Isotope(132, 217.004709619, 0), new carc.Isotope(133, 218.008681458, 0), new carc.Isotope(134, 219.011296478, 0), new carc.Isotope(135, 220.015301, 0), new carc.Isotope(136, 221.01814, 0), new carc.Isotope(137, 222.02233, 0), new carc.Isotope(138, 223.02534, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(110, 196.001117268, 0), new carc.Isotope(111, 197.001661, 0), new carc.Isotope(112, 197.998779978, 0), new carc.Isotope(113, 198.998309, 0), new carc.Isotope(114, 199.995634148, 0), new carc.Isotope(115, 200.995535, 0), new carc.Isotope(116, 201.993899382, 0), new carc.Isotope(117, 202.994765192, 0), new carc.Isotope(118, 203.991365, 0), new carc.Isotope(119, 204.991668, 0), new carc.Isotope(120, 205.99016, 0), new carc.Isotope(121, 206.990726826, 0), new carc.Isotope(122, 207.989631237, 0), new carc.Isotope(123, 208.990376634, 0), new carc.Isotope(124, 209.989679862, 0), new carc.Isotope(125, 210.99058541, 0), new carc.Isotope(126, 211.990688899, 0), new carc.Isotope(127, 212.993868354, 0), new carc.Isotope(128, 213.995346275, 0), new carc.Isotope(129, 214.998729195, 0), new carc.Isotope(130, 216.000258153, 0), new carc.Isotope(131, 217.003914555, 0), new carc.Isotope(132, 218.005586315, 0), new carc.Isotope(133, 219.009474831, 0), new carc.Isotope(134, 220.011384149, 0), new carc.Isotope(135, 221.015455, 0), new carc.Isotope(136, 222.017570472, 0), new carc.Isotope(137, 223.02179, 0), new carc.Isotope(138, 224.02409, 0), new carc.Isotope(139, 225.02844, 0), new carc.Isotope(140, 226.03089, 0), new carc.Isotope(141, 227.035407, 0), new carc.Isotope(142, 228.038084, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(113, 200.006499, 0), new carc.Isotope(114, 201.00458692, 0), new carc.Isotope(115, 202.00396885, 0), new carc.Isotope(116, 203.001423829, 0), new carc.Isotope(117, 204.001221209, 0), new carc.Isotope(118, 204.998663961, 0), new carc.Isotope(119, 205.998486886, 0), new carc.Isotope(120, 206.996859385, 0), new carc.Isotope(121, 207.997133849, 0), new carc.Isotope(122, 208.995915421, 0), new carc.Isotope(123, 209.996398327, 0), new carc.Isotope(124, 210.995529332, 0), new carc.Isotope(125, 211.996194988, 0), new carc.Isotope(126, 212.996174845, 0), new carc.Isotope(127, 213.99895474, 0), new carc.Isotope(128, 215.000326029, 0), new carc.Isotope(129, 216.003187873, 0), new carc.Isotope(130, 217.004616452, 0), new carc.Isotope(131, 218.007563326, 0), new carc.Isotope(132, 219.009240843, 0), new carc.Isotope(133, 220.012312978, 0), new carc.Isotope(134, 221.014245654, 0), new carc.Isotope(135, 222.017543957, 0), new carc.Isotope(136, 223.019730712, 0), new carc.Isotope(137, 224.023235513, 0), new carc.Isotope(138, 225.025606914, 0), new carc.Isotope(139, 226.029343423, 0), new carc.Isotope(140, 227.031833167, 0), new carc.Isotope(141, 228.034776087, 0), new carc.Isotope(142, 229.038426, 0), new carc.Isotope(143, 230.04251, 0), new carc.Isotope(144, 231.045407, 0), new carc.Isotope(145, 232.049654, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(115, 203.00921, 0), new carc.Isotope(116, 204.006434513, 0), new carc.Isotope(117, 205.006187, 0), new carc.Isotope(118, 206.004463814, 0), new carc.Isotope(119, 207.005176607, 0), new carc.Isotope(120, 208.001776, 0), new carc.Isotope(121, 209.001944, 0), new carc.Isotope(122, 210.000446, 0), new carc.Isotope(123, 211.000893996, 0), new carc.Isotope(124, 211.999783492, 0), new carc.Isotope(125, 213.000345847, 0), new carc.Isotope(126, 214.000091141, 0), new carc.Isotope(127, 215.002704195, 0), new carc.Isotope(128, 216.003518402, 0), new carc.Isotope(129, 217.00630601, 0), new carc.Isotope(130, 218.007123948, 0), new carc.Isotope(131, 219.010068787, 0), new carc.Isotope(132, 220.011014669, 0), new carc.Isotope(133, 221.013907762, 0), new carc.Isotope(134, 222.01536182, 0), new carc.Isotope(135, 223.01849714, 0), new carc.Isotope(136, 224.020202004, 0), new carc.Isotope(137, 225.023604463, 0), new carc.Isotope(138, 226.025402555, 0), new carc.Isotope(139, 227.029170677, 0), new carc.Isotope(140, 228.031064101, 0), new carc.Isotope(141, 229.034820309, 0), new carc.Isotope(142, 230.037084774, 0), new carc.Isotope(143, 231.04122, 0), new carc.Isotope(144, 232.043693, 0), new carc.Isotope(145, 233.047995, 0), new carc.Isotope(146, 234.050547, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(118, 207.012469754, 0), new carc.Isotope(119, 208.012112949, 0), new carc.Isotope(120, 209.009568736, 0), new carc.Isotope(121, 210.009256802, 0), new carc.Isotope(122, 211.007648196, 0), new carc.Isotope(123, 212.007811441, 0), new carc.Isotope(124, 213.006573689, 0), new carc.Isotope(125, 214.006893072, 0), new carc.Isotope(126, 215.006450832, 0), new carc.Isotope(127, 216.008721268, 0), new carc.Isotope(128, 217.009332676, 0), new carc.Isotope(129, 218.011625045, 0), new carc.Isotope(130, 219.012404918, 0), new carc.Isotope(131, 220.014752105, 0), new carc.Isotope(132, 221.015575746, 0), new carc.Isotope(133, 222.017828852, 0), new carc.Isotope(134, 223.01912603, 0), new carc.Isotope(135, 224.021708435, 0), new carc.Isotope(136, 225.023220576, 0), new carc.Isotope(137, 226.026089848, 0), new carc.Isotope(138, 227.027746979, 0), new carc.Isotope(139, 228.031014825, 0), new carc.Isotope(140, 229.032930871, 0), new carc.Isotope(141, 230.036025144, 0), new carc.Isotope(142, 231.038551503, 0), new carc.Isotope(143, 232.042022474, 0), new carc.Isotope(144, 233.04455, 0), new carc.Isotope(145, 234.04842, 0), new carc.Isotope(146, 235.051102, 0), new carc.Isotope(147, 236.055178, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(120, 210.015711883, 0), new carc.Isotope(121, 211.016306912, 0), new carc.Isotope(122, 212.012916, 0), new carc.Isotope(123, 213.012962, 0), new carc.Isotope(124, 214.011451, 0), new carc.Isotope(125, 215.011726597, 0), new carc.Isotope(126, 216.011050963, 0), new carc.Isotope(127, 217.013066169, 0), new carc.Isotope(128, 218.013267744, 0), new carc.Isotope(129, 219.015521253, 0), new carc.Isotope(130, 220.015733126, 0), new carc.Isotope(131, 221.018171499, 0), new carc.Isotope(132, 222.018454131, 0), new carc.Isotope(133, 223.020795153, 0), new carc.Isotope(134, 224.02145925, 0), new carc.Isotope(135, 225.023941441, 0), new carc.Isotope(136, 226.024890681, 0), new carc.Isotope(137, 227.027698859, 0), new carc.Isotope(138, 228.028731348, 0), new carc.Isotope(139, 229.03175534, 0), new carc.Isotope(140, 230.033126574, 0), new carc.Isotope(141, 231.03629706, 0), new carc.Isotope(142, 232.03805036, 100), new carc.Isotope(143, 233.041576923, 0), new carc.Isotope(144, 234.043595497, 0), new carc.Isotope(145, 235.04750442, 0), new carc.Isotope(146, 236.04971, 0), new carc.Isotope(147, 237.053894, 0), new carc.Isotope(148, 238.056243, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(122, 213.021183209, 0), new carc.Isotope(123, 214.02073923, 0), new carc.Isotope(124, 215.019097612, 0), new carc.Isotope(125, 216.019109649, 0), new carc.Isotope(126, 217.018288571, 0), new carc.Isotope(127, 218.020007906, 0), new carc.Isotope(128, 219.019880348, 0), new carc.Isotope(129, 220.021876493, 0), new carc.Isotope(130, 221.021863742, 0), new carc.Isotope(131, 222.023726, 0), new carc.Isotope(132, 223.023963748, 0), new carc.Isotope(133, 224.025614854, 0), new carc.Isotope(134, 225.026115172, 0), new carc.Isotope(135, 226.02793275, 0), new carc.Isotope(136, 227.028793151, 0), new carc.Isotope(137, 228.031036942, 0), new carc.Isotope(138, 229.032088601, 0), new carc.Isotope(139, 230.034532562, 0), new carc.Isotope(140, 231.035878898, 0), new carc.Isotope(141, 232.03858172, 0), new carc.Isotope(142, 233.040240235, 0), new carc.Isotope(143, 234.043302325, 0), new carc.Isotope(144, 235.045436759, 0), new carc.Isotope(145, 236.048675176, 0), new carc.Isotope(146, 237.05113943, 0), new carc.Isotope(147, 238.054497046, 0), new carc.Isotope(148, 239.05713, 0), new carc.Isotope(149, 240.06098, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(126, 218.023487, 0), new carc.Isotope(127, 219.024915423, 0), new carc.Isotope(128, 220.024712, 0), new carc.Isotope(129, 221.026351, 0), new carc.Isotope(130, 222.02607, 0), new carc.Isotope(131, 223.027722956, 0), new carc.Isotope(132, 224.027590139, 0), new carc.Isotope(133, 225.029384369, 0), new carc.Isotope(134, 226.02933975, 0), new carc.Isotope(135, 227.031140069, 0), new carc.Isotope(136, 228.031366357, 0), new carc.Isotope(137, 229.033496137, 0), new carc.Isotope(138, 230.033927392, 0), new carc.Isotope(139, 231.036289158, 0), new carc.Isotope(140, 232.03714628, 0), new carc.Isotope(141, 233.039628196, 0), new carc.Isotope(142, 234.040945606, 0.0055), new carc.Isotope(143, 235.043923062, 0.7253), new carc.Isotope(144, 236.045561897, 0), new carc.Isotope(145, 237.048723955, 0), new carc.Isotope(146, 238.050782583, 100), new carc.Isotope(147, 239.054287777, 0), new carc.Isotope(148, 240.056585734, 0), new carc.Isotope(149, 241.06033, 0), new carc.Isotope(150, 242.062925, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(132, 225.033899689, 0), new carc.Isotope(133, 226.035129, 0), new carc.Isotope(134, 227.034958261, 0), new carc.Isotope(135, 228.03618, 0), new carc.Isotope(136, 229.036246866, 0), new carc.Isotope(137, 230.037812591, 0), new carc.Isotope(138, 231.038233161, 0), new carc.Isotope(139, 232.040099, 0), new carc.Isotope(140, 233.04073235, 0), new carc.Isotope(141, 234.042888556, 0), new carc.Isotope(142, 235.044055876, 0), new carc.Isotope(143, 236.046559724, 0), new carc.Isotope(144, 237.048167253, 0), new carc.Isotope(145, 238.050940464, 0), new carc.Isotope(146, 239.052931399, 0), new carc.Isotope(147, 240.056168828, 0), new carc.Isotope(148, 241.058246266, 0), new carc.Isotope(149, 242.061635, 0), new carc.Isotope(150, 243.064273, 0), new carc.Isotope(151, 244.06785, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(134, 228.038727686, 0), new carc.Isotope(135, 229.040138934, 0), new carc.Isotope(136, 230.039645603, 0), new carc.Isotope(137, 231.041258, 0), new carc.Isotope(138, 232.041179445, 0), new carc.Isotope(139, 233.04298757, 0), new carc.Isotope(140, 234.043304681, 0), new carc.Isotope(141, 235.0452815, 0), new carc.Isotope(142, 236.046048088, 0), new carc.Isotope(143, 237.048403774, 0), new carc.Isotope(144, 238.0495534, 0), new carc.Isotope(145, 239.052156519, 0), new carc.Isotope(146, 240.05380746, 0), new carc.Isotope(147, 241.056845291, 0), new carc.Isotope(148, 242.058736847, 0), new carc.Isotope(149, 243.061997013, 0), new carc.Isotope(150, 244.06419765, 0), new carc.Isotope(151, 245.067738657, 0), new carc.Isotope(152, 246.070198429, 0), new carc.Isotope(153, 247.07407, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(136, 231.04556, 0), new carc.Isotope(137, 232.04659, 0), new carc.Isotope(138, 233.046472, 0), new carc.Isotope(139, 234.047794, 0), new carc.Isotope(140, 235.048029, 0), new carc.Isotope(141, 236.049569, 0), new carc.Isotope(142, 237.049970748, 0), new carc.Isotope(143, 238.051977839, 0), new carc.Isotope(144, 239.053018481, 0), new carc.Isotope(145, 240.055287826, 0), new carc.Isotope(146, 241.056822944, 0), new carc.Isotope(147, 242.059543039, 0), new carc.Isotope(148, 243.061372686, 0), new carc.Isotope(149, 244.064279429, 0), new carc.Isotope(150, 245.066445398, 0), new carc.Isotope(151, 246.069768438, 0), new carc.Isotope(152, 247.072086, 0), new carc.Isotope(153, 248.075745, 0), new carc.Isotope(154, 249.07848, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(137, 233.0508, 0), new carc.Isotope(138, 234.05024, 0), new carc.Isotope(139, 235.051591, 0), new carc.Isotope(140, 236.051405, 0), new carc.Isotope(141, 237.052891, 0), new carc.Isotope(142, 238.053016298, 0), new carc.Isotope(143, 239.054951, 0), new carc.Isotope(144, 240.055519046, 0), new carc.Isotope(145, 241.057646736, 0), new carc.Isotope(146, 242.058829326, 0), new carc.Isotope(147, 243.061382249, 0), new carc.Isotope(148, 244.062746349, 0), new carc.Isotope(149, 245.065485586, 0), new carc.Isotope(150, 246.067217551, 0), new carc.Isotope(151, 247.070346811, 0), new carc.Isotope(152, 248.072342247, 0), new carc.Isotope(153, 249.075947062, 0), new carc.Isotope(154, 250.078350687, 0), new carc.Isotope(155, 251.082277873, 0), new carc.Isotope(156, 252.08487, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(138, 235.05658, 0), new carc.Isotope(139, 236.05733, 0), new carc.Isotope(140, 237.057127, 0), new carc.Isotope(141, 238.058266, 0), new carc.Isotope(142, 239.058362, 0), new carc.Isotope(143, 240.059749, 0), new carc.Isotope(144, 241.060223, 0), new carc.Isotope(145, 242.06205, 0), new carc.Isotope(146, 243.06300157, 0), new carc.Isotope(147, 244.065167882, 0), new carc.Isotope(148, 245.066355386, 0), new carc.Isotope(149, 246.068666836, 0), new carc.Isotope(150, 247.070298533, 0), new carc.Isotope(151, 248.07308, 0), new carc.Isotope(152, 249.074979937, 0), new carc.Isotope(153, 250.078310529, 0), new carc.Isotope(154, 251.08075344, 0), new carc.Isotope(155, 252.084303, 0), new carc.Isotope(156, 253.08688, 0), new carc.Isotope(157, 254.0906, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(139, 237.06207, 0), new carc.Isotope(140, 238.06141, 0), new carc.Isotope(141, 239.062579, 0), new carc.Isotope(142, 240.062295, 0), new carc.Isotope(143, 241.063716, 0), new carc.Isotope(144, 242.063688713, 0), new carc.Isotope(145, 243.065421, 0), new carc.Isotope(146, 244.06599039, 0), new carc.Isotope(147, 245.068039, 0), new carc.Isotope(148, 246.068798807, 0), new carc.Isotope(149, 247.070992043, 0), new carc.Isotope(150, 248.07217808, 0), new carc.Isotope(151, 249.074846818, 0), new carc.Isotope(152, 250.076399951, 0), new carc.Isotope(153, 251.079580056, 0), new carc.Isotope(154, 252.081619582, 0), new carc.Isotope(155, 253.085126791, 0), new carc.Isotope(156, 254.087316198, 0), new carc.Isotope(157, 255.091039, 0), new carc.Isotope(158, 256.09344, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(141, 240.06892, 0), new carc.Isotope(142, 241.068662, 0), new carc.Isotope(143, 242.069699, 0), new carc.Isotope(144, 243.069631, 0), new carc.Isotope(145, 244.070969, 0), new carc.Isotope(146, 245.071317, 0), new carc.Isotope(147, 246.072965, 0), new carc.Isotope(148, 247.07365, 0), new carc.Isotope(149, 248.075458, 0), new carc.Isotope(150, 249.076405, 0), new carc.Isotope(151, 250.078654, 0), new carc.Isotope(152, 251.079983592, 0), new carc.Isotope(153, 252.082972247, 0), new carc.Isotope(154, 253.084817974, 0), new carc.Isotope(155, 254.088016026, 0), new carc.Isotope(156, 255.090266386, 0), new carc.Isotope(157, 256.093592, 0), new carc.Isotope(158, 257.095979, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(142, 242.07343, 0), new carc.Isotope(143, 243.07451, 0), new carc.Isotope(144, 244.074077, 0), new carc.Isotope(145, 245.075375, 0), new carc.Isotope(146, 246.075281634, 0), new carc.Isotope(147, 247.076819, 0), new carc.Isotope(148, 248.077184411, 0), new carc.Isotope(149, 249.079024, 0), new carc.Isotope(150, 250.079514759, 0), new carc.Isotope(151, 251.081566467, 0), new carc.Isotope(152, 252.082460071, 0), new carc.Isotope(153, 253.085176259, 0), new carc.Isotope(154, 254.086847795, 0), new carc.Isotope(155, 255.089955466, 0), new carc.Isotope(156, 256.091766522, 0), new carc.Isotope(157, 257.095098635, 0), new carc.Isotope(158, 258.097069, 0), new carc.Isotope(159, 259.100588, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(144, 245.081017, 0), new carc.Isotope(145, 246.081933, 0), new carc.Isotope(146, 247.081804, 0), new carc.Isotope(147, 248.082909, 0), new carc.Isotope(148, 249.083002, 0), new carc.Isotope(149, 250.084488, 0), new carc.Isotope(150, 251.084919, 0), new carc.Isotope(151, 252.08663, 0), new carc.Isotope(152, 253.08728, 0), new carc.Isotope(153, 254.089725, 0), new carc.Isotope(154, 255.091075196, 0), new carc.Isotope(155, 256.094052757, 0), new carc.Isotope(156, 257.095534643, 0), new carc.Isotope(157, 258.098425321, 0), new carc.Isotope(158, 259.100503, 0), new carc.Isotope(159, 260.103645, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(147, 249.087823, 0), new carc.Isotope(148, 250.087493, 0), new carc.Isotope(149, 251.08896, 0), new carc.Isotope(150, 252.088965909, 0), new carc.Isotope(151, 253.090649, 0), new carc.Isotope(152, 254.090948746, 0), new carc.Isotope(153, 255.093232449, 0), new carc.Isotope(154, 256.094275879, 0), new carc.Isotope(155, 257.096852778, 0), new carc.Isotope(156, 258.0982, 0), new carc.Isotope(157, 259.101024, 0), new carc.Isotope(158, 260.102636, 0), new carc.Isotope(159, 261.105743, 0), new carc.Isotope(160, 262.10752, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(148, 251.09436, 0), new carc.Isotope(149, 252.09533, 0), new carc.Isotope(150, 253.095258, 0), new carc.Isotope(151, 254.096587, 0), new carc.Isotope(152, 255.096769, 0), new carc.Isotope(153, 256.098763, 0), new carc.Isotope(154, 257.099606, 0), new carc.Isotope(155, 258.101883, 0), new carc.Isotope(156, 259.10299, 0), new carc.Isotope(157, 260.105572, 0), new carc.Isotope(158, 261.106941, 0), new carc.Isotope(159, 262.109692, 0), new carc.Isotope(160, 263.111394, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(149, 253.100679, 0), new carc.Isotope(150, 254.100166, 0), new carc.Isotope(151, 255.101492, 0), new carc.Isotope(152, 256.101179573, 0), new carc.Isotope(153, 257.103072, 0), new carc.Isotope(154, 258.103568, 0), new carc.Isotope(155, 259.105628, 0), new carc.Isotope(156, 260.106434, 0), new carc.Isotope(157, 261.108752, 0), new carc.Isotope(158, 262.109918, 0), new carc.Isotope(159, 263.11254, 0), new carc.Isotope(160, 264.113978, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(150, 255.107398, 0), new carc.Isotope(151, 256.10811, 0), new carc.Isotope(152, 257.107858, 0), new carc.Isotope(153, 258.109438, 0), new carc.Isotope(154, 259.109721, 0), new carc.Isotope(155, 260.111427, 0), new carc.Isotope(156, 261.112106, 0), new carc.Isotope(157, 262.114153, 0), new carc.Isotope(158, 263.115078, 0), new carc.Isotope(159, 264.117473, 0), new carc.Isotope(160, 265.118659, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(152, 258.113151, 0), new carc.Isotope(153, 259.114652, 0), new carc.Isotope(154, 260.114435447, 0), new carc.Isotope(155, 261.116199, 0), new carc.Isotope(156, 262.116477, 0), new carc.Isotope(157, 263.118313, 0), new carc.Isotope(158, 264.118924, 0), new carc.Isotope(159, 265.121066, 0), new carc.Isotope(160, 266.121928, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(153, 260.121803, 0), new carc.Isotope(154, 261.1218, 0), new carc.Isotope(155, 262.123009, 0), new carc.Isotope(156, 263.123146, 0), new carc.Isotope(157, 264.12473, 0), new carc.Isotope(158, 265.125198, 0), new carc.Isotope(159, 266.127009, 0), new carc.Isotope(160, 267.12774, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(155, 263.12871, 0), new carc.Isotope(156, 264.128408258, 0), new carc.Isotope(157, 265.130001, 0), new carc.Isotope(158, 266.130042, 0), new carc.Isotope(159, 267.131774, 0), new carc.Isotope(160, 268.132156, 0), new carc.Isotope(161, 269.134114, 0)]), stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_actelion_research_chem_Isotope_2_classLit, 1), {10:1, 4:1, 1:1, 8:1}, 3, 0, [new carc.Isotope(156, 265.136567, 0), new carc.Isotope(157, 266.13794, 0), new carc.Isotope(158, 267.137526, 0), new carc.Isotope(159, 268.138816, 0), new carc.Isotope(160, 269.139106, 0), new carc.Isotope(161, 270.140723, 0), new carc.Isotope(162, 271.141229, 0)])]);
}
;
carc.getAbsoluteMass = function getAbsoluteMass(atomicNo, mass){
  carc.$clinit_IsotopeHelper();
  var i, neutrones;
  neutrones = mass - atomicNo;
  for (i = 0; i < carc.sIsotope[atomicNo].length; i++)
    if (carc.sIsotope[atomicNo][i].neutrones == neutrones)
      return carc.sIsotope[atomicNo][i].absoluteMass;
  return NaN;
}
;
defineClass(435, 1, {1:1});
cggl.Lcom_actelion_research_chem_IsotopeHelper_2_classLit = createForClass('com.actelion.research.chem', 'IsotopeHelper', 435, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_MesoFragmentBranch = function $clinit_MesoFragmentBranch(){
  carc.$clinit_MesoFragmentBranch = emptyMethod;
}
;
defineClass(152, 1, {152:1, 1:1});
_.neighbourIndex = 0;
cggl.Lcom_actelion_research_chem_MesoFragmentBranch_2_classLit = createForClass('com.actelion.research.chem', 'MesoFragmentBranch', 152, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_MolecularFormula = function $clinit_MolecularFormula(){
  carc.$clinit_MolecularFormula = emptyMethod;
  jl.$clinit_Object();
  carc.sRelativeMass = stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [0, 1.00794, 4.0026, 6.941, 9.0122, 10.811, 12.011, 14.007, 15.999, 18.998, 20.18, 22.99, 24.305, 26.982, 28.086, 30.974, 32.066, 35.453, 39.948, 39.098, 40.078, 44.956, 47.867, 50.942, 51.996, 54.938, 55.845, 58.933, 58.693, 63.546, 65.39, 69.723, 72.61, 74.922, 78.96, 79.904, 83.8, 85.468, 87.62, 88.906, 91.224, 92.906, 95.94, 98.906, 101.07, 102.91, 106.42, 107.87, 112.41, 114.82, 118.71, 121.76, 127.6, 126.9, 131.29, 132.91, 137.33, 138.91, 140.12, 140.91, 144.24, 146.92, 150.36, 151.96, 157.25, 158.93, 162.5, 164.93, 167.26, 168.93, 173.04, 174.97, 178.49, 180.95, 183.84, 186.21, 190.23, 192.22, 195.08, 196.97, 200.59, 204.38, 207.2, 208.98, 209.98, 209.99, 222.02, 223.02, 226.03, 227.03, 232.04, 231.04, 238.03, 237.05, 239.05, 241.06, 244.06, 249.08, 252.08, 252.08, 257.1, 258.1, 259.1, 262.11, 267.12, 268.13, 271.13, 270.13, 277.15, 276.15, 281.17, 281.17, 283.17, 285.18, 289.19, 289.19, 293.2, 294.21, 294.21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.0141, 3.016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71.0787, 156.18828, 114.10364, 115.0877, 103.1447, 128.13052, 129.11458, 57.05182, 137.14158, 113.15934, 113.15934, 128.17428, 131.19846, 147.17646, 97.11658, 87.0777, 101.10458, 186.2134, 163.17546, 99.13246]);
  carc.sAbsoluteMass = stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [0, 1.007825, 4.0026, 7.016003, 9.012182, 11.009305, 12, 14.003074, 15.994915, 18.998403, 19.992435, 22.989767, 23.985042, 26.98153, 27.976927, 30.973762, 31.97207, 34.968852, 39.962384, 38.963707, 39.962591, 44.95591, 47.947947, 50.943962, 51.940509, 54.938047, 55.934939, 58.933198, 57.935346, 62.939598, 63.929145, 68.92558, 73.921177, 74.921594, 79.91652, 78.918336, 83.911507, 84.911794, 87.905619, 88.905849, 89.904703, 92.906377, 97.905406, 89.92381, 101.904348, 102.9055, 105.903478, 106.905092, 113.903357, 114.90388, 119.9022, 120.903821, 129.906229, 126.904473, 131.904144, 132.905429, 137.905232, 138.906346, 139.905433, 140.907647, 141.907719, 135.92398, 151.919729, 152.921225, 157.924099, 158.925342, 163.929171, 164.930319, 165.93029, 168.934212, 173.938859, 174.94077, 179.946545, 180.947992, 183.950928, 186.955744, 191.961467, 192.962917, 194.964766, 196.966543, 201.970617, 204.974401, 207.976627, 208.980374, 193.98818, 195.99573, 199.9957, 201.00411, 206.0038, 210.00923, 232.038054, 216.01896, 238.050784, 229.03623, 232.041169, 237.05005, 238.05302, 242.06194, 240.06228, 243.06947, 243.07446, 248.08275, 251.08887, 253.09515, 257.10295, 257.10777, 271.13, 270.13, 277.15, 276.15, 281.17, 281.17, 283.17, 285.18, 289.19, 289.19, 291.2, 294.21, 294.21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.014, 3.01605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
  carc.sFirstFormulaAtomicNo = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [6, 1, 7, 8]);
}
;
carc.MolecularFormula = function MolecularFormula(mol){
  carc.$clinit_MolecularFormula();
  var atom, atom0, atom1, atomCount, atomMass, atomicNo, atomicNoCount, i, i0, lowestAtomicNo, lowestLabel;
  Object_0.call(this);
  this.$init_24();
  mol.ensureHelperArrays_0(1);
  atomCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 190 + 1, 15, 1);
  for (atom0 = 0; atom0 < mol.getAllAtoms_0(); atom0++) {
    switch (mol.getAtomicNo_0(atom0)) {
      case 171:
        atomCount[1] += 5;
        atomCount[6] += 3;
        atomCount[7] += 1;
        atomCount[8] += 1;
        break;
      case 172:
        atomCount[1] += 12;
        atomCount[6] += 6;
        atomCount[7] += 4;
        atomCount[8] += 1;
        break;
      case 173:
        atomCount[1] += 6;
        atomCount[6] += 4;
        atomCount[7] += 2;
        atomCount[8] += 2;
        break;
      case 174:
        atomCount[1] += 5;
        atomCount[6] += 4;
        atomCount[7] += 1;
        atomCount[8] += 3;
        break;
      case 175:
        atomCount[1] += 5;
        atomCount[6] += 3;
        atomCount[7] += 1;
        atomCount[8] += 1;
        atomCount[16] += 1;
        break;
      case 176:
        atomCount[1] += 8;
        atomCount[6] += 5;
        atomCount[7] += 2;
        atomCount[8] += 2;
        break;
      case 177:
        atomCount[1] += 7;
        atomCount[6] += 5;
        atomCount[7] += 1;
        atomCount[8] += 3;
        break;
      case 178:
        atomCount[1] += 3;
        atomCount[6] += 2;
        atomCount[7] += 1;
        atomCount[8] += 1;
        break;
      case 179:
        atomCount[1] += 7;
        atomCount[6] += 6;
        atomCount[7] += 3;
        atomCount[8] += 1;
        break;
      case 180:
        atomCount[1] += 11;
        atomCount[6] += 6;
        atomCount[7] += 1;
        atomCount[8] += 1;
        break;
      case 181:
        atomCount[1] += 11;
        atomCount[6] += 6;
        atomCount[7] += 1;
        atomCount[8] += 1;
        break;
      case 182:
        atomCount[1] += 12;
        atomCount[6] += 6;
        atomCount[7] += 2;
        atomCount[8] += 1;
        break;
      case 183:
        atomCount[1] += 9;
        atomCount[6] += 5;
        atomCount[7] += 1;
        atomCount[8] += 1;
        atomCount[16] += 1;
        break;
      case 184:
        atomCount[1] += 9;
        atomCount[6] += 9;
        atomCount[7] += 1;
        atomCount[8] += 1;
        break;
      case 185:
        atomCount[1] += 7;
        atomCount[6] += 5;
        atomCount[7] += 1;
        atomCount[8] += 1;
        break;
      case 186:
        atomCount[1] += 5;
        atomCount[6] += 3;
        atomCount[7] += 1;
        atomCount[8] += 2;
        break;
      case 187:
        atomCount[1] += 7;
        atomCount[6] += 4;
        atomCount[7] += 1;
        atomCount[8] += 2;
        break;
      case 188:
        atomCount[1] += 10;
        atomCount[6] += 11;
        atomCount[7] += 2;
        atomCount[8] += 1;
        break;
      case 189:
        atomCount[1] += 9;
        atomCount[6] += 9;
        atomCount[7] += 1;
        atomCount[8] += 2;
        break;
      case 190:
        atomCount[1] += 9;
        atomCount[6] += 5;
        atomCount[7] += 1;
        atomCount[8] += 1;
        break;
      case 1:
        switch (mol.getAtomMass_0(atom0)) {
          case 0:
          case 1:
            atomCount[1]++;
            break;
          case 2:
            atomCount[151]++;
            break;
          case 3:
            atomCount[152]++;
            break;
        }

        break;
      default:atomCount[mol.getAtomicNo_0(atom0)]++;
        break;
    }
  }
  for (atom1 = 0; atom1 < mol.getAllAtoms_0(); atom1++)
    if (mol.getAtomicNo_0(atom1) >= 171 && mol.getAtomicNo_0(atom1) <= 190)
      atomCount[1] += 2 - mol.getOccupiedValence_0(atom1);
    else {
      atomCount[1] += mol.getImplicitHydrogens_0(atom1);
    }
  atomicNoCount = 0;
  for (i0 = 1; i0 <= 190; i0++)
    if (atomCount[i0] != 0)
      atomicNoCount++;
  this.mAtomCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atomicNoCount, 15, 1);
  this.mAtomicNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atomicNoCount, 15, 1);
  atomicNoCount = 0;
  for (i = 0; i < carc.sFirstFormulaAtomicNo.length; i++) {
    if (atomCount[carc.sFirstFormulaAtomicNo[i]] != 0) {
      this.mAtomCount[atomicNoCount] = atomCount[carc.sFirstFormulaAtomicNo[i]];
      this.mAtomicNo[atomicNoCount] = carc.sFirstFormulaAtomicNo[i];
      atomicNoCount++;
      atomCount[carc.sFirstFormulaAtomicNo[i]] = 0;
    }
  }
  while (true) {
    lowestLabel = 'zzz';
    lowestAtomicNo = -1;
    for (atomicNo = 1; atomicNo <= 190; atomicNo++)
      if (atomCount[atomicNo] > 0 && jl.compareTo_Ljava_lang_String__I__devirtual$(lowestLabel, (carc.$clinit_Molecule() , carc.cAtomLabel)[atomicNo]) > 0) {
        lowestLabel = (carc.$clinit_Molecule() , carc.cAtomLabel)[atomicNo];
        lowestAtomicNo = atomicNo;
      }
    if (lowestAtomicNo == -1)
      break;
    this.mAtomCount[atomicNoCount] = atomCount[lowestAtomicNo];
    this.mAtomicNo[atomicNoCount] = lowestAtomicNo;
    atomicNoCount++;
    atomCount[lowestAtomicNo] = 0;
  }
  this.mAbsoluteIsotopeWeightIncrement = 0;
  this.mRelativeIsotopeWeightIncrement = 0;
  for (atom = 0; atom < mol.getAtoms_0(); atom++) {
    if (mol.getAtomicNo_0(atom) != 1 && !mol.isNaturalAbundance_0(atom)) {
      atomicNo = mol.getAtomicNo_0(atom);
      atomMass = mol.getAtomMass_0(atom);
      this.mAbsoluteIsotopeWeightIncrement += carc.getAbsoluteMass(atomicNo, atomMass) - carc.sAbsoluteMass[atomicNo];
      this.mRelativeIsotopeWeightIncrement += carc.getAbsoluteMass(atomicNo, atomMass) - carc.sRelativeMass[atomicNo];
    }
  }
}
;
defineClass(94, 1, {1:1});
_.$init_24 = function $init_24(){
}
;
_.getAbsoluteWeight = function getAbsoluteWeight(){
  var i, weight;
  weight = this.mAbsoluteIsotopeWeightIncrement;
  for (i = 0; i < this.mAtomCount.length; i++)
    weight += this.mAtomCount[i] * carc.sAbsoluteMass[this.mAtomicNo[i]];
  return weight;
}
;
_.getFormula = function getFormula(){
  var formula, i;
  formula = new jl.StringBuffer;
  for (i = 0; i < this.mAtomCount.length; i++) {
    formula.append_0((carc.$clinit_Molecule() , carc.cAtomLabel)[this.mAtomicNo[i]]);
    if (this.mAtomCount[i] > 1)
      formula.append_0(jl.toString_23(this.mAtomCount[i]));
  }
  return formula.toString_0();
}
;
_.getRelativeWeight = function getRelativeWeight(){
  var i, weight;
  weight = this.mRelativeIsotopeWeightIncrement;
  for (i = 0; i < this.mAtomCount.length; i++)
    weight += this.mAtomCount[i] * carc.sRelativeMass[this.mAtomicNo[i]];
  return weight;
}
;
_.mAbsoluteIsotopeWeightIncrement = 0;
_.mRelativeIsotopeWeightIncrement = 0;
cggl.Lcom_actelion_research_chem_MolecularFormula_2_classLit = createForClass('com.actelion.research.chem', 'MolecularFormula', 94, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_MolfileCreator = function $clinit_MolfileCreator(){
  carc.$clinit_MolfileCreator = emptyMethod;
  jl.$clinit_Object();
}
;
carc.MolfileCreator = function MolfileCreator(mol){
  carc.$clinit_MolfileCreator();
  carc.MolfileCreator_0.call(this, mol, true);
}
;
carc.MolfileCreator_0 = function MolfileCreator_0(mol, scale){
  carc.MolfileCreator_1.call(this, mol, scale, new jl.StringBuilder_0(32768));
}
;
carc.MolfileCreator_1 = function MolfileCreator_1(mol, scale, builder){
  var atom, atom0, atom1, atom2, atom3, atom4, atom5, atom6, atom7, atom8, atom9, atomLabel, atomList, avbl, bond, bondType, charge, count, distance, dx, dy, dz, esrGroupCount, grafac, group, hasCoordinates, hydrogenFlags, i, isRacemic, label_0, maxESRGroup, maxGroupCount, minDistance, name_0, no, order, ringFeatures, ringState, stereo, substitution, topology, valence;
  Object_0.call(this);
  this.$init_25();
  mol.ensureHelperArrays_0(7);
  isRacemic = true;
  for (atom0 = 0; atom0 < mol.getAtoms_0(); atom0++) {
    if (mol.getAtomParity_0(atom0) != 0 && mol.getAtomParity_0(atom0) != 3 && mol.getAtomESRType_0(atom0) != 1) {
      isRacemic = false;
      break;
    }
  }
  maxESRGroup = -1;
  if (isRacemic) {
    esrGroupCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 32, 15, 1);
    maxGroupCount = 0;
    for (atom1 = 0; atom1 < mol.getAtoms_0(); atom1++) {
      if (mol.getAtomParity_0(atom1) != 0 && mol.getAtomParity_0(atom1) != 3 && mol.getAtomESRType_0(atom1) == 1) {
        group = mol.getAtomESRGroup_0(atom1);
        esrGroupCount[group]++;
        if (maxGroupCount < esrGroupCount[group]) {
          maxGroupCount = esrGroupCount[group];
          maxESRGroup = group;
        }
        break;
      }
    }
  }
  this.mBuilder = builder;
  name_0 = jsNotEquals(mol.getName_0(), null)?mol.getName_0():'';
  this.mBuilder.append_5(name_0 + '\n');
  this.mBuilder.append_5('Actelion Java MolfileCreator 1.0\n\n');
  this.appendThreeDigitInt(mol.getAllAtoms_0());
  this.appendThreeDigitInt(mol.getAllBonds_0());
  this.mBuilder.append_5('  0  0');
  this.appendThreeDigitInt(!isRacemic?1:0);
  this.mBuilder.append_5('  0  0  0  0  0999 V2000\n');
  hasCoordinates = mol.getAllAtoms_0() == 1;
  for (atom3 = 1; atom3 < mol.getAllAtoms_0(); atom3++) {
    if (mol.getAtomX_1(atom3) != mol.getAtomX_1(0) || mol.getAtomY_1(atom3) != mol.getAtomY_1(0) || mol.getAtomZ_0(atom3) != mol.getAtomZ_0(0)) {
      hasCoordinates = true;
      break;
    }
  }
  grafac = 1;
  if (hasCoordinates && scale) {
    avbl = mol.getAverageBondLength_0();
    if (avbl != 0) {
      if (avbl < 1 || avbl > 3)
        grafac = 1.5 / avbl;
    }
     else {
      minDistance = 1.7976931348623157E308;
      for (atom1 = 1; atom1 < mol.getAllAtoms_0(); atom1++) {
        for (atom2 = 0; atom2 < atom1; atom2++) {
          dx = mol.getAtomX_1(atom2) - mol.getAtomX_1(atom1);
          dy = mol.getAtomY_1(atom2) - mol.getAtomY_1(atom1);
          dz = mol.getAtomZ_0(atom2) - mol.getAtomZ_0(atom1);
          distance = dx * dx + dy * dy + dz * dz;
          if (minDistance > distance)
            minDistance = distance;
        }
      }
      grafac = 2 * 1.5 / minDistance;
    }
  }
  for (atom4 = 0; atom4 < mol.getAllAtoms_0(); atom4++) {
    if (hasCoordinates) {
      this.appendTenDigitDouble(grafac * mol.getAtomX_1(atom4));
      this.appendTenDigitDouble(grafac * -mol.getAtomY_1(atom4));
      this.appendTenDigitDouble(grafac * -mol.getAtomZ_0(atom4));
    }
     else {
      this.mBuilder.append_5('    0.0000    0.0000    0.0000');
    }
    if (jsNotEquals(mol.getAtomList_0(atom4), null))
      this.mBuilder.append_5(' L  ');
    else if ((mol.getAtomQueryFeatures_0(atom4) & 1) != 0)
      this.mBuilder.append_5(' A  ');
    else {
      atomLabel = mol.getAtomLabel_0(atom4);
      this.mBuilder.append_5(' ' + atomLabel);
      if (jl.length__I__devirtual$_0(atomLabel) == 1)
        this.mBuilder.append_5('  ');
      else if (jl.length__I__devirtual$_0(atomLabel) == 2)
        this.mBuilder.append_5(' ');
    }
    this.mBuilder.append_5(' 0  0  0');
    hydrogenFlags = 1920 & mol.getAtomQueryFeatures_0(atom4);
    if (hydrogenFlags == 0)
      this.mBuilder.append_5('  0');
    else if (hydrogenFlags == (128 | 256))
      this.mBuilder.append_5('  3');
    else if (hydrogenFlags == 128)
      this.mBuilder.append_5('  2');
    else if (hydrogenFlags == (256 | 512 | 1024))
      this.mBuilder.append_5('  1');
    else if (hydrogenFlags == (128 | 512 | 1024))
      this.mBuilder.append_5('  2');
    this.mBuilder.append_5((mol.getAtomQueryFeatures_0(atom4) & 8192) != 0?'  1':'  0');
    valence = mol.getAtomAbnormalValence_0(atom4);
    if (valence == -1)
      this.mBuilder.append_5('  0');
    else if (valence == 0)
      this.mBuilder.append_5(' 15');
    else 
      this.appendThreeDigitInt(valence);
    this.mBuilder.append_5('  0  0  0');
    this.appendThreeDigitInt(mol.getAtomMapNo_0(atom4));
    this.mBuilder.append_5('  0  0\n');
  }
  for (bond = 0; bond < mol.getAllBonds_0(); bond++) {
    switch (mol.getBondType_0(bond)) {
      case 1:
        order = 1;
        stereo = 0;
        break;
      case 2:
        order = 2;
        stereo = 0;
        break;
      case 4:
        order = 3;
        stereo = 0;
        break;
      case 9:
        order = 1;
        stereo = 6;
        break;
      case 17:
        order = 1;
        stereo = 1;
        break;
      case 26:
        order = 2;
        stereo = 3;
        break;
      case 64:
        order = 4;
        stereo = 0;
        break;
      case 32:
        order = 8;
        stereo = 0;
        break;
      default:order = 1;
        stereo = 0;
        break;
    }
    if (isRacemic && (stereo == 1 || stereo == 6)) {
      if (mol.getAtomESRGroup_0(mol.getBondAtom_0(0, bond)) != maxESRGroup)
        stereo = 0;
    }
    bondType = mol.getBondQueryFeatures_0(bond) & 31;
    if (bondType != 0) {
      if (bondType == 8)
        order = 4;
      else if (bondType == (1 | 2))
        order = 5;
      else if (bondType == (1 | 8))
        order = 6;
      else if (bondType == (2 | 8))
        order = 7;
      else 
        order = 8;
    }
    ringState = mol.getBondQueryFeatures_0(bond) & 96;
    topology = ringState == 0?0:ringState == 64?1:2;
    this.appendThreeDigitInt(1 + mol.getBondAtom_0(0, bond));
    this.appendThreeDigitInt(1 + mol.getBondAtom_0(1, bond));
    this.appendThreeDigitInt(order);
    this.appendThreeDigitInt(stereo);
    this.mBuilder.append_5('  0');
    this.appendThreeDigitInt(topology);
    this.mBuilder.append_5('  0\n');
  }
  no = 0;
  for (atom5 = 0; atom5 < mol.getAllAtoms_0(); atom5++)
    if (mol.getAtomCharge_0(atom5) != 0)
      no++;
  if (no != 0) {
    count = 0;
    for (atom1 = 0; atom1 < mol.getAllAtoms_0(); atom1++) {
      if (mol.getAtomCharge_0(atom1) != 0) {
        if (count == 0) {
          this.mBuilder.append_5('M  CHG');
          this.appendThreeDigitInt($wnd.Math.min(8, no));
        }
        this.mBuilder.append_5(' ');
        this.appendThreeDigitInt(atom1 + 1);
        charge = mol.getAtomCharge_0(atom1);
        if (charge < 0) {
          this.mBuilder.append_5('  -');
          charge = -charge;
        }
         else 
          this.mBuilder.append_5('   ');
        this.mBuilder.append_1(narrow_char(48 + charge));
        no--;
        if (++count == 8 || no == 0) {
          count = 0;
          this.mBuilder.append_5('\n');
        }
      }
    }
  }
  no = 0;
  for (atom6 = 0; atom6 < mol.getAllAtoms_0(); atom6++)
    if (!mol.isNaturalAbundance_0(atom6))
      no++;
  if (no != 0) {
    count = 0;
    for (atom1 = 0; atom1 < mol.getAllAtoms_0(); atom1++) {
      if (!mol.isNaturalAbundance_0(atom1)) {
        if (count == 0) {
          this.mBuilder.append_5('M  ISO');
          this.appendThreeDigitInt($wnd.Math.min(8, no));
        }
        this.mBuilder.append_5(' ');
        this.appendThreeDigitInt(atom1 + 1);
        this.mBuilder.append_5(' ');
        this.appendThreeDigitInt(mol.getAtomMass_0(atom1));
        no--;
        if (++count == 8 || no == 0) {
          count = 0;
          this.mBuilder.append_5('\n');
        }
      }
    }
  }
  no = 0;
  for (atom7 = 0; atom7 < mol.getAllAtoms_0(); atom7++)
    if (mol.getAtomRadical_0(atom7) != 0)
      no++;
  if (no != 0) {
    count = 0;
    for (atom = 0; atom < mol.getAllAtoms_0(); atom++) {
      if (mol.getAtomRadical_0(atom) != 0) {
        if (count == 0) {
          this.mBuilder.append_5('M  RAD');
          this.appendThreeDigitInt($wnd.Math.min(8, no));
        }
        this.mBuilder.append_5(' ');
        this.appendThreeDigitInt(atom + 1);
        switch (mol.getAtomRadical_0(atom)) {
          case 16:
            this.mBuilder.append_5('   1');
            break;
          case 32:
            this.mBuilder.append_5('   2');
            break;
          case 48:
            this.mBuilder.append_5('   3');
            break;
        }
        no--;
        if (++count == 8 || no == 0) {
          count = 0;
          this.mBuilder.append_5('\n');
        }
      }
    }
  }
  if (mol.isFragment_0()) {
    no = 0;
    for (atom1 = 0; atom1 < mol.getAllAtoms_0(); atom1++)
      if ((mol.getAtomQueryFeatures_0(atom1) & 120) != 0)
        no++;
    if (no != 0) {
      count = 0;
      for (atom2 = 0; atom2 < mol.getAllAtoms_0(); atom2++) {
        ringFeatures = mol.getAtomQueryFeatures_0(atom2) & 120;
        if (ringFeatures != 0) {
          if (count == 0) {
            this.mBuilder.append_5('M  RBC');
            this.appendThreeDigitInt($wnd.Math.min(8, no));
          }
          this.mBuilder.append_5(' ');
          this.appendThreeDigitInt(atom2 + 1);
          switch (ringFeatures) {
            case 16 | 32 | 64:
              this.mBuilder.append_5('  -1');
              break;
            case 8:
              this.mBuilder.append_5('   1');
              break;
            case 8 | 32 | 64:
              this.mBuilder.append_5('   2');
              break;
            case 8 | 16 | 64:
              this.mBuilder.append_5('   3');
              break;
            case 8 | 16 | 32:
              this.mBuilder.append_5('   4');
              break;
          }
          no--;
          if (++count == 8 || no == 0) {
            count = 0;
            this.mBuilder.append_5('\n');
          }
        }
      }
    }
    for (atom8 = 0; atom8 < mol.getAllAtoms_0(); atom8++) {
      atomList = mol.getAtomList_0(atom8);
      if (jsNotEquals(atomList, null)) {
        this.mBuilder.append_5('M  ALS ');
        this.appendThreeDigitInt(atom8 + 1);
        this.appendThreeDigitInt(atomList.length);
        this.mBuilder.append_5((mol.getAtomQueryFeatures_0(atom8) & 1) != 0?' T ':' F ');
        for (i = 0; i < atomList.length; i++) {
          label_0 = (carc.$clinit_Molecule() , carc.cAtomLabel)[atomList[i]];
          switch (jl.length__I__devirtual$_0(label_0)) {
            case 1:
              this.mBuilder.append_5(label_0 + '   ');
              break;
            case 2:
              this.mBuilder.append_5(label_0 + '  ');
              break;
            case 3:
              this.mBuilder.append_5(label_0 + ' ');
              break;
            default:this.mBuilder.append_5('   ?');
              break;
          }
        }
        this.mBuilder.append_5('\n');
      }
    }
    no = 0;
    for (atom9 = 0; atom9 < mol.getAllAtoms_0(); atom9++)
      if ((mol.getAtomQueryFeatures_0(atom9) & (4096 | 2048)) != 0)
        no++;
    if (no != 0) {
      count = 0;
      for (atom = 0; atom < mol.getAllAtoms_0(); atom++) {
        substitution = mol.getAtomQueryFeatures_0(atom) & (4096 | 2048);
        if (substitution != 0) {
          if (count == 0) {
            this.mBuilder.append_5('M  SUB');
            this.appendThreeDigitInt($wnd.Math.min(8, no));
          }
          this.mBuilder.append_5(' ');
          this.appendThreeDigitInt(atom + 1);
          if ((substitution & 4096) != 0)
            this.mBuilder.append_5('   ' + (mol.getAllConnAtoms_0(atom) + 1));
          else 
            this.mBuilder.append_5('  -2');
          no--;
          if (++count == 8 || no == 0) {
            count = 0;
            this.mBuilder.append_5('\n');
          }
        }
      }
    }
  }
  this.mBuilder.append_5('M  END\n');
}
;
defineClass(110, 1, {1:1}, carc.MolfileCreator);
_.$init_25 = function $init_25(){
  this.df = new jt.DecimalFormat_0('0.0000', new jt.DecimalFormatSymbols((ju.$clinit_Locale() , ju.ENGLISH)));
}
;
_.appendTenDigitDouble = function appendTenDigitDouble(theDouble){
  var i, val;
  val = this.df.format(theDouble);
  for (i = jl.length__I__devirtual$_0(val); i < 10; i++)
    this.mBuilder.append_1(32);
  this.mBuilder.append_5(val);
}
;
_.appendThreeDigitInt = function appendThreeDigitInt(data_0){
  var digitFound, i, theChar;
  if (data_0 < 0 || data_0 > 999) {
    this.mBuilder.append_5('  ?');
    return;
  }
  digitFound = false;
  for (i = 0; i < 3; i++) {
    theChar = narrow_int(data_0 / 100);
    if (theChar == 0) {
      if (i == 2 || digitFound)
        this.mBuilder.append_1(48);
      else 
        this.mBuilder.append_1(32);
    }
     else {
      this.mBuilder.append_1(narrow_char(48 + theChar));
      digitFound = true;
    }
    data_0 = 10 * (data_0 % 100);
  }
}
;
_.getMolfile = function getMolfile(){
  return this.mBuilder.toString_0();
}
;
carc.TARGET_AVBL = 1.5;
cggl.Lcom_actelion_research_chem_MolfileCreator_2_classLit = createForClass('com.actelion.research.chem', 'MolfileCreator', 110, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_MolfileParser = function $clinit_MolfileParser(){
  carc.$clinit_MolfileParser = emptyMethod;
  jl.$clinit_Object();
}
;
carc.MolfileParser = function MolfileParser(){
  carc.$clinit_MolfileParser();
  Object_0.call(this);
  this.$init_26();
  this.mMode = 0;
}
;
carc.MolfileParser_0 = function MolfileParser_0(mode){
  carc.$clinit_MolfileParser();
  Object_0.call(this);
  this.$init_26();
  this.mMode = mode;
}
;
defineClass(109, 1, {1:1}, carc.MolfileParser, carc.MolfileParser_0);
_.$init_26 = function $init_26(){
}
;
_.TRACE = function TRACE(s){
  if (carc.debug) {
    (jl.$clinit_System() , jl.out_0).println(s);
  }
}
;
_.buildBond = function buildBond(atom1, atom2, bondType, stereo, topology){
  var bond, isAtomESRAnd, queryFeatures, realBondType;
  realBondType = 1;
  isAtomESRAnd = false;
  switch (stereo) {
    case 1:
      realBondType = 17;
      break;
    case 3:
      realBondType = 26;
      break;
    case 4:
      realBondType = 17;
      isAtomESRAnd = true;
      break;
    case 6:
      realBondType = 9;
      break;
    default:switch (bondType) {
        case 1:
          realBondType = 1;
          break;
        case 2:
          realBondType = 2;
          break;
        case 3:
          realBondType = 4;
          break;
        case 4:
          realBondType = 64;
          break;
        case 8:
          if (this.mTreatAnyAsMetalBond)
            realBondType = 32;
          break;
        case 9:
          realBondType = 32;
          break;
      }

      break;
  }
  bond = this.mMol.addBond_1(atom1, atom2, realBondType);
  queryFeatures = 0;
  if (isAtomESRAnd) {
    this.mMol.setAtomESR_0(atom1, 1, -1);
  }
  if (bondType > 4) {
    switch (bondType) {
      case 5:
        queryFeatures |= 1 | 2;
        break;
      case 6:
        queryFeatures |= 1 | 8;
        break;
      case 7:
        queryFeatures |= 2 | 8;
        break;
      case 8:
        if (!this.mTreatAnyAsMetalBond)
          queryFeatures |= 31;
        break;
    }
  }
  if (topology == 1) {
    queryFeatures |= 64;
  }
  if (topology == 2) {
    queryFeatures |= 32;
  }
  if (queryFeatures != 0) {
    this.mMol.setBondQueryFeature_0(bond, queryFeatures, true);
  }
  return bond;
}
;
_.deduceMissingCharges = function deduceMissingCharges(){
  var atom, atom0, atom1, bond, charge, chargeChange, chargeToDistribute, dif, i, maxCharge, metal;
  chargeChange = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  for (atom0 = 0; atom0 < this.mMol.getAllAtoms_0(); atom0++)
    chargeChange[atom0] = -this.mMol.getAtomCharge_0(atom0);
  (new carc.AromaticityResolver(this.mMol)).locateDelocalizedDoubleBonds_0(null, true, false);
  for (atom1 = 0; atom1 < this.mMol.getAllAtoms_0(); atom1++)
    chargeChange[atom1] += this.mMol.getAtomCharge_0(atom1);
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    if (chargeChange[atom] != 0) {
      chargeToDistribute = -chargeChange[atom];
      for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
        for (i = 0; i < 2; i++) {
          if (chargeToDistribute > 0 && this.mMol.getBondType_0(bond) == 32 && this.mMol.getBondAtom_0(1 - i, bond) == atom) {
            metal = this.mMol.getBondAtom_0(i, bond);
            if (this.mMol.isMetalAtom_0(metal)) {
              maxCharge = this.getMaxOxidationState(metal);
              charge = this.mMol.getAtomCharge_0(metal);
              if (charge < maxCharge) {
                dif = $wnd.Math.min(chargeToDistribute, maxCharge - charge);
                this.mMol.setAtomCharge_0(metal, charge + dif);
                chargeToDistribute -= dif;
              }
            }
          }
        }
      }
    }
  }
}
;
_.endOfItem = function endOfItem(line, start_0){
  var end;
  end = this.indexOfWhiteSpace(line, start_0 + 1);
  return end == -1?jl.length__I__devirtual$_0(line):end;
}
;
_.getCompactMolecule = function getCompactMolecule_4(molFile){
  this.mMol = null;
  return this.readMoleculeFromBuffer(new ji.BufferedReader(new ji.StringReader(molFile)))?this.mMol:null;
}
;
_.getHandleHydrogenMap_0 = function getHandleHydrogenMap_0(){
  return jsEquals(this.mHydrogenMap, null)?this.mMol.getHandleHydrogenMap_0():this.mHydrogenMap;
}
;
_.getMaxOxidationState = function getMaxOxidationState(metal){
  var atomicNo, os;
  atomicNo = this.mMol.getAtomicNo_0(metal);
  os = atomicNo < (carc.$clinit_Molecule() , carc.cCommonOxidationState).length?(carc.$clinit_Molecule() , carc.cCommonOxidationState)[atomicNo]:null;
  return jsEquals(os, null)?0:os[os.length - 1];
}
;
_.getUsedAtomIndex = function getUsedAtomIndex(sourceAtomIndex){
  var ui;
  ui = isNull(this.mAtomIndexMap)?null:castTo(this.mAtomIndexMap.get(new jl.Integer(sourceAtomIndex)), 33);
  return isNull(ui)?sourceAtomIndex - 1:ui.intValue();
}
;
_.getUsedBondIndex = function getUsedBondIndex(sourceBondIndex){
  var ui;
  ui = isNull(this.mBondIndexMap)?null:castTo(this.mBondIndexMap.get(new jl.Integer(sourceBondIndex)), 33);
  return isNull(ui)?sourceBondIndex - 1:ui.intValue();
}
;
_.indexOfNextItem = function indexOfNextItem(line, afterPreviousItem){
  var i;
  if (afterPreviousItem == -1) {
    return -1;
  }
  for (i = afterPreviousItem + 1; i < jl.length__I__devirtual$_0(line); i++) {
    if (jl.charAt_I_C__devirtual$_0(line, i) != 32 && jl.charAt_I_C__devirtual$_0(line, i) != 9) {
      return i;
    }
  }
  return -1;
}
;
_.indexOfWhiteSpace = function indexOfWhiteSpace(line, fromIndex){
  var i;
  for (i = fromIndex; i < jl.length__I__devirtual$_0(line); i++) {
    if (jl.charAt_I_C__devirtual$_0(line, i) == 32 || jl.charAt_I_C__devirtual$_0(line, i) == 9) {
      return i;
    }
  }
  return -1;
}
;
_.interpretObjectType = function interpretObjectType(line){
  if (jl.contains_Ljava_lang_CharSequence__Z__devirtual$(line, 'ATOMS=('))
    return 'ATOMS';
  if (jl.contains_Ljava_lang_CharSequence__Z__devirtual$(line, 'BONDS=('))
    return 'BONDS';
  this.TRACE('Error [readMoleculeFromBuffer]: Unknown or missing collection object type\n');
  return null;
}
;
_.interpretV3AtomLine = function interpretV3AtomLine(line){
  var atom, atomIndex, bNotList, bond, field, index_0, index1, index2, l, label_0, list, mapNo, specifier, substitutionCount, v, value_0, x_0, y_0, z_0;
  index1 = 0;
  index2 = this.endOfItem(line, index1);
  atomIndex = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2));
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  label_0 = jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2);
  v = null;
  bNotList = false;
  l = this.isV3AtomList(line);
  if (l != 0) {
    v = this.interpretV3AtomList(line);
    if (l < 0)
      bNotList = true;
    index2 = $wnd.Math.abs(l);
  }
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  x_0 = parseFloat_0(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2));
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  y_0 = parseFloat_0(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2));
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  z_0 = parseFloat_0(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2));
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  mapNo = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2));
  atom = this.mMol.addAtom_1(x_0, -y_0, -z_0);
  if (atom + 1 != atomIndex)
    this.mapAtomIndex(atomIndex, atom);
  if (jsNotEquals(v, null))
    this.mMol.setAtomList_1(atom, v, bNotList);
  if (mapNo != 0) {
    this.mMol.setAtomMapNo_0(atom, mapNo, false);
  }
  if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(label_0, 'A')) {
    this.mMol.setAtomQueryFeature_0(atom, 1, true);
  }
   else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(label_0, 'Q')) {
    list = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 1, 15, 1);
    list[0] = 6;
    this.mMol.setAtomList_1(atom, list, true);
  }
   else {
    this.mMol.setAtomicNo_0(atom, carc.getAtomicNoFromLabel(label_0));
  }
  while ((index1 = this.indexOfNextItem(line, index2)) != -1) {
    index2 = this.endOfItem(line, index1);
    specifier = jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2);
    index_0 = jl.indexOf_I_I__devirtual$(specifier, 61);
    field = jl.substring_II_Ljava_lang_String___devirtual$(specifier, 0, index_0);
    value_0 = jl.parseInt_1(jl.substring_I_Ljava_lang_String___devirtual$(specifier, index_0 + 1));
    if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'CHG')) {
      this.mMol.setAtomCharge_0(atom, value_0);
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'RAD')) {
      switch (value_0) {
        case 1:
          this.mMol.setAtomRadical_0(atom, 16);
          break;
        case 2:
          this.mMol.setAtomRadical_0(atom, 32);
          break;
        case 3:
          this.mMol.setAtomRadical_0(atom, 48);
          break;
      }
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'CFG')) {
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'MASS')) {
      this.mMol.setAtomMass_0(atom, value_0);
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'VAL')) {
      this.mMol.setAtomAbnormalValence_0(atom, value_0 == -1?0:value_0 == 0?-1:value_0);
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'HCOUNT')) {
      switch (value_0) {
        case 0:
          break;
        case -1:
          this.mMol.setAtomQueryFeature_0(atom, 256 | 512 | 1024, true);
          break;
        case 1:
          this.mMol.setAtomQueryFeature_0(atom, 128, true);
          break;
        case 2:
          this.mMol.setAtomQueryFeature_0(atom, 128 | 256, true);
          break;
        default:this.mMol.setAtomQueryFeature_0(atom, 128 | 256 | 512, true);
          break;
      }
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'SUBST')) {
      if (value_0 == -1) {
        this.mMol.setAtomQueryFeature_0(atom, 2048, true);
      }
       else if (value_0 > 0) {
        substitutionCount = 0;
        for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
          if (this.mMol.getBondAtom_0(0, bond) == atom || this.mMol.getBondAtom_0(1, bond) == atom) {
            substitutionCount++;
          }
        }
        if (value_0 > substitutionCount) {
          this.mMol.setAtomQueryFeature_0(atom, 4096, true);
        }
      }
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'RBCNT')) {
      switch (value_0) {
        case -1:
          this.mMol.setAtomQueryFeature_0(atom, 16 | 32 | 64, true);
          break;
        case 1:
          this.mMol.setAtomQueryFeature_0(atom, 8, true);
          break;
        case 2:
          this.mMol.setAtomQueryFeature_0(atom, 8 | 32 | 64, true);
          break;
        case 3:
          this.mMol.setAtomQueryFeature_0(atom, 16 | 32 | 64, true);
          break;
        case 4:
          this.mMol.setAtomQueryFeature_0(atom, 8 | 16 | 32, true);
          break;
      }
    }
     else {
      this.TRACE('Warning MolfileParser: Unused version 3 atom specifier:' + field + '\n');
    }
  }
}
;
_.interpretV3AtomList = function interpretV3AtomList(line){
  var atoms, i1, i2, index_0, l, ok, res, s;
  res = null;
  i1 = jl.indexOf_Ljava_lang_String__I__devirtual$(line, '[');
  i2 = jl.indexOf_Ljava_lang_String_I_I__devirtual$(line, ']', i1);
  if (i1 >= 0 && i2 > 0) {
    atoms = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 16, 15, 1);
    s = jl.substring_II_Ljava_lang_String___devirtual$(line, i1 + 1, i2);
    index_0 = 0;
    ok = true;
    while (ok && index_0 < 16) {
      i1 = jl.indexOf_Ljava_lang_String__I__devirtual$(s, ',');
      l = null;
      if (i1 == -1) {
        l = s;
        ok = false;
      }
       else {
        l = jl.substring_II_Ljava_lang_String___devirtual$(s, 0, i1);
        s = jl.substring_I_Ljava_lang_String___devirtual$(s, i1 + 1);
      }
      atoms[index_0++] = carc.getAtomicNoFromLabel(l);
    }
    res = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, index_0, 15, 1);
    jl.arraycopy(atoms, 0, res, 0, index_0);
  }
  return res;
}
;
_.interpretV3BondLine = function interpretV3BondLine(line){
  var atom1, atom2, bond, bondIndex, bondType, field, index_0, index1, index2, specifier, stereo, topology, value_0;
  index1 = 0;
  index2 = this.endOfItem(line, index1);
  bondIndex = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2));
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  bondType = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2));
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  atom1 = this.getUsedAtomIndex(jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2)));
  index1 = this.indexOfNextItem(line, index2);
  index2 = this.endOfItem(line, index1);
  atom2 = this.getUsedAtomIndex(jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2)));
  stereo = 0;
  topology = 0;
  while ((index1 = this.indexOfNextItem(line, index2)) != -1) {
    index2 = this.endOfItem(line, index1);
    specifier = jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index2);
    index_0 = jl.indexOf_I_I__devirtual$(specifier, 61);
    field = jl.substring_II_Ljava_lang_String___devirtual$(specifier, 0, index_0);
    value_0 = jl.parseInt_1(jl.substring_I_Ljava_lang_String___devirtual$(specifier, index_0 + 1));
    if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'CFG')) {
      switch (value_0) {
        case 1:
          stereo = 1;
          break;
        case 2:
          stereo = bondType == 2?3:4;
          break;
        case 3:
          stereo = 6;
          break;
      }
    }
     else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(field, 'TOPO')) {
      topology = value_0;
    }
     else {
      this.TRACE('Warning MolfileParser: Unused version 3 bond specifier:' + field + '\n');
    }
  }
  bond = this.buildBond(atom1, atom2, bondType, stereo, topology);
  if (bond + 1 != bondIndex)
    this.mapBondIndex(bondIndex, bond);
}
;
_.interpretV3CollectionLine = function interpretV3CollectionLine(line){
  var bond, group, i, i0, list, objectType;
  objectType = this.interpretObjectType(line);
  if (jsNotEquals(objectType, null)) {
    list = this.interpretV3List(line, objectType);
    if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'MDLV30/STEABS')) {
      if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(objectType, 'ATOMS'))
        for (i0 = 0; i0 < list.length; i0++)
          this.mMol.setAtomESR_0(this.getUsedAtomIndex(list[i0]), 0, -1);
      else 
        for (i = 0; i < list.length; i++)
          this.mMol.setBondESR_0(this.getUsedBondIndex(list[i]), 0, -1);
    }
     else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'MDLV30/STERAC')) {
      group = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, 13, this.indexOfWhiteSpace(line, 13)));
      if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(objectType, 'ATOMS'))
        for (i0 = 0; i0 < list.length; i0++)
          this.mMol.setAtomESR_0(this.getUsedAtomIndex(list[i0]), 1, group - 1);
      else 
        for (i = 0; i < list.length; i++)
          this.mMol.setBondESR_0(this.getUsedBondIndex(list[i]), 1, group - 1);
    }
     else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'MDLV30/STEREL')) {
      group = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, 13, this.indexOfWhiteSpace(line, 13)));
      if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(objectType, 'ATOMS'))
        for (i0 = 0; i0 < list.length; i0++)
          this.mMol.setAtomESR_0(this.getUsedAtomIndex(list[i0]), 2, group - 1);
      else 
        for (i = 0; i < list.length; i++)
          this.mMol.setBondESR_0(this.getUsedBondIndex(list[i]), 2, group - 1);
    }
     else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'MDLV30/HILITE')) {
      if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(objectType, 'ATOMS')) {
        for (i = 0; i < list.length; i++)
          this.mMol.setAtomColor_0(this.getUsedAtomIndex(list[i]), 448);
      }
       else {
        for (i = 0; i < list.length; i++) {
          bond = this.getUsedBondIndex(list[i]);
          this.mMol.setAtomColor_0(this.mMol.getBondAtom_0(0, bond), 448);
          this.mMol.setAtomColor_0(this.mMol.getBondAtom_0(1, bond), 448);
        }
      }
    }
     else {
      this.TRACE('Error [readMoleculeFromBuffer]: Unknown version 3 collection type\n');
    }
  }
}
;
_.interpretV3CountLine = function interpretV3CountLine(line){
  var index1, index2, natoms, nbonds;
  if (isNull(this.mMol)) {
    if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'COUNTS')) {
      index1 = 7;
      index2 = this.indexOfNextItem(line, this.indexOfWhiteSpace(line, 7));
      natoms = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, this.indexOfWhiteSpace(line, index1)));
      nbonds = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index2, this.indexOfWhiteSpace(line, index2)));
      this.mMol = new carc.StereoMolecule(natoms, nbonds);
    }
  }
}
;
_.interpretV3List = function interpretV3List(line, type_0){
  var count, i, index_0, index1, index2, list;
  index1 = jl.indexOf_Ljava_lang_String__I__devirtual$(line, type_0 + '=(') + jl.length__I__devirtual$_0(type_0) + 2;
  index2 = jl.indexOf_II_I__devirtual$(line, 41, index1);
  index_0 = this.indexOfWhiteSpace(line, index1);
  count = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index_0));
  list = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, count, 15, 1);
  for (i = 0; i < count; i++) {
    index1 = this.indexOfNextItem(line, index_0);
    index_0 = this.indexOfWhiteSpace(line, index1);
    if (index_0 == -1 || index_0 > index2) {
      index_0 = index2;
    }
    list[i] = jl.parseInt_1(jl.substring_II_Ljava_lang_String___devirtual$(line, index1, index_0));
  }
  return list;
}
;
_.introduceObviousMetalBonds = function introduceObviousMetalBonds(){
  var atom, bond, bond0, bond1, i, i0, metalAtom, occupiedValence, order;
  occupiedValence = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  for (bond0 = 0; bond0 < this.mMol.getAllBonds_0(); bond0++)
    if (this.mMol.getBondType_0(bond0) == 64)
      for (i0 = 0; i0 < 2; i0++)
        occupiedValence[this.mMol.getBondAtom_0(i0, bond0)] = 1;
  for (bond1 = 0; bond1 < this.mMol.getAllBonds_0(); bond1++) {
    order = this.mMol.getBondOrder_0(bond1);
    for (i = 0; i < 2; i++)
      occupiedValence[this.mMol.getBondAtom_0(i, bond1)] += order;
  }
  for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
    if (this.mMol.getBondOrder_0(bond) == 1) {
      for (i = 0; i < 2; i++) {
        metalAtom = this.mMol.getBondAtom_0(1 - i, bond);
        if (this.mMol.isMetalAtom_0(metalAtom)) {
          atom = this.mMol.getBondAtom_0(i, bond);
          if (this.mMol.isElectronegative_0(atom) && occupiedValence[atom] > this.mMol.getMaxValence_0(atom)) {
            this.mMol.setBondType_0(bond, 32);
            continue;
          }
        }
      }
    }
  }
}
;
_.isV3AtomList = function isV3AtomList(line){
  var i1, i2;
  if (jl.indexOf_Ljava_lang_String__I__devirtual$(line, '[') >= 0) {
    i1 = jl.indexOf_Ljava_lang_String__I__devirtual$(line, ' NOT[');
    i2 = jl.indexOf_Ljava_lang_String_I_I__devirtual$(line, ']', i1);
    if (i1 >= 0 && i2 > 0) {
      return -(i2 + 1);
    }
     else {
      i1 = jl.indexOf_Ljava_lang_String__I__devirtual$(line, ' [');
      i2 = jl.indexOf_Ljava_lang_String_I_I__devirtual$(line, ']', i1);
      if (i1 >= 0 && i2 > 0) {
        return i2 + 1;
      }
    }
    i1 = jl.indexOf_Ljava_lang_String__I__devirtual$(line, " 'NOT[");
    i2 = jl.indexOf_Ljava_lang_String_I_I__devirtual$(line, "]'", i1);
    if (i1 >= 0 && i2 > 0) {
      return -(i2 + 2);
    }
     else {
      i1 = jl.indexOf_Ljava_lang_String__I__devirtual$(line, " '[");
      i2 = jl.indexOf_Ljava_lang_String_I_I__devirtual$(line, "]'", i1);
      if (i1 >= 0 && i2 > 0) {
        return i2 + 2;
      }
    }
    (jl.$clinit_System() , jl.err).println('Warning invalid atom list in line: ' + line);
  }
  return 0;
}
;
_.mapAtomIndex = function mapAtomIndex(sourceAtomIndex, usedAtomIndex){
  if (isNull(this.mAtomIndexMap))
    this.mAtomIndexMap = new ju.TreeMap;
  this.mAtomIndexMap.put(new jl.Integer(sourceAtomIndex), new jl.Integer(usedAtomIndex));
}
;
_.mapBondIndex = function mapBondIndex(sourceBondIndex, usedBondIndex){
  if (isNull(this.mBondIndexMap))
    this.mBondIndexMap = new ju.TreeMap;
  this.mBondIndexMap.put(new jl.Integer(sourceBondIndex), new jl.Integer(usedBondIndex));
}
;
_.parseIntOrSpaces = function parseIntOrSpaces(s){
  return jl.length__I__devirtual$_0(s) == 0?0:jl.parseInt_1(s);
}
;
_.readMoleculeFromBuffer = function readMoleculeFromBuffer(reader){
  var aaa, atom, atom1, atom2, atomicNo, bNotList, bond, bondType, charge, chargeDif, chiral, e, hCount, i, i0, i1, j, k, label_0, line, mapNo, mass, massDif, name_0, natoms, nbonds, nlists, no, radical, res, ringState, stereo, substitution, substitutionCount, sym, topology, v, valence, version, vvv, x_0, y_0, z_0;
  try {
    this.mHydrogenMap = null;
    if (isNotNull(this.mMol)) {
      this.mMol.deleteMolecule_0();
      this.mMol.setFragment_0(false);
    }
    name_0 = line = reader.readLine();
    if (jsEquals(null, name_0)) {
      this.TRACE('readMoleculeFromBuffer: No Header Line\n');
      return false;
    }
    if (jsEquals(null, line = reader.readLine())) {
      this.TRACE('Error [readMoleculeFromBuffer]: No Program Line\n');
      return false;
    }
    if (jsEquals(null, line = reader.readLine())) {
      this.TRACE('Error [readMoleculeFromBuffer]: No Comment Line\n');
      return false;
    }
    this.mTreatAnyAsMetalBond = jl.contains_Ljava_lang_CharSequence__Z__devirtual$(line, "From CSD data. Using bond type 'Any'");
    this.mDeduceMissingCharges = jl.contains_Ljava_lang_CharSequence__Z__devirtual$(line, 'From CSD data.');
    if (jsEquals(null, line = reader.readLine())) {
      this.TRACE('Error [readMoleculeFromBuffer]: No Counts Line\n');
      return false;
    }
    try {
      natoms = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 0, 3)));
      nbonds = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 3, 6)));
      nlists = this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 6, 9)));
      chiral = this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 12, 15)));
      version = jl.length__I__devirtual$_0(line) >= 39 && jl.equals_Ljava_lang_Object__Z__devirtual$_2(jl.substring_II_Ljava_lang_String___devirtual$(line, 34, 39), 'V3000')?3:2;
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        this.TRACE('Warning [readMoleculeFromBuffer]: Unable to interpret counts line\n');
        return false;
      }
       else 
        throw toJs($e0);
    }
    if (version == 3) {
      res = this.readMoleculeV3FromBuffer(reader);
      this.mMol.setName_0(name_0);
      return res;
    }
    if (isNull(this.mMol)) {
      this.mMol = new carc.StereoMolecule(natoms, nbonds);
    }
    this.mMol.setName_0(name_0);
    if (chiral == 0) {
      this.mMol.setToRacemate_0();
    }
    if (0 == natoms) {
      while (jsNotEquals(line, null) && !(jl.equals_Ljava_lang_Object__Z__devirtual$_2(line, 'M  END') || jl.equals_Ljava_lang_Object__Z__devirtual$_2(line, '$$$$') || jl.equals_Ljava_lang_Object__Z__devirtual$_2(jl.substring_I_Ljava_lang_String___devirtual$(line, 1), '$'))) {
        line = reader.readLine();
      }
      return true;
    }
    for (i0 = 0; i0 < natoms; i0++) {
      if (jsEquals(null, line = reader.readLine())) {
        this.TRACE('Error [readMoleculeFromBuffer]: No Atom Line\n');
        return false;
      }
      x_0 = parseFloat_0(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 0, 10)));
      y_0 = parseFloat_0(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 10, 20)));
      z_0 = parseFloat_0(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 20, 30)));
      atom = this.mMol.addAtom_1(x_0, -y_0, -z_0);
      label_0 = jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 31, 34));
      atomicNo = carc.getAtomicNoFromLabel(label_0);
      this.mMol.setAtomicNo_0(atom, atomicNo);
      if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(label_0, 'A')) {
        this.mMol.setAtomQueryFeature_0(atom, 1, true);
      }
      massDif = this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 34, 36)));
      if (massDif != 0) {
        this.mMol.setAtomMass_0(atom, (carc.$clinit_Molecule() , carc.cRoundedMass)[atomicNo] + massDif);
      }
      chargeDif = this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 36, 39)));
      if (chargeDif != 0) {
        this.mMol.setAtomCharge_0(atom, 4 - chargeDif);
      }
      mapNo = jl.length__I__devirtual$_0(line) < 63?0:this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 60, 63)));
      this.mMol.setAtomMapNo_0(atom, mapNo, false);
      hCount = jl.length__I__devirtual$_0(line) < 45?0:this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 42, 45)));
      switch (hCount) {
        case 0:
          break;
        case 1:
          this.mMol.setAtomQueryFeature_0(atom, 256 | 512, true);
          break;
        case 2:
          this.mMol.setAtomQueryFeature_0(atom, 128, true);
          break;
        case 3:
          this.mMol.setAtomQueryFeature_0(atom, 128 | 256, true);
          break;
        default:this.mMol.setAtomQueryFeature_0(atom, 128 | 256 | 512, true);
          break;
      }
      if (jl.length__I__devirtual$_0(line) >= 48 && jl.charAt_I_C__devirtual$_0(line, 47) == 49) {
        this.mMol.setAtomQueryFeature_0(atom, 8192, true);
      }
      valence = jl.length__I__devirtual$_0(line) < 51?0:this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 48, 51)));
      switch (valence) {
        case 0:
          break;
        case 15:
          this.mMol.setAtomAbnormalValence_0(atom, 0);
          break;
        default:this.mMol.setAtomAbnormalValence_0(atom, valence);
          break;
      }
    }
    for (i1 = 0; i1 < nbonds; i1++) {
      if (jsEquals(null, line = reader.readLine())) {
        this.TRACE('Error [readMoleculeFromBuffer]:No Bond Line\n');
        return false;
      }
      atom1 = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 0, 3))) - 1;
      atom2 = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 3, 6))) - 1;
      bondType = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 6, 9)));
      stereo = jl.length__I__devirtual$_0(line) < 12?0:this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 9, 12)));
      topology = jl.length__I__devirtual$_0(line) < 18?0:this.parseIntOrSpaces(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 15, 18)));
      this.buildBond(atom1, atom2, bondType, stereo, topology);
    }
    for (i = 0; i < nlists; i++) {
      if (jsEquals(null, line = reader.readLine())) {
        this.TRACE('Error [readMoleculeFromBuffer]: No List Line\n');
        return false;
      }
    }
    if (jsEquals(null, line = reader.readLine())) {
      this.TRACE('Error ReadMoleculeFromBuffer Missing M END or $$$$\n');
      if (chiral == 0) {
        if ((this.mMode & 1) != 0)
          this.mHydrogenMap = this.mMol.getHandleHydrogenMap_0();
        this.mMol.ensureHelperArrays_0(7);
      }
      return true;
    }
    while (jsNotEquals(line, null) && !(jl.equals_Ljava_lang_Object__Z__devirtual$_2(line, 'M  END') || jl.equals_Ljava_lang_Object__Z__devirtual$_2(line, '$$$$'))) {
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  CHG')) {
        j = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 6, 9)));
        if (j > 0) {
          aaa = 10;
          vvv = 14;
          for (k = 1; k <= j; k++ , aaa += 8 , vvv += 8) {
            atom = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, aaa, aaa + 3))) - 1;
            charge = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, vvv, vvv + 3)));
            this.mMol.setAtomCharge_0(atom, charge);
          }
        }
      }
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  ISO')) {
        j = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 6, 9)));
        if (j > 0) {
          aaa = 10;
          vvv = 14;
          for (k = 1; k <= j; k++ , aaa += 8 , vvv += 8) {
            atom = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, aaa, aaa + 3))) - 1;
            mass = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, vvv, vvv + 3)));
            this.mMol.setAtomMass_0(atom, mass);
          }
        }
      }
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  RAD')) {
        j = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 6, 9)));
        if (j > 0) {
          aaa = 10;
          vvv = 14;
          for (k = 1; k <= j; k++ , aaa += 8 , vvv += 8) {
            atom = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, aaa, aaa + 3))) - 1;
            radical = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, vvv, vvv + 3)));
            switch (radical) {
              case 1:
                this.mMol.setAtomRadical_0(atom, 16);
                break;
              case 2:
                this.mMol.setAtomRadical_0(atom, 32);
                break;
              case 3:
                this.mMol.setAtomRadical_0(atom, 48);
                break;
            }
          }
        }
      }
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  RBC') || jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  RBD')) {
        j = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 6, 9)));
        if (j > 0) {
          aaa = 10;
          vvv = 14;
          for (k = 1; k <= j; k++ , aaa += 8 , vvv += 8) {
            atom = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, aaa, aaa + 3))) - 1;
            ringState = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, vvv, vvv + 3)));
            switch (ringState) {
              case -1:
                this.mMol.setAtomQueryFeature_0(atom, 16 | 32 | 64, true);
                break;
              case 1:
                this.mMol.setAtomQueryFeature_0(atom, 8, true);
                break;
              case 2:
                this.mMol.setAtomQueryFeature_0(atom, 8 | 32 | 64, true);
                break;
              case 3:
                this.mMol.setAtomQueryFeature_0(atom, 16 | 32 | 64, true);
                break;
              case 4:
                this.mMol.setAtomQueryFeature_0(atom, 8 | 16 | 32, true);
                break;
            }
          }
        }
      }
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  ALS')) {
        atom = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 7, 10))) - 1;
        if (atom >= 0) {
          no = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 10, 13)));
          bNotList = jl.charAt_I_C__devirtual$_0(line, 14) == 84;
          v = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, no, 15, 1);
          aaa = 16;
          for (k = 0; k < no; k++ , aaa += 4) {
            sym = jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, aaa, aaa + 4));
            v[k] = carc.getAtomicNoFromLabel(sym);
          }
          this.mMol.setAtomList_1(atom, v, bNotList);
        }
      }
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  SUB')) {
        j = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 6, 9)));
        if (j > 0) {
          aaa = 10;
          vvv = 14;
          for (k = 1; k <= j; k++ , aaa += 8 , vvv += 8) {
            atom = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, aaa, aaa + 3))) - 1;
            substitution = jl.parseInt_1(jl.trim__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, vvv, vvv + 3)));
            if (substitution == -2) {
              this.mMol.setAtomQueryFeature_0(atom, 2048, true);
            }
             else if (substitution > 0) {
              substitutionCount = 0;
              for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
                if (this.mMol.getBondAtom_0(0, bond) == atom || this.mMol.getBondAtom_0(1, bond) == atom) {
                  substitutionCount++;
                }
              }
              if (substitution > substitutionCount) {
                this.mMol.setAtomQueryFeature_0(atom, 4096, true);
              }
            }
          }
        }
      }
      line = reader.readLine();
    }
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 11)) {
      e = $e1;
      e.printStackTrace();
      (jl.$clinit_System() , jl.err).println('error reading molfile ' + e);
      return false;
    }
     else 
      throw toJs($e1);
  }
  if (this.mDeduceMissingCharges) {
    this.introduceObviousMetalBonds();
    this.deduceMissingCharges();
  }
  if ((this.mMode & 1) != 0)
    this.mHydrogenMap = this.mMol.getHandleHydrogenMap_0();
  this.mMol.ensureHelperArrays_0(7);
  return true;
}
;
_.readMoleculeV3FromBuffer = function readMoleculeV3FromBuffer(reader){
  var MODE_CTAB, MODE_CTAB_ATOM, MODE_CTAB_BOND, MODE_CTAB_COLLECTION, cont, line, mode, modeString;
  MODE_CTAB = 1;
  MODE_CTAB_ATOM = 2;
  MODE_CTAB_BOND = 3;
  MODE_CTAB_COLLECTION = 4;
  if (isNotNull(this.mAtomIndexMap))
    this.mAtomIndexMap.clear();
  if (isNotNull(this.mBondIndexMap))
    this.mBondIndexMap.clear();
  mode = 0;
  line = reader.readLine();
  while (jsNotEquals(line, null) && jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  V30 ')) {
    line = jl.trim__Ljava_lang_String___devirtual$(jl.substring_I_Ljava_lang_String___devirtual$(line, 7));
    while (jl.endsWith_Ljava_lang_String__Z__devirtual$(line, '-')) {
      cont = reader.readLine();
      if (!jl.startsWith_Ljava_lang_String__Z__devirtual$(cont, 'M  V30 ')) {
        return false;
      }
      line = jl.trim__Ljava_lang_String___devirtual$(jl.concat_Ljava_lang_String__Ljava_lang_String___devirtual$(jl.substring_II_Ljava_lang_String___devirtual$(line, 0, jl.length__I__devirtual$_0(line) - 1), jl.substring_I_Ljava_lang_String___devirtual$(cont, 7)));
    }
    if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'BEGIN')) {
      modeString = jl.trim__Ljava_lang_String___devirtual$(jl.substring_I_Ljava_lang_String___devirtual$(line, 6));
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(modeString, 'CTAB')) {
        mode = 1;
      }
       else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(modeString, 'ATOM')) {
        mode = 2;
      }
       else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(modeString, 'BOND')) {
        mode = 3;
      }
       else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(modeString, 'COLLECTION')) {
        mode = 4;
      }
       else {
        this.TRACE('Error MolfileParser: Unsupported version 3 block\n');
        return false;
      }
    }
     else if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'END')) {
      mode = 0;
    }
     else if (mode == 1) {
      this.interpretV3CountLine(line);
    }
     else if (mode == 2) {
      this.interpretV3AtomLine(line);
    }
     else if (mode == 3) {
      this.interpretV3BondLine(line);
    }
     else if (mode == 4) {
      this.interpretV3CollectionLine(line);
    }
     else {
      this.TRACE('Error MolfileParser: Unexpected version 3 line\n');
      return false;
    }
    line = reader.readLine();
  }
  while (jsNotEquals(line, null) && !(jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  END') || jl.equals_Ljava_lang_Object__Z__devirtual$_2(line, '$$$$'))) {
    line = reader.readLine();
  }
  return true;
}
;
_.mDeduceMissingCharges = false;
_.mMode = 0;
_.mTreatAnyAsMetalBond = false;
carc.MODE_KEEP_HYDROGEN_MAP = 1;
carc.debug = false;
cggl.Lcom_actelion_research_chem_MolfileParser_2_classLit = createForClass('com.actelion.research.chem', 'MolfileParser', 109, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_MolfileV3Creator = function $clinit_MolfileV3Creator(){
  carc.$clinit_MolfileV3Creator = emptyMethod;
  jl.$clinit_Object();
}
;
carc.MolfileV3Creator = function MolfileV3Creator(mol){
  carc.$clinit_MolfileV3Creator();
  carc.MolfileV3Creator_0.call(this, mol, true);
}
;
carc.MolfileV3Creator_0 = function MolfileV3Creator_0(mol, scale){
  carc.MolfileV3Creator_1.call(this, mol, scale, new jl.StringBuilder_0(32768));
}
;
carc.MolfileV3Creator_1 = function MolfileV3Creator_1(mol, scale, builder){
  var atom, atom1, atom2, avbl, distance, dx, dy, dz, hasCoordinates, minDistance, name_0;
  Object_0.call(this);
  this.$init_27();
  mol.ensureHelperArrays_0(7);
  this.mMolfile = builder;
  name_0 = jsNotEquals(mol.getName_0(), null)?mol.getName_0():'';
  this.mMolfile.append_5(name_0 + '\n');
  this.mMolfile.append_5('Actelion Java MolfileCreator 2.0\n\n');
  this.mMolfile.append_5('  0  0  0  0  0  0              0 V3000\n');
  hasCoordinates = mol.getAllAtoms_0() == 1;
  for (atom = 1; atom < mol.getAllAtoms_0(); atom++) {
    if (mol.getAtomX_1(atom) != mol.getAtomX_1(0) || mol.getAtomY_1(atom) != mol.getAtomY_1(0) || mol.getAtomZ_0(atom) != mol.getAtomZ_0(0)) {
      hasCoordinates = true;
      break;
    }
  }
  this.mScalingFactor = 1;
  if (hasCoordinates && scale) {
    avbl = mol.getAverageBondLength_0();
    if (avbl != 0) {
      if (avbl < 1 || avbl > 3)
        this.mScalingFactor = 1.5 / avbl;
    }
     else {
      minDistance = 3.4028234663852886E38;
      for (atom1 = 1; atom1 < mol.getAllAtoms_0(); atom1++) {
        for (atom2 = 0; atom2 < atom1; atom2++) {
          dx = mol.getAtomX_1(atom2) - mol.getAtomX_1(atom1);
          dy = mol.getAtomY_1(atom2) - mol.getAtomY_1(atom1);
          dz = mol.getAtomZ_0(atom2) - mol.getAtomZ_0(atom1);
          distance = dx * dx + dy * dy + dz * dz;
          if (minDistance > distance)
            minDistance = distance;
        }
      }
      this.mScalingFactor = 2 * 1.5 / minDistance;
    }
  }
  this.writeBody(mol, hasCoordinates);
  this.mMolfile.append_5('M  END\n');
}
;
defineClass(111, 1, {1:1}, carc.MolfileV3Creator);
_.$init_27 = function $init_27(){
  this.mScalingFactor = 1;
}
;
_.getMolfile = function getMolfile_0(){
  return this.mMolfile.toString_0();
}
;
_.writeBody = function writeBody(mol, hasCoordinates){
  var absAtomsCount, absBondsCount, andAtomsCount, andBondsCount, atom, atom0, atom1, atomList, bond, bond0, bond1, bondType, group, hydrogenFlags, i, label_0, notlist, orAtomsCount, orBondsCount, order, paritiesFound, ringFeatures, ringState, stereo, substitution, topology, type_0, valence;
  this.mMolfile.append_5('M  V30 BEGIN CTAB\n');
  this.mMolfile.append_5('M  V30 COUNTS ' + mol.getAllAtoms_0() + ' ' + mol.getAllBonds_0() + ' 0 0 0\n');
  this.mMolfile.append_5('M  V30 BEGIN ATOM\n');
  for (atom0 = 0; atom0 < mol.getAllAtoms_0(); atom0++) {
    this.mMolfile.append_5('M  V30 ' + (atom0 + 1));
    if (jsNotEquals(mol.getAtomList_0(atom0), null)) {
      atomList = mol.getAtomList_0(atom0);
      notlist = (mol.getAtomQueryFeatures_0(atom0) & 1) != 0;
      this.mMolfile.append_5(notlist?' NOT[':' [');
      for (i = 0; i < atomList.length; i++) {
        if (i > 0) {
          this.mMolfile.append_5(',');
        }
        label_0 = (carc.$clinit_Molecule() , carc.cAtomLabel)[atomList[i]];
        switch (jl.length__I__devirtual$_0(label_0)) {
          case 1:
            this.mMolfile.append_5(label_0);
            break;
          case 2:
            this.mMolfile.append_5(label_0);
            break;
          case 3:
            this.mMolfile.append_5(label_0);
            break;
          default:this.mMolfile.append_5('?');
            break;
        }
      }
      this.mMolfile.append_5(']');
    }
     else if ((mol.getAtomQueryFeatures_0(atom0) & 1) != 0) {
      this.mMolfile.append_5(' A');
    }
     else {
      this.mMolfile.append_5(' ' + mol.getAtomLabel_0(atom0));
    }
    if (hasCoordinates) {
      this.mMolfile.append_5(' ' + round_int(10000 * this.mScalingFactor * mol.getAtomX_1(atom0)) / 10000);
      this.mMolfile.append_5(' ' + round_int(10000 * this.mScalingFactor * -mol.getAtomY_1(atom0)) / 10000);
      this.mMolfile.append_5(' ' + round_int(10000 * this.mScalingFactor * -mol.getAtomZ_0(atom0)) / 10000);
    }
     else {
      this.mMolfile.append_5(' 0 0 0');
    }
    this.mMolfile.append_5(' ' + mol.getAtomMapNo_0(atom0));
    if (mol.getAtomCharge_0(atom0) != 0) {
      this.mMolfile.append_5(' CHG=' + mol.getAtomCharge_0(atom0));
    }
    if (mol.getAtomRadical_0(atom0) != 0) {
      this.mMolfile.append_5(' RAD=');
      switch (mol.getAtomRadical_0(atom0)) {
        case 16:
          this.mMolfile.append_5('1');
          break;
        case 32:
          this.mMolfile.append_5('2');
          break;
        case 48:
          this.mMolfile.append_5('3');
          break;
      }
    }
    if (mol.getAtomParity_0(atom0) == 1 || mol.getAtomParity_0(atom0) == 2) {
      this.mMolfile.append_5(' CFG=');
      if (mol.getAtomParity_0(atom0) == 1) {
        this.mMolfile.append_5('1');
      }
       else {
        this.mMolfile.append_5('2');
      }
    }
    if (mol.getAtomMass_0(atom0) != 0) {
      this.mMolfile.append_5(' MASS=' + mol.getAtomMass_0(atom0));
    }
    valence = mol.getAtomAbnormalValence_0(atom0);
    if (valence != -1) {
      this.mMolfile.append_5(' VAL=' + (valence == 0?'-1':jl.valueOf_9(valence)));
    }
    hydrogenFlags = 1920 & mol.getAtomQueryFeatures_0(atom0);
    if (hydrogenFlags == (128 | 256)) {
      this.mMolfile.append_5(' HCOUNT=2');
    }
     else if (hydrogenFlags == 128) {
      this.mMolfile.append_5(' HCOUNT=1');
    }
     else if (hydrogenFlags == (256 | 512 | 1024)) {
      this.mMolfile.append_5(' HCOUNT=-1');
    }
     else if (hydrogenFlags == (128 | 512 | 1024)) {
      this.mMolfile.append_5(' HCOUNT=1');
    }
    substitution = mol.getAtomQueryFeatures_0(atom0) & (4096 | 2048);
    if (substitution != 0) {
      if ((substitution & 4096) != 0) {
        this.mMolfile.append_5(' SUBST=' + (mol.getAllConnAtoms_0(atom0) + 1));
      }
       else {
        this.mMolfile.append_5(' SUBST=-1');
      }
    }
    ringFeatures = mol.getAtomQueryFeatures_0(atom0) & 120;
    if (ringFeatures != 0) {
      switch (ringFeatures) {
        case 16 | 32 | 64:
          this.mMolfile.append_5(' RBCNT=-1');
          break;
        case 8:
          this.mMolfile.append_5(' RBCNT=2');
          break;
        case 8 | 32 | 64:
          this.mMolfile.append_5(' RBCNT=2');
          break;
        case 8 | 16 | 64:
          this.mMolfile.append_5(' RBCNT=3');
          break;
        case 8 | 16 | 32:
          this.mMolfile.append_5(' RBCNT=4');
          break;
      }
    }
    this.mMolfile.append_5('\n');
  }
  this.mMolfile.append_5('M  V30 END ATOM\n');
  this.mMolfile.append_5('M  V30 BEGIN BOND\n');
  for (bond0 = 0; bond0 < mol.getAllBonds_0(); bond0++) {
    this.mMolfile.append_5('M  V30 ' + (bond0 + 1));
    switch (mol.getBondType_0(bond0)) {
      case 1:
        order = 1;
        stereo = 0;
        break;
      case 2:
        order = 2;
        stereo = 0;
        break;
      case 4:
        order = 3;
        stereo = 0;
        break;
      case 9:
        order = 1;
        stereo = 3;
        break;
      case 17:
        order = 1;
        stereo = 1;
        break;
      case 26:
        order = 2;
        stereo = 2;
        break;
      case 64:
        order = 4;
        stereo = 0;
        break;
      case 32:
        order = 9;
        stereo = 0;
        break;
      default:order = 1;
        stereo = 0;
        break;
    }
    bondType = mol.getBondQueryFeatures_0(bond0) & 31;
    if (bondType != 0) {
      if (bondType == 8) {
        order = 4;
      }
       else if (bondType == (1 | 2)) {
        order = 5;
      }
       else if (bondType == (1 | 8)) {
        order = 6;
      }
       else if (bondType == (2 | 8)) {
        order = 7;
      }
       else {
        order = 8;
      }
    }
    this.mMolfile.append_5(' ' + order + ' ' + (mol.getBondAtom_0(0, bond0) + 1) + ' ' + (mol.getBondAtom_0(1, bond0) + 1));
    if (stereo != 0) {
      this.mMolfile.append_5(' CFG=' + stereo);
    }
    ringState = mol.getBondQueryFeatures_0(bond0) & 96;
    topology = ringState == 0?0:ringState == 64?1:2;
    if (topology != 0) {
      this.mMolfile.append_5(' TOPO=' + topology);
    }
    this.mMolfile.append_5('\n');
  }
  this.mMolfile.append_5('M  V30 END BOND\n');
  paritiesFound = false;
  absAtomsCount = 0;
  orAtomsCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 32, 15, 1);
  andAtomsCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 32, 15, 1);
  for (atom1 = 0; atom1 < mol.getAtoms_0(); atom1++) {
    if (mol.getAtomParity_0(atom1) == 1 || mol.getAtomParity_0(atom1) == 2) {
      paritiesFound = true;
      type_0 = mol.getAtomESRType_0(atom1);
      if (type_0 == 1) {
        andAtomsCount[mol.getAtomESRGroup_0(atom1)]++;
      }
       else if (type_0 == 2) {
        orAtomsCount[mol.getAtomESRGroup_0(atom1)]++;
      }
       else {
        absAtomsCount++;
      }
    }
  }
  absBondsCount = 0;
  orBondsCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 32, 15, 1);
  andBondsCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 32, 15, 1);
  for (bond1 = 0; bond1 < mol.getBonds_0(); bond1++) {
    if (mol.getBondOrder_0(bond1) != 2 && (mol.getBondParity_0(bond1) == 1 || mol.getBondParity_0(bond1) == 2)) {
      paritiesFound = true;
      type_0 = mol.getBondESRType_0(bond1);
      if (type_0 == 1) {
        andBondsCount[mol.getBondESRGroup_0(bond1)]++;
      }
       else if (type_0 == 2) {
        orBondsCount[mol.getBondESRGroup_0(bond1)]++;
      }
       else {
        absBondsCount++;
      }
    }
  }
  if (paritiesFound) {
    this.mMolfile.append_5('M  V30 BEGIN COLLECTION\n');
    if (absAtomsCount != 0) {
      this.mMolfile.append_5('M  V30 MDLV30/STEABS ATOMS=(' + absAtomsCount);
      for (atom = 0; atom < mol.getAtoms_0(); atom++) {
        if ((mol.getAtomParity_0(atom) == 1 || mol.getAtomParity_0(atom) == 2) && mol.getAtomESRType_0(atom) == 0) {
          this.mMolfile.append_5(' ' + (atom + 1));
        }
      }
      this.mMolfile.append_5(')\n');
    }
    if (absBondsCount != 0) {
      this.mMolfile.append_5('M  V30 MDLV30/STEABS BONDS=(' + absBondsCount);
      for (bond = 0; bond < mol.getBonds_0(); bond++) {
        if (mol.getBondOrder_0(bond) != 2 && (mol.getBondParity_0(bond) == 1 || mol.getBondParity_0(bond) == 2) && mol.getBondESRType_0(bond) == 0) {
          this.mMolfile.append_5(' ' + (bond + 1));
        }
      }
      this.mMolfile.append_5(')\n');
    }
    for (group = 0; group < 32; group++) {
      if (orAtomsCount[group] != 0) {
        this.mMolfile.append_5('M  V30 MDLV30/STEREL' + (group + 1) + ' ATOMS=(' + orAtomsCount[group]);
        for (atom = 0; atom < mol.getAtoms_0(); atom++) {
          if ((mol.getAtomParity_0(atom) == 1 || mol.getAtomParity_0(atom) == 2) && mol.getAtomESRType_0(atom) == 2 && mol.getAtomESRGroup_0(atom) == group) {
            this.mMolfile.append_5(' ' + (atom + 1));
          }
        }
        this.mMolfile.append_5(')\n');
      }
      if (andAtomsCount[group] != 0) {
        this.mMolfile.append_5('M  V30 MDLV30/STERAC' + (group + 1) + ' ATOMS=(' + andAtomsCount[group]);
        for (atom = 0; atom < mol.getAtoms_0(); atom++) {
          if ((mol.getAtomParity_0(atom) == 1 || mol.getAtomParity_0(atom) == 2) && mol.getAtomESRType_0(atom) == 1 && mol.getAtomESRGroup_0(atom) == group) {
            this.mMolfile.append_5(' ' + (atom + 1));
          }
        }
        this.mMolfile.append_5(')\n');
      }
      if (orBondsCount[group] != 0) {
        this.mMolfile.append_5('M  V30 MDLV30/STEREL' + (group + 1) + ' BONDS=(' + orBondsCount[group]);
        for (bond = 0; bond < mol.getBonds_0(); bond++) {
          if (mol.getBondOrder_0(bond) != 2 && (mol.getBondParity_0(bond) == 1 || mol.getBondParity_0(bond) == 2) && mol.getBondESRType_0(bond) == 2 && mol.getBondESRGroup_0(bond) == group) {
            this.mMolfile.append_5(' ' + (bond + 1));
          }
        }
        this.mMolfile.append_5(')\n');
      }
      if (andBondsCount[group] != 0) {
        this.mMolfile.append_5('M  V30 MDLV30/STERAC' + (group + 1) + ' BONDS=(' + andBondsCount[group]);
        for (bond = 0; bond < mol.getBonds_0(); bond++) {
          if (mol.getBondOrder_0(bond) != 2 && (mol.getBondParity_0(bond) == 1 || mol.getBondParity_0(bond) == 2) && mol.getBondESRType_0(bond) == 1 && mol.getBondESRGroup_0(bond) == group) {
            this.mMolfile.append_5(' ' + (bond + 1));
          }
        }
        this.mMolfile.append_5(')\n');
      }
    }
    this.mMolfile.append_5('M  V30 END COLLECTION\n');
  }
  this.mMolfile.append_5('M  V30 END CTAB\n');
}
;
_.mScalingFactor = 0;
carc.PRECISION_FACTOR = 10000;
carc.TARGET_AVBL_0 = 1.5;
cggl.Lcom_actelion_research_chem_MolfileV3Creator_2_classLit = createForClass('com.actelion.research.chem', 'MolfileV3Creator', 111, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_RingCollection = function $clinit_RingCollection(){
  carc.$clinit_RingCollection = emptyMethod;
  jl.$clinit_Object();
  carc.MODE_SMALL_AND_LARGE_RINGS = 1 | 2;
  carc.MODE_SMALL_RINGS_AND_AROMATICITY = 1 | 4;
  carc.MODE_SMALL_AND_LARGE_RINGS_AND_AROMATICITY = 1 | 2 | 4;
}
;
carc.RingCollection = function RingCollection(mol, mode){
  carc.$clinit_RingCollection();
  carc.RingCollection_0.call(this, mol, mode, 7);
}
;
carc.RingCollection_0 = function RingCollection_0(mol, mode, maxSmallRingSize){
  var atom, bond, candidate, current, found, fragmentNo, graphAtom, highest, i, i0, isConfirmedChainAtom, isConfirmedChainBond, noOfFragments, parent_0, potentialRingNeighbours, ringAtom, startAtom;
  Object_0.call(this);
  this.$init_28();
  this.mMol = mol;
  this.mMaxSmallRingSize = maxSmallRingSize;
  this.mRingAtomSet = new ju.ArrayList;
  this.mRingBondSet = new ju.ArrayList;
  this.mAtomRingSize = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  this.mBondRingSize = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  this.mMol.ensureHelperArrays_0(1);
  isConfirmedChainAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  isConfirmedChainBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  do {
    found = false;
    for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
      if (!isConfirmedChainAtom[atom]) {
        potentialRingNeighbours = 0;
        for (i0 = 0; i0 < this.mMol.getConnAtoms_0(atom); i0++)
          if (!isConfirmedChainAtom[this.mMol.getConnAtom_0(atom, i0)])
            potentialRingNeighbours++;
        if (potentialRingNeighbours < 2) {
          isConfirmedChainAtom[atom] = true;
          for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++)
            isConfirmedChainBond[this.mMol.getConnBond_0(atom, i)] = true;
          found = true;
        }
      }
    }
  }
   while (found);
  startAtom = 0;
  while (startAtom < this.mMol.getAtoms_0() && isConfirmedChainAtom[startAtom])
    startAtom++;
  if (startAtom == this.mMol.getAtoms_0())
    return;
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphAtom[0] = startAtom;
  parent_0 = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  parent_0[0] = -1;
  fragmentNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  fragmentNo[startAtom] = 1;
  current = 0;
  highest = 0;
  noOfFragments = 1;
  while (current <= highest) {
    for (i = 0; i < this.mMol.getConnAtoms_0(graphAtom[current]); i++) {
      candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
      if (candidate == parent_0[graphAtom[current]])
        continue;
      if (fragmentNo[candidate] != 0) {
        this.addSmallRingsToSet(this.mMol.getConnBond_0(graphAtom[current], i), isConfirmedChainAtom);
        continue;
      }
      if (!isConfirmedChainAtom[candidate]) {
        fragmentNo[candidate] = noOfFragments;
        parent_0[candidate] = graphAtom[current];
        graphAtom[++highest] = candidate;
      }
    }
    current++;
    if (current > highest) {
      for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
        if (fragmentNo[atom] == 0 && !isConfirmedChainAtom[atom]) {
          fragmentNo[atom] = ++noOfFragments;
          graphAtom[++highest] = atom;
          parent_0[atom] = -1;
          break;
        }
      }
    }
  }
  if ((mode & 4) != 0) {
    this.mIsAromatic = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mRingAtomSet.size(), 16, 1);
    this.mIsDelocalized = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mRingAtomSet.size(), 16, 1);
    this.mHeteroPosition = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mRingAtomSet.size(), 15, 1);
    this.determineAromaticity_1(this.mIsAromatic, this.mIsDelocalized, this.mHeteroPosition, false);
  }
  if ((mode & 2) != 0) {
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      if (!isConfirmedChainBond[bond] && this.mMol.getBondOrder_0(bond) != 0) {
        ringAtom = this.findSmallestRing(bond, isConfirmedChainAtom);
        if (jsNotEquals(ringAtom, null))
          this.updateRingSizes(ringAtom, this.getRingBonds_1(ringAtom));
      }
    }
  }
}
;
defineClass(92, 1, {1:1}, carc.RingCollection);
_.$init_28 = function $init_28(){
}
;
_.addRingIfNew = function addRingIfNew(ringAtom, ringSize){
  var equal, i, i0, i1, inverse, j, leftIndex, lowAtom, lowIndex, rightIndex, ringBond, ringOfSet, sortedRing;
  lowAtom = this.mMol.getMaxAtoms_0();
  lowIndex = 0;
  for (i0 = 0; i0 < ringSize; i0++) {
    if (lowAtom > ringAtom[i0]) {
      lowAtom = ringAtom[i0];
      lowIndex = i0;
    }
  }
  sortedRing = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, ringSize, 15, 1);
  leftIndex = lowIndex > 0?lowIndex - 1:ringSize - 1;
  rightIndex = lowIndex < ringSize - 1?lowIndex + 1:0;
  inverse = ringAtom[leftIndex] < ringAtom[rightIndex];
  for (i1 = 0; i1 < ringSize; i1++) {
    sortedRing[i1] = ringAtom[lowIndex];
    if (inverse) {
      if (--lowIndex < 0)
        lowIndex = ringSize - 1;
    }
     else {
      if (++lowIndex == ringSize)
        lowIndex = 0;
    }
  }
  for (i = 0; i < this.mRingAtomSet.size(); i++) {
    ringOfSet = castTo(this.mRingAtomSet.getAtIndex(i), 6);
    if (ringOfSet.length != ringSize)
      continue;
    equal = true;
    for (j = 0; j < ringSize; j++) {
      if (ringOfSet[j] != sortedRing[j]) {
        equal = false;
        break;
      }
    }
    if (equal)
      return;
  }
  this.mRingAtomSet.add(sortedRing);
  ringBond = this.getRingBonds_1(sortedRing);
  this.mRingBondSet.add(ringBond);
  this.updateRingSizes(sortedRing, ringBond);
}
;
_.addSmallRingsToSet = function addSmallRingsToSet(closureBond, isConfirmedChainAtom){
  var atom1, atom2, candidate, connIndex, current, graphAtom, isUsed;
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxSmallRingSize, 15, 1);
  connIndex = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMaxSmallRingSize, 15, 1);
  isUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  atom1 = this.mMol.getBondAtom_0(0, closureBond);
  atom2 = this.mMol.getBondAtom_0(1, closureBond);
  graphAtom[0] = atom1;
  graphAtom[1] = atom2;
  connIndex[1] = -1;
  isUsed[atom2] = true;
  current = 1;
  while (current >= 1) {
    connIndex[current]++;
    if (connIndex[current] == this.mMol.getConnAtoms_0(graphAtom[current])) {
      isUsed[graphAtom[current]] = false;
      current--;
      continue;
    }
    candidate = this.mMol.getConnAtom_0(graphAtom[current], connIndex[current]);
    if (isUsed[candidate] || isConfirmedChainAtom[candidate])
      continue;
    if (candidate == atom1 && current > 1) {
      this.addRingIfNew(graphAtom, current + 1);
      if (this.mRingAtomSet.size() >= 256)
        return;
      continue;
    }
    if (current + 1 < this.mMaxSmallRingSize) {
      current++;
      graphAtom[current] = candidate;
      isUsed[candidate] = true;
      connIndex[current] = -1;
    }
  }
}
;
_.determineAromaticity_0 = function determineAromaticity(ringNo, annelatedRing, aromaticityHandled, isAromatic, isDelocalized, heteroPosition, includeTautomericBonds){
  var annelated, aromaticButNotDelocalizedSequence, bondSequence, cSequence3Ring, cSequence5Ring, cSequence7Ring, carbeniumPosition, carbeniumPosition0, hasDelocalizationLeak, i, position, ringAtom, ringBond, ringBonds, unhandledAnnelatedRingFound;
  ringAtom = castTo(this.mRingAtomSet.getAtIndex(ringNo), 6);
  ringBond = castTo(this.mRingBondSet.getAtIndex(ringNo), 6);
  ringBonds = ringBond.length;
  bondSequence = 0;
  aromaticButNotDelocalizedSequence = 0;
  unhandledAnnelatedRingFound = false;
  for (i = 0; i < ringBonds; i++) {
    bondSequence <<= 1;
    aromaticButNotDelocalizedSequence <<= 1;
    if (this.qualifiesAsPiBond(ringBond[i])) {
      bondSequence |= 1;
    }
     else if (includeTautomericBonds && this.qualifiesAsAmideTypeBond_0(ringBond[i])) {
      bondSequence |= 1;
      aromaticButNotDelocalizedSequence |= 1;
    }
     else {
      annelated = annelatedRing[ringNo][i];
      if (annelated != -1) {
        if (aromaticityHandled[annelated]) {
          if (isAromatic[annelated]) {
            bondSequence |= 1;
            if (!isDelocalized[annelated])
              aromaticButNotDelocalizedSequence |= 1;
          }
        }
         else {
          unhandledAnnelatedRingFound = true;
        }
      }
    }
  }
  hasDelocalizationLeak = false;
  switch (ringBonds) {
    case 3:
      cSequence3Ring = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2, 1, 4]);
      hasDelocalizationLeak = true;
      for (carbeniumPosition0 = 0; carbeniumPosition0 < 3; carbeniumPosition0++) {
        if ((bondSequence & cSequence3Ring[carbeniumPosition0]) == cSequence3Ring[carbeniumPosition0]) {
          if (this.mMol.getAtomicNo_0(ringAtom[carbeniumPosition0]) == 6 && this.mMol.getAtomCharge_0(ringAtom[carbeniumPosition0]) == 1 || this.mMol.getAtomicNo_0(ringAtom[carbeniumPosition0]) == 5 && this.mMol.getAtomCharge_0(ringAtom[carbeniumPosition0]) == 0) {
            isAromatic[ringNo] = true;
            heteroPosition[ringNo] = carbeniumPosition0;
            if ((aromaticButNotDelocalizedSequence & cSequence3Ring[carbeniumPosition0]) == 0)
              hasDelocalizationLeak = false;
          }
        }
      }

      break;
    case 5:
      cSequence5Ring = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [10, 5, 18, 9, 20]);
      hasDelocalizationLeak = true;
      for (position = 0; position < 5; position++) {
        if ((bondSequence & cSequence5Ring[position]) == cSequence5Ring[position]) {
          switch (this.mMol.getAtomicNo_0(ringAtom[position])) {
            case 6:
              if (this.mMol.getAtomCharge_0(ringAtom[position]) == -1) {
                isAromatic[ringNo] = true;
                heteroPosition[ringNo] = position;
                if ((aromaticButNotDelocalizedSequence & cSequence5Ring[position]) == 0)
                  hasDelocalizationLeak = false;
              }

              break;
            case 7:
              if (this.mMol.getAtomCharge_0(ringAtom[position]) <= 0) {
                isAromatic[ringNo] = true;
                heteroPosition[ringNo] = position;
              }

              break;
            case 8:
              isAromatic[ringNo] = true;
              heteroPosition[ringNo] = position;
              break;
            case 16:
            case 34:
            case 52:
              if (this.mMol.getConnAtoms_0(ringAtom[position]) == 2) {
                isAromatic[ringNo] = true;
                heteroPosition[ringNo] = position;
              }

              break;
          }
        }
      }

      break;
    case 6:
      hasDelocalizationLeak = true;
      if ((bondSequence & 21) == 21) {
        isAromatic[ringNo] = true;
        if ((aromaticButNotDelocalizedSequence & 21) == 0)
          hasDelocalizationLeak = false;
      }

      if ((bondSequence & 42) == 42) {
        isAromatic[ringNo] = true;
        if ((aromaticButNotDelocalizedSequence & 42) == 0)
          hasDelocalizationLeak = false;
      }

      break;
    case 7:
      cSequence7Ring = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [42, 21, 74, 37, 82, 41, 84]);
      hasDelocalizationLeak = true;
      for (carbeniumPosition = 0; carbeniumPosition < 7; carbeniumPosition++) {
        if ((bondSequence & cSequence7Ring[carbeniumPosition]) == cSequence7Ring[carbeniumPosition]) {
          if (this.mMol.getAtomicNo_0(ringAtom[carbeniumPosition]) == 6 && this.mMol.getAtomCharge_0(ringAtom[carbeniumPosition]) == 1 || this.mMol.getAtomicNo_0(ringAtom[carbeniumPosition]) == 5 && this.mMol.getAtomCharge_0(ringAtom[carbeniumPosition]) == 0) {
            isAromatic[ringNo] = true;
            heteroPosition[ringNo] = carbeniumPosition;
            if ((aromaticButNotDelocalizedSequence & cSequence7Ring[carbeniumPosition]) == 0)
              hasDelocalizationLeak = false;
          }
        }
      }

      break;
  }
  if (isAromatic[ringNo] && !hasDelocalizationLeak)
    isDelocalized[ringNo] = true;
  if (isAromatic[ringNo])
    return true;
  return !unhandledAnnelatedRingFound;
}
;
_.determineAromaticity_1 = function determineAromaticity_0(isAromatic, isDelocalized, heteroPosition, includeTautomericBonds){
  var annelatedRing, aromaticityHandled, bond, i, i0, j, lastRingsHandled, ring, ring0, ringBond, ringMembership, ringsHandled;
  annelatedRing = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mRingAtomSet.size(), 0, 2);
  for (i0 = 0; i0 < this.mRingAtomSet.size(); i0++) {
    annelatedRing[i0] = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, castTo(this.mRingAtomSet.getAtIndex(i0), 6).length, 15, 1);
    for (j = 0; j < castTo(this.mRingAtomSet.getAtIndex(i0), 6).length; j++)
      annelatedRing[i0][j] = -1;
  }
  ringMembership = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 15, 1);
  for (ring0 = 0; ring0 < this.mRingBondSet.size(); ring0++) {
    ringBond = castTo(this.mRingBondSet.getAtIndex(ring0), 6);
    if (ringBond.length == 3 || ringBond.length >= 5 && ringBond.length <= 7) {
      for (i = 0; i < ringBond.length; i++) {
        bond = ringBond[i];
        if (this.mMol.getConnAtoms_0(this.mMol.getBondAtom_0(0, bond)) == 3 && this.mMol.getConnAtoms_0(this.mMol.getBondAtom_0(1, bond)) == 3) {
          if (ringMembership[bond] > 0) {
            annelatedRing[ringMembership[bond] >>> 16][ringMembership[bond] & 32767] = ring0;
            annelatedRing[ring0][i] = ringMembership[bond] >>> 16;
          }
           else {
            ringMembership[bond] = (ring0 << 16) + 32768 + i;
          }
        }
      }
    }
  }
  aromaticityHandled = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mRingAtomSet.size(), 16, 1);
  ringsHandled = 0;
  lastRingsHandled = -1;
  while (ringsHandled > lastRingsHandled) {
    lastRingsHandled = ringsHandled;
    for (ring = 0; ring < this.mRingAtomSet.size(); ring++) {
      if (!aromaticityHandled[ring]) {
        if (this.determineAromaticity_0(ring, annelatedRing, aromaticityHandled, isAromatic, isDelocalized, heteroPosition, includeTautomericBonds)) {
          aromaticityHandled[ring] = true;
          ringsHandled++;
        }
      }
    }
  }
}
;
_.findSmallestRing = function findSmallestRing(bond, isConfirmedChainAtom){
  var atom, atom1, atom2, candidate, current, graphAtom, graphLevel, graphParent, highest, i, j, ringAtom;
  atom1 = this.mMol.getBondAtom_0(0, bond);
  atom2 = this.mMol.getBondAtom_0(1, bond);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphParent = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphAtom[0] = atom1;
  graphAtom[1] = atom2;
  graphLevel[atom1] = 1;
  graphLevel[atom2] = 2;
  graphParent[atom1] = -1;
  graphParent[atom2] = atom1;
  current = 1;
  highest = 1;
  while (current <= highest) {
    for (i = 0; i < this.mMol.getConnAtoms_0(graphAtom[current]); i++) {
      candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
      if (current > 1 && candidate == atom1) {
        ringAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, graphLevel[graphAtom[current]], 15, 1);
        atom = graphAtom[current];
        for (j = 0; j < ringAtom.length; j++) {
          ringAtom[j] = atom;
          atom = graphParent[atom];
        }
        return ringAtom;
      }
      if (graphLevel[candidate] == 0 && !isConfirmedChainAtom[candidate]) {
        graphAtom[++highest] = candidate;
        graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
        graphParent[candidate] = graphAtom[current];
      }
    }
    current++;
  }
  return null;
}
;
_.getAtomIndex_0 = function getAtomIndex(ringNo, atom){
  var i, ringAtom;
  ringAtom = castTo(this.mRingAtomSet.getAtIndex(ringNo), 6);
  for (i = 0; i < ringAtom.length; i++)
    if (atom == ringAtom[i])
      return i;
  return -1;
}
;
_.getAtomRingSize_0 = function getAtomRingSize_0(atom){
  return this.mAtomRingSize[atom];
}
;
_.getBondIndex_0 = function getBondIndex(ringNo, bond){
  var i, ringBond;
  ringBond = castTo(this.mRingBondSet.getAtIndex(ringNo), 6);
  for (i = 0; i < ringBond.length; i++)
    if (bond == ringBond[i])
      return i;
  return -1;
}
;
_.getBondRingSize_0 = function getBondRingSize_0(bond){
  return this.mBondRingSize[bond];
}
;
_.getHeteroPosition_0 = function getHeteroPosition(ringNo){
  return this.mHeteroPosition[ringNo];
}
;
_.getRingAtoms_0 = function getRingAtoms(ringNo){
  return castTo(this.mRingAtomSet.getAtIndex(ringNo), 6);
}
;
_.getRingBonds_0 = function getRingBonds(ringNo){
  return castTo(this.mRingBondSet.getAtIndex(ringNo), 6);
}
;
_.getRingBonds_1 = function getRingBonds_0(ringAtom){
  var atom, i, j, ringAtoms, ringBond;
  ringAtoms = ringAtom.length;
  ringBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, ringAtoms, 15, 1);
  for (i = 0; i < ringAtoms; i++) {
    atom = i == ringAtoms - 1?ringAtom[0]:ringAtom[i + 1];
    for (j = 0; j < this.mMol.getConnAtoms_0(ringAtom[i]); j++) {
      if (this.mMol.getConnAtom_0(ringAtom[i], j) == atom) {
        ringBond[i] = this.mMol.getConnBond_0(ringAtom[i], j);
        break;
      }
    }
  }
  return ringBond;
}
;
_.getRingSize_0 = function getRingSize(ringNo){
  return castTo(this.mRingBondSet.getAtIndex(ringNo), 6).length;
}
;
_.getSharedRing_0 = function getSharedRing(bond1, bond2){
  var i;
  for (i = 0; i < this.mRingBondSet.size(); i++)
    if (this.isBondMember_0(i, bond1) && this.isBondMember_0(i, bond2))
      return i;
  return -1;
}
;
_.getSize_0 = function getSize(){
  return this.mRingAtomSet.size();
}
;
_.isAromatic_0 = function isAromatic_0(ringNo){
  return this.mIsAromatic[ringNo];
}
;
_.isAtomMember_0 = function isAtomMember(ringNo, atom){
  var i, ringAtom;
  ringAtom = castTo(this.mRingAtomSet.getAtIndex(ringNo), 6);
  for (i = 0; i < ringAtom.length; i++)
    if (atom == ringAtom[i])
      return true;
  return false;
}
;
_.isBondMember_0 = function isBondMember(ringNo, bond){
  var i, ringBond;
  ringBond = castTo(this.mRingBondSet.getAtIndex(ringNo), 6);
  for (i = 0; i < ringBond.length; i++)
    if (bond == ringBond[i])
      return true;
  return false;
}
;
_.isDelocalized_0 = function isDelocalized_0(ringNo){
  return this.mIsDelocalized[ringNo];
}
;
_.qualifiesAsAmideTypeBond_0 = function qualifiesAsAmideTypeBond(bond){
  var atom1, atom2, connAtom, connBond, i, j;
  for (i = 0; i < 2; i++) {
    atom1 = this.mMol.getBondAtom_0(i, bond);
    if (this.mMol.getAtomicNo_0(atom1) == 7 && this.mMol.getConnAtoms_0(atom1) == 2) {
      atom2 = this.mMol.getBondAtom_0(1 - i, bond);
      if (this.mMol.getAtomicNo_0(atom2) == 6) {
        for (j = 0; j < this.mMol.getConnAtoms_0(atom2); j++) {
          connAtom = this.mMol.getConnAtom_0(atom2, j);
          connBond = this.mMol.getConnBond_0(atom2, j);
          if ((this.mMol.getAtomicNo_0(connAtom) == 8 || this.mMol.getAtomicNo_0(connAtom) == 16) && this.mMol.getBondOrder_0(connBond) == 2 && this.mMol.getConnAtoms_0(connAtom) == 1)
            return true;
        }
      }
    }
  }
  return false;
}
;
_.qualifiesAsPiBond = function qualifiesAsPiBond(bond){
  return this.mMol.getBondOrder_0(bond) > 1 || this.mMol.getBondType_0(bond) == 64;
}
;
_.updateRingSizes = function updateRingSizes(ringAtom, ringBond){
  var i, i0, ringSize;
  ringSize = ringAtom.length;
  for (i0 = 0; i0 < ringSize; i0++)
    if (this.mAtomRingSize[ringAtom[i0]] == 0 || this.mAtomRingSize[ringAtom[i0]] > ringSize)
      this.mAtomRingSize[ringAtom[i0]] = ringSize;
  for (i = 0; i < ringSize; i++)
    if (this.mBondRingSize[ringBond[i]] == 0 || this.mBondRingSize[ringBond[i]] > ringSize)
      this.mBondRingSize[ringBond[i]] = ringSize;
}
;
_.validateMemberIndex_0 = function validateMemberIndex(ringNo, index_0){
  var ringSize;
  ringSize = castTo(this.mRingBondSet.getAtIndex(ringNo), 6).length;
  while (index_0 >= ringSize)
    index_0 -= ringSize;
  while (index_0 < 0)
    index_0 += ringSize;
  return index_0;
}
;
_.mMaxSmallRingSize = 0;
carc.MAX_SMALL_RING_COUNT = 256;
carc.MAX_SMALL_RING_SIZE = 7;
carc.MODE_AROMATICITY = 4;
carc.MODE_LARGE_RINGS = 2;
carc.MODE_SMALL_AND_LARGE_RINGS = 0;
carc.MODE_SMALL_AND_LARGE_RINGS_AND_AROMATICITY = 0;
carc.MODE_SMALL_RINGS = 1;
carc.MODE_SMALL_RINGS_AND_AROMATICITY = 0;
carc.MODE_SMALL_RINGS_ONLY = 1;
cggl.Lcom_actelion_research_chem_RingCollection_2_classLit = createForClass('com.actelion.research.chem', 'RingCollection', 92, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_SSSearcher = function $clinit_SSSearcher(){
  carc.$clinit_SSSearcher = emptyMethod;
  jl.$clinit_Object();
}
;
carc.SSSearcher = function SSSearcher(){
  carc.$clinit_SSSearcher();
  Object_0.call(this);
  this.$init_29();
  this.mDefaultMatchMode = 8;
  this.mMatchList = new ju.ArrayList;
  this.mSortedMatchSet = new ju.TreeSet(new caru.IntArrayComparator);
  this.mExcludedMatchSet = new ju.TreeSet(new caru.IntArrayComparator);
}
;
carc.copyOf = function copyOf(original, newLength){
  var copy;
  copy = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, newLength, 15, 1);
  jl.arraycopy(original, 0, copy, 0, $wnd.Math.min(original.length, newLength));
  return copy;
}
;
defineClass(112, 1, {1:1}, carc.SSSearcher);
_.$init_29 = function $init_29(){
}
;
_.addMatchIfQualifies = function addMatchIfQualifies(countMode){
  var match_0;
  match_0 = carc.copyOf(this.mMatchTable, this.mMatchTable.length);
  if (countMode == 2 || countMode == 4) {
    this.mMatchList.add(match_0);
    return;
  }
  if (this.mFragmentExcludeAtoms != 0 || countMode == 3) {
    ju.sort_3(match_0);
    if (!this.mSortedMatchSet.contains(match_0)) {
      this.mSortedMatchSet.add(match_0);
      this.mMatchList.add(carc.copyOf(this.mMatchTable, this.mMatchTable.length));
    }
    return;
  }
  return;
}
;
_.areAtomsSimilar = function areAtomsSimilar(moleculeAtom, fragmentAtom){
  var found, fragmentConnAtoms, fragmentList, fragmentQF, i, moleculeConnAtoms, moleculeList, moleculeQF, ringSet, ringSize;
  moleculeConnAtoms = this.mMolecule.getConnAtoms_0(moleculeAtom);
  fragmentConnAtoms = this.mFragmentConnAtoms[fragmentAtom];
  if (fragmentConnAtoms > moleculeConnAtoms)
    return false;
  moleculeQF = this.mMolecule.getAtomQueryFeatures_0(moleculeAtom);
  fragmentQF = this.mFragment.getAtomQueryFeatures_0(fragmentAtom);
  fragmentList = this.mFragment.getAtomList_0(fragmentAtom);
  moleculeList = this.mMolecule.getAtomList_0(moleculeAtom);
  if ((fragmentQF & 1) != 0) {
    if (jsNotEquals(fragmentList, null)) {
      if ((moleculeQF & 1) != 0) {
        if (jsEquals(moleculeList, null))
          return false;
        if (!this.isSubListOf(fragmentList, moleculeList))
          return false;
      }
       else {
        if (jsNotEquals(moleculeList, null)) {
          if (this.listsOverlap(moleculeList, fragmentList))
            return false;
        }
         else {
          if (this.isListMember(this.mMolecule.getAtomicNo_0(moleculeAtom), fragmentList))
            return false;
        }
      }
    }
  }
   else {
    if ((moleculeQF & 1) != 0)
      return false;
    if (jsNotEquals(fragmentList, null)) {
      if (jsNotEquals(moleculeList, null)) {
        if (!this.isSubListOf(moleculeList, fragmentList))
          return false;
      }
       else {
        if (!this.isListMember(this.mMolecule.getAtomicNo_0(moleculeAtom), fragmentList))
          return false;
      }
    }
     else {
      if (jsNotEquals(moleculeList, null))
        return false;
      if (this.mMoleculeAtomType[moleculeAtom] != this.mFragmentAtomType[fragmentAtom])
        return false;
    }
  }
  if ((moleculeQF | fragmentQF) != 0) {
    if ((fragmentQF & 2048) != 0) {
      if (this.mMolecule.isFragment_0() && (moleculeQF & 2048) == 0)
        return false;
      else if (fragmentConnAtoms != moleculeConnAtoms)
        return false;
    }
    if ((fragmentQF & 4096) != 0) {
      if (fragmentConnAtoms >= moleculeConnAtoms && (moleculeQF & 4096) == 0)
        return false;
    }
  }
  if ((this.mMoleculeAtomFeatures[moleculeAtom] & ~this.mFragmentAtomFeatures[fragmentAtom]) != 0)
    return false;
  if (this.mFragment.getAtomCharge_0(fragmentAtom) != 0 && this.mFragment.getAtomCharge_0(fragmentAtom) != this.mMolecule.getAtomCharge_0(moleculeAtom))
    return false;
  if (this.mFragment.getAtomMass_0(fragmentAtom) != 0 && this.mFragment.getAtomMass_0(fragmentAtom) != this.mMolecule.getAtomMass_0(moleculeAtom))
    return false;
  ringSize = (this.mFragment.getAtomQueryFeatures_0(fragmentAtom) & 29360128) >> 22;
  if (ringSize != 0) {
    if (this.mMolecule.isFragment_0() && ringSize == (this.mMolecule.getAtomQueryFeatures_0(fragmentAtom) & 29360128) >> 22)
      return true;
    found = false;
    ringSet = this.mMolecule.getRingSet_0();
    for (i = 0; i < ringSet.getSize_0(); i++) {
      if (ringSet.getRingSize_0(i) == ringSize) {
        if (ringSet.isAtomMember_0(i, moleculeAtom)) {
          found = true;
          break;
        }
      }
    }
    if (!found)
      return false;
  }
  return true;
}
;
_.areBondsSimilar = function areBondsSimilar(moleculeBond, fragmentBond){
  var found, i, ringSet, ringSize;
  if ((this.mMoleculeBondFeatures[moleculeBond] & ~this.mFragmentBondFeatures[fragmentBond]) != 0)
    return false;
  ringSize = (this.mFragment.getBondQueryFeatures_0(fragmentBond) & 229376) >> 15;
  if (ringSize != 0) {
    if (this.mMolecule.isFragment_0() && ringSize == (this.mMolecule.getBondQueryFeatures_0(fragmentBond) & 229376) >> 15)
      return true;
    found = false;
    ringSet = this.mMolecule.getRingSet_0();
    for (i = 0; i < ringSet.getSize_0(); i++) {
      if (ringSet.getRingSize_0(i) == ringSize) {
        if (ringSet.isBondMember_0(i, moleculeBond)) {
          found = true;
          break;
        }
      }
    }
    if (!found)
      return false;
  }
  return true;
}
;
_.buildBridgeBondList = function buildBridgeBondList(){
  var bond, bridgeBond;
  this.mBridgeBondList = null;
  for (bond = 0; bond < this.mFragment.getBonds_0(); bond++) {
    if (this.mFragment.isBondBridge_0(bond)) {
      if (isNull(this.mBridgeBondList))
        this.mBridgeBondList = new ju.ArrayList;
      bridgeBond = new carc.SSSearcher$BridgeBond(this);
      bridgeBond.atom1 = this.mFragment.getBondAtom_0(0, bond);
      bridgeBond.atom2 = this.mFragment.getBondAtom_0(1, bond);
      bridgeBond.minBridgeSize = this.mFragment.getBondBridgeMinSize_0(bond);
      bridgeBond.maxBridgeSize = this.mFragment.getBondBridgeMaxSize_0(bond);
      this.mBridgeBondList.add(bridgeBond);
    }
  }
}
;
_.buildFragmentGraph = function buildFragmentGraph(){
  var atom, atom0, candidate, current, fragmentAtomUsed, fragmentBondUsed, graphAllocation, highest, i;
  this.mFragment.ensureHelperArrays_0(this.mRequiredHelperLevel);
  graphAllocation = this.mFragment.getBonds_0() + 12;
  this.mFragmentGraphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, graphAllocation, 15, 1);
  this.mFragmentGraphParentAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, graphAllocation, 15, 1);
  this.mFragmentGraphParentBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, graphAllocation, 15, 1);
  this.mFragmentGraphIsRingClosure = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, graphAllocation + 1, 16, 1);
  fragmentAtomUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mFragment.getAtoms_0(), 16, 1);
  fragmentBondUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mFragment.getBonds_0(), 16, 1);
  current = 0;
  for (atom0 = 0; atom0 < this.mFragment.getAtoms_0(); atom0++) {
    if (!this.mIsExcludeAtom[atom0] && !fragmentAtomUsed[atom0]) {
      this.mFragmentGraphAtom[current] = atom0;
      this.mFragmentGraphParentBond[current] = -1;
      this.mFragmentGraphParentAtom[current] = -1;
      highest = current;
      while (current <= highest) {
        for (i = 0; i < this.mFragment.getAllConnAtomsPlusMetalBonds_0(this.mFragmentGraphAtom[current]); i++) {
          candidate = this.mFragment.getConnAtom_0(this.mFragmentGraphAtom[current], i);
          if (candidate < this.mFragment.getAtoms_0() && !this.mIsExcludeAtom[candidate])
            highest = this.tryAddCandidate(current, highest, i, fragmentAtomUsed, fragmentBondUsed);
        }
        while (this.mFragmentGraphIsRingClosure[++current])
        ;
      }
    }
  }
  this.mFragmentGraphSize = current;
  if (this.mFragmentExcludeAtoms != 0) {
    highest = current - 1;
    current = 0;
    while (current <= highest) {
      for (i = 0; i < this.mFragment.getAllConnAtomsPlusMetalBonds_0(this.mFragmentGraphAtom[current]); i++) {
        candidate = this.mFragment.getConnAtom_0(this.mFragmentGraphAtom[current], i);
        if (candidate < this.mFragment.getAtoms_0() && (this.mIsExcludeAtom[candidate] || this.mIsExcludeAtom[this.mFragmentGraphAtom[current]]))
          highest = this.tryAddCandidate(current, highest, i, fragmentAtomUsed, fragmentBondUsed);
      }
      while (this.mFragmentGraphIsRingClosure[++current])
      ;
    }
    for (atom = 0; atom < this.mFragment.getAtoms_0(); atom++) {
      if (this.mIsExcludeAtom[atom] && !fragmentAtomUsed[atom]) {
        this.mFragmentGraphAtom[current] = atom;
        this.mFragmentGraphParentBond[current] = -1;
        this.mFragmentGraphParentAtom[current] = -1;
        highest = current;
        while (current <= highest) {
          for (i = 0; i < this.mFragment.getAllConnAtomsPlusMetalBonds_0(this.mFragmentGraphAtom[current]); i++)
            if (this.mFragment.getConnAtom_0(this.mFragmentGraphAtom[current], i) < this.mFragment.getAtoms_0())
              highest = this.tryAddCandidate(current, highest, i, fragmentAtomUsed, fragmentBondUsed);
          while (this.mFragmentGraphIsRingClosure[++current])
          ;
        }
      }
    }
  }
  this.mFragmentGraphSizeWithExcludeGroup = current;
}
;
_.doBridgeBondsMatch = function doBridgeBondsMatch(moleculeAtomUsed, isExcludeFragment){
  var bb, bb$iterator, bridgeSize;
  if (isNotNull(this.mBridgeBondList)) {
    for (bb$iterator = this.mBridgeBondList.iterator(); bb$iterator.hasNext_0();) {
      bb = castTo(bb$iterator.next_3(), 114);
      if ((this.mIsExcludeAtom[bb.atom1] || this.mIsExcludeAtom[bb.atom2]) == isExcludeFragment) {
        bridgeSize = this.mMolecule.getPathLength_1(this.mMatchTable[bb.atom1], this.mMatchTable[bb.atom2], bb.maxBridgeSize + 1, moleculeAtomUsed) - 1;
        if (bridgeSize < bb.minBridgeSize || bridgeSize > bb.maxBridgeSize)
          return false;
      }
    }
  }
  return true;
}
;
_.doEZParitiesMatch = function doEZParitiesMatch(isExcludeGroup){
  var fragmentAtom1, fragmentAtom2, fragmentBond, fragmentParity, moleculeAtom1, moleculeAtom2, moleculeBond, moleculeParity;
  for (fragmentBond = 0; fragmentBond < this.mFragment.getBonds_0(); fragmentBond++) {
    if ((this.mFragment.getBondQueryFeatures_0(fragmentBond) & 262144) != 0) {
      fragmentParity = this.mFragment.getBondParity_0(fragmentBond);
      if (fragmentParity == 0)
        continue;
      fragmentAtom1 = this.mFragment.getBondAtom_0(0, fragmentBond);
      fragmentAtom2 = this.mFragment.getBondAtom_0(1, fragmentBond);
      if ((this.mIsExcludeAtom[fragmentAtom1] || this.mIsExcludeAtom[fragmentAtom2]) == isExcludeGroup) {
        moleculeAtom1 = this.mMatchTable[fragmentAtom1];
        moleculeAtom2 = this.mMatchTable[fragmentAtom2];
        moleculeBond = this.mMolecule.getBond_0(moleculeAtom1, moleculeAtom2);
        moleculeParity = this.mMolecule.getBondParity_0(moleculeBond);
        if (moleculeParity == 0)
          continue;
        if (fragmentParity == 3)
          continue;
        if (moleculeParity == 3)
          continue;
        if (this.isEZParityInversion(fragmentBond, moleculeBond) == (fragmentParity == moleculeParity))
          return false;
      }
    }
  }
  return true;
}
;
_.doExcludeGroupsMatch = function doExcludeGroupsMatch(atomUsed, index_0){
  var atom, candidate, current, i, maxIndex;
  for (i = this.mFragmentGraphSize; i < this.mFragmentGraphSizeWithExcludeGroup; i++)
    index_0[i] = -1;
  current = this.mFragmentGraphSize;
  while (true) {
    maxIndex = this.mFragmentGraphParentAtom[current] == -1?this.mMolecule.getAtoms_0():this.mMolecule.getAllConnAtomsPlusMetalBonds_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]]);
    index_0[current]++;
    if (index_0[current] == maxIndex) {
      index_0[current] = -1;
      if (current == this.mFragmentGraphSize)
        break;
      current--;
      if (!this.mFragmentGraphIsRingClosure[current]) {
        atomUsed[this.mMatchTable[this.mFragmentGraphAtom[current]]] = false;
        this.mMatchTable[this.mFragmentGraphAtom[current]] = -1;
      }
      continue;
    }
    if (this.mFragmentGraphParentAtom[current] == -1) {
      if (!atomUsed[index_0[current]]) {
        if (this.areAtomsSimilar(index_0[current], this.mFragmentGraphAtom[current])) {
          this.mMatchTable[this.mFragmentGraphAtom[current]] = index_0[current];
          atomUsed[index_0[current]] = true;
          current++;
        }
      }
    }
     else {
      if (this.mMolecule.getConnAtom_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]) >= this.mMolecule.getAtoms_0()) {
        index_0[current]++;
        continue;
      }
      candidate = this.mMolecule.getConnAtom_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]);
      if (!this.mFragmentGraphIsRingClosure[current]) {
        if (!atomUsed[candidate]) {
          if (this.areAtomsSimilar(candidate, this.mFragmentGraphAtom[current]) && this.areBondsSimilar(this.mMolecule.getConnBond_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]), this.mFragmentGraphParentBond[current])) {
            atomUsed[candidate] = true;
            this.mMatchTable[this.mFragmentGraphAtom[current]] = candidate;
            current++;
          }
        }
      }
       else {
        if (candidate == this.mMatchTable[this.mFragmentGraphAtom[current]] && this.areBondsSimilar(this.mMolecule.getConnBond_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]), this.mFragmentGraphParentBond[current])) {
          current++;
        }
      }
    }
    if (current == this.mFragmentGraphSizeWithExcludeGroup) {
      if (this.doTHParitiesMatch(true) && this.doEZParitiesMatch(true) && this.doBridgeBondsMatch(atomUsed, true)) {
        for (atom = 0; atom < this.mFragment.getAtoms_0(); atom++) {
          if (this.mIsExcludeAtom[atom]) {
            atomUsed[this.mMatchTable[atom]] = false;
            this.mMatchTable[atom] = -1;
          }
        }
        return true;
      }
      current--;
      if (!this.mFragmentGraphIsRingClosure[current]) {
        atomUsed[this.mMatchTable[this.mFragmentGraphAtom[current]]] = false;
        this.mMatchTable[this.mFragmentGraphAtom[current]] = -1;
      }
    }
  }
  return false;
}
;
_.doTHParitiesMatch = function doTHParitiesMatch(isExcludeGroup){
  var baseGroupAndType, baseParityComparison, esrAtom, esrAtomIndex, esrGroupAtomCount, fragmentAtom, fragmentAtom0, fragmentAtom1, fragmentBaseAtom, fragmentParity, moleculeAtom, moleculeBaseAtom, moleculeParity, parityComparison;
  esrGroupAtomCount = 0;
  for (fragmentAtom0 = 0; fragmentAtom0 < this.mFragment.getAtoms_0(); fragmentAtom0++) {
    if (this.mIsExcludeAtom[fragmentAtom0] == isExcludeGroup && (this.mFragment.getAtomQueryFeatures_0(fragmentAtom0) & 8192) != 0) {
      moleculeAtom = this.mMatchTable[fragmentAtom0];
      fragmentParity = this.mFragment.getAtomParity_0(fragmentAtom0);
      moleculeParity = this.mMolecule.getAtomParity_0(moleculeAtom);
      if (fragmentParity == 0)
        continue;
      if (moleculeParity == 0)
        continue;
      if (fragmentParity == 3)
        continue;
      if (moleculeParity == 3)
        continue;
      if (this.mFragment.getAtomESRType_0(fragmentAtom0) == 1) {
        esrGroupAtomCount++;
        continue;
      }
      if (this.mMolecule.getAtomESRType_0(moleculeAtom) == 1)
        return false;
      if (this.mFragment.getAtomESRType_0(fragmentAtom0) == 2) {
        esrGroupAtomCount++;
        continue;
      }
      if (this.mMolecule.getAtomESRType_0(moleculeAtom) == 2)
        return false;
      if (this.isTHParityInversion(fragmentAtom0) == (fragmentParity == moleculeParity))
        return false;
    }
  }
  if (esrGroupAtomCount != 0) {
    esrAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, esrGroupAtomCount, 15, 1);
    esrAtomIndex = 0;
    for (fragmentAtom1 = 0; fragmentAtom1 < this.mFragment.getAtoms_0(); fragmentAtom1++) {
      if (this.mIsExcludeAtom[fragmentAtom1] == isExcludeGroup && (this.mFragment.getAtomQueryFeatures_0(fragmentAtom1) & 8192) != 0) {
        fragmentParity = this.mFragment.getAtomParity_0(fragmentAtom1);
        if (fragmentParity != 0 && fragmentParity != 3) {
          esrAtom[esrAtomIndex++] = this.mFragment.getAtomESRGroup_0(fragmentAtom1) << 24 | this.mFragment.getAtomESRType_0(fragmentAtom1) << 22 | fragmentAtom1;
        }
      }
    }
    ju.sort_3(esrAtom);
    esrAtomIndex = 0;
    while (esrAtomIndex < esrAtom.length) {
      fragmentBaseAtom = esrAtom[esrAtomIndex] & 4194303;
      moleculeBaseAtom = this.mMatchTable[fragmentBaseAtom];
      baseGroupAndType = esrAtom[esrAtomIndex] & -4194304;
      baseParityComparison = this.isTHParityInversion(fragmentBaseAtom) ^ this.mFragment.getAtomParity_0(fragmentBaseAtom) == this.mMolecule.getAtomParity_0(moleculeBaseAtom);
      for (esrAtomIndex++; esrAtomIndex < esrAtom.length && (esrAtom[esrAtomIndex] & -4194304) == baseGroupAndType; esrAtomIndex++) {
        fragmentAtom = esrAtom[esrAtomIndex] & 4194303;
        moleculeAtom = this.mMatchTable[fragmentAtom];
        if (this.mMolecule.getAtomESRType_0(moleculeAtom) != this.mMolecule.getAtomESRType_0(moleculeBaseAtom) || this.mMolecule.getAtomESRGroup_0(moleculeAtom) != this.mMolecule.getAtomESRGroup_0(moleculeBaseAtom))
          return false;
        parityComparison = this.isTHParityInversion(fragmentAtom) ^ this.mFragment.getAtomParity_0(fragmentAtom) == this.mMolecule.getAtomParity_0(moleculeAtom);
        if (parityComparison != baseParityComparison)
          return false;
      }
    }
  }
  return true;
}
;
_.findFragmentInMolecule = function findFragmentInMolecule(countMode, matchMode){
  return this.findFragmentInMolecule_0(countMode, matchMode, null);
}
;
_.findFragmentInMolecule_0 = function findFragmentInMolecule_0(countMode, matchMode, atomExcluded){
  var atom, atomUsed, candidate, comparator, current, i, index_0, isExcludedMatch, match_0, maxIndex, sortedMatch, tempMatch;
  this.mMatchList = new ju.ArrayList;
  this.mSortedMatchSet.clear();
  this.mExcludedMatchSet.clear();
  if (isNull(this.mMolecule) || isNull(this.mFragment))
    return 0;
  if (this.mFragment.getAtoms_0() - this.mFragmentExcludeAtoms > this.mMolecule.getAtoms_0() || this.mFragment.getBonds_0() - this.mFragmentExcludeBonds > this.mMolecule.getBonds_0())
    return 0;
  if (this.mFragment.getAtoms_0() - this.mFragmentExcludeAtoms == 0)
    return 0;
  this.setupAtomAndBondFeatures(matchMode);
  atomUsed = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMolecule.getAtoms_0(), 16, 1);
  if (jsNotEquals(atomExcluded, null))
    for (atom = 0; atom < this.mMolecule.getAtoms_0(); atom++)
      atomUsed[atom] = atomExcluded[atom];
  this.mMatchTable = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mFragment.getAtoms_0(), 15, 1);
  ju.fill_0(this.mMatchTable, -1);
  index_0 = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mFragmentGraphSizeWithExcludeGroup, 15, 1);
  ju.fill_0(index_0, -1);
  current = 0;
  while (true) {
    maxIndex = this.mFragmentGraphParentAtom[current] == -1?this.mMolecule.getAtoms_0():this.mMolecule.getAllConnAtomsPlusMetalBonds_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]]);
    index_0[current]++;
    if (index_0[current] == maxIndex) {
      index_0[current] = -1;
      if (current == 0)
        break;
      current--;
      if (!this.mFragmentGraphIsRingClosure[current])
        atomUsed[this.mMatchTable[this.mFragmentGraphAtom[current]]] = false;
      continue;
    }
    if (this.mFragmentGraphParentAtom[current] == -1) {
      if (!atomUsed[index_0[current]]) {
        if (this.areAtomsSimilar(index_0[current], this.mFragmentGraphAtom[current])) {
          this.mMatchTable[this.mFragmentGraphAtom[current]] = index_0[current];
          atomUsed[index_0[current]] = true;
          current++;
        }
      }
    }
     else {
      if (this.mMolecule.getConnAtom_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]) >= this.mMolecule.getAtoms_0())
        continue;
      candidate = this.mMolecule.getConnAtom_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]);
      if (!this.mFragmentGraphIsRingClosure[current]) {
        if (!atomUsed[candidate]) {
          if (this.areAtomsSimilar(candidate, this.mFragmentGraphAtom[current]) && this.areBondsSimilar(this.mMolecule.getConnBond_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]), this.mFragmentGraphParentBond[current])) {
            atomUsed[candidate] = true;
            this.mMatchTable[this.mFragmentGraphAtom[current]] = candidate;
            current++;
          }
        }
      }
       else {
        if (candidate == this.mMatchTable[this.mFragmentGraphAtom[current]] && this.areBondsSimilar(this.mMolecule.getConnBond_0(this.mMatchTable[this.mFragmentGraphParentAtom[current]], index_0[current]), this.mFragmentGraphParentBond[current])) {
          current++;
        }
      }
    }
    if (current == this.mFragmentGraphSize) {
      if (this.doTHParitiesMatch(false) && this.doEZParitiesMatch(false) && this.doBridgeBondsMatch(atomUsed, false)) {
        if (countMode == 1 && this.mFragmentExcludeAtoms == 0)
          return 1;
        isExcludedMatch = false;
        if (this.mFragmentExcludeAtoms != 0) {
          sortedMatch = carc.copyOf(this.mMatchTable, this.mMatchTable.length);
          ju.sort_3(sortedMatch);
          if (this.mExcludedMatchSet.contains(sortedMatch)) {
            isExcludedMatch = true;
          }
           else if (this.doExcludeGroupsMatch(atomUsed, index_0)) {
            this.mExcludedMatchSet.add(sortedMatch);
            comparator = new caru.IntArrayComparator;
            tempMatch = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, sortedMatch.length, 15, 1);
            for (i = this.mMatchList.size() - 1; i >= 0; i--) {
              match_0 = castTo(this.mMatchList.getAtIndex(i), 6);
              jl.arraycopy(match_0, 0, tempMatch, 0, tempMatch.length);
              ju.sort_3(tempMatch);
              if (comparator.compare_0(tempMatch, sortedMatch) == 0)
                this.mMatchList.removeAtIndex(i);
            }
            isExcludedMatch = true;
          }
        }
        if (!isExcludedMatch) {
          this.addMatchIfQualifies(countMode);
          if (countMode == 2 && this.mFragmentExcludeAtoms == 0)
            return 1;
        }
      }
      current--;
      if (!this.mFragmentGraphIsRingClosure[current])
        atomUsed[this.mMatchTable[this.mFragmentGraphAtom[current]]] = false;
    }
  }
  return this.mMatchList.size();
}
;
_.getAtomQueryDefaults = function getAtomQueryDefaults(mol, atom){
  var charge, hydrogens, neighbours, piElectrons, piElectrons0, queryDefaults, ringBonds;
  queryDefaults = 0;
  if (!mol.isFragment_0()) {
    if (mol.isAromaticAtom_1(atom))
      queryDefaults |= 2;
    else 
      queryDefaults |= 4;
    ringBonds = mol.getAtomRingBondCount_0(atom);
    if (ringBonds == 0)
      queryDefaults |= 16 | 32 | 64;
    else if (ringBonds == 2)
      queryDefaults |= 8 | 32 | 64;
    else if (ringBonds == 3)
      queryDefaults |= 8 | 16 | 64;
    else 
      queryDefaults |= 8 | 16 | 32;
    charge = mol.getAtomCharge_0(atom);
    if (charge == 0)
      queryDefaults |= 33554432 | 134217728;
    else if (charge < 0)
      queryDefaults |= 67108864 | 134217728;
    else if (charge > 0)
      queryDefaults |= 67108864 | 33554432;
    hydrogens = mol.getAllHydrogens_0(atom);
    switch (hydrogens) {
      case 0:
        queryDefaults |= 1920 & ~128;
        break;
      case 1:
        queryDefaults |= 1920 & ~256;
        break;
      case 2:
        queryDefaults |= 1920 & ~512;
        break;
      default:queryDefaults |= 1920 & ~1024;
        break;
    }
    neighbours = mol.getConnAtoms_0(atom);
    switch (neighbours) {
      case 0:
        queryDefaults |= 4063232 & ~131072;
        break;
      case 1:
        queryDefaults |= 4063232 & ~262144;
        break;
      case 2:
        queryDefaults |= 4063232 & ~524288;
        break;
      case 3:
        queryDefaults |= 4063232 & ~1048576;
        break;
      default:queryDefaults |= 4063232 & ~2097152;
        break;
    }
    piElectrons0 = mol.getAtomPi_0(atom);
    switch (piElectrons0) {
      case 0:
        queryDefaults |= 32768 | 65536;
        break;
      case 1:
        queryDefaults |= 16384 | 65536;
        break;
      default:queryDefaults |= 16384 | 32768;
        break;
    }
  }
   else {
    if (mol.isAromaticAtom_1(atom))
      queryDefaults |= 2;
    ringBonds = mol.getAtomRingBondCount_0(atom);
    if (ringBonds != 0) {
      queryDefaults |= 8;
      if (ringBonds > 2)
        queryDefaults |= 16;
      if (ringBonds > 3)
        queryDefaults |= 32;
    }
    charge = mol.getAtomCharge_0(atom);
    if (charge < 0)
      queryDefaults |= 67108864 | 134217728;
    else if (charge > 0)
      queryDefaults |= 67108864 | 33554432;
    neighbours = mol.getConnAtoms_0(atom);
    switch (neighbours) {
      case 0:
        break;
      case 1:
        queryDefaults |= 131072;
        break;
      case 2:
        queryDefaults |= 131072 | 262144;
        break;
      case 3:
        queryDefaults |= 131072 | 262144 | 524288;
        break;
      default:queryDefaults |= 4063232 & ~2097152;
        break;
    }
  }
  piElectrons = mol.getAtomPi_0(atom);
  if (piElectrons > 0)
    queryDefaults |= 16384;
  if (piElectrons > 1)
    queryDefaults |= 32768;
  return queryDefaults;
}
;
_.getBondQueryDefaults = function getBondQueryDefaults(mol, bond){
  var queryDefaults;
  queryDefaults = 0;
  if (mol.isDelocalizedBond_0(bond) || mol.getBondType_0(bond) == 64)
    queryDefaults |= 8;
  else 
    switch (mol.getBondOrder_0(bond)) {
      case 0:
        queryDefaults |= 32;
        break;
      case 1:
        queryDefaults |= 1;
        break;
      case 2:
        queryDefaults |= 2;
        break;
      case 3:
        queryDefaults |= 4;
        break;
    }
  if (mol.isRingBond_0(bond))
    queryDefaults |= 64;
  else if (!mol.isFragment_0())
    queryDefaults |= 32;
  if (mol.isAromaticBond_0(bond))
    queryDefaults |= 524288;
  else if (!mol.isFragment_0())
    queryDefaults |= 1048576;
  return queryDefaults;
}
;
_.getMatchList = function getMatchList(){
  return this.mMatchList;
}
;
_.isEZParityInversion = function isEZParityInversion(fragmentBond, moleculeBond){
  var fragmentAtom, fragmentNeighbour, fragmentNeighbours, i, inversion, j, j0, moleculeAtom, moleculeNeighbour, moleculeNeighbours;
  inversion = false;
  for (i = 0; i < 2; i++) {
    fragmentAtom = this.mFragment.getBondAtom_0(i, fragmentBond);
    moleculeAtom = this.mMatchTable[fragmentAtom];
    if (this.mFragment.getConnAtoms_0(fragmentAtom) == 2) {
      if (this.mMolecule.getConnAtoms_0(moleculeAtom) == 2)
        continue;
      fragmentNeighbour = -1;
      for (j0 = 0; j0 < 2; j0++)
        if (this.mFragment.getConnBond_0(fragmentAtom, j0) != fragmentBond)
          fragmentNeighbour = this.mFragment.getConnAtom_0(fragmentAtom, j0);
      moleculeNeighbours = 0;
      moleculeNeighbour = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
      for (j = 0; j < 3; j++)
        if (this.mMolecule.getConnBond_0(moleculeAtom, j) != moleculeBond)
          moleculeNeighbour[moleculeNeighbours++] = this.mMolecule.getConnAtom_0(moleculeAtom, j);
      if (this.mMatchTable[fragmentNeighbour] != moleculeNeighbour[0])
        inversion = !inversion;
    }
     else if (this.mFragment.getConnAtoms_0(fragmentAtom) == 3 && this.mMolecule.getConnAtoms_0(moleculeAtom) == 3) {
      fragmentNeighbour = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
      fragmentNeighbours = 0;
      for (j = 0; j < 3; j++)
        if (this.mFragment.getConnBond_0(fragmentAtom, j) != fragmentBond)
          fragmentNeighbour[fragmentNeighbours++] = this.mFragment.getConnAtom_0(fragmentAtom, j);
      if (this.mMatchTable[fragmentNeighbour[0]] > this.mMatchTable[fragmentNeighbour[1]] ^ fragmentNeighbour[0] > fragmentNeighbour[1])
        inversion = !inversion;
    }
  }
  return inversion;
}
;
_.isFragmentInMolecule_0 = function isFragmentInMolecule(){
  return this.findFragmentInMolecule(1, this.mDefaultMatchMode) > 0;
}
;
_.isFragmentInMolecule_1 = function isFragmentInMolecule_0(matchMode){
  return this.findFragmentInMolecule(1, matchMode) > 0;
}
;
_.isListMember = function isListMember(atomicNo, list){
  var i;
  for (i = 0; i < list.length; i++)
    if (list[i] == atomicNo)
      return true;
  return false;
}
;
_.isSubListOf = function isSubListOf(list1, list2){
  var atomicNo1, i1, i2;
  i2 = 0;
  for (i1 = 0; i1 < list1.length; i1++) {
    atomicNo1 = list1[i1];
    while (list2[i2] < atomicNo1) {
      i2++;
      if (i2 == list2.length)
        return false;
    }
    if (list2[i2] > atomicNo1)
      return false;
  }
  return true;
}
;
_.isTHParityInversion = function isTHParityInversion(fragmentAtom){
  var connAtom, connAtom1, connAtom2, i, inversion, j, neighbour, neighbours;
  inversion = false;
  if (this.mFragment.getAtomPi_0(fragmentAtom) == 0) {
    for (i = 1; i < this.mFragment.getConnAtoms_0(fragmentAtom); i++) {
      for (j = 0; j < i; j++) {
        connAtom1 = this.mFragment.getConnAtom_0(fragmentAtom, i);
        connAtom2 = this.mFragment.getConnAtom_0(fragmentAtom, j);
        if (this.mMatchTable[connAtom1] > this.mMatchTable[connAtom2] ^ connAtom1 > connAtom2)
          inversion = !inversion;
      }
    }
  }
   else {
    for (i = 0; i < this.mFragment.getConnAtoms_0(fragmentAtom); i++) {
      connAtom = this.mFragment.getConnAtom_0(fragmentAtom, i);
      neighbours = 0;
      neighbour = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 3, 15, 1);
      for (j = 0; j < this.mFragment.getConnAtoms_0(connAtom); j++) {
        neighbour[neighbours] = this.mFragment.getConnAtom_0(connAtom, j);
        if (neighbour[neighbours] != fragmentAtom)
          neighbours++;
      }
      if (neighbours == 2 && this.mMatchTable[neighbour[0]] > this.mMatchTable[neighbour[1]] ^ neighbour[0] > neighbour[1])
        inversion = !inversion;
    }
  }
  return inversion;
}
;
_.listsOverlap = function listsOverlap(list1, list2){
  var atomicNo1, atomicNo2, i1, i2;
  i1 = 0;
  i2 = 0;
  while (i1 < list1.length && i2 < list2.length) {
    atomicNo1 = list1[i1];
    atomicNo2 = list2[i2];
    if (atomicNo1 == atomicNo2)
      return true;
    if (atomicNo1 < atomicNo2)
      i1++;
    else 
      i2++;
  }
  return false;
}
;
_.setFragment_1 = function setFragment_0(fragment){
  var atom, atom0, bond, bond0;
  if (isNull(fragment) || fragment.getAllAtoms_0() == 0 || !fragment.isFragment_0()) {
    this.mFragment = null;
    return;
  }
  this.mFragment = fragment;
  this.mFragmentFeaturesValid = false;
  this.mFragment.ensureHelperArrays_0(1);
  this.mRequiredHelperLevel = 3;
  for (atom0 = 0; atom0 < this.mFragment.getAtoms_0(); atom0++)
    if ((this.mFragment.getAtomQueryFeatures_0(atom0) & 8192) != 0)
      this.mRequiredHelperLevel = 7;
  for (bond0 = 0; bond0 < this.mFragment.getBonds_0(); bond0++)
    if ((this.mFragment.getBondQueryFeatures_0(bond0) & 262144) != 0)
      this.mRequiredHelperLevel = 7;
  if (this.mMoleculeFeaturesValid && this.mRequiredHelperLevel != 3)
    this.mMolecule.ensureHelperArrays_0(this.mRequiredHelperLevel);
  this.mFragmentExcludeAtoms = 0;
  this.mIsExcludeAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mFragment.getAtoms_0(), 16, 1);
  for (atom = 0; atom < this.mFragment.getAtoms_0(); atom++) {
    this.mIsExcludeAtom[atom] = (this.mFragment.getAtomQueryFeatures_0(atom) & 536870912) != 0;
    if (this.mIsExcludeAtom[atom])
      this.mFragmentExcludeAtoms++;
  }
  this.mFragmentExcludeBonds = 0;
  if (this.mFragmentExcludeAtoms != 0)
    for (bond = 0; bond < this.mFragment.getBonds_0(); bond++)
      if (this.mIsExcludeAtom[this.mFragment.getBondAtom_0(0, bond)] || this.mIsExcludeAtom[this.mFragment.getBondAtom_0(1, bond)])
        this.mFragmentExcludeBonds++;
}
;
_.setMolecule_0 = function setMolecule(molecule){
  if (isNull(molecule) || molecule.getAllAtoms_0() == 0) {
    this.mMolecule = null;
    return;
  }
  this.mMolecule = molecule;
  this.mMoleculeFeaturesValid = false;
  this.mMolecule.ensureHelperArrays_0(1);
}
;
_.setupAtomAndBondFeatures = function setupAtomAndBondFeatures(matchMode){
  if (!this.mMoleculeFeaturesValid) {
    this.setupMoleculeFeatures(matchMode);
    this.mMoleculeFeaturesValid = true;
  }
  if (!this.mFragmentFeaturesValid) {
    this.setupFragmentFeatures(matchMode);
    this.buildFragmentGraph();
    this.buildBridgeBondList();
    this.mFragmentFeaturesValid = true;
  }
}
;
_.setupFragmentFeatures = function setupFragmentFeatures(matchMode){
  var atom, atom0, atom1, atomFeaturesWithoutExcludeAtoms, atomTypeWithoutExcludeAtoms, bond, bondFeaturesWithoutExcludeAtoms, fragmentWithoutExcludeGroups, index_0, isNonExcludeAtom;
  atomFeaturesWithoutExcludeAtoms = null;
  bondFeaturesWithoutExcludeAtoms = null;
  atomTypeWithoutExcludeAtoms = null;
  this.mFragment.ensureHelperArrays_0(this.mRequiredHelperLevel);
  this.mFragmentConnAtoms = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mFragment.getAtoms_0(), 15, 1);
  for (atom0 = 0; atom0 < this.mFragment.getAtoms_0(); atom0++)
    this.mFragmentConnAtoms[atom0] = this.mFragment.getConnAtoms_0(atom0);
  if (this.mFragmentExcludeAtoms != 0) {
    fragmentWithoutExcludeGroups = new carc.StereoMolecule(this.mFragment.getAllAtoms_0(), this.mFragment.getAllBonds_0());
    isNonExcludeAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mFragment.getAllAtoms_0(), 16, 1);
    for (atom1 = 0; atom1 < this.mFragment.getAllAtoms_0(); atom1++)
      isNonExcludeAtom[atom1] = !this.mIsExcludeAtom[atom1];
    this.mFragment.copyMoleculeByAtoms_0(fragmentWithoutExcludeGroups, isNonExcludeAtom, true, null);
    fragmentWithoutExcludeGroups.ensureHelperArrays_0(this.mRequiredHelperLevel);
    this.setupFragmentFeatures_0(fragmentWithoutExcludeGroups, matchMode);
    atomFeaturesWithoutExcludeAtoms = this.mFragmentAtomFeatures;
    bondFeaturesWithoutExcludeAtoms = this.mFragmentBondFeatures;
    atomTypeWithoutExcludeAtoms = this.mFragmentAtomType;
    index_0 = 0;
    for (atom = 0; atom < this.mFragment.getAtoms_0(); atom++)
      if (!this.mIsExcludeAtom[atom])
        this.mFragmentConnAtoms[atom] = fragmentWithoutExcludeGroups.getConnAtoms_0(index_0++);
  }
  this.setupFragmentFeatures_0(this.mFragment, matchMode);
  if (this.mFragmentExcludeAtoms != 0) {
    index_0 = 0;
    for (atom = 0; atom < this.mFragment.getAllAtoms_0(); atom++) {
      if (!this.mIsExcludeAtom[atom]) {
        this.mFragmentAtomFeatures[atom] = atomFeaturesWithoutExcludeAtoms[index_0];
        this.mFragmentAtomType[atom] = atomTypeWithoutExcludeAtoms[index_0++];
      }
    }
    index_0 = 0;
    for (bond = 0; bond < this.mFragment.getAllBonds_0(); bond++) {
      if (!this.mIsExcludeAtom[this.mFragment.getBondAtom_0(0, bond)] && !this.mIsExcludeAtom[this.mFragment.getBondAtom_0(1, bond)]) {
        this.mFragmentBondFeatures[bond] = bondFeaturesWithoutExcludeAtoms[index_0++];
      }
    }
  }
}
;
_.setupFragmentFeatures_0 = function setupFragmentFeatures_0(fragment, matchMode){
  var atom, bond, nTotalFragmentAtoms, nTotalFragmentBonds;
  nTotalFragmentAtoms = fragment.getAtoms_0();
  this.mFragmentAtomFeatures = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragment.getAtoms_0(), 15, 1);
  this.mFragmentAtomType = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragment.getAtoms_0(), 15, 1);
  for (atom = 0; atom < nTotalFragmentAtoms; atom++) {
    this.mFragmentAtomFeatures[atom] = (this.getAtomQueryDefaults(fragment, atom) | fragment.getAtomQueryFeatures_0(atom)) & 239060990 ^ 239060990;
    this.mFragmentAtomType[atom] = fragment.getAtomicNo_0(atom);
    if ((matchMode & 1) != 0)
      this.mFragmentAtomType[atom] += fragment.getAtomCharge_0(atom) + 16 << 8;
    if ((matchMode & 2) != 0)
      this.mFragmentAtomType[atom] += fragment.getAtomMass_0(atom) << 16;
  }
  nTotalFragmentBonds = fragment.getBonds_0();
  this.mFragmentBondFeatures = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragment.getBonds_0(), 15, 1);
  for (bond = 0; bond < nTotalFragmentBonds; bond++) {
    this.mFragmentBondFeatures[bond] = (this.getBondQueryDefaults(fragment, bond) | fragment.getBondQueryFeatures_0(bond)) & 1572991 ^ 1572960;
    if ((matchMode & 4) != 0) {
      if ((this.mFragmentBondFeatures[bond] & 2) != 0)
        this.mFragmentBondFeatures[bond] |= 8;
    }
     else if ((matchMode & 8) != 0) {
      if ((this.mFragmentBondFeatures[bond] & 2) != 0 && fragment.isAromaticBond_0(bond))
        this.mFragmentBondFeatures[bond] |= 8;
    }
  }
}
;
_.setupMoleculeFeatures = function setupMoleculeFeatures(matchMode){
  var atom, bond, nTotalMoleculeAtoms, nTotalMoleculeBonds;
  this.mMolecule.ensureHelperArrays_0(this.mRequiredHelperLevel);
  nTotalMoleculeAtoms = this.mMolecule.getAtoms_0();
  this.mMoleculeAtomType = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, nTotalMoleculeAtoms, 15, 1);
  this.mMoleculeAtomFeatures = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, nTotalMoleculeAtoms, 15, 1);
  for (atom = 0; atom < nTotalMoleculeAtoms; atom++) {
    this.mMoleculeAtomFeatures[atom] = (this.getAtomQueryDefaults(this.mMolecule, atom) | this.mMolecule.getAtomQueryFeatures_0(atom)) & 239060990 ^ 239060990;
    this.mMoleculeAtomType[atom] = this.mMolecule.getAtomicNo_0(atom);
    if ((matchMode & 1) != 0)
      this.mMoleculeAtomType[atom] += this.mMolecule.getAtomCharge_0(atom) + 16 << 8;
    if ((matchMode & 2) != 0)
      this.mMoleculeAtomType[atom] += this.mMolecule.getAtomMass_0(atom) << 16;
  }
  nTotalMoleculeBonds = this.mMolecule.getBonds_0();
  this.mMoleculeBondFeatures = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, nTotalMoleculeBonds, 15, 1);
  for (bond = 0; bond < nTotalMoleculeBonds; bond++)
    this.mMoleculeBondFeatures[bond] = (this.getBondQueryDefaults(this.mMolecule, bond) | this.mMolecule.getBondQueryFeatures_0(bond)) & (1572991 | 32640) ^ 1572960;
}
;
_.tryAddCandidate = function tryAddCandidate(current, highest, i, fragmentAtomUsed, fragmentBondUsed){
  var candidate, candidateBond;
  candidate = this.mFragment.getConnAtom_0(this.mFragmentGraphAtom[current], i);
  if (candidate != this.mFragmentGraphParentAtom[current]) {
    candidateBond = this.mFragment.getConnBond_0(this.mFragmentGraphAtom[current], i);
    if (!fragmentBondUsed[candidateBond] && !this.mFragment.isBondBridge_0(candidateBond)) {
      this.mFragmentGraphAtom[++highest] = candidate;
      this.mFragmentGraphParentAtom[highest] = this.mFragmentGraphAtom[current];
      this.mFragmentGraphParentBond[highest] = candidateBond;
      fragmentBondUsed[candidateBond] = true;
      if (fragmentAtomUsed[candidate])
        this.mFragmentGraphIsRingClosure[highest] = true;
      else 
        fragmentAtomUsed[candidate] = true;
    }
  }
  return highest;
}
;
_.mDefaultMatchMode = 0;
_.mFragmentExcludeAtoms = 0;
_.mFragmentExcludeBonds = 0;
_.mFragmentFeaturesValid = false;
_.mFragmentGraphSize = 0;
_.mFragmentGraphSizeWithExcludeGroup = 0;
_.mMoleculeFeaturesValid = false;
_.mRequiredHelperLevel = 0;
carc.cCountModeExistance = 1;
carc.cCountModeFirstMatch = 2;
carc.cCountModeOverlapping = 3;
carc.cCountModeRigorous = 4;
carc.cDefaultMatchMode = 8;
carc.cIndexMatchMode = 4;
carc.cMatchAromDBondToDelocalized = 8;
carc.cMatchAtomCharge = 1;
carc.cMatchAtomMass = 2;
carc.cMatchDBondToDelocalized = 4;
cggl.Lcom_actelion_research_chem_SSSearcher_2_classLit = createForClass('com.actelion.research.chem', 'SSSearcher', 112, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_SSSearcher$BridgeBond = function $clinit_SSSearcher$BridgeBond(){
  carc.$clinit_SSSearcher$BridgeBond = emptyMethod;
  jl.$clinit_Object();
}
;
carc.SSSearcher$BridgeBond = function SSSearcher$BridgeBond(this$0){
  carc.$clinit_SSSearcher$BridgeBond();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_30();
}
;
defineClass(114, 1, {114:1, 1:1}, carc.SSSearcher$BridgeBond);
_.$init_30 = function $init_30(){
}
;
_.atom1 = 0;
_.atom2 = 0;
_.maxBridgeSize = 0;
_.minBridgeSize = 0;
cggl.Lcom_actelion_research_chem_SSSearcher$BridgeBond_2_classLit = createForClass('com.actelion.research.chem', 'SSSearcher/BridgeBond', 114, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_SSSearcherWithIndex = function $clinit_SSSearcherWithIndex(){
  carc.$clinit_SSSearcherWithIndex = emptyMethod;
  jl.$clinit_Object();
  carc.cKeyIDCode = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['QM@HzAmdqjF@', 'RF@Q``', 'qC`@ISTAlQE`', '`J@H', 'QM@HzAmdqbF@', 'qC`@ISTAlQEhqPp@', 'sJP@DiZhAmQEb', 'RF@QPvR@', 'QM@HzA@', 'qC`@ISTAlQEhpPp@', 'qC`@Qz`MbHl', 'sJP@DiZhAmQEcFZF@', 'RFPDXH', 'qC`@IVtAlQE`', 'QM@HvAmdqfF@', 'sGP@DiVj`FsDVM@', '`L@H', 'sJP@DizhAmQEcFBF@', 'sJP@DjvhAmQEb', 'sFp@DiTt@@AlqEcP', 'sGP@LdbMU@MfHlZ', 'QMHAIhD', 'QM@HzAy@', 'sJP@DkVhAmQEb', 'sNp@DiUjj@[\\QXu`', 'sJP@DiZhAmQEcFBF@', 'sGP@DjVj`FsDVM@', 'RFPDTH', 'RG@DXOH@', 'sGP@Divj`FsDVMcAC@', 'sGP@Dj}j`FsDVM@', 'qC`@Qz`MbHmFRF@', 'sNp@LdbJjj@[\\QXu`', 'QMHAIhGe@', 'QM@HzAyd`', 'QM`AIhD', 'qC`@ISTA@', 'sGP@DkUj`FsDVM@', 'qC`@IVtAlQEhqPp@', 'sNp@DiUjj@[\\QXuqea`@', 'KAx@@IRjuUPAlHPfES\\', 'QM`BN`P', 'sJP@DjZhAmQEcFJF@', 'Hid@@DjU^nBBH@FtaBXUMp`', 'sNp@Diujj@[\\QXuq`a`@', 'sJP@DjvhAmQEcFZF@', 'sJP@DjZhAmQEcFFF@', 'sOp@DjWkB@@FwDVM\\YhX@', 'sNp@Dj}Zj@[\\QXu`', 'sNp@DiWjj@[\\QXuq`a`@', 'sOp@DjWkB@@D', 'KAx@@ITouUPAlHPfES\\', 'KAx@@YIDTjjh@vDHSBin@', 'sNp@DkUZj@[\\QXu`', 'RFPDXOH@', 'QM`BN`^L`', 'qC`@ISTAy@', 'sGP@LdbMU@MfHl[FVF@', 'qCb@AIZ`H', 'KAx@@IRjuUPAlHPfES]FFa`@', 'KAx@@ITnuUPAlHPfES\\', 'HiD@@DiUVjj`AmHPfES\\H', 'sNp@DjUjj@[\\QXu`', 'sJP@DkVhAmQEcFJF@', 'sGP@DjVj`FsDVMcCC@', 'qC`@Qz`MbHmFBF@', 'sJP@DkfhAmQEb', 'qC`@IVtAlQEhsPp@', 'sGP@Djuj`FsDVM@', 'sGP@Dj}j`FsDVMcMC@', 'sJP@DiZhA@', 'KAx@@ISjuUPAlHPfES]F@a`@', 'sJP@DjZhAmQEcFRF@', 'KAx@@IRnuUPAlHPfES]F@a`@', 'HiD@@DjWvjj`AmHPfES\\H', 'QMHAIhGd@', 'sNp@DiUjj@[\\QXuq`a`@', 'KAx@@IVjmUPAlHPfES\\', 'sGP@DjVj`FsDVMcMC@', 'QM`AIhGe@', 'HiD@@LdbJRjjh@[RDIaTwB', 'qCp@AIZ`H', 'sGP@LdbMU@MfHl[FFF@', 'QMDARVA@', 'sNp@LdbJjj@[\\QXuqba`@', 'sNp@LdbJjj@[\\QXuqca`@', 'sGP@Dkej`FsDVM@', 'qCb@AIZ`OI@', 'HaD@@DjUZxHH@AlHPfES]FLa`@', 'sGP@DkYj`FsDVM@', 'qCb@AIV`H', 'sNp@LdbJjj@[\\QXuqea`@', 'sGP@DkUj`FsDVMcEC@', 'sFp@DiTt@@Axa@', 'Hmt@@DjU_ZxHHj@AmhPfES\\Lj', 'QM`BN`^P', 'qCb@AIZ`OH`', 'sFp@DiTt@@AxaP', 'sGP@Djuj`FsDVMcEC@', 'sGP@Djuj`FsDVMcIC@', 'sGP@DkUj`FsDVMcKC@', 'sJP@DkfhAmQEcFRF@', 'sGP@DjVj`FsDVMcIC@', 'HaD@@DjUZxHH@AlHPfES]FFa`@', 'qC`@IRtDVqDV@', 'sNp@Dj}Zj@[\\QXuqfa`@', 'KAx@@ITnuUPAlHPfES]FFa`@', 'HiD@@DkUUjj`AmHPfES\\H', 'sJQ@@dkU@H', 'qC`@Qz`H', 'KAx@@IUkmUPAlHPfES\\', 'KAx@@ITouUPAlHPfES]FJa`@', 'sJP@H~j@[TQX`', 'sGP@DjZj`FsDVM@', 'sJP@DkVhAmQEcFFF@', 'sJX@@eKU@H', 'sJP@DizhAy@', 'QMHAIhGbP', 'KAx@@ITouUPAlHPfES]FNa`@', 'HaD@@DjUZxHD@AlHPfES\\', 'HaD@@DjUZxHH@A@', 'sNp@LdbJjj@[\\QXuqaa`@', 'Hed@@LdbRQUUUP@vTHSBinFP', 'KAx@@ITouUPAlHPfES]FLa`@', 'sNp@DkUZj@[\\QXuqba`@', 'KAx@@ITjuUPAlHPfES]FNa`@', 'KAx@@YIDTjjh@vDHSBincGPp@', 'HaD@@DjYvxH`@AlHPfES]FLa`@', 'RF@QP`', 'qCb@AIj`H', 'sNp@DjUjj@[\\QXuqaa`@', 'sNp@DkVZj@[\\QXu`', 'KAx@@YIDUJjh@vDHSBin@', 'sGP@DkYj`FsDVMcIC@', 'sGP@DjVj`FsDVMcAC@', 'sGP@DiVj`D', 'sJP@DkVhAmQEcFZF@', 'sNp@LdbLjj@[\\QXu`', 'QM@HvAmdqbF@', 'HaD@@DjWjXHB@AlHPfES\\', 'sNp@DjwZj@[\\QXuqba`@', 'sNp@LdbJjj@[\\QXuqda`@', 'sFp@DiTt@@Axa`', 'HiD@@Djuujj`AmHPfES\\H', 'sNp@DkUZj@[\\QXuqca`@', 'sJP@DiZhAy@', 'KAx@@YIDTjjh@vDHSBincCPp@', 'KAx@@IWNmUPAlHPfES\\', 'KAx@@IVkMUPAlHPfES\\', 'sJQ@@dju@H', 'qCb@AIZ`OH@', 'qC`@ISTAxa@', 'sNp@DjyZj@[\\QXu`', 'Hid@@DjUfaBB`@FtaBXUMp`', 'HiD@@DiUVjj`AmHPfES\\LXBF@', 'KAx@@IUjmUPAlHPfES\\', 'HiD@@DjWvjj`AmHPfES\\LXjF@', 'sJP@DjVhAmQEb', 'qCb@AIV`OH`', 'HiD@@LdbJRjjh@[RDIaTwCFDa`@', 'KAx@@YIDTjjh@vDHSBinc@Pp@', 'sNp@DjUjj@[\\QXuqda`@', 'qC`@Qz`OED', 'sJP@DkfhAmQEcFZF@', 'KAx@@YIDbjjh@vDHSBincDPp@', 'sGP@Djyj`FsDVMcMC@', 'KAx@@IVrmUPAlHPfES\\', 'qCp@AIZ`OI@', 'sJX@@dkU@H', 'sJQ@@dkU@OH`', 'sNp@Di]ZjBBvxbqk@', 'Hkl@@DjU_Uk``bj`@[VDIaTwCJzX', 'sGP@DjZj`FsDVMcEC@', 'Hid@@DjU^nBBH@FtaBXUMpqcHX@', 'sNp@DkeZj@[\\QXu`', 'sNp@DjYjj@[\\QXuqca`@', 'sGQ@@djuT@`', 'HiD@@LdbJTjjh@[RDIaTwB', 'sOp@DjWkB@@Gd`', 'HeT@@LdbbRKBDQD@CYPaLJfxY@', 'qCr@XIKTA@', 'HiD@@DjW^jj`AmHPfES\\LXJF@', 'HeT@@DjU]k``b`@[JDIaTwCH', 'sGP@Djuj`FsDVMcCC@', '`IH`B', 'sOp@DjWkB@@GdX', 'sJQ@@eKU@H', 'KAx@@YIDUJjh@vDHSBincBPp@', 'sJX@@eKU@OH@', 'KAx@@YIDTjjh@vDHSBincAPp@', 'sOq@@drm\\@@@`', 'KAx@@IUkMUPAlHPfES\\', 'qCp@AIj`H', 'Hed@@DjUUjjj@FraBXUMpr', 'sGX@@eJuT@`', 'sGP@DkUj`FsDVMcCC@', 'HiD@@Dj}Ujj`AmHPfES\\LXrF@', 'KAx@@ITouUPAlHPfES]FHa`@', 'Hed@@DjWujjj@FraBXUMpsFIa`@', 'sGP@DiUj``mfHlZ', 'sFp@DiTvjhAlqEcP', 'Hid@@DjU^nBBH@FtaBXUMpq`XX@', 'sJP@DkVdAmQEb', 'qCp@AIZ`OH`', 'QMhDRVA@', 'qC`@ISJAlQE`', 'qCp@BOTAyhl', 'sJX@@eOU@ODB', 'sFp@DiTt@@AyaB', 'sGP@DkUj`FsDVMcMC@', 'Hid@@DjYUaBH`@FtaBXUMpqcHX@', 'qC`@Qz`OH@', 'HiD@@DjUVjj`AmHPfES\\LXZF@', 'sJP@H~j@[TQXqda`@', 'sJX@@eKU@OI@', 'sNp@Djejj@[\\QXu`', 'sJQ@@dsU@H', 'sJQ@@dkU@OI`', 'KAx@@YIMDVjh@vDHSBin@', 'Hid@@DjU^nBBD@FtaBXUMp`', 'sNp@DkgZj@[\\QXuqca`@', 'qC`@IRtDVqDVcEC@', 'Hed@@LdbRQeUUP@vTHSBinFP', 'sNp@DiUjj@P', 'qC`@IRtDT', 'sNp@DkYZj@[\\QXuqca`@', 'KAx@@IUkmUPAlHPfES]FDa`@', 'KAx@@IVjmUPAlHPfES]FNa`@', 'sOx@@drm\\@@@`', 'KAx@@ITjuUPAlHPfES]FBa`@', 'QMDARVAyH', 'sJP`@dfvhA@', 'HeT@@DjU_k``b`@[JDIaTwCLXfF@', 'KAx@@IToUUPAlHPfES]FJa`@', 'sGP@DkYj`FsDVMcEC@', 'qCb@AIZ`ODH', '`I@`B', 'KAx@@IUzmUPAlHPfES]FFa`@', 'sNp@DkfZj@[\\QXu`', 'KAx@@ITnuUPAlHPfES]F@a`@', 'HiD@@LddURjjh@[RDIaTwB', 'sNp@Dj~Zj@[\\QXuqfa`@', 'Hed@@Dj{uZjj@FraBXUMpr', 'KAx@@ITsUUPAlHPfES\\', 'Hid@@LdbRQk``b@AmHPfES\\LXrF@', 'sOp@DjWkB@@GdH', 'sJQ@@dkU@OH@', 'Hid@@DjU^nBBH@FtaBXUMpqahX@', 'sGP@DiYj``mfHlZ', 'KAx@@IToUUPAlHPfES]FLa`@', 'qCp@AJZ`ODH', 'Hmt@@DjU]ZxHHj@AmhPfES\\Lj', 'sGP@DkUjPFsDVM@', 'qC`@IVtA@', 'Hed@@LdbJReUUP@vTHSBinFP', 'sNp@DjuZj@[\\QXuqea`@', 'KAx@@IUkmUPAlHPfES]FNa`@', 'HiD@@DkVUjj`AmHPfES\\H', 'Hed@@DkUeZjj@FraBXUMpr', 'sNp@DkVZj@[\\QXuqea`@', 'sJP@DiVhHKZbKFLLL@', 'HiD@@Djuyjj`AmHPfES\\H', 'sNp@DjUjj@[\\QXuq`a`@', 'HeT@@DjYUXPbH`@[JDIaTwCH', 'HiD@@DjwUjj`AmHPfES\\LXRF@', 'sNq@@djmUPB', 'KAx@@YIEEZjh@vDHSBincCPp@', 'sGP@Di^V`dmfHlZ', 'Hid@@DjYUaBHP@FtaBXUMp`', 'sNp@DjYjj@[\\QXuqba`@', 'sGP@Dkej`FsDVMcKC@', 'HeT@@DjU^k``b`@[JDIaTwCH', 'qC`@Qv`MbHmFBF@', 'sGQ@@djmT@`', 'qCr@XIKTAyH', 'qC`@IVtAlQEhpPp@', 'Hid@@LdbbQxXF@@AmHPfES\\LXjF@', 'sGP@DkYj`FsDVMcCC@', 'KAx@@IVsMUPAlHPfES\\', 'qCp@AIj`ODl', 'HiD@@DkeUjj`AmHPfES\\H', 'HeT@@DjU[kjjjh@ZLDXSSYPaLJfxY@', 'sJP@DkVdAmQEcFRF@', 'HiD@@LdbJTjjh@[RDIaTwCFDa`@', 'HiD@@DkYyjj`AmHPfES\\H', 'sJP@DjZhAyH', 'KAx@@IVkMUPAlHPfES]FDa`@', 'sJX@@dkU@OI@', 'Hed@@LdbRQUUUP@vTHSBinFXpLL@', 'Hed@@DjuUZjj@FraBXUMpr', 'sGP@Djfj`FsDVMcKC@', 'sNp@DkVZj@[\\QXuqba`@', 'sNp@DjyZj@[\\QXuqfa`@', 'qCb@AIj`OH@', 'sNp@DjUZj@[\\QXu`', 'KAx@@IWOMUPAlHPfES\\', 'Hid@@DjU^nBBH@D', 'Hed@@DjuvZjj@FraBXUMpr', 'sJP@DiVhHKZbKFLtL@', 'Hmt@@DjU_Zzjjj`AhpQaLmmBDpj[aeXplL@', 'sNp@DjuZj@[\\QXuqca`@', 'sJP@DkfhAmQEcFJF@', 'sNp@LdbJZj@[\\QXu`', 'HeT@@DjU_k``b`@[JDIaTwCLXFF@', 'KAx@@IVlmUPAlHPfES]FNa`@', 'HeT@@LdbbRKBDQD@CYPaLJfxYcEPp@', 'Hid@@DjUZnBBH@FtaBXUMpqcHX@', 'qCa@CIKTA@', 'HiD@@Dj~]jj`AmHPfES\\LXFF@', 'sKP@Di\\Zj@[TQX`', 'sGP@Djfj`FsDVMcEC@', 'HiD@@DkgYjj`AmHPfES\\H', 'sNp@DjuZj@[\\QXuqaa`@', 'KAx@@YIMDVjh@vDHSBincDPp@', 'sJP@DjVhHKZbKFLTL@', 'Hid@@LdbRQk``b@AmHPfES\\LXZF@', 'HiD@@Dj}Ujj`AmHPfES\\LXzF@', 'HeT@@DjU_k``bP@[JDIaTwCH', 'sNp@DkUZi@[\\QXu`', 'HiD@@DjYfjj`AmHPfES\\H', 'sGP@DjZj`FsDVMcAC@', 'Hmt@@DjU_jxHHj@AmhPfES\\Lj', 'Hid@@LdbRQk``R@AmHPfES\\H', 'KAx@@YIDUJjh@vDHSBincDPp@', 'qCr@XIKTAyD', 'sOq@@drm\\@@@|`@', 'Hed@@DjW^jjj@FraBXUMpsFBa`@', 'HeT@@DjY]zXFB@@[JDIaTwCH', 'Hkl@@DjU_Vk``bj`@[VDIaTwCJzX', 'Hid@@DjY}nBHH@FtaBXUMpqcHX@', 'sGX@@eKuT@|d@', 'sGP@Dj^Y`FsDVM@', 'HcL@@DjU_ZnBBJh@FqaBXUMprn`', 'sJP@DkVdAmQEcFJF@', 'sOq@@drm\\@@@|b@', 'sNp@DjyZj@[\\QXuqaa`@', 'HaD@@DjUZxHH@AyD@', 'qC`@Qv`H', 'Hmt@@DjU_Zzjjj`AhpQaLmmBDpj[aeXqdL@', 'sGP@Dkej`FsDVMcMC@', 'Hed@@DjUUjjj@FraBXUMpsFHa`@', 'HeT@@LdbbRkBDQD@CYPaLJfxY@', 'KAx@@IU{MUPAlHPfES]FLa`@', 'RG@DTH', 'sJY@DDeVhA@', 'KAx@@YIDUJjh@vDHSBinc@Pp@', 'sJX@@dkU@OI`', 'sJQ@@dju@OI`', 'HeT@@LdbbRKBDQD@CYPaLJfxYcFPp@', 'sFp@DiTvjhAlqEcXpPp@', 'HaD@@DjUZxHH@AyG@', 'sNx@@eJ}UPB', 'sNp@LddUjj@[\\QXuqca`@', 'HaDH@@RVU[j@@@D', 'sNp@DkgZi@[\\QXu`', 'sGY@LDeVj`D', 'sNp@LdbJfZBZvxbqk@', 'sJP`@dfvhAyL', 'sGX@AddQjhAxe`', 'Hmt@@DjU_ZxHHj@AmhPfES\\LkFIa`@', 'qCh@CIKTA@', 'sNp@LdbLjj@[\\QXuq`a`@', 'sOq@@drm\\@@@|a@', 'KAx@@IUzmUPAlHPfES]FJa`@', 'sNx@AddQUUPB', 'sGP@Di]jP`mfHlZ', 'sJP`@TeZhA@', 'KAx@@IRjmUPHKXPaLJfx', 'HeT@@LdbRTM\\DDT@CYPaLJfxY@', 'HaF@@@Rfu[j@@@D', 'Hid@@DjYUaBH`@FtaBXUMpqchX@', 'KAx@@IUjmTpAlHPfES\\', 'Hid@@DjU^nBBD@FtaBXUMpqcHX@', 'sGP@DiUj``mfHl[FFF@', 'KAx@@IUvmUPAlHPfES]FLa`@', 'Hed@@LdbQTUUUP@vTHSBinFXqDL@', 'sJP@DkVhA@', 'sOx@@drm\\@@@|b@', 'KAx@@IUkMUPAlHPfES]FDa`@', 'HeT@@LdbRQU\\DDT@CYPaLJfxY@', 'HiD@@Dj}Yjj`AmHPfES\\LXrF@', 'HiD@@Dj{ujj`AmHPfES\\LXFF@', 'KAx@@IWNmUPAlHPfES]FFa`@', 'KAx@@IRkMUPHKXPaLJfx', 'sJP@DjYdAmQEcFZF@', 'sJY@LDeZhAyL', 'HaDH@@RVU[f@@@D', 'sJP`@deVhAyB', 'HaD@@DjWjZjj`AlHPfES\\', 'sGP@DkYj`FsDVMcMC@', 'sNp@DkgZj@[\\QXuqea`@', 'sJQ@@dlu@H', 'HeT@@DjU]k``b`@[JDIaTwCLXrF@', 'sJX@@dkU@OH`', 'RFDDQFCr`', 'sJP@DiYXIKZbKFLLL@', 'KAx@@YIHjjjh@vDHSBincGPp@', 'Hk\\@@DjU^ukmLHH@@@AmXPfES\\Lki`', 'sGQ@@djmT@|b@', 'Hid@@DjUfaBB`@FtaBXUMpqahX@', 'sNx@@eRmUPB', 'Hmt@@LdbRVak``ah@FvaBXUMprh', 'qCr@XIJtA@', 'KAx@@IWMmUPAlHPfES]FNa`@', 'HeT@@DjYYZPbJ@@[JDIaTwCH', 'sNp@DkfZj@[\\QXuqea`@', 'Hid@@DjU^nBAHAEVtaBXUMp`', 'Hmt@@DjYU^Vjjj`AhtISRmmBDpj[aeP', 'sGP@DkejPFsDVM@', 'sNx@@eJmUPB', 'qCb@AIf`H', 'HcL@@DjU_VnBBJh@FqaBXUMprnqcXX@', 'Hid@@DjUZnBBH@FtaBXUMpqahX@', 'sNp@LdbQZjBBvxbqkcGC@', 'sOx@@drm\\@@@|c@', 'sJP@H~j@^R@', 'KAx@@YIDcFjhDElHPfES\\', 'Hid@@DjUZnBAH@FtaBXUMp`', 'sNp@LddUji@[\\QXu`', 'sGP@DjfjPFsDVM@', 'HeT@@DjYUXPbD`@[JDIaTwCH', 'KAx@@IUoMUPAlHPfES]FDa`@', 'sFp@DiTt@@AyaD', 'Hed@@DjuuZjj@FraBXUMpsFIa`@', 'HeT@@DjUghP`h`@[JDIaTwCLXfF@', 'sOp@DjWkjj`FwDVM\\YhX@', 'sGP@Djfj`FsDVMcIC@', 'KAx@@IRkmUPHKXPaLJfzL]C@', 'sNx@@djmUPB', 'QM`AIdD', 'sOp@DjWkB@@Gbe@', 'sNp@DjyZj@[\\QXuqca`@', 'QM@HuAmd`', 'sNp@LddUjj@[\\QXuqea`@', 'HaD@@DkeVyjj`AhrXUMuaBDpj[hpDL@', 'qCb@AIZPH', 'HiD@@LdbJTjjh@[RDIaTwCF@a`@', 'Hmt@@DjU_ZxHHi@AmhPfES\\Lj', 'HaDH@@RYWih@H@D', 'HiD@@LdbJTjjh@[RDIaTwCFHa`@', 'sGX@@djuT@|a@', 'sNp@DkfZj@[\\QXuqaa`@', 'Hid@@DjU^nBBH@GdL', 'KAx@@IVkMUPAlHPfES]FJa`@', 'qCr@XIKTAy@', 'HmT@@Dj{uVjjh@[ZDIaTwCJqaXX@', 'Hmt@@DjYWVFjjj`AhpQe\\mmBDpj[aeP', 'Hif@@@RUe^Fh@@@P', 'HaDH@@Rfu[j@@@GdH', 'KAx@@IVsMUPAlHPfES]FDa`@', 'sKP@Di\\Zj@[TQXq`a`@', 'sJX@@eMU@OH@', 'HeT@@DjU^k``b`@[JDIaTwCLXFF@', 'Hmt@@LdbbRJXPbHh@FvaBXUMprh', 'sJP@DjvhAmQEcFBF@', 'Hmt@@LdbbRNXZjjj@FcAFUrvtHSBinFUcBpp@', 'sJP`@dfvhAyD', 'sGP@Di^V`dmfHl[FVF@', 'KAx@@IVsmUPAlHPfES]FBa`@', 'sOq@@drm\\@@@|PP', 'sJY@BDeZhA@', 'HeT@@LdbRbmBDED@CYPaLJfxY@', 'Hed@@Djy[Zjj@FraBXUMpr', 'HeT@@DjU]k``b`@[JDIaTwCLXFF@', 'Hid@@DjUfaBB`@D', 'qCa@CIJtA@', 'QMPARVA@', 'Hid@@DjUfaBB`@FtaBXUMpqcHX@', 'sJY@BDfZhA@', 'HeT@@DjUghP`hP@[JDIaTwCH', 'Hed@@Dj{uZjj@FraBXUMpsFIa`@', 'Hmt@@LdbbRUXZjjj@FcAFUrvtHSBinFUcFPp@', 'sNp`@dfuZj@P', 'sJQ@@dmU@OH@', 'sJX@@dmU@H', 'HeT@@DjU]k``b`@[JDIaTwCLXZF@', 'HiD@@LdfbJZjh@[RDIaTwCFAa`@', 'sOx@@drm\\@@@|a@', 'HeT@@LdbbQgCUUU@CQhRfz[JDIaTwCH', 'Hmt@@DjU]Zzjjj`AhpQaLmmBDpj[aeXplL@', 'sOp@DjWkjj`FwDVM\\XHX@', 'HcL@@LdbbRNSBDQEP@McBDpj[ae]cFpp@', 'HiD@@Dj}Yji`AmHPfES\\H', 'HaDH@@RYe[hB@@D', 'Hid@@DjU^njjj@FtaBXUMpq`XX@', 'HeT@@DkYeFVjjh@ZMaUpsYPaLJfxY@', 'QMPARZA@', 'sOq@@drm\\@@@|QX', 'HaD@@DjYvxH`@A@', 'HcL@@LdbbRNcBDQEP@McBDpj[ae]@', 'QMhDRZA@', 'RG@DXLHmP', 'QM`BN`XQYd', 'RG@DTLHmP', 'QMHAIXFEVd', 'QMDARVAaH', 'RFPDXLHmP', 'RF@Q`vRbdLEC@', 'RF@QpvR@', 'QO@HyjAmd`', '`II@B', '`II@CFspqJp', '`II@CF[@hM@prB`', '`H@[T[|B`XN@PdM@p|@bHrBcDk@', 'RG@DXMj}F@', 'QM`BN`[L~b@', 'RG@DTMj}D@', 'QMHAIXFt~j@', 'QMDARVA}L@', 'RFPDXMj}D@', 'sKP@Di\\YZ@[TQXqaa`@', 'RG@DXMH']);
}
;
carc.SSSearcherWithIndex = function SSSearcherWithIndex(){
  carc.$clinit_SSSearcherWithIndex();
  Object_0.call(this);
  this.$init_31();
  this.mSSSearcher = new carc.SSSearcher;
  this.init_2();
}
;
carc.getHexStringFromIndex = function getHexStringFromIndex(index_0){
  carc.$clinit_SSSearcherWithIndex();
  var bytes, code_0, i, j, value_0;
  if (jsEquals(index_0, null))
    return null;
  bytes = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, index_0.length * 8, 15, 1);
  for (i = 0; i < index_0.length; i++) {
    value_0 = index_0[i];
    for (j = 7; j >= 0; j--) {
      code_0 = value_0 & 15;
      if (code_0 > 9)
        code_0 += 7;
      bytes[i * 8 + j] = narrow_byte(48 + code_0);
      value_0 >>= 4;
    }
  }
  return jl.$create_7(bytes);
}
;
carc.getIndexFromHexString = function getIndexFromHexString(hex){
  carc.$clinit_SSSearcherWithIndex();
  var code_0, i, index_0, j;
  if (jl.length__I__devirtual$_0(hex) == 0 || (jl.length__I__devirtual$_0(hex) & 7) != 0)
    return null;
  index_0 = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, narrow_int(jl.length__I__devirtual$_0(hex) / 8), 15, 1);
  for (i = 0; i < jl.length__I__devirtual$_0(hex); i++) {
    j = narrow_int(i / 8);
    code_0 = jl.charAt_I_C__devirtual$_0(hex, i) - 48;
    if (code_0 > 16)
      code_0 -= 7;
    index_0[j] <<= 4;
    index_0[j] += code_0;
  }
  return index_0;
}
;
carc.getSimilarityAngleCosine = function getSimilarityAngleCosine(index1, index2){
  carc.$clinit_SSSearcherWithIndex();
  var i, index1Keys, index2Keys, sharedKeys;
  sharedKeys = 0;
  index1Keys = 0;
  index2Keys = 0;
  for (i = 0; i < index1.length; i++) {
    sharedKeys += bitCount_0(index1[i] & index2[i]);
    index1Keys += bitCount_0(index1[i]);
    index2Keys += bitCount_0(index2[i]);
  }
  return sharedKeys / $wnd.Math.sqrt(index1Keys * index2Keys);
}
;
carc.getSimilarityTanimoto = function getSimilarityTanimoto(index1, index2){
  carc.$clinit_SSSearcherWithIndex();
  var allKeys, i, sharedKeys;
  sharedKeys = 0;
  allKeys = 0;
  for (i = 0; i < index1.length; i++) {
    sharedKeys += bitCount_0(index1[i] & index2[i]);
    allKeys += bitCount_0(index1[i] | index2[i]);
  }
  return sharedKeys / allKeys;
}
;
defineClass(95, 1, {1:1}, carc.SSSearcherWithIndex);
_.$init_31 = function $init_31(){
}
;
_.createIndex_0 = function createIndex(mol){
  var i, index_0;
  if (isNull(mol))
    return null;
  index_0 = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, narrow_int((carc.cKeyIDCode.length + 31) / 32), 15, 1);
  mol = this.removeExcludeGroups(mol);
  this.mSSSearcher.setMolecule_0(mol);
  for (i = 0; i < carc.cKeyIDCode.length; i++) {
    this.mSSSearcher.setFragment_1(carc.sKeyFragment[i]);
    if (this.mSSSearcher.isFragmentInMolecule_1(4))
      index_0[narrow_int(i / 32)] |= 1 << 31 - i % 32;
  }
  return index_0;
}
;
_.createLongIndex = function createLongIndex(mol){
  var i, index_0;
  if (isNull(mol))
    return null;
  index_0 = initUnidimensionalArray(cggl.J_classLit, {4:1, 1:1}, 5, narrow_int((carc.cKeyIDCode.length + 63) / 64), 14, 1);
  mol = this.removeExcludeGroups(mol);
  this.mSSSearcher.setMolecule_0(mol);
  for (i = 0; i < carc.cKeyIDCode.length; i++) {
    this.mSSSearcher.setFragment_1(carc.sKeyFragment[i]);
    if (this.mSSSearcher.isFragmentInMolecule_1(4))
      index_0[narrow_int(i / 64)] = or_0(index_0[narrow_int(i / 64)], shl_0(1, 63 - i % 64));
  }
  return index_0;
}
;
_.findFragmentInMolecule = function findFragmentInMolecule_1(countMode, matchMode){
  return this.findFragmentInMolecule_0(countMode, matchMode, null);
}
;
_.findFragmentInMolecule_0 = function findFragmentInMolecule_2(countMode, matchMode, atomExcluded){
  var i;
  if (jsEquals(this.mMoleculeIndexInt, null)) {
    for (i = 0; i < this.mMoleculeIndexLong.length; i++)
      if (neq(and_0(this.mFragmentIndexLong[i], not_0(this.mMoleculeIndexLong[i])), 0))
        return 0;
  }
   else {
    for (i = 0; i < this.mMoleculeIndexInt.length; i++)
      if ((this.mFragmentIndexInt[i] & ~this.mMoleculeIndexInt[i]) != 0)
        return 0;
  }
  if (isNull(this.mMolecule))
    this.mMolecule = (new carc.IDCodeParser(false)).getCompactMolecule_1(this.mMoleculeIDCode);
  if (isNull(this.mFragment))
    this.mFragment = (new carc.IDCodeParser(false)).getCompactMolecule_1(this.mFragmentIDCode);
  this.mSSSearcher.setMolecule_0(this.mMolecule);
  this.mSSSearcher.setFragment_1(this.mFragment);
  return this.mSSSearcher.findFragmentInMolecule_0(countMode, matchMode, atomExcluded);
}
;
_.getMatchList = function getMatchList_0(){
  return this.mSSSearcher.getMatchList();
}
;
_.getMolecule_0 = function getMolecule(){
  if (isNull(this.mMolecule) && jsNotEquals(this.mMoleculeIDCode, null))
    this.mMolecule = (new carc.IDCodeParser(false)).getCompactMolecule_1(this.mMoleculeIDCode);
  return this.mMolecule;
}
;
_.init_2 = function init_2(){
  var i, theParser;
  {
    cggl.Lcom_actelion_research_chem_SSSearcherWithIndex_2_classLit;
    if (jsEquals(carc.sKeyFragment, null)) {
      theParser = new carc.IDCodeParser(false);
      carc.sKeyFragment = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_StereoMolecule_2_classLit, {4:1, 1:1, 8:1}, 39, carc.cKeyIDCode.length, 0, 1);
      for (i = 0; i < carc.cKeyIDCode.length; i++) {
        setCheck(carc.sKeyFragment, i, theParser.getCompactMolecule(carc.cKeyIDCode[i]));
        carc.sKeyFragment[i].ensureHelperArrays_0(1);
      }
    }
  }
}
;
_.isFragmentInMolecule_0 = function isFragmentInMolecule_1(){
  var i;
  if (jsEquals(this.mMoleculeIndexInt, null)) {
    for (i = 0; i < this.mMoleculeIndexLong.length; i++)
      if (neq(and_0(this.mFragmentIndexLong[i], not_0(this.mMoleculeIndexLong[i])), 0))
        return false;
  }
   else {
    for (i = 0; i < this.mMoleculeIndexInt.length; i++)
      if ((this.mFragmentIndexInt[i] & ~this.mMoleculeIndexInt[i]) != 0)
        return false;
  }
  return this.isFragmentInMoleculeWithoutIndex();
}
;
_.isFragmentInMoleculeWithoutIndex = function isFragmentInMoleculeWithoutIndex(){
  if (isNull(this.mMolecule))
    this.mMolecule = (new carc.IDCodeParser(false)).getCompactMolecule_1(this.mMoleculeIDCode);
  if (isNull(this.mFragment))
    this.mFragment = (new carc.IDCodeParser(false)).getCompactMolecule_1(this.mFragmentIDCode);
  this.mSSSearcher.setMolecule_0(this.mMolecule);
  this.mSSSearcher.setFragment_1(this.mFragment);
  return this.mSSSearcher.isFragmentInMolecule_0();
}
;
_.removeExcludeGroups = function removeExcludeGroups(mol){
  var atom, i;
  if (mol.isFragment_0()) {
    for (atom = 0; atom < mol.getAllAtoms_0(); atom++) {
      if ((mol.getAtomQueryFeatures_0(atom) & 536870912) != 0) {
        mol = new carc.StereoMolecule_0(mol);
        for (i = atom; i < mol.getAllAtoms_0(); i++)
          if ((mol.getAtomQueryFeatures_0(i) & 536870912) != 0)
            mol.markAtomForDeletion_0(i);
        mol.deleteMarkedAtomsAndBonds_0();
      }
    }
  }
  return mol;
}
;
_.setFragment_2 = function setFragment_1(fragment, index_0){
  this.mFragmentIDCode = null;
  this.mFragmentIndexLong = null;
  this.mFragment = fragment;
  if (jsEquals(index_0, null))
    this.mFragmentIndexInt = this.createIndex_0(fragment);
  else 
    this.mFragmentIndexInt = index_0;
}
;
_.setFragment_3 = function setFragment_2(fragment, index_0){
  this.mFragmentIDCode = null;
  this.mFragmentIndexInt = null;
  this.mFragment = fragment;
  if (jsEquals(index_0, null))
    this.mFragmentIndexLong = this.createLongIndex(fragment);
  else 
    this.mFragmentIndexLong = index_0;
}
;
_.setMolecule_1 = function setMolecule_0(molecule, index_0){
  this.mMoleculeIDCode = null;
  this.mMoleculeIndexLong = null;
  this.mMolecule = molecule;
  if (jsEquals(index_0, null))
    this.mMoleculeIndexInt = this.createIndex_0(molecule);
  else 
    this.mMoleculeIndexInt = index_0;
}
;
_.setMolecule_2 = function setMolecule_1(molecule, index_0){
  this.mMoleculeIDCode = null;
  this.mMoleculeIndexInt = null;
  this.mMolecule = molecule;
  if (jsEquals(index_0, null))
    this.mMoleculeIndexLong = this.createLongIndex(molecule);
  else 
    this.mMoleculeIndexLong = index_0;
}
;
carc.cIndexVersion = '1.2.1';
cggl.Lcom_actelion_research_chem_SSSearcherWithIndex_2_classLit = createForClass('com.actelion.research.chem', 'SSSearcherWithIndex', 95, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_SVGDepictor = function $clinit_SVGDepictor(){
  carc.$clinit_SVGDepictor = emptyMethod;
  carc.$clinit_AbstractDepictor();
}
;
carc.SVGDepictor = function SVGDepictor(mol, displayMode, id_0){
  carc.$clinit_SVGDepictor();
  carc.AbstractDepictor.call(this, mol, displayMode);
  this.$init_32();
  this.id_0 = id_0;
  carc.instanceCnt++;
}
;
carc.makeColor = function makeColor(r, g, b){
  return 'rgb(' + r + ',' + g + ',' + b + ')';
}
;
defineClass(192, 146, {1:1}, carc.SVGDepictor);
_.$init_32 = function $init_32(){
  this.lineWidth = 1;
  this.textSize = 10;
  this.width_0 = 400;
  this.height = 400;
  this.currentColor = 'black';
  this.bonds = new ju.ArrayList;
  this.atoms = new ju.ArrayList;
  this.buffer = new jl.StringBuffer;
  this.currentFont = new ja.Font('Helvetica', 0, 12);
}
;
_.drawBlackLine = function drawBlackLine(theLine){
  var s, x1, x2, y1, y2;
  x1 = round_int(theLine.x1);
  x2 = round_int(theLine.x2);
  y1 = round_int(theLine.y1);
  y2 = round_int(theLine.y2);
  s = '<line x1="' + x1 + '" ' + 'y1="' + y1 + '" ' + 'x2="' + x2 + '" ' + 'y2="' + y2 + '" ' + 'style="stroke:' + this.currentColor + ';' + 'stroke-width:' + round_int(this.lineWidth) + '"/>';
  this.write_1(s);
}
;
_.drawDottedLine = function drawDottedLine(theLine){
  var s, x1, x2, y1, y2;
  x1 = round_int(theLine.x1);
  x2 = round_int(theLine.x2);
  y1 = round_int(theLine.y1);
  y2 = round_int(theLine.y2);
  s = '<line stroke-dasharray="3, 3" x1="' + x1 + '" ' + 'y1="' + y1 + '" ' + 'x2="' + x2 + '" ' + 'y2="' + y2 + '" ' + 'stroke="' + this.currentColor + '" ' + 'stroke-width:' + round_int(this.lineWidth) + '"/>';
  this.write_1(s);
}
;
_.drawPolygon = function drawPolygon(x_0, y_0, count){
  var i, s;
  s = new jl.StringBuilder_1('<polygon points="');
  for (i = 0; i < count; i++) {
    s.append_2(round_int(x_0[i]));
    s.append_5(',');
    s.append_2(round_int(y_0[i]));
    s.append_5(' ');
  }
  s.append_5('" style="fill:' + this.currentColor + ';' + 'stroke:' + this.currentColor + ';' + 'stroke-width:1"/>');
  this.write_1(s.toString_0());
}
;
_.drawString = function drawString(theString, x_0, y_0){
  var s, strWidth;
  strWidth = this.getStringWidth(theString);
  s = '<text x="' + round_int(x_0 - strWidth / 2) + '" ' + 'y="' + round_int(y_0 + narrow_int(this.textSize / 3)) + '" ' + 'font-family=" ' + this.currentFont.getName_0() + '" ' + 'font-size="' + this.currentFont.getSize_0() + '" ' + 'fill="' + this.currentColor + '">' + theString + '<\/text>';
  this.write_1(s);
}
;
_.fillCircle = function fillCircle(x_0, y_0, r){
  var s;
  s = '<circle cx="' + round_int(x_0) + '" ' + 'cy="' + round_int(y_0) + '" ' + 'r="' + round_int(r) + '" ' + 'fill="' + this.currentColor + '" />';
  this.write_1(s);
}
;
_.getId = function getId(){
  return jsNotEquals(this.id_0, null)?this.id_0:'mol' + carc.instanceCnt;
}
;
_.getStringWidth = function getStringWidth(theString){
  var ret;
  ret = this.currentFont.getStringBounds(theString, this.graphics.getFontRenderContext()).getWidth();
  return ret;
}
;
_.getTextSize = function getTextSize(){
  return this.textSize;
}
;
_.onDrawAtom = function onDrawAtom_0(atom, symbol, x_0, y_0){
  var r, s;
  r = 8;
  s = '<circle id="' + this.getId() + ':Atom:' + atom + '" ' + 'class="event" ' + 'cx="' + round_int(x_0) + '" ' + 'cy="' + round_int(y_0) + '" ' + 'r="' + r + '" ' + 'fill-opacity="0"/>';
  this.atoms.add(s);
}
;
_.onDrawBond = function onDrawBond_0(atom1, atom2, x1, y1, x2, y2){
  var s;
  s = '<line id="' + this.getId() + ':Bond:' + atom1 + '-' + atom2 + '" ' + 'class="event" ' + 'x1="' + round_int(x1) + '" ' + 'y1="' + round_int(y1) + '" ' + 'x2="' + round_int(x2) + '" ' + 'y2="' + round_int(y2) + '" ' + 'stroke-width="' + 8 + '" ' + 'stroke-opacity="0"' + '/>';
  this.bonds.add(s);
}
;
_.setColor_0 = function setColor_0(theColor){
  this.currentColor = carc.makeColor(theColor.getRed(), theColor.getGreen(), theColor.getBlue());
}
;
_.setLineWidth = function setLineWidth(width_0){
  this.lineWidth = $wnd.Math.max(width_0, 1);
}
;
_.setTextSize = function setTextSize(theSize){
  if (this.textSize != theSize) {
    this.textSize = theSize;
    this.currentFont = new ja.Font('Helvetica', 0, theSize);
  }
}
;
_.simpleValidateView = function simpleValidateView_0(viewRect, mode){
  var img;
  this.width_0 = round_int(viewRect.getWidth());
  this.height = round_int(viewRect.getHeight());
  img = new jai.BufferedImage(this.width_0, this.height, 2);
  this.graphics = img.createGraphics();
  return getClassPrototype(146).simpleValidateView.call(this, viewRect, mode);
}
;
_.toString_0 = function toString_4(){
  var a, a$iterator, b, b$iterator, footer, header, rect, style;
  header = '<svg id="' + this.getId() + '" ' + 'xmlns="http://www.w3.org/2000/svg" version="1.1" ' + 'width="' + this.width_0 + 'px" ' + 'height="' + this.height + 'px" ' + 'viewBox="0 0 ' + this.width_0 + ' ' + this.height + '">\n';
  footer = '<\/svg>';
  style = '<style> #' + this.getId() + ' {pointer-events:none; } ' + ' #' + this.getId() + ' .event ' + ' { pointer-events:all;} ' + ' <\/style>\n';
  rect = '<rect x="' + 0 + '" ' + 'y="' + 0 + '" ' + "width='" + this.width_0 + "' " + "height='" + this.height + "' style='fill-opacity:0;stroke:red;stroke-width:3'/>\n";
  header += '\t';
  header += '' + style;
  for (b$iterator = this.bonds.iterator(); b$iterator.hasNext_0();) {
    b = castToString(b$iterator.next_3());
    this.write_1(b);
  }
  for (a$iterator = this.atoms.iterator(); a$iterator.hasNext_0();) {
    a = castToString(a$iterator.next_3());
    this.write_1(a);
  }
  return header + ('' + this.buffer.toString_0()) + footer;
}
;
_.write_1 = function write_0(s){
  this.buffer.append_0('\t');
  this.buffer.append_0(s);
  this.buffer.append_0('\n');
}
;
_.height = 0;
_.lineWidth = 0;
_.textSize = 0;
_.width_0 = 0;
carc.DEFAULT_ELEM_WIDTH = 8;
carc.FONTNAME = 'Helvetica';
carc.instanceCnt = 0;
cggl.Lcom_actelion_research_chem_SVGDepictor_2_classLit = createForClass('com.actelion.research.chem', 'SVGDepictor', 192, cggl.Lcom_actelion_research_chem_AbstractDepictor_2_classLit);
carc.$clinit_SmilesCreator = function $clinit_SmilesCreator(){
  carc.$clinit_SmilesCreator = emptyMethod;
  jl.$clinit_Object();
}
;
carc.SmilesCreator = function SmilesCreator(){
  carc.$clinit_SmilesCreator();
  Object_0.call(this);
  this.$init_33();
}
;
defineClass(191, 1, {1:1}, carc.SmilesCreator);
_.$init_33 = function $init_33(){
}
;
_.generateSmiles = function generateSmiles(inMol){
  var atoms, bonds, i, visitedAllAtoms;
  visitedAllAtoms = false;
  this.mMol = inMol;
  this.mMol.ensureHelperArrays_0(7);
  atoms = this.mMol.getAtoms_0();
  bonds = this.mMol.getBonds_0();
  this.mVisitedMolBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, bonds, 16, 1);
  for (i = 0; i < bonds; ++i)
    this.mVisitedMolBond[i] = false;
  this.mVisitedMolAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, atoms, 16, 1);
  this.mMolAtomIsSmiAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atoms, 15, 1);
  for (i = 0; i < atoms; ++i) {
    this.mVisitedMolAtom[i] = false;
    this.mMolAtomIsSmiAtom[i] = -1;
  }
  this.mSmiAtomStr = initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, 3 * atoms, 6, 1);
  this.mVisitedMolAtoms = 0;
  this.mRingClosures = 0;
  this.mDisconnections = 0;
  while (visitedAllAtoms == false) {
    for (i = 0; i < atoms; ++i) {
      if (this.mVisitedMolAtom[i] == false) {
        if (this.mDisconnections > 0)
          this.mSmiAtomStr[this.mVisitedMolAtoms++] = '.';
        this.visitMolAtom(i, -1);
        ++this.mDisconnections;
        break;
      }
    }
    if (i == atoms)
      visitedAllAtoms = true;
  }
  this.mSmiles = '';
  for (i = 0; i < this.mVisitedMolAtoms; ++i)
    this.mSmiles += '' + this.mSmiAtomStr[i];
  return this.mSmiles;
}
;
_.isOrganic = function isOrganic(atomicNo){
  switch (atomicNo) {
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 35:
    case 53:
      return true;
    default:return false;
  }
}
;
_.visitMolAtom = function visitMolAtom(molAtom, molBond){
  var addBracket, atomCharge, atomIsotope, atomLabel, atomicNo, branchesToVisit, connAtom, connAtoms, connBond, currentSmiAtom, i, implicitHs, skippedConnAtoms;
  addBracket = true;
  branchesToVisit = 0;
  skippedConnAtoms = 0;
  currentSmiAtom = this.mVisitedMolAtoms;
  this.mMolAtomIsSmiAtom[molAtom] = currentSmiAtom;
  atomicNo = this.mMol.getAtomicNo_0(molAtom);
  atomLabel = this.mMol.getAtomLabel_0(molAtom);
  atomCharge = this.mMol.getAtomCharge_0(molAtom);
  atomIsotope = this.mMol.getAtomMass_0(molAtom);
  connAtoms = this.mMol.getConnAtoms_0(molAtom);
  if (atomCharge == 0 && atomIsotope == 0 && this.isOrganic(atomicNo))
    addBracket = false;
  this.mSmiAtomStr[currentSmiAtom] = '';
  if (molBond != -1) {
    switch (this.mMol.getBondOrder_0(molBond)) {
      case 0:
        this.mSmiAtomStr[currentSmiAtom] += '~';
        break;
      case 2:
        this.mSmiAtomStr[currentSmiAtom] += '=';
        break;
      case 3:
        this.mSmiAtomStr[currentSmiAtom] += '#';
        break;
    }
  }
  if (addBracket == true)
    this.mSmiAtomStr[currentSmiAtom] += '[';
  if (atomIsotope != 0)
    this.mSmiAtomStr[currentSmiAtom] += '' + jl.toString_23(atomIsotope);
  this.mSmiAtomStr[currentSmiAtom] += '' + atomLabel;
  if (addBracket == true) {
    if (0 < (implicitHs = this.mMol.getImplicitHydrogens_0(molAtom))) {
      this.mSmiAtomStr[currentSmiAtom] += 'H';
      if (1 < implicitHs)
        this.mSmiAtomStr[currentSmiAtom] += implicitHs;
    }
  }
  if (atomCharge != 0) {
    if (atomCharge > 0)
      this.mSmiAtomStr[currentSmiAtom] += '+';
    else 
      this.mSmiAtomStr[currentSmiAtom] += '-';
    if ($wnd.Math.abs(atomCharge) > 1)
      this.mSmiAtomStr[currentSmiAtom] += '' + jl.toString_23($wnd.Math.abs(atomCharge));
  }
  if (addBracket == true)
    this.mSmiAtomStr[currentSmiAtom] += ']';
  if (molBond != -1)
    this.mVisitedMolBond[molBond] = true;
  this.mVisitedMolAtom[molAtom] = true;
  ++this.mVisitedMolAtoms;
  for (i = 0; i < connAtoms; ++i)
    if (this.mVisitedMolBond[this.mMol.getConnBond_0(molAtom, i)] == false)
      ++branchesToVisit;
  for (i = 0; i < connAtoms; ++i) {
    connAtom = this.mMol.getConnAtom_0(molAtom, i);
    connBond = this.mMol.getConnBond_0(molAtom, i);
    if (this.mVisitedMolBond[connBond] == true) {
      ++skippedConnAtoms;
      continue;
    }
    if (this.mVisitedMolAtom[connAtom] == true) {
      ++this.mRingClosures;
      this.mVisitedMolBond[connBond] = true;
      switch (this.mMol.getBondOrder_0(connBond)) {
        case 0:
          this.mSmiAtomStr[this.mMolAtomIsSmiAtom[connAtom]] += '~';
          this.mSmiAtomStr[currentSmiAtom] += '~';
          break;
        case 2:
          this.mSmiAtomStr[this.mMolAtomIsSmiAtom[connAtom]] += '=';
          this.mSmiAtomStr[currentSmiAtom] += '=';
          break;
        case 3:
          this.mSmiAtomStr[this.mMolAtomIsSmiAtom[connAtom]] += '#';
          this.mSmiAtomStr[currentSmiAtom] += '3';
          break;
      }
      if (this.mRingClosures > 9) {
        this.mSmiAtomStr[this.mMolAtomIsSmiAtom[connAtom]] += '%';
        this.mSmiAtomStr[currentSmiAtom] += '%';
      }
      this.mSmiAtomStr[this.mMolAtomIsSmiAtom[connAtom]] += '' + jl.toString_23(this.mRingClosures);
      this.mSmiAtomStr[currentSmiAtom] += '' + jl.toString_23(this.mRingClosures);
      continue;
    }
    if (i - skippedConnAtoms < branchesToVisit - 1)
      this.mSmiAtomStr[this.mVisitedMolAtoms++] = '(';
    this.visitMolAtom(connAtom, connBond);
    if (i - skippedConnAtoms < branchesToVisit - 1)
      this.mSmiAtomStr[this.mVisitedMolAtoms++] = ')';
  }
}
;
_.mDisconnections = 0;
_.mRingClosures = 0;
_.mVisitedMolAtoms = 0;
cggl.Lcom_actelion_research_chem_SmilesCreator_2_classLit = createForClass('com.actelion.research.chem', 'SmilesCreator', 191, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_SmilesParser = function $clinit_SmilesParser(){
  carc.$clinit_SmilesParser = emptyMethod;
  jl.$clinit_Object();
}
;
carc.SmilesParser = function SmilesParser(){
  carc.$clinit_SmilesParser();
  Object_0.call(this);
  this.$init_34();
}
;
defineClass(195, 1, {1:1}, carc.SmilesParser);
_.$init_34 = function $init_34(){
}
;
_.addLargeAromaticRing = function addLargeAromaticRing(bond){
  var atom1, atom2, candidate, candidateBond, current, graphAtom, graphBond, graphLevel, graphParent, highest, i, j, parent_0;
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  graphParent = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
  atom1 = this.mMol.getBondAtom_0(0, bond);
  atom2 = this.mMol.getBondAtom_0(1, bond);
  graphAtom[0] = atom1;
  graphAtom[1] = atom2;
  graphBond[0] = -1;
  graphBond[1] = bond;
  graphLevel[atom1] = 1;
  graphLevel[atom2] = 2;
  graphParent[atom1] = -1;
  graphParent[atom2] = atom1;
  current = 1;
  highest = 1;
  while (current <= highest && graphLevel[graphAtom[current]] < 15) {
    parent_0 = graphAtom[current];
    for (i = 0; i < this.mMol.getConnAtoms_0(parent_0); i++) {
      candidate = this.mMol.getConnAtom_0(parent_0, i);
      if (candidate != graphParent[parent_0]) {
        candidateBond = this.mMol.getConnBond_0(parent_0, i);
        if (candidate == atom1) {
          graphBond[0] = candidateBond;
          for (j = 0; j <= highest; j++) {
            if (!this.mIsAromaticBond[graphBond[i]]) {
              this.mIsAromaticBond[graphBond[i]] = true;
              this.mAromaticBonds++;
            }
          }
          return;
        }
        if (this.mMol.isMarkedAtom_0(candidate) && graphLevel[candidate] == 0) {
          highest++;
          graphAtom[highest] = candidate;
          graphBond[highest] = candidateBond;
          graphLevel[candidate] = graphLevel[parent_0] + 1;
          graphParent[candidate] = parent_0;
        }
      }
    }
    current++;
  }
  return;
}
;
_.assignKnownEZBondParities = function assignKnownEZBondParities(){
  var atom, bond, bond0, connBond, i, i0, i1, isZ, j, otherAtom, paritiesFound, refAtom, refBond;
  this.mMol.ensureHelperArrays_0(3);
  paritiesFound = false;
  refAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  refBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  otherAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  for (bond0 = 0; bond0 < this.mMol.getBonds_0(); bond0++) {
    if (!this.mMol.isSmallRingBond_0(bond0) && this.mMol.getBondType_0(bond0) == 2) {
      for (i0 = 0; i0 < 2; i0++) {
        refAtom[i0] = -1;
        otherAtom[i0] = -1;
        atom = this.mMol.getBondAtom_0(i0, bond0);
        for (j = 0; j < this.mMol.getConnAtoms_0(atom); j++) {
          connBond = this.mMol.getConnBond_0(atom, j);
          if (connBond != bond0) {
            if (refAtom[i0] == -1 && (this.mMol.getBondType_0(connBond) == 17 || this.mMol.getBondType_0(connBond) == 9)) {
              refAtom[i0] = this.mMol.getConnAtom_0(atom, j);
              refBond[i0] = connBond;
            }
             else {
              otherAtom[i0] = this.mMol.getConnAtom_0(atom, j);
            }
          }
        }
        if (refAtom[i0] == -1)
          break;
      }
      if (refAtom[0] != -1 && refAtom[1] != -1) {
        isZ = this.mMol.getBondType_0(refBond[0]) == this.mMol.getBondType_0(refBond[1]);
        for (i1 = 0; i1 < 2; i1++)
          if (refAtom[i1] == this.mMol.getBondAtom_0(0, refBond[i1]))
            isZ = !isZ;
        for (i = 0; i < 2; i++)
          if (otherAtom[i] != -1 && otherAtom[i] < refAtom[i])
            isZ = !isZ;
        this.mMol.setBondParity_0(bond0, isZ?2:1, false);
        paritiesFound = true;
      }
    }
  }
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++)
    if (this.mMol.getBondType_0(bond) == 17 || this.mMol.getBondType_0(bond) == 9)
      this.mMol.setBondType_0(bond, 1);
  return paritiesFound;
}
;
_.connectConjugatedRadicalPairs = function connectConjugatedRadicalPairs(isAromaticBond){
  var atom, bond, bondOrder, candidate, current, graphAtom, graphLevel, graphParent, highest, i, parent_0;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mMol.isMarkedAtom_0(atom)) {
      graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
      graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
      graphParent = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 15, 1);
      graphAtom[0] = atom;
      graphLevel[atom] = 1;
      graphParent[atom] = -1;
      current = 0;
      highest = 0;
      while (current <= highest) {
        bondOrder = (graphLevel[graphAtom[current]] & 1) == 1?1:2;
        for (i = 0; i < this.mMol.getConnAtoms_0(graphAtom[current]); i++) {
          bond = this.mMol.getConnBond_0(graphAtom[current], i);
          if (this.mMol.getBondOrder_0(bond) == bondOrder && isAromaticBond[bond]) {
            candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
            if (graphLevel[candidate] == 0) {
              if (bondOrder == 1 && this.mMol.isMarkedAtom_0(candidate)) {
                parent_0 = graphAtom[current];
                while (parent_0 != -1) {
                  this.mMol.setBondType_0(this.mMol.getBond_0(candidate, parent_0), bondOrder == 1?2:1);
                  bondOrder = 3 - bondOrder;
                  candidate = parent_0;
                  parent_0 = graphParent[parent_0];
                }
                this.mMol.setAtomMarker_0(atom, false);
                this.mMol.setAtomMarker_0(candidate, false);
                this.mAromaticAtoms -= 2;
                return true;
              }
              graphAtom[++highest] = candidate;
              graphParent[candidate] = graphAtom[current];
              graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
            }
          }
        }
        current++;
      }
    }
  }
  return false;
}
;
_.correctValenceExceededNitrogen = function correctValenceExceededNitrogen(){
  var atom, connAtom, connBond, i;
  for (atom = 0; atom < this.mMol.getAtoms_0(); atom++) {
    if (this.mMol.getAtomicNo_0(atom) == 7 && this.mMol.getAtomCharge_0(atom) == 0 && this.mMol.getOccupiedValence_0(atom) > 3 && this.mMol.getAtomPi_0(atom) > 0) {
      for (i = 0; i < this.mMol.getConnAtoms_0(atom); i++) {
        connAtom = this.mMol.getConnAtom_0(atom, i);
        connBond = this.mMol.getConnBond_0(atom, i);
        if (this.mMol.getBondOrder_0(connBond) > 1 && this.mMol.isElectronegative_0(connAtom)) {
          if (this.mMol.getBondType_0(connBond) == 4)
            this.mMol.setBondType_0(connBond, 2);
          else 
            this.mMol.setBondType_0(connBond, 1);
          this.mMol.setAtomCharge_0(atom, this.mMol.getAtomCharge_0(atom) + 1);
          this.mMol.setAtomCharge_0(connAtom, this.mMol.getAtomCharge_0(connAtom) - 1);
          break;
        }
      }
    }
  }
}
;
_.locateAromaticDoubleBonds = function locateAromaticDoubleBonds(){
  var aromaticConnBonds, bond, bond$array, bond$index, bond$max, bond0, bond1, bondAtom, connBond, i, i0, i1, i2, isAromaticBond, isAromaticRing, isFullyDelocalized, j, qualifyingBondFound, qualifyingNo, ring, ring0, ring1, ringAtom, ringBond, ringSet;
  this.mMol.ensureHelperArrays_0(1);
  this.mIsAromaticBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  this.mAromaticBonds = 0;
  for (bond0 = 0; bond0 < this.mMol.getBonds_0(); bond0++) {
    if (this.mMol.getBondType_0(bond0) == 64) {
      this.mMol.setBondType_0(bond0, 1);
      this.mIsAromaticBond[bond0] = true;
      this.mAromaticBonds++;
    }
  }
  ringSet = new carc.RingCollection(this.mMol, 3);
  isAromaticRing = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, ringSet.getSize_0(), 16, 1);
  for (ring0 = 0; ring0 < ringSet.getSize_0(); ring0++) {
    ringAtom = ringSet.getRingAtoms_0(ring0);
    isAromaticRing[ring0] = true;
    for (i0 = 0; i0 < ringAtom.length; i0++) {
      if (!this.mMol.isMarkedAtom_0(ringAtom[i0])) {
        isAromaticRing[ring0] = false;
        break;
      }
    }
    if (isAromaticRing[ring0]) {
      ringBond = ringSet.getRingBonds_0(ring0);
      for (i1 = 0; i1 < ringBond.length; i1++) {
        if (!this.mIsAromaticBond[ringBond[i1]]) {
          this.mIsAromaticBond[ringBond[i1]] = true;
          this.mAromaticBonds++;
        }
      }
    }
  }
  for (bond1 = 0; bond1 < this.mMol.getBonds_0(); bond1++) {
    if (!this.mIsAromaticBond[bond1] && ringSet.getBondRingSize_0(bond1) != 0 && this.mMol.isMarkedAtom_0(this.mMol.getBondAtom_0(0, bond1)) && this.mMol.isMarkedAtom_0(this.mMol.getBondAtom_0(1, bond1))) {
      this.addLargeAromaticRing(bond1);
    }
  }
  this.mMol.ensureHelperArrays_0(3);
  isAromaticBond = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getBonds_0(), 16, 1);
  for (i2 = 0; i2 < this.mMol.getBonds_0(); i2++)
    isAromaticBond[i2] = this.mIsAromaticBond[i2];
  for (ring1 = 0; ring1 < ringSet.getSize_0(); ring1++) {
    if (isAromaticRing[ring1]) {
      ringAtom = ringSet.getRingAtoms_0(ring1);
      for (i = 0; i < ringAtom.length; i++) {
        if (!this.qualifiesForPi(ringAtom[i])) {
          if (this.mMol.isMarkedAtom_0(ringAtom[i])) {
            this.mMol.setAtomMarker_0(ringAtom[i], false);
            this.mAromaticAtoms--;
          }
          for (j = 0; j < this.mMol.getConnAtoms_0(ringAtom[i]); j++) {
            connBond = this.mMol.getConnBond_0(ringAtom[i], j);
            if (this.mIsAromaticBond[connBond]) {
              this.mIsAromaticBond[connBond] = false;
              this.mAromaticBonds--;
            }
          }
        }
      }
    }
  }
  this.promoteObviousBonds_0();
  for (ring = 0; ring < ringSet.getSize_0(); ring++) {
    if (isAromaticRing[ring] && ringSet.getRingSize_0(ring) == 6) {
      ringBond = ringSet.getRingBonds_0(ring);
      isFullyDelocalized = true;
      for (bond$array = ringBond , bond$index = 0 , bond$max = bond$array.length; bond$index < bond$max; ++bond$index) {
        bond = bond$array[bond$index];
        if (!this.mIsAromaticBond[bond]) {
          isFullyDelocalized = false;
          break;
        }
      }
      if (isFullyDelocalized) {
        this.promoteBond_0(ringBond[0]);
        this.promoteBond_0(ringBond[2]);
        this.promoteBond_0(ringBond[4]);
        this.promoteObviousBonds_0();
      }
    }
  }
  for (qualifyingNo = 5; qualifyingNo >= 4; qualifyingNo--) {
    do {
      qualifyingBondFound = false;
      for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
        if (this.mIsAromaticBond[bond]) {
          aromaticConnBonds = 0;
          for (i = 0; i < 2; i++) {
            bondAtom = this.mMol.getBondAtom_0(i, bond);
            for (j = 0; j < this.mMol.getConnAtoms_0(bondAtom); j++)
              if (this.mIsAromaticBond[this.mMol.getConnBond_0(bondAtom, j)])
                aromaticConnBonds++;
          }
          if (aromaticConnBonds == qualifyingNo) {
            this.promoteBond_0(bond);
            this.promoteObviousBonds_0();
            qualifyingBondFound = true;
            break;
          }
        }
      }
    }
     while (qualifyingBondFound);
  }
  while (this.mAromaticAtoms >= 2)
    if (!this.connectConjugatedRadicalPairs(isAromaticBond))
      break;
  if (this.mAromaticAtoms != 0)
    throw toJs(new jl.Exception_1('Assignment of aromatic double bonds failed'));
  if (this.mAromaticBonds != 0)
    throw toJs(new jl.Exception_1('Assignment of aromatic double bonds failed'));
}
;
_.parse_1 = function parse_1(mol, smiles, position, endIndex, createCoordinates, readStereoFeatures){
  var atom, atom0, atomMass, atomicNo, baseAtom, bondType, bracketLevel, bytes, charge, compatibleValenceFound, explicitHydrogen, explicitHydrogens, fromAtom, handleHydrogenAtomMap, hasBondType, i, i0, i1, isClockwise, isWildCard, labelLength, mapNo, noOfDigits, number, parity, parity$iterator, parityFound, parityMap, percentFound, ringClosureAtom, ringClosureBondType, ringClosurePosition, smartsFeatureFound, squareBracketOpen, theChar, usedValence, valence, valence$array, valence$index, valence$max;
  this.mMol = mol;
  this.mMol.deleteMolecule_0();
  parityMap = null;
  baseAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 64, 15, 1);
  baseAtom[0] = -1;
  ringClosureAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 64, 15, 1);
  ringClosurePosition = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 64, 15, 1);
  ringClosureBondType = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 64, 15, 1);
  for (i0 = 0; i0 < 64; i0++)
    ringClosureAtom[i0] = -1;
  atomMass = 0;
  fromAtom = -1;
  squareBracketOpen = false;
  percentFound = false;
  smartsFeatureFound = false;
  bracketLevel = 0;
  bondType = 1;
  while (smiles[position] <= 32)
    position++;
  while (position < endIndex) {
    theChar = narrow_char(smiles[position++]);
    if (isLetter(theChar) || theChar == 42) {
      atomicNo = 0;
      explicitHydrogens = -1;
      isWildCard = false;
      parityFound = false;
      isClockwise = false;
      if (squareBracketOpen) {
        if (theChar == 82 && jl.isDigit_0(smiles[position])) {
          noOfDigits = jl.isDigit_0(smiles[position + 1])?2:1;
          atomicNo = carc.getAtomicNoFromLabel(jl.$create_8(smiles, position - 1, 1 + noOfDigits));
          position += noOfDigits;
        }
         else {
          labelLength = jl.isLowerCase_0(smiles[position])?2:1;
          atomicNo = carc.getAtomicNoFromLabel(jl.$create_8(smiles, position - 1, labelLength));
          position += labelLength - 1;
          explicitHydrogens = 0;
        }
        if (smiles[position] == 64) {
          position++;
          if (smiles[position] == 64) {
            isClockwise = true;
            position++;
          }
          parityFound = true;
        }
        if (smiles[position] == 72) {
          position++;
          explicitHydrogens = 1;
          if (jl.isDigit_0(smiles[position])) {
            explicitHydrogens = smiles[position] - 48;
            position++;
          }
        }
      }
       else if (theChar == 42) {
        atomicNo = 6;
        isWildCard = true;
      }
       else {
        switch (toUpperCase(theChar)) {
          case 66:
            if (position < endIndex && smiles[position] == 114) {
              atomicNo = 35;
              position++;
            }
             else 
              atomicNo = 5;
            break;
          case 67:
            if (position < endIndex && smiles[position] == 108) {
              atomicNo = 17;
              position++;
            }
             else 
              atomicNo = 6;
            break;
          case 70:
            atomicNo = 9;
            break;
          case 73:
            atomicNo = 53;
            break;
          case 78:
            atomicNo = 7;
            break;
          case 79:
            atomicNo = 8;
            break;
          case 80:
            atomicNo = 15;
            break;
          case 83:
            atomicNo = 16;
            break;
        }
      }
      if (atomicNo == 0)
        throw toJs(new jl.Exception_1('SmilesParser: unknown element label found'));
      atom0 = this.mMol.addAtom_2(atomicNo);
      if (isWildCard) {
        smartsFeatureFound = true;
        this.mMol.setAtomQueryFeature_0(atom0, 1, true);
      }
      if (isLowerCase(theChar)) {
        this.mMol.setAtomMarker_0(atom0, true);
        this.mAromaticAtoms++;
      }
       else {
        this.mMol.setAtomMarker_0(atom0, false);
      }
      if (explicitHydrogens != -1 && atomicNo != 1) {
        bytes = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, 1, 15, 1);
        bytes[0] = narrow_byte(explicitHydrogens);
        this.mMol.setAtomCustomLabel_1(atom0, bytes);
      }
      fromAtom = baseAtom[bracketLevel];
      if (baseAtom[bracketLevel] != -1 && bondType != 128) {
        this.mMol.addBond_1(baseAtom[bracketLevel], atom0, bondType);
      }
      bondType = 1;
      baseAtom[bracketLevel] = atom0;
      if (atomMass != 0) {
        this.mMol.setAtomMass_0(atom0, atomMass);
        atomMass = 0;
      }
      if (readStereoFeatures) {
        parity = isNull(parityMap)?null:castTo(parityMap.get(jl.valueOf_9(fromAtom)), 67);
        if (isNotNull(parity))
          parity.addNeighbor(atom0, position, atomicNo == 1 && atomMass == 0);
        if (parityFound) {
          if (isNull(parityMap))
            parityMap = new ju.TreeMap;
          parityMap.put(jl.valueOf_9(atom0), new carc.SmilesParser$THParity(this, atom0, fromAtom, explicitHydrogens, position, isClockwise));
        }
      }
      continue;
    }
    if (theChar == 46) {
      baseAtom[bracketLevel] = -1;
      bondType = 128;
      continue;
    }
    if (theChar == 61) {
      bondType = 2;
      continue;
    }
    if (theChar == 35) {
      bondType = 4;
      continue;
    }
    if (isDigit(theChar)) {
      number = theChar - 48;
      if (squareBracketOpen) {
        while (position < endIndex && jl.isDigit_0(smiles[position])) {
          number = 10 * number + smiles[position] - 48;
          position++;
        }
        atomMass = number;
      }
       else {
        hasBondType = smiles[position - 2] == 45 || smiles[position - 2] == 47 || smiles[position - 2] == 92 || smiles[position - 2] == 61 || smiles[position - 2] == 35 || smiles[position - 2] == 58;
        if (percentFound && position < endIndex && jl.isDigit_0(smiles[position])) {
          number = 10 * number + smiles[position] - 48;
          position++;
        }
        percentFound = false;
        if (number >= 64)
          throw toJs(new jl.Exception_1('SmilesParser: ringClosureAtom number out of range'));
        if (ringClosureAtom[number] == -1) {
          ringClosureAtom[number] = baseAtom[bracketLevel];
          ringClosurePosition[number] = position - 1;
          ringClosureBondType[number] = hasBondType?bondType:-1;
        }
         else {
          if (ringClosureAtom[number] == baseAtom[bracketLevel])
            throw toJs(new jl.Exception_1('SmilesParser: ring closure to same atom'));
          if (readStereoFeatures && isNotNull(parityMap)) {
            parity = castTo(parityMap.get(jl.valueOf_9(ringClosureAtom[number])), 67);
            if (isNotNull(parity))
              parity.addNeighbor(baseAtom[bracketLevel], ringClosurePosition[number], false);
            parity = castTo(parityMap.get(jl.valueOf_9(baseAtom[bracketLevel])), 67);
            if (isNotNull(parity))
              parity.addNeighbor(ringClosureAtom[number], position - 1, false);
          }
          if (ringClosureBondType[number] != -1)
            bondType = ringClosureBondType[number];
          else if (bondType == 17)
            bondType = 9;
          else if (bondType == 9)
            bondType = 17;
          this.mMol.addBond_1(ringClosureAtom[number], baseAtom[bracketLevel], bondType);
          ringClosureAtom[number] = -1;
        }
        bondType = 1;
      }
      continue;
    }
    if (theChar == 43) {
      if (!squareBracketOpen)
        throw toJs(new jl.Exception_1("SmilesParser: '+' found outside brackets"));
      charge = 1;
      while (smiles[position] == 43) {
        charge++;
        position++;
      }
      if (charge == 1 && jl.isDigit_0(smiles[position])) {
        charge = smiles[position] - 48;
        position++;
      }
      this.mMol.setAtomCharge_0(baseAtom[bracketLevel], charge);
      continue;
    }
    if (theChar == 45) {
      if (!squareBracketOpen)
        continue;
      charge = -1;
      while (smiles[position] == 45) {
        charge--;
        position++;
      }
      if (charge == -1 && jl.isDigit_0(smiles[position])) {
        charge = 48 - smiles[position];
        position++;
      }
      this.mMol.setAtomCharge_0(baseAtom[bracketLevel], charge);
      continue;
    }
    if (theChar == 40) {
      if (baseAtom[bracketLevel] == -1)
        throw toJs(new jl.Exception_1('Smiles with leading parenthesis are not supported'));
      baseAtom[bracketLevel + 1] = baseAtom[bracketLevel];
      bracketLevel++;
      continue;
    }
    if (theChar == 41) {
      bracketLevel--;
      continue;
    }
    if (theChar == 91) {
      if (squareBracketOpen)
        throw toJs(new jl.Exception_1('SmilesParser: nested square brackets found'));
      squareBracketOpen = true;
      continue;
    }
    if (theChar == 93) {
      if (!squareBracketOpen)
        throw toJs(new jl.Exception_1('SmilesParser: closing bracket without opening one'));
      squareBracketOpen = false;
      continue;
    }
    if (theChar == 37) {
      percentFound = true;
      continue;
    }
    if (theChar == 58) {
      if (!squareBracketOpen) {
        bondType = 64;
        continue;
      }
      mapNo = 0;
      while (jl.isDigit_0(smiles[position])) {
        mapNo = 10 * mapNo + smiles[position] - 48;
        position++;
      }
      this.mMol.setAtomMapNo_0(baseAtom[bracketLevel], mapNo, false);
      continue;
    }
    if (theChar == 47) {
      if (readStereoFeatures)
        bondType = 17;
      continue;
    }
    if (theChar == 92) {
      if (readStereoFeatures)
        bondType = 9;
      continue;
    }
    if (theChar <= 32) {
      position = endIndex;
      continue;
    }
    throw toJs(new jl.Exception_1("SmilesParser: unexpected character found: '" + charToString(theChar) + "'"));
  }
  if (bondType != 1)
    throw toJs(new jl.Exception_1('SmilesParser: dangling open bond'));
  for (i1 = 0; i1 < 64; i1++)
    if (ringClosureAtom[i1] != -1)
      throw toJs(new jl.Exception_1('SmilesParser: dangling ring closure'));
  handleHydrogenAtomMap = this.mMol.getHandleHydrogenMap_0();
  this.mMol.setHydrogenProtection_0(true);
  this.mMol.ensureHelperArrays_0(1);
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    if (jsNotEquals(mol.getAtomCustomLabel_0(atom), null)) {
      if (!this.mMol.isMarkedAtom_0(atom)) {
        explicitHydrogen = this.mMol.getAtomCustomLabelBytes(atom)[0];
        if (this.mMol.getAtomicNo_0(atom) < (carc.$clinit_Molecule() , carc.cAtomValence).length && jsNotEquals((carc.$clinit_Molecule() , carc.cAtomValence)[this.mMol.getAtomicNo_0(atom)], null)) {
          compatibleValenceFound = false;
          usedValence = this.mMol.getOccupiedValence_0(atom);
          usedValence -= this.mMol.getElectronValenceCorrection_0(atom, usedValence);
          for (valence$array = (carc.$clinit_Molecule() , carc.cAtomValence)[this.mMol.getAtomicNo_0(atom)] , valence$index = 0 , valence$max = valence$array.length; valence$index < valence$max; ++valence$index) {
            valence = valence$array[valence$index];
            if (usedValence <= valence) {
              compatibleValenceFound = true;
              if (valence != usedValence + explicitHydrogen)
                this.mMol.setAtomAbnormalValence_0(atom, usedValence + explicitHydrogen);
              break;
            }
          }
          if (!compatibleValenceFound)
            this.mMol.setAtomAbnormalValence_0(atom, usedValence + explicitHydrogen);
        }
         else {
          for (i = 0; i < explicitHydrogen; i++)
            mol.addBond_1(atom, mol.addAtom_2(1), 1);
        }
      }
    }
  }
  this.mMol.ensureHelperArrays_0(1);
  this.correctValenceExceededNitrogen();
  this.locateAromaticDoubleBonds();
  this.mMol.removeAtomCustomLabels_0();
  this.mMol.setHydrogenProtection_0(false);
  if (readStereoFeatures) {
    this.assignKnownEZBondParities();
    if (isNotNull(parityMap)) {
      for (parity$iterator = parityMap.values().iterator(); parity$iterator.hasNext_0();) {
        parity = castTo(parity$iterator.next_3(), 67);
        this.mMol.setAtomParity_0(parity.mCentralAtom, parity.calculateParity(handleHydrogenAtomMap), false);
      }
      this.mMol.setParitiesValid_0(0);
    }
  }
  this.mMol.setParitiesValid_0(0);
  if (createCoordinates) {
    (new carcc2.CoordinateInventor).invent(this.mMol);
    if (readStereoFeatures)
      this.mMol.setUnknownParitiesToExplicitlyUnknown_0();
  }
  if (smartsFeatureFound)
    this.mMol.setFragment_0(true);
}
;
_.parse_2 = function parse_2(mol, smiles, createCoordinates, readStereoFeatures){
  this.parse_1(mol, smiles, 0, smiles.length, createCoordinates, readStereoFeatures);
}
;
_.promoteBond_0 = function promoteBond_0(bond){
  var bondAtom, connBond, i, j;
  if (this.mMol.getBondType_0(bond) == 1)
    this.mMol.setBondType_0(bond, 2);
  for (i = 0; i < 2; i++) {
    bondAtom = this.mMol.getBondAtom_0(i, bond);
    if (this.mMol.isMarkedAtom_0(bondAtom)) {
      this.mMol.setAtomMarker_0(bondAtom, false);
      this.mAromaticAtoms--;
    }
    for (j = 0; j < this.mMol.getConnAtoms_0(bondAtom); j++) {
      connBond = this.mMol.getConnBond_0(bondAtom, j);
      if (this.mIsAromaticBond[connBond]) {
        this.mIsAromaticBond[connBond] = false;
        this.mAromaticBonds--;
      }
    }
  }
}
;
_.promoteObviousBonds_0 = function promoteObviousBonds_0(){
  var aromaticNeighbourFound, bond, bondAtom, i, isTerminalAromaticBond, j, terminalAromaticBondFound;
  do {
    terminalAromaticBondFound = false;
    for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
      if (this.mIsAromaticBond[bond]) {
        isTerminalAromaticBond = false;
        for (i = 0; i < 2; i++) {
          aromaticNeighbourFound = false;
          bondAtom = this.mMol.getBondAtom_0(i, bond);
          for (j = 0; j < this.mMol.getConnAtoms_0(bondAtom); j++) {
            if (bond != this.mMol.getConnBond_0(bondAtom, j) && this.mIsAromaticBond[this.mMol.getConnBond_0(bondAtom, j)]) {
              aromaticNeighbourFound = true;
              break;
            }
          }
          if (!aromaticNeighbourFound) {
            isTerminalAromaticBond = true;
            break;
          }
        }
        if (isTerminalAromaticBond) {
          terminalAromaticBondFound = true;
          this.promoteBond_0(bond);
        }
      }
    }
  }
   while (terminalAromaticBondFound);
}
;
_.qualifiesForPi = function qualifiesForPi(atom){
  var explicitHydrogens, freeValence;
  if (this.mMol.getAtomicNo_0(atom) == 6 && this.mMol.getAtomCharge_0(atom) != 0 || !this.mMol.isMarkedAtom_0(atom))
    return false;
  explicitHydrogens = jsEquals(this.mMol.getAtomCustomLabel_0(atom), null)?0:this.mMol.getAtomCustomLabelBytes(atom)[0];
  freeValence = this.mMol.getFreeValence_0(atom) - explicitHydrogens;
  if (freeValence < 1)
    return false;
  if (this.mMol.getAtomicNo_0(atom) == 16 || this.mMol.getAtomicNo_0(atom) == 34 || this.mMol.getAtomicNo_0(atom) == 52) {
    if (this.mMol.getConnAtoms_0(atom) == 2 && this.mMol.getAtomCharge_0(atom) <= 0)
      return false;
    if (freeValence == 2)
      return false;
  }
  if (this.mMol.getAtomicNo_0(atom) != 5 && this.mMol.getAtomicNo_0(atom) != 6 && this.mMol.getAtomicNo_0(atom) != 7 && this.mMol.getAtomicNo_0(atom) != 8 && this.mMol.getAtomicNo_0(atom) != 15 && this.mMol.getAtomicNo_0(atom) != 16 && this.mMol.getAtomicNo_0(atom) != 33 && this.mMol.getAtomicNo_0(atom) != 34)
    return false;
  return true;
}
;
_.mAromaticAtoms = 0;
_.mAromaticBonds = 0;
carc.MAX_AROMATIC_RING_SIZE = 15;
carc.MAX_BRACKET_LEVELS = 64;
carc.MAX_RE_CONNECTIONS = 64;
cggl.Lcom_actelion_research_chem_SmilesParser_2_classLit = createForClass('com.actelion.research.chem', 'SmilesParser', 195, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_SmilesParser$THParity = function $clinit_SmilesParser$THParity(){
  carc.$clinit_SmilesParser$THParity = emptyMethod;
  jl.$clinit_Object();
}
;
carc.SmilesParser$THParity = function SmilesParser$THParity(this$0, centralAtom, fromAtom, implicitHydrogen, hydrogenPosition, isClockwise){
  carc.$clinit_SmilesParser$THParity();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_35();
  if (implicitHydrogen != 0 && implicitHydrogen != 1) {
    this.mError = true;
  }
   else {
    this.mCentralAtom = centralAtom;
    this.mFromAtom = fromAtom;
    this.mImplicitHydrogen = implicitHydrogen;
    this.mIsClockwise = isClockwise;
    this.mNeighborCount = 0;
    this.mNeighborIsHydrogen = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, 4, 16, 1);
    this.mNeighborAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
    this.mNeighborPosition = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
    if (fromAtom != -1 && implicitHydrogen == 1) {
      this.addNeighbor(2147483647, hydrogenPosition, true);
      this.mImplicitHydrogen = 0;
    }
  }
}
;
defineClass(67, 1, {67:1, 1:1}, carc.SmilesParser$THParity);
_.$init_35 = function $init_35(){
}
;
_.addNeighbor = function addNeighbor(atom, position, isHydrogen){
  if (this.mError)
    return;
  if (this.mNeighborCount == 4 || this.mNeighborCount == 3 && this.mFromAtom != -1) {
    this.mError = true;
    return;
  }
  this.mNeighborIsHydrogen[this.mNeighborCount] = isHydrogen;
  this.mNeighborAtom[this.mNeighborCount] = atom;
  this.mNeighborPosition[this.mNeighborCount] = position;
  this.mNeighborCount++;
}
;
_.calculateParity = function calculateParity(handleHydrogenAtomMap){
  var fromAtomIsHydrogen, fromAtomTraversalInversion, hydrogenNeighborIndex, i, i0, i1, i2, i3, i4, isHydrogenTraversalInversion, minIndex, minPosition, parity, totalNeighborCount;
  if (this.mError)
    return 3;
  if (this.mFromAtom != -1)
    this.mFromAtom = handleHydrogenAtomMap[this.mFromAtom];
  for (i0 = 0; i0 < this.mNeighborCount; i0++)
    if (this.mNeighborAtom[i0] != 2147483647)
      this.mNeighborAtom[i0] = handleHydrogenAtomMap[this.mNeighborAtom[i0]];
  if (this.mFromAtom == -1 && this.mImplicitHydrogen == 0) {
    minPosition = 2147483647;
    minIndex = -1;
    for (i1 = 0; i1 < this.mNeighborCount; i1++) {
      if (minPosition > this.mNeighborPosition[i1]) {
        minPosition = this.mNeighborPosition[i1];
        minIndex = i1;
      }
    }
    this.mFromAtom = this.mNeighborAtom[minIndex];
    for (i2 = minIndex + 1; i2 < this.mNeighborCount; i2++) {
      this.mNeighborAtom[i2 - 1] = this.mNeighborAtom[i2];
      this.mNeighborPosition[i2 - 1] = this.mNeighborPosition[i2];
      this.mNeighborIsHydrogen[i2 - 1] = this.mNeighborIsHydrogen[i2];
    }
    this.mNeighborCount--;
  }
  totalNeighborCount = (this.mFromAtom == -1?0:1) + this.mImplicitHydrogen + this.mNeighborCount;
  if (totalNeighborCount > 4 || totalNeighborCount < 3)
    return 3;
  fromAtomIsHydrogen = this.mFromAtom == -1 && this.mImplicitHydrogen == 1 || this.mFromAtom != -1 && this.this$01.mMol.isSimpleHydrogen_0(this.mFromAtom);
  hydrogenNeighborIndex = -1;
  for (i3 = 0; i3 < this.mNeighborCount; i3++) {
    if (this.mNeighborIsHydrogen[i3]) {
      if (hydrogenNeighborIndex != -1 || fromAtomIsHydrogen)
        return 3;
      hydrogenNeighborIndex = i3;
    }
  }
  isHydrogenTraversalInversion = false;
  if (hydrogenNeighborIndex != -1)
    for (i4 = 0; i4 < this.mNeighborCount; i4++)
      if (!this.mNeighborIsHydrogen[i4] && this.mNeighborAtom[hydrogenNeighborIndex] < this.mNeighborAtom[i4])
        isHydrogenTraversalInversion = !isHydrogenTraversalInversion;
  fromAtomTraversalInversion = false;
  if (this.mFromAtom != -1 && !fromAtomIsHydrogen)
    for (i = 0; i < this.mNeighborCount; i++)
      if (this.mFromAtom < this.mNeighborAtom[i])
        fromAtomTraversalInversion = !fromAtomTraversalInversion;
  parity = this.mIsClockwise ^ this.isInverseOrder(this.mNeighborAtom, this.mNeighborPosition, this.mNeighborCount) ^ fromAtomTraversalInversion ^ isHydrogenTraversalInversion?2:1;
  return parity;
}
;
_.isInverseOrder = function isInverseOrder(atom, position, count){
  var i, inversion, j;
  inversion = false;
  for (i = 1; i < count; i++) {
    for (j = 0; j < i; j++) {
      if (atom[j] > atom[i])
        inversion = !inversion;
      if (position[j] > position[i])
        inversion = !inversion;
    }
  }
  return inversion;
}
;
_.mCentralAtom = 0;
_.mError = false;
_.mFromAtom = 0;
_.mImplicitHydrogen = 0;
_.mIsClockwise = false;
_.mNeighborCount = 0;
cggl.Lcom_actelion_research_chem_SmilesParser$THParity_2_classLit = createForClass('com.actelion.research.chem', 'SmilesParser/THParity', 67, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_SortedStringList = function $clinit_SortedStringList(){
  carc.$clinit_SortedStringList = emptyMethod;
  jl.$clinit_Object();
}
;
carc.SortedStringList = function SortedStringList(){
  carc.$clinit_SortedStringList();
  Object_0.call(this);
  this.$init_36();
}
;
defineClass(102, 1, {4:1, 1:1}, carc.SortedStringList);
_.$init_36 = function $init_36(){
  this.mList = new ju.ArrayList;
}
;
_.addString = function addString(theString){
  var comparison, increment, index_0, vectorSize;
  vectorSize = this.mList.size();
  if (vectorSize == 0) {
    this.mList.addAtIndex(0, theString);
    return 0;
  }
  index_0 = 1;
  while (2 * index_0 <= vectorSize)
    index_0 <<= 1;
  increment = index_0;
  index_0--;
  while (increment != 0) {
    increment >>= 1;
    if (index_0 >= vectorSize) {
      index_0 -= increment;
      continue;
    }
    comparison = jl.compareTo_Ljava_lang_String__I__devirtual$(theString, castToString(this.mList.getAtIndex(index_0)));
    if (comparison == 0)
      return -1;
    if (increment == 0)
      break;
    if (comparison < 0) {
      index_0 -= increment;
    }
     else {
      index_0 += increment;
    }
  }
  if (index_0 < vectorSize && jl.compareTo_Ljava_lang_String__I__devirtual$(theString, castToString(this.mList.getAtIndex(index_0))) > 0)
    index_0++;
  this.mList.addAtIndex(index_0, theString);
  return index_0;
}
;
_.contains_0 = function contains(theString){
  return this.getListIndex(theString) != -1;
}
;
_.getListIndex = function getListIndex(theString){
  var comparison, increment, index_0, vectorSize;
  vectorSize = this.mList.size();
  if (vectorSize == 0)
    return -1;
  index_0 = 1;
  while (2 * index_0 <= vectorSize)
    index_0 <<= 1;
  increment = index_0;
  index_0--;
  while (increment != 0) {
    increment >>= 1;
    if (index_0 >= vectorSize) {
      index_0 -= increment;
      continue;
    }
    comparison = jl.compareTo_Ljava_lang_String__I__devirtual$(theString, castToString(this.mList.getAtIndex(index_0)));
    if (comparison == 0)
      return index_0;
    if (increment == 0)
      break;
    if (comparison < 0) {
      index_0 -= increment;
    }
     else {
      index_0 += increment;
    }
  }
  return -1;
}
;
_.getSize_0 = function getSize_0(){
  return this.mList.size();
}
;
_.toArray_0 = function toArray(){
  return castTo(this.mList.toArray_1(initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, 0, 6, 1)), 29);
}
;
carc.serialVersionUID_1 = 537265952;
cggl.Lcom_actelion_research_chem_SortedStringList_2_classLit = createForClass('com.actelion.research.chem', 'SortedStringList', 102, cggl.Ljava_lang_Object_2_classLit);
carc.$clinit_StereoMolecule = function $clinit_StereoMolecule(){
  carc.$clinit_StereoMolecule = emptyMethod;
  carc.$clinit_ExtendedMolecule();
  carc.VALIDATION_ERRORS_STEREO = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['Members of ESR groups must only be stereo centers with known configuration.', 'Over- or under-specified stereo feature or more than one racemic type bond', 'Ambiguous configuration at stereo center because of 2 parallel bonds']);
}
;
carc.StereoMolecule = function StereoMolecule(maxAtoms, maxBonds){
  carc.$clinit_StereoMolecule();
  carc.ExtendedMolecule.call(this, maxAtoms, maxBonds);
  this.$init_37();
}
;
carc.StereoMolecule_0 = function StereoMolecule_0(mol){
  carc.$clinit_StereoMolecule();
  carc.ExtendedMolecule_0.call(this, mol);
  this.$init_37();
}
;
defineClass(39, 89, {39:1, 4:1, 1:1}, carc.StereoMolecule, carc.StereoMolecule_0);
_.$init_37 = function $init_37(){
}
;
_.copyMoleculeProperties_0 = function copyMoleculeProperties_0(destMol){
  getClassPrototype(90).copyMoleculeProperties_0.call(this, destMol);
  if (isNotNull(this.mCanonizer))
    destMol.mValidHelperArrays = 0;
}
;
_.createMolecule = function createMolecule(atoms, bonds){
  return new carc.StereoMolecule(atoms, bonds);
}
;
_.ensureHelperArrays_0 = function ensureHelperArrays_0(required){
  var atom, bond, rankBits, rankMode;
  getClassPrototype(89).ensureHelperArrays_0.call(this, required);
  if ((required & ~this.mValidHelperArrays) == 0)
    return;
  if (this.mAssignParitiesToNitrogen)
    required |= 128;
  for (atom = 0; atom < this.getAllAtoms_0(); atom++)
    this.mAtomFlags[atom] &= ~134447111;
  for (bond = 0; bond < this.getBonds_0(); bond++)
    this.mBondFlags[bond] &= ~63;
  rankBits = 0;
  rankMode = 0;
  if ((required & 16) != 0) {
    rankBits = 16;
    rankMode = 1;
  }
   else if ((required & 32) != 0) {
    rankBits = 32;
    rankMode = 1 | 2;
  }
   else if ((required & 64) != 0) {
    rankBits = 64;
    rankMode = 1 | 4;
  }
  if ((required & 128) != 0) {
    rankBits |= 128;
    rankMode |= 32;
  }
  this.mCanonizer = new carc.Canonizer_0(this, rankMode);
  this.mCanonizer.setParities();
  this.mCanonizer.setStereoCenters();
  this.mCanonizer.setCIPParities();
  if (this.validateESR())
    this.mCanonizer = new carc.Canonizer_0(this, rankMode);
  this.mValidHelperArrays |= 4 | 8 | rankBits;
}
;
_.getAbsoluteAtomParity_0 = function getAbsoluteAtomParity(atom){
  return this.mCanonizer.getTHParity(atom);
}
;
_.getAbsoluteBondParity_0 = function getAbsoluteBondParity(bond){
  return this.mCanonizer.getEZParity(bond);
}
;
_.getChiralText_0 = function getChiralText_0(){
  var count;
  this.ensureHelperArrays_0(15);
  count = this.mChirality & 65535;
  switch (this.mChirality & ~65535) {
    case 65536:
      return null;
    case 131072:
      return count == 1?'meso':'' + count + ' meso diastereomers';
    case 0:
      return 'unknown chirality';
    case 196608:
      return 'racemate';
    case 262144:
      return 'this enantiomer';
    case 327680:
      return 'this or other enantiomer';
    case 393216:
      return 'two epimers';
    default:return count == 1?'one stereo isomer':'' + count + ' stereo isomers';
  }
}
;
_.getCompactCopy_0 = function getCompactCopy(){
  var theCopy;
  theCopy = new carc.StereoMolecule(this.mAllAtoms, this.mAllBonds);
  this.copyMolecule_0(theCopy);
  return theCopy;
}
;
_.getFragments_0 = function getFragments(){
  var fragmentNo, fragments;
  fragmentNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  fragments = this.getFragmentNumbers_0(fragmentNo, false, false);
  return this.getFragments_1(fragmentNo, fragments);
}
;
_.getFragments_1 = function getFragments_0(fragmentNo, fragmentCount){
  var atom, atom0, atomMap, atoms, bond, bond0, bonds, f, f$array, f$index, f$max, f1, f2, fragment, i;
  fragment = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_StereoMolecule_2_classLit, {4:1, 1:1, 8:1}, 39, fragmentCount, 0, 1);
  atoms = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragmentCount, 15, 1);
  bonds = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragmentCount, 15, 1);
  atomMap = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mAllAtoms, 15, 1);
  for (atom0 = 0; atom0 < this.mAllAtoms; atom0++)
    if (fragmentNo[atom0] != -1)
      atomMap[atom0] = atoms[fragmentNo[atom0]]++;
  for (bond0 = 0; bond0 < this.mAllBonds; bond0++) {
    f1 = fragmentNo[this.mBondAtom[0][bond0]];
    f2 = fragmentNo[this.mBondAtom[1][bond0]];
    if (f1 == f2 && f1 != -1)
      bonds[f1]++;
  }
  for (i = 0; i < fragmentCount; i++) {
    setCheck(fragment, i, this.createMolecule(atoms[i], bonds[i]));
    this.copyMoleculeProperties_0(fragment[i]);
  }
  for (atom = 0; atom < this.mAllAtoms; atom++)
    if (fragmentNo[atom] != -1)
      this.copyAtom_0(fragment[fragmentNo[atom]], atom, 0, 0);
  for (bond = 0; bond < this.mAllBonds; bond++) {
    f1 = fragmentNo[this.mBondAtom[0][bond]];
    f2 = fragmentNo[this.mBondAtom[1][bond]];
    if (f1 == f2 && f1 != -1)
      this.copyBond_1(fragment[f1], bond, 0, 0, atomMap, false);
  }
  for (f$array = fragment , f$index = 0 , f$max = f$array.length; f$index < f$max; ++f$index) {
    f = f$array[f$index];
    f.renumberESRGroups_0(1);
    f.renumberESRGroups_0(2);
  }
  return fragment;
}
;
_.getIDCode_0 = function getIDCode_0(){
  this.ensureHelperArrays_0(7);
  return isNull(this.mCanonizer)?null:this.mCanonizer.getIDCode_0();
}
;
_.getIDCoordinates_0 = function getIDCoordinates(){
  this.ensureHelperArrays_0(7);
  return isNull(this.mCanonizer)?null:this.mCanonizer.getEncodedCoordinates();
}
;
_.getStereoCenterCount_0 = function getStereoCenterCount(){
  var atom, scCount;
  this.ensureHelperArrays_0(15);
  scCount = 0;
  for (atom = 0; atom < this.getAtoms_0(); atom++)
    if (this.getAtomParity_0(atom) != 0 && !this.isAtomParityPseudo_0(atom))
      scCount++;
  return scCount;
}
;
_.getSymmetryRank_0 = function getSymmetryRank_0(atom){
  return this.mCanonizer.getSymmetryRank_0(atom);
}
;
_.setAssignParitiesToNitrogen_0 = function setAssignParitiesToNitrogen(b){
  this.mAssignParitiesToNitrogen = b;
  this.mValidHelperArrays &= ~(7 | 128);
}
;
_.setUnknownParitiesToExplicitlyUnknown_0 = function setUnknownParitiesToExplicitlyUnknown_0(){
  this.ensureHelperArrays_0(15);
  if (isNotNull(this.mCanonizer))
    this.mCanonizer.setUnknownParitiesToExplicitlyUnknown_0();
}
;
_.stripStereoInformation_0 = function stripStereoInformation(){
  var atom, bond;
  this.ensureHelperArrays_0(7);
  this.mIsRacemate = false;
  for (atom = 0; atom < this.mAllAtoms; atom++) {
    this.mAtomFlags[atom] &= ~66584576;
    if ((this.mAtomFlags[atom] & 3) != 0)
      this.mAtomFlags[atom] |= 67108864;
    else 
      this.mAtomFlags[atom] &= ~67108864;
  }
  for (bond = 0; bond < this.mAllBonds; bond++)
    if ((this.mBondFlags[bond] & 3) != 0 && this.getBondOrder_0(bond) == 2)
      this.mBondType[bond] = 26;
    else 
      this.mBondType[bond] &= ~24;
  this.mValidHelperArrays &= ~252;
}
;
_.validate_0 = function validate_0(){
  var angle, atom, i, i0, j;
  getClassPrototype(89).validate_0.call(this);
  this.ensureHelperArrays_0(15);
  for (atom = 0; atom < this.getAtoms_0(); atom++) {
    if ((this.getAtomESRType_0(atom) == 1 || this.getAtomESRType_0(atom) == 2) && (!this.isAtomStereoCenter_0(atom) || this.getAtomParity_0(atom) == 3))
      throw toJs(new jl.Exception_1('Members of ESR groups must only be stereo centers with known configuration.'));
    if ((this.mAtomFlags[atom] & 131072) != 0)
      throw toJs(new jl.Exception_1('Over- or under-specified stereofeature or more than one racemic type bond'));
    if ((this.getAtomParity_0(atom) == 1 || this.getAtomParity_0(atom) == 2) && this.getAtomPi_0(atom) == 0) {
      angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, this.getConnAtoms_0(atom), 15, 1);
      for (i0 = 0; i0 < this.getConnAtoms_0(atom); i0++)
        angle[i0] = this.getBondAngle_0(atom, this.getConnAtom_0(atom, i0));
      for (i = 1; i < this.getConnAtoms_0(atom); i++)
        if (!this.isStereoBond_1(this.getConnBond_0(atom, i), atom))
          for (j = 0; j < i; j++)
            if (!this.isStereoBond_1(this.getConnBond_0(atom, j), atom))
              if (this.bondsAreParallel(angle[i], angle[j]))
                throw toJs(new jl.Exception_1('Ambiguous configuration at stereo center because of 2 parallel bonds'));
    }
  }
}
;
_.validateESR = function validateESR(){
  var atom, atom0, atom1, atom2, isIndependentRacemicAtom, paritiesUpdated;
  paritiesUpdated = false;
  for (atom0 = 0; atom0 < this.getAtoms_0(); atom0++)
    if (!this.isAtomStereoCenter_0(atom0) || this.getAtomParity_0(atom0) == 3)
      this.mAtomFlags[atom0] &= ~66584576;
  if (this.mIsRacemate) {
    if ((this.mChirality & ~65535) != 131072) {
      isIndependentRacemicAtom = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.getAtoms_0(), 16, 1);
      for (atom1 = 0; atom1 < this.getAtoms_0(); atom1++)
        if (this.isAtomStereoCenter_0(atom1) && this.getAtomParity_0(atom1) != 3 && this.getAtomESRType_0(atom1) == 1)
          isIndependentRacemicAtom[atom1] = true;
      for (atom2 = 0; atom2 < this.getAtoms_0(); atom2++) {
        if (this.isAtomStereoCenter_0(atom2) && this.getAtomParity_0(atom2) != 3) {
          this.setAtomESR_0(atom2, 1, 0);
          paritiesUpdated = true;
        }
      }
      for (atom = 0; atom < this.getAtoms_0(); atom++) {
        if (isIndependentRacemicAtom[atom]) {
          this.setAtomParity_0(atom, 1, false);
          this.setAtomESR_0(atom, 1, -1);
          paritiesUpdated = true;
        }
      }
    }
    this.mIsRacemate = false;
  }
  this.renumberESRGroups_0(1);
  this.renumberESRGroups_0(2);
  return paritiesUpdated;
}
;
_.mAssignParitiesToNitrogen = false;
carc.VALIDATION_ERROR_AMBIGUOUS_CONFIGURATION = 'Ambiguous configuration at stereo center because of 2 parallel bonds';
carc.VALIDATION_ERROR_ESR_CENTER_UNKNOWN = 'Members of ESR groups must only be stereo centers with known configuration.';
carc.VALIDATION_ERROR_OVER_UNDER_SPECIFIED = 'Over- or under-specified stereo feature or more than one racemic type bond';
carc.serialVersionUID_2 = 537316094;
cggl.Lcom_actelion_research_chem_StereoMolecule_2_classLit = createForClass('com.actelion.research.chem', 'StereoMolecule', 39, cggl.Lcom_actelion_research_chem_ExtendedMolecule_2_classLit);
carc.$clinit_UniqueStringList = function $clinit_UniqueStringList(){
  carc.$clinit_UniqueStringList = emptyMethod;
  carc.$clinit_SortedStringList();
}
;
carc.UniqueStringList = function UniqueStringList(){
  carc.$clinit_UniqueStringList();
  carc.SortedStringList.call(this);
  this.$init_38();
}
;
defineClass(199, 102, {4:1, 1:1}, carc.UniqueStringList);
_.$init_38 = function $init_38(){
  this.mOriginalOrder = new ju.ArrayList;
  this.mIndexList = new ju.ArrayList;
}
;
_.addString = function addString_0(theString){
  var index_0, position;
  index_0 = getClassPrototype(102).addString.call(this, theString);
  if (index_0 == -1)
    return -1;
  position = this.mOriginalOrder.size();
  this.mOriginalOrder.add(theString);
  this.mIndexList.addAtIndex(index_0, new jl.Integer(position));
  return position;
}
;
_.getListIndex = function getListIndex_0(s){
  var index_0;
  index_0 = getClassPrototype(102).getListIndex.call(this, s);
  if (index_0 == -1)
    return -1;
  return castTo(this.mIndexList.getAtIndex(index_0), 33).intValue();
}
;
_.toArray_0 = function toArray_0(){
  return castTo(this.mOriginalOrder.toArray_1(initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, 0, 6, 1)), 29);
}
;
carc.serialVersionUID_3 = 537265952;
cggl.Lcom_actelion_research_chem_UniqueStringList_2_classLit = createForClass('com.actelion.research.chem', 'UniqueStringList', 199, cggl.Lcom_actelion_research_chem_SortedStringList_2_classLit);
carcc.$clinit_DiastereotopicAtomID = function $clinit_DiastereotopicAtomID(){
  carcc.$clinit_DiastereotopicAtomID = emptyMethod;
  jl.$clinit_Object();
  carcc.xAtomicNumber = carc.getAtomicNoFromLabel('X');
}
;
carcc.addMissingChirality = function addMissingChirality(molecule){
  carcc.$clinit_DiastereotopicAtomID();
  carcc.addMissingChirality_0(molecule, 1);
}
;
carcc.addMissingChirality_0 = function addMissingChirality_0(molecule, esrType){
  carcc.$clinit_DiastereotopicAtomID();
  var connAtom, i, iAtom, stereoBond, tempMolecule;
  for (iAtom = 0; iAtom < molecule.getAllAtoms_0(); iAtom++) {
    tempMolecule = molecule.getCompactCopy_0();
    carcc.changeAtomForStereo(tempMolecule, iAtom);
    tempMolecule.ensureHelperArrays_0(7);
    for (i = 0; i < tempMolecule.getAtoms_0(); i++) {
      if (tempMolecule.isAtomStereoCenter_0(i) && tempMolecule.getStereoBond_0(i) == -1) {
        stereoBond = tempMolecule.getAtomPreferredStereoBond_0(i);
        if (stereoBond != -1) {
          molecule.setBondType_0(stereoBond, 17);
          if (molecule.getBondAtom_0(1, stereoBond) == i) {
            connAtom = molecule.getBondAtom_0(0, stereoBond);
            molecule.setBondAtom_0(0, stereoBond, i);
            molecule.setBondAtom_0(1, stereoBond, connAtom);
          }
          molecule.setAtomESR_0(i, esrType, 0);
        }
      }
    }
  }
}
;
carcc.changeAtom_0 = function changeAtom_0(molecule, iAtom){
  molecule.setAtomCustomLabel_0(iAtom, molecule.getAtomLabel_0(iAtom) + '*');
  if (molecule.getAtomicNo_0(iAtom) == 1) {
    molecule.setAtomicNo_0(iAtom, carcc.xAtomicNumber);
  }
   else {
    molecule.setAtomMass_0(iAtom, molecule.getAtomMass_0(iAtom) + 5);
  }
}
;
carcc.changeAtomForStereo = function changeAtomForStereo(molecule, iAtom){
  molecule.setAtomicNo_0(iAtom, carcc.xAtomicNumber);
}
;
carcc.getAtomIds = function getAtomIds(molecule){
  carcc.$clinit_DiastereotopicAtomID();
  var iAtom, ids, numberAtoms, tempMolecule;
  carcc.addMissingChirality(molecule);
  numberAtoms = molecule.getAllAtoms_0();
  ids = initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, numberAtoms, 6, 1);
  for (iAtom = 0; iAtom < numberAtoms; iAtom++) {
    tempMolecule = molecule.getCompactCopy_0();
    carcc.changeAtom_0(tempMolecule, iAtom);
    carcc.makeRacemic(tempMolecule);
    ids[iAtom] = (new carc.Canonizer_0(tempMolecule, 8)).getIDCode_0();
  }
  return ids;
}
;
carcc.makeRacemic = function makeRacemic(molecule){
  var i;
  molecule.ensureHelperArrays_0(7);
  for (i = 0; i < molecule.getAllAtoms_0(); i++) {
    if (molecule.getAtomParity_0(i) != 0) {
      molecule.setAtomESR_0(i, 1, 0);
    }
  }
}
;
defineClass(399, 1, {1:1});
carcc.xAtomicNumber = 0;
cggl.Lcom_actelion_research_chem_contrib_DiastereotopicAtomID_2_classLit = createForClass('com.actelion.research.chem.contrib', 'DiastereotopicAtomID', 399, cggl.Ljava_lang_Object_2_classLit);
carcc.$clinit_HoseCodeCreator = function $clinit_HoseCodeCreator(){
  carcc.$clinit_HoseCodeCreator = emptyMethod;
  jl.$clinit_Object();
}
;
carcc.getHoseCodes = function getHoseCodes(mol, maxSphereSize, type_0){
  carcc.$clinit_HoseCodeCreator();
  var ids, rootAtom;
  ids = initMultidimensionalArray(cggl.Ljava_lang_String_2_classLit, [{4:1, 1:1, 8:1}, {4:1, 1:1, 8:1, 29:1}], [29, 2], 6, [mol.getAtoms_0(), maxSphereSize], 2);
  mol.ensureHelperArrays_0(3);
  for (rootAtom = 0; rootAtom < mol.getAtoms_0(); rootAtom++) {
    ids[rootAtom] = carcc.getHoseCodesForAtom(mol, rootAtom, maxSphereSize, type_0);
  }
  return ids;
}
;
carcc.getHoseCodesForAtom = function getHoseCodesForAtom(mol, rootAtom, maxSphereSize, type_0){
  var atom, atomList, atomMask, connAtom, fragment, i, ids, j, max_0, min_0, newMax, sphere;
  fragment = new carc.StereoMolecule(mol.getAtoms_0(), mol.getBonds_0());
  ids = new ju.Vector;
  min_0 = 0;
  max_0 = 0;
  atomMask = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, mol.getAtoms_0(), 16, 1);
  atomList = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, mol.getAtoms_0(), 15, 1);
  for (sphere = 0; sphere < maxSphereSize && max_0 < mol.getAtoms_0(); sphere++) {
    if (max_0 == 0) {
      atomList[0] = rootAtom;
      atomMask[rootAtom] = true;
      max_0 = 1;
    }
     else {
      newMax = max_0;
      for (i = min_0; i < max_0; i++) {
        atom = atomList[i];
        for (j = 0; j < mol.getConnAtoms_0(atom); j++) {
          connAtom = mol.getConnAtom_0(atom, j);
          if (false)
            (jl.$clinit_System() , jl.out_0).println('---> ' + atom + ' to ' + connAtom);
          if (!atomMask[connAtom]) {
            switch (type_0) {
              case 0:
                atomMask[connAtom] = true;
                atomList[newMax++] = connAtom;
                break;
              case 1:
                if (!(carcc.isCsp3(mol, atom) && carcc.isCsp3(mol, connAtom))) {
                  if (false)
                    (jl.$clinit_System() , jl.out_0).println('NO SKIP');
                  atomMask[connAtom] = true;
                  atomList[newMax++] = connAtom;
                }
                 else {
                  if (false)
                    (jl.$clinit_System() , jl.out_0).println('SKIP');
                }

                break;
            }
          }
        }
      }
      min_0 = max_0;
      max_0 = newMax;
    }
    mol.copyMoleculeByAtoms_0(fragment, atomMask, true, null);
    ids.add((new carc.Canonizer_0(fragment, 8)).getIDCode_0());
  }
  return castTo(ids.toArray_1(initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, ids.size(), 6, 1)), 29);
}
;
carcc.getHoseCodesFromDiaID = function getHoseCodesFromDiaID(diastereotopicID, maxSphereSize, type_0){
  carcc.$clinit_HoseCodeCreator();
  var atomCustomLabel, atomID, i, molecule;
  molecule = (new carc.IDCodeParser(true)).getCompactMolecule(diastereotopicID);
  atomID = -1;
  for (i = 0; i < molecule.getAllAtoms_0(); i++) {
    atomCustomLabel = molecule.getAtomCustomLabel_0(i);
    if (jsNotEquals(atomCustomLabel, null) && jl.endsWith_Ljava_lang_String__Z__devirtual$(atomCustomLabel, '*')) {
      atomID = i;
      break;
    }
  }
  if (atomID >= 0) {
    return carcc.getHoseCodesForAtom(molecule, atomID, maxSphereSize, type_0);
  }
  return initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, 0, 6, 1);
}
;
carcc.isCsp3 = function isCsp3(mol, atomID){
  if (mol.getAtomicNo_0(atomID) != 6)
    return false;
  if (mol.getAtomCharge_0(atomID) != 0)
    return false;
  if (mol.getImplicitHydrogens_0(atomID) + mol.getConnAtoms_0(atomID) != 4)
    return false;
  return true;
}
;
defineClass(400, 1, {1:1});
carcc.DEBUG = false;
carcc.FULL_HOSE_CODE = 0;
carcc.HOSE_CODE_CUT_C_SP3_SP3 = 1;
cggl.Lcom_actelion_research_chem_contrib_HoseCodeCreator_2_classLit = createForClass('com.actelion.research.chem.contrib', 'HoseCodeCreator', 400, cggl.Ljava_lang_Object_2_classLit);
carcc.$clinit_HydrogenHandler = function $clinit_HydrogenHandler(){
  carcc.$clinit_HydrogenHandler = emptyMethod;
  jl.$clinit_Object();
  carcc.cos30 = $wnd.Math.cos(30 / 360 * 3.141592653589793 * 2);
  carcc.sin30 = $wnd.Math.sin(30 / 360 * 3.141592653589793 * 2);
  carcc.cos330 = $wnd.Math.cos(-30 / 360 * 3.141592653589793 * 2);
  carcc.sin330 = $wnd.Math.sin(-30 / 360 * 3.141592653589793 * 2);
  carcc.cos60 = $wnd.Math.cos(60 / 360 * 3.141592653589793 * 2);
  carcc.sin60 = $wnd.Math.sin(60 / 360 * 3.141592653589793 * 2);
  carcc.cos300 = $wnd.Math.cos(-60 / 360 * 3.141592653589793 * 2);
  carcc.sin300 = $wnd.Math.sin(-60 / 360 * 3.141592653589793 * 2);
  carcc.cos45 = $wnd.Math.cos(45 / 360 * 3.141592653589793 * 2);
  carcc.sin45 = $wnd.Math.sin(45 / 360 * 3.141592653589793 * 2);
  carcc.cos315 = $wnd.Math.cos(-45 / 360 * 3.141592653589793 * 2);
  carcc.sin315 = $wnd.Math.sin(-45 / 360 * 3.141592653589793 * 2);
}
;
carcc.addImplicitHydrogens = function addImplicitHydrogens(molecule){
  carcc.$clinit_HydrogenHandler();
  var iAtom, nAtomsBefore;
  molecule.ensureHelperArrays_0(1);
  nAtomsBefore = molecule.getAtoms_0();
  for (iAtom = 0; iAtom < nAtomsBefore; iAtom++) {
    carcc.addImplicitHydrogens_0(molecule, iAtom);
  }
}
;
carcc.addImplicitHydrogens_0 = function addImplicitHydrogens_0(molecule, iAtom){
  carcc.$clinit_HydrogenHandler();
  var angle1, angle2, angle3, atm, atom, atomicNo, averageLength, bond, currDist, currentDistance, deltaX, deltaY, distMin, distance, dx, dx1, dx2, dy, dy1, dy2, i, i0, iHydrogen, iMin, iNew, length_0, length1, length2, nHydrogens, nNeighbours, nNeighbours0, normal, stereoAtom1, stereoAtom2, stereoBond, x_0, y_0;
  atomicNo = 1;
  nHydrogens = molecule.getImplicitHydrogens_0(iAtom);
  x_0 = molecule.getAtomX_1(iAtom);
  y_0 = molecule.getAtomY_1(iAtom);
  switch (nHydrogens) {
    case 1:
      {
        nNeighbours0 = molecule.getConnAtoms_0(iAtom);
        if (nNeighbours0 == 0) {
          distMin = 1.7976931348623157E308;
          iMin = -1;
          for (atm = 0; atm < molecule.getAllAtoms_0(); atm++) {
            if (atm == iAtom)
              continue;
            deltaX = x_0 - molecule.getAtomX_1(atm);
            deltaY = y_0 - molecule.getAtomY_1(atm);
            currDist = $wnd.Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            if (distMin > currDist) {
              distMin = currDist;
              iMin = atm;
            }
          }
          dx = x_0 - molecule.getAtomX_1(iMin);
          dy = y_0 - molecule.getAtomY_1(iMin);
        }
         else {
          dx = x_0 - molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0));
          dy = y_0 - molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0));
        }
        if (nNeighbours0 == 1) {
          iNew = molecule.addAtom_0(x_0 + carcc.cos45 * dx + carcc.sin45 * dy, y_0 - carcc.sin45 * dx + carcc.cos45 * dy);
        }
         else if (nNeighbours0 == 2) {
          dx = x_0 - 0.5 * (molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0)) + molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 1)));
          dy = y_0 - 0.5 * (molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0)) + molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 1)));
          iNew = molecule.addAtom_0(x_0 + dx, y_0 + dy);
        }
         else if (nNeighbours0 == 3) {
          stereoAtom1 = molecule.getConnAtom_0(iAtom, 0);
          for (i0 = 1; i0 < 3; i0++) {
            bond = molecule.getConnBond_0(iAtom, i0);
            if (molecule.getBondType_0(bond) == 9 || molecule.getBondType_0(bond) == 17) {
              stereoAtom1 = molecule.getConnAtom_0(iAtom, i0);
            }
          }
          angle1 = $wnd.Math.abs(carc.getAngleDif(carc.getAngle(molecule.getAtomX_1(iAtom), molecule.getAtomY_1(iAtom), molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0)), molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0))), carc.getAngle(molecule.getAtomX_1(iAtom), molecule.getAtomY_1(iAtom), molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 1)), molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 1)))));
          angle2 = $wnd.Math.abs(carc.getAngleDif(carc.getAngle(molecule.getAtomX_1(iAtom), molecule.getAtomY_1(iAtom), molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0)), molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0))), carc.getAngle(molecule.getAtomX_1(iAtom), molecule.getAtomY_1(iAtom), molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 2)), molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 2)))));
          angle3 = $wnd.Math.abs(carc.getAngleDif(carc.getAngle(molecule.getAtomX_1(iAtom), molecule.getAtomY_1(iAtom), molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 1)), molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 1))), carc.getAngle(molecule.getAtomX_1(iAtom), molecule.getAtomY_1(iAtom), molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 2)), molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 2)))));
          normal = true;
          if (angle1 > angle2 && angle1 > angle3) {
            if (angle2 + angle3 < 3.141592653589793) {
              normal = false;
              dx = x_0 - 0.5 * (molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0)) + molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 1)));
              dy = y_0 - 0.5 * (molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0)) + molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 1)));
            }
          }
           else if (angle2 > angle1 && angle2 > angle3) {
            if (angle1 + angle3 < 3.141592653589793) {
              normal = false;
              dx = x_0 - 0.5 * (molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0)) + molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 2)));
              dy = y_0 - 0.5 * (molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0)) + molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 2)));
            }
          }
           else {
            if (angle1 + angle2 < 3.141592653589793) {
              normal = false;
              dx = x_0 - 0.5 * (molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 1)) + molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 2)));
              dy = y_0 - 0.5 * (molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 1)) + molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 2)));
            }
          }
          if (normal) {
            stereoAtom2 = molecule.getConnAtom_0(iAtom, 0);
            distance = 1.7976931348623157E308;
            for (i = 0; i < 3; i++) {
              atom = molecule.getConnAtom_0(iAtom, i);
              if (atom != stereoAtom1) {
                currentDistance = $wnd.Math.pow(molecule.getAtomX_1(iAtom) - molecule.getAtomX_1(atom), 2) + $wnd.Math.pow(molecule.getAtomY_1(iAtom) - molecule.getAtomY_1(atom), 2);
                if (currentDistance < distance) {
                  stereoAtom2 = atom;
                  distance = currentDistance;
                  (jl.$clinit_System() , jl.out_0).println('Minimal distance: ' + stereoAtom1 + ' - ' + stereoAtom2 + ' - ' + distance + ' - ' + molecule.getAtomicNo_0(stereoAtom2));
                }
              }
            }
            iNew = molecule.addAtom_0((molecule.getAtomX_1(stereoAtom1) + molecule.getAtomX_1(stereoAtom2)) / 2, (molecule.getAtomY_1(stereoAtom1) + molecule.getAtomY_1(stereoAtom2)) / 2);
          }
           else {
            iNew = molecule.addAtom_0(x_0 + dx, y_0 + dy);
          }
        }
         else {
          iNew = molecule.addAtom_0(x_0 + dx, y_0 + dy);
        }
        molecule.setAtomicNo_0(iNew, 1);
        molecule.addBond_1(iAtom, iNew, 1);
      }

      break;
    case 2:
      nNeighbours = molecule.getConnAtoms_0(iAtom);
      if (nNeighbours == 1) {
        dx = x_0 - molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0));
        dy = y_0 - molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0));
        iNew = molecule.addAtom_0(x_0 + (carcc.cos60 * dx - carcc.sin60 * dy) * 0.7, y_0 + (carcc.sin60 * dx + carcc.cos60 * dy) * 0.7);
        molecule.setAtomicNo_0(iNew, 1);
        molecule.addBond_1(iAtom, iNew, 1);
        iNew = molecule.addAtom_0(x_0 + (carcc.cos300 * dx - carcc.sin300 * dy) * 0.7, y_0 + (carcc.sin300 * dx + carcc.cos300 * dy) * 0.7);
        molecule.setAtomicNo_0(iNew, 1);
        molecule.addBond_1(iAtom, iNew, 1);
      }
       else if (nNeighbours == 2) {
        dx1 = x_0 - molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0));
        dy1 = y_0 - molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0));
        dx2 = x_0 - molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 1));
        dy2 = y_0 - molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 1));
        length1 = $wnd.Math.sqrt(dx1 * dx1 + dy1 * dy1) * 0.7;
        length2 = $wnd.Math.sqrt(dx2 * dx2 + dy2 * dy2) * 0.7;
        dx = dx1 + dx2;
        dy = dy1 + dy2;
        length_0 = $wnd.Math.sqrt(dx * dx + dy * dy);
        averageLength = (length1 + length2) / 2;
        dx = dx / length_0 * averageLength;
        dy = dy / length_0 * averageLength;
        stereoBond = molecule.getStereoBond_0(iAtom);
        iNew = molecule.addAtom_0(x_0 + carcc.cos30 * dx - carcc.sin30 * dy, y_0 + carcc.sin30 * dx + carcc.cos30 * dy);
        molecule.setAtomicNo_0(iNew, 1);
        if (stereoBond > -1) {
          molecule.addBond_1(iAtom, iNew, 1);
        }
         else {
          molecule.addBond_1(iAtom, iNew, 17);
        }
        iNew = molecule.addAtom_0(x_0 + carcc.cos330 * dx - carcc.sin330 * dy, y_0 + carcc.sin330 * dx + carcc.cos330 * dy);
        molecule.setAtomicNo_0(iNew, 1);
        molecule.addBond_1(iAtom, iNew, 1);
      }
       else {
        for (iHydrogen = 0; iHydrogen < nHydrogens; iHydrogen++) {
          iNew = molecule.addAtom_0(x_0, y_0);
          molecule.setAtomicNo_0(iNew, 1);
          molecule.addBond_1(iAtom, iNew, 1);
        }
      }

      break;
    case 3:
      {
        dx = (x_0 - molecule.getAtomX_1(molecule.getConnAtom_0(iAtom, 0))) * 0.7;
        dy = (y_0 - molecule.getAtomY_1(molecule.getConnAtom_0(iAtom, 0))) * 0.7;
        iNew = molecule.addAtom_0(x_0 + dx, y_0 + dy);
        molecule.setAtomicNo_0(iNew, 1);
        molecule.addBond_1(iAtom, iNew, 1);
        iNew = molecule.addAtom_0(x_0 - dy, y_0 + dx);
        molecule.setAtomicNo_0(iNew, 1);
        molecule.addBond_1(iAtom, iNew, 1);
        iNew = molecule.addAtom_0(x_0 + dy, y_0 - dx);
        molecule.setAtomicNo_0(iNew, 1);
        molecule.addBond_1(iAtom, iNew, 1);
      }

      break;
    default:{
        for (iHydrogen = 0; iHydrogen < nHydrogens; iHydrogen++) {
          iNew = molecule.addAtom_0(x_0, y_0);
          molecule.setAtomicNo_0(iNew, 1);
          molecule.addBond_1(iAtom, iNew, 1);
        }
        break;
      }

  }
}
;
carcc.getNumberOfHydrogens = function getNumberOfHydrogens(molecule){
  carcc.$clinit_HydrogenHandler();
  var iAtom, nbHydrogens;
  molecule.ensureHelperArrays_0(1);
  nbHydrogens = 0;
  for (iAtom = 0; iAtom < molecule.getAllAtoms_0(); iAtom++) {
    if (molecule.getAtomicNo_0(iAtom) == 1)
      nbHydrogens++;
    else 
      nbHydrogens += molecule.getAllHydrogens_0(iAtom);
  }
  return nbHydrogens;
}
;
defineClass(398, 1, {1:1});
carcc.H_BOND_RATIO = 0.7;
carcc.cos30 = 0;
carcc.cos300 = 0;
carcc.cos315 = 0;
carcc.cos330 = 0;
carcc.cos45 = 0;
carcc.cos60 = 0;
carcc.sin30 = 0;
carcc.sin300 = 0;
carcc.sin315 = 0;
carcc.sin330 = 0;
carcc.sin45 = 0;
carcc.sin60 = 0;
cggl.Lcom_actelion_research_chem_contrib_HydrogenHandler_2_classLit = createForClass('com.actelion.research.chem.contrib', 'HydrogenHandler', 398, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_CoordinateInventor = function $clinit_CoordinateInventor(){
  carcc2.$clinit_CoordinateInventor = emptyMethod;
  jl.$clinit_Object();
  carcc2.MODE_CONSIDER_MARKED_ATOMS = 4 | 8;
  carcc2.TOTAL_FLIPS = 32 + 64 + 128;
}
;
carcc2.CoordinateInventor = function CoordinateInventor(){
  carcc2.$clinit_CoordinateInventor();
  carcc2.CoordinateInventor_0.call(this, 2);
}
;
carcc2.CoordinateInventor_0 = function CoordinateInventor_0(mode){
  Object_0.call(this);
  this.$init_39();
  this.mMode = mode;
  if ((mode & 1) == 0 && isNull(carcc2.sDefaultTemplateList))
    carcc2.buildDefaultTemplateList();
}
;
carcc2.buildDefaultTemplateList = function buildDefaultTemplateList(){
  if (isNull(carcc2.sDefaultTemplateList))
    carcc2.sDefaultTemplateList = new carcc2.InventorDefaultTemplateList;
}
;
carcc2.getMeanAngle = function getMeanAngle(angle, noOfAngles){
  carcc2.$clinit_CoordinateInventor();
  var cosSum, i, length_0, meanAngle, sinSum;
  sinSum = 0;
  cosSum = 0;
  for (i = 0; i < noOfAngles; i++) {
    sinSum += angle[i].mLength * $wnd.Math.sin(angle[i].mAngle);
    cosSum += angle[i].mLength * $wnd.Math.cos(angle[i].mAngle);
  }
  if (cosSum == 0)
    meanAngle = sinSum > 0?3.141592653589793 / 2:-3.141592653589793 / 2;
  else {
    meanAngle = $wnd.Math.atan(sinSum / cosSum);
    if (cosSum < 0)
      meanAngle += 3.141592653589793;
  }
  length_0 = $wnd.Math.sqrt(sinSum * sinSum + cosSum * cosSum) / noOfAngles;
  return new carcc2.InventorAngle(meanAngle, length_0);
}
;
defineClass(88, 1, {1:1}, carcc2.CoordinateInventor);
_.$init_39 = function $init_39(){
}
;
_.addRingFragment = function addRingFragment(ringAtom, ringBond){
  var f, i, ringSize;
  ringSize = ringAtom.length;
  f = new carcc2.InventorFragment(this.mMol, ringSize, this.mMode);
  f.mAtomX[0] = 0;
  f.mAtomY[0] = 0;
  for (i = 0; i < ringSize; i++) {
    f.mPriority[i] = 128 - ringSize;
    f.mGlobalAtom[i] = ringAtom[i];
  }
  if (ringSize < 8)
    this.createRegularRingFragment(f);
  else 
    this.createLargeRingFragment(f, ringAtom, ringBond);
  this.mFragmentList.add(f);
}
;
_.calcNextBaseValues = function calcNextBaseValues(baseValue, symRank){
  var atom, connRank, i, i0, j, k, neighbours, rank;
  connRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 16, 15, 1);
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom); i0++) {
      rank = symRank[this.mMol.getConnAtom_0(atom, i0)];
      for (j = 0; j < i0; j++)
        if (rank < connRank[j])
          break;
      for (k = i0; k > j; k--)
        connRank[k] = connRank[k - 1];
      connRank[j] = rank;
    }
    neighbours = $wnd.Math.min(6, this.mMol.getAllConnAtoms_0(atom));
    baseValue[atom].init_0(atom);
    baseValue[atom].add_0(16, fromInt_0(symRank[atom]));
    baseValue[atom].add_0((6 - neighbours) * (16 + 1), 0);
    for (i = 0; i < neighbours; i++)
      baseValue[atom].add_0(16 + 1, fromInt_0(connRank[i]));
  }
}
;
_.calculateAtomSymmetries = function calculateAtomSymmetries(){
  var atom, baseValue, bond, bondParity, newNoOfRanks, oldNoOfRanks, symRank;
  baseValue = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_CanonizerBaseValue_2_classLit, {4:1, 1:1, 8:1}, 68, this.mMol.getAllAtoms_0(), 0, 1);
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    setCheck(baseValue, atom, new carc.CanonizerBaseValue(2));
    baseValue[atom].init_0(atom);
  }
  symRank = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    bondParity = this.mMol.getBondParity_0(bond);
    if (bondParity == 1 || bondParity == 2) {
      baseValue[this.mMol.getBondAtom_0(0, bond)].add_1(fromInt_0(bondParity));
      baseValue[this.mMol.getBondAtom_0(1, bond)].add_1(fromInt_0(bondParity));
    }
  }
  newNoOfRanks = this.consolidateRanks(baseValue, symRank);
  do {
    oldNoOfRanks = newNoOfRanks;
    this.calcNextBaseValues(baseValue, symRank);
    newNoOfRanks = this.consolidateRanks(baseValue, symRank);
  }
   while (oldNoOfRanks != newNoOfRanks);
  return symRank;
}
;
_.consolidateRanks = function consolidateRanks(baseValue, symRank){
  var i, rank;
  rank = 0;
  ju.sort_5(baseValue);
  for (i = 0; i < baseValue.length; i++) {
    if (i == 0 || baseValue[i].compareTo_0(baseValue[i - 1]) != 0)
      rank++;
    symRank[baseValue[i].getAtom()] = rank;
  }
  return rank;
}
;
_.correctChainEZParities = function correctChainEZParities(){
  var angle1, angle2, bond, bondAtom, connAtom, dbAngle, f, fragmentNo, i, j, k, minConnAtom;
  for (fragmentNo = 0; fragmentNo < this.mFragmentList.size(); fragmentNo++) {
    f = castTo(this.mFragmentList.getAtIndex(fragmentNo), 19);
    for (i = 0; i < f.mGlobalBond.length; i++) {
      bond = f.mGlobalBond[i];
      if (this.mMol.getBondOrder_0(bond) == 2) {
        if (!this.mMol.isSmallRingBond_0(bond) && (this.mMol.getBondParity_0(bond) == 3 || this.mMol.getBondParity_0(bond) == 0))
          this.mMol.setBondParityUnknownOrNone_0(bond);
        if (!this.mMol.isRingBond_0(bond) && this.mMol.getConnAtoms_0(this.mMol.getBondAtom_0(0, bond)) > 1 && this.mMol.getConnAtoms_0(this.mMol.getBondAtom_0(1, bond)) > 1 && (this.mMol.getBondParity_0(bond) == 1 || this.mMol.getBondParity_0(bond) == 2)) {
          minConnAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
          bondAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
          for (j = 0; j < 2; j++) {
            minConnAtom[j] = this.mMol.getMaxAtoms_0();
            bondAtom[j] = this.mMol.getBondAtom_0(j, bond);
            for (k = 0; k < this.mMol.getAllConnAtoms_0(bondAtom[j]); k++) {
              connAtom = this.mMol.getConnAtom_0(bondAtom[j], k);
              if (connAtom != this.mMol.getBondAtom_0(1 - j, bond) && minConnAtom[j] > connAtom)
                minConnAtom[j] = connAtom;
            }
          }
          dbAngle = carcc2.getAngle_0(f.mAtomX[f.mGlobalToLocalAtom[bondAtom[0]]], f.mAtomY[f.mGlobalToLocalAtom[bondAtom[0]]], f.mAtomX[f.mGlobalToLocalAtom[bondAtom[1]]], f.mAtomY[f.mGlobalToLocalAtom[bondAtom[1]]]);
          angle1 = carcc2.getAngle_0(f.mAtomX[f.mGlobalToLocalAtom[minConnAtom[0]]], f.mAtomY[f.mGlobalToLocalAtom[minConnAtom[0]]], f.mAtomX[f.mGlobalToLocalAtom[bondAtom[0]]], f.mAtomY[f.mGlobalToLocalAtom[bondAtom[0]]]);
          angle2 = carcc2.getAngle_0(f.mAtomX[f.mGlobalToLocalAtom[bondAtom[1]]], f.mAtomY[f.mGlobalToLocalAtom[bondAtom[1]]], f.mAtomX[f.mGlobalToLocalAtom[minConnAtom[1]]], f.mAtomY[f.mGlobalToLocalAtom[minConnAtom[1]]]);
          if (this.getAngleDif_0(dbAngle, angle1) < 0 ^ this.getAngleDif_0(dbAngle, angle2) < 0 ^ this.mMol.getBondParity_0(bond) == 2) {
            f.flipOneSide(bond);
          }
        }
      }
    }
  }
}
;
_.createChargeAssociation = function createChargeAssociation(){
  var atom, charge, chargeList, f, f$iterator, fragmentCharge, i, ic, ic$iterator, nc, nc$iterator, negChargeList, pc, pc$iterator, pc$iterator0, pc$iterator1, posChargeList;
  negChargeList = new ju.ArrayList;
  posChargeList = new ju.ArrayList;
  chargeList = new ju.ArrayList;
  for (f$iterator = this.mFragmentList.iterator(); f$iterator.hasNext_0();) {
    f = castTo(f$iterator.next_3(), 19);
    fragmentCharge = 0;
    chargeList.clear();
    for (i = 0; i < f.size_1(); i++) {
      atom = f.getGlobalAtom(i);
      charge = this.mUnPairedCharge[atom];
      if (charge != 0) {
        chargeList.add(new carcc2.InventorCharge(f, i, charge));
        fragmentCharge += charge;
      }
    }
    if (fragmentCharge != 0) {
      ju.sort_8(chargeList, new carcc2.CoordinateInventor$1(this));
      for (ic$iterator = chargeList.iterator(); ic$iterator.hasNext_0();) {
        ic = castTo(ic$iterator.next_3(), 35);
        if (fragmentCharge * ic.charge > 0) {
          charge = $wnd.Math.abs(fragmentCharge) >= $wnd.Math.abs(ic.charge)?ic.charge:fragmentCharge;
          fragmentCharge -= charge;
          (charge < 0?negChargeList:posChargeList).add(new carcc2.InventorCharge(f, ic.atom, charge));
          if (fragmentCharge == 0)
            break;
        }
      }
    }
  }
  if (negChargeList.size() == 0 || posChargeList.size() == 0)
    return null;
  ju.sort_8(posChargeList, new carcc2.CoordinateInventor$2(this));
  ju.sort_8(negChargeList, new carcc2.CoordinateInventor$3(this));
  for (pc$iterator0 = posChargeList.iterator(); pc$iterator0.hasNext_0();) {
    pc = castTo(pc$iterator0.next_3(), 35);
    for (nc$iterator = negChargeList.iterator(); nc$iterator.hasNext_0();) {
      nc = castTo(nc$iterator.next_3(), 35);
      if (pc.charge == -nc.charge) {
        this.mUnPairedCharge[pc.fragment_0.getGlobalAtom(pc.atom)] -= pc.charge;
        this.mUnPairedCharge[nc.fragment_0.getGlobalAtom(nc.atom)] -= nc.charge;
        return new carcc2.FragmentAssociation_0(pc.fragment_0, nc.fragment_0, pc.atom, nc.atom);
      }
    }
  }
  for (pc$iterator1 = posChargeList.iterator(); pc$iterator1.hasNext_0();) {
    pc = castTo(pc$iterator1.next_3(), 35);
    for (nc$iterator = negChargeList.iterator(); nc$iterator.hasNext_0();) {
      nc = castTo(nc$iterator.next_3(), 35);
      if (pc.charge > -nc.charge) {
        this.mUnPairedCharge[pc.fragment_0.getGlobalAtom(pc.atom)] += nc.charge;
        this.mUnPairedCharge[nc.fragment_0.getGlobalAtom(nc.atom)] -= nc.charge;
        return new carcc2.FragmentAssociation_0(pc.fragment_0, nc.fragment_0, pc.atom, nc.atom);
      }
    }
  }
  for (pc$iterator = posChargeList.iterator(); pc$iterator.hasNext_0();) {
    pc = castTo(pc$iterator.next_3(), 35);
    for (nc$iterator = negChargeList.iterator(); nc$iterator.hasNext_0();) {
      nc = castTo(nc$iterator.next_3(), 35);
      if (pc.charge < -nc.charge) {
        this.mUnPairedCharge[pc.fragment_0.getGlobalAtom(pc.atom)] -= pc.charge;
        this.mUnPairedCharge[nc.fragment_0.getGlobalAtom(nc.atom)] += pc.charge;
        return new carcc2.FragmentAssociation_0(pc.fragment_0, nc.fragment_0, pc.atom, nc.atom);
      }
    }
  }
  return null;
}
;
_.createDisconnectedAssociation = function createDisconnectedAssociation(){
  if (this.mFragmentList.size() < 2)
    return null;
  return new carcc2.FragmentAssociation(castTo(this.mFragmentList.getAtIndex(0), 19), castTo(this.mFragmentList.getAtIndex(1), 19));
}
;
_.createLargeRingFragment = function createLargeRingFragment(f, ringAtom, ringBond){
  var FIRST_RING_SIZE, LAST_RING_SIZE, bit, bondAngle, bondEConstraint, bondParity, bondZConstraint, bondZList, cAngleCorrection, cBondZList, correction, i, i0, inverted, isRightTurn, isSymmetrical, maxBit, newBondZList, rightTurns, ringIndex, rotation, tempZList, wasRightTurn, zList;
  FIRST_RING_SIZE = 9;
  LAST_RING_SIZE = 25;
  cAngleCorrection = stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 2), {4:1, 1:1, 8:1}, 14, 0, [stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [20]), null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [0, 10]), null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [-4, 12]), stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [0, 0, -7.5]), null, null, null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [narrow_int(60 / 7), narrow_int(-60 / 7)]), null, null, null, stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [-2.4])]);
  cBondZList = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 2), {31:1, 4:1, 1:1, 8:1}, 6, 0, [stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [146]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [627]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2457, 1170]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [2451, 8643, 2519]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [9362, 14798]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [34377, -2147448999, 26214]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [37449, 137313, 95703, 34371, 37815, 54891, 132867, -2147309741, 54857, 55129, -2147449005, -2147449065]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [530697, 531819, 899169, 137289, 694617, -2146951863, -2146952797, -2146939175, -2146929547, -2146929564, -2146625111, -2146931799, -2146940503, -2146931935]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [1007293, 610915]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [542985, 137283, 2122017, 530691, 2206773, -2144711351, 219209, 2840841, 137555, -2146871031, -2147264167, 613705, -2145360543, -2146625271, 694611, 2454837, -2145356703, -2147345133, -2146928951, -2146931805, -2144641719, -2146951869, -2146625237, -2146624183, 2841963, 1074905, -2146625117, 2799955, -2144723645, 138583, 859225, -2145264843, -2145216253, -2146624149, -2144700727, -2146928917, -2143905527, -2144045771, -2146789097, 2288547, 544407, 2104323, -2146911977, -2144479405, 3633737, -2146870089, -2146952169]), null, stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [8487297, 2172633, 2116611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8829813]), stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [14071213])]);
  maxBit = 1 << f.size_1();
  bondEConstraint = 0;
  bondZConstraint = 0;
  if (f.size_1() > 7) {
    for (i = 0; i < f.size_1(); i++) {
      bondParity = this.getLargeRingBondParity(ringAtom, ringBond, i);
      if (bondParity == 1)
        bondEConstraint += maxBit;
      else if (bondParity == 2)
        bondZConstraint += maxBit;
      bondEConstraint >>>= 1;
      bondZConstraint >>>= 1;
    }
  }
  ringIndex = f.size_1() - 9;
  if (f.size_1() >= 9 && f.size_1() <= 25 && jsNotEquals(cBondZList[ringIndex], null)) {
    for (zList = 0; zList < cBondZList[ringIndex].length; zList++) {
      isSymmetrical = (-2147483648 & cBondZList[ringIndex][zList]) == 0;
      bondZList = 2147483647 & cBondZList[ringIndex][zList];
      for (inverted = false; !inverted; inverted = !inverted) {
        if (inverted) {
          if (isSymmetrical)
            break;
          newBondZList = 0;
          for (bit = 1; bit != maxBit; bit <<= 1) {
            newBondZList <<= 1;
            if ((bondZList & bit) != 0)
              newBondZList |= 1;
          }
          bondZList = newBondZList;
        }
        for (rotation = 0; rotation < f.size_1(); rotation++) {
          if ((bondZList & bondEConstraint) == 0 && (~bondZList & bondZConstraint) == 0) {
            bondAngle = 0;
            correction = 3.141592653589793 / 180 * (jsEquals(cAngleCorrection[ringIndex], null)?0:cAngleCorrection[ringIndex][zList]);
            rightTurns = 0;
            tempZList = bondZList;
            isRightTurn = true;
            for (i0 = 0; i0 < f.size_1(); i0++) {
              if (isRightTurn)
                rightTurns++;
              if ((tempZList & 1) == 0)
                isRightTurn = !isRightTurn;
              tempZList >>>= 1;
            }
            wasRightTurn = rightTurns > narrow_int(f.size_1() / 2);
            for (i = 1; i < f.size_1(); i++) {
              f.mAtomX[i] = f.mAtomX[i - 1] + $wnd.Math.sin(bondAngle);
              f.mAtomY[i] = f.mAtomY[i - 1] + $wnd.Math.cos(bondAngle);
              if ((bondZList & 1) == 0)
                wasRightTurn = !wasRightTurn;
              bondAngle += correction + (wasRightTurn?3.141592653589793 / 3:-3.141592653589793 / 3);
              bondZList >>>= 1;
            }
            return;
          }
          if ((bondZList & 1) != 0)
            bondZList |= maxBit;
          bondZList >>>= 1;
        }
      }
    }
  }
  this.createRegularRingFragment_0(f, bondEConstraint, bondZConstraint);
}
;
_.createMetalBondAssociations = function createMetalBondAssociations(){
  var associationList, atom1, atom2, atomIndex1, atomIndex2, bond, f1, f2, fa, temp;
  associationList = null;
  fa = null;
  for (bond = 0; bond < this.mMol.getBonds_0(); bond++) {
    if (this.mMol.getBondType_0(bond) == 32) {
      atom1 = this.mMol.getBondAtom_0(0, bond);
      atomIndex1 = -1;
      f1 = 0;
      for (; f1 < this.mFragmentList.size(); f1++) {
        atomIndex1 = castTo(this.mFragmentList.getAtIndex(f1), 19).getLocalAtom(atom1);
        if (atomIndex1 != -1)
          break;
      }
      atom2 = this.mMol.getBondAtom_0(1, bond);
      atomIndex2 = -1;
      f2 = 0;
      for (; f2 < this.mFragmentList.size(); f2++) {
        atomIndex2 = castTo(this.mFragmentList.getAtIndex(f2), 19).getLocalAtom(atom2);
        if (atomIndex2 != -1)
          break;
      }
      if (f1 != f2) {
        if (f1 > f2) {
          temp = f1;
          f1 = f2;
          f2 = temp;
          temp = atomIndex1;
          atomIndex1 = atomIndex2;
          atomIndex2 = temp;
        }
        if (jsEquals(fa, null))
          fa = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_FragmentAssociation_2_classLit, {4:1, 1:1, 8:1}, 576, this.mFragmentList.size(), 0, 2);
        if (jsEquals(fa[f2], null))
          setCheck(fa, f2, initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_FragmentAssociation_2_classLit, {576:1, 4:1, 1:1, 8:1}, 56, f2, 0, 1));
        if (isNotNull(fa[f2][f1]))
          fa[f2][f1].add_2(atomIndex1, atomIndex2);
        else {
          setCheck(fa[f2], f1, new carcc2.FragmentAssociation_0(castTo(this.mFragmentList.getAtIndex(f1), 19), castTo(this.mFragmentList.getAtIndex(f2), 19), atomIndex1, atomIndex2));
          if (isNull(associationList))
            associationList = new ju.ArrayList;
          associationList.add(fa[f2][f1]);
        }
      }
    }
  }
  return associationList;
}
;
_.createRegularRingFragment = function createRegularRingFragment(f){
  var angleChange, i;
  angleChange = 3.141592653589793 - 3.141592653589793 * (f.size_1() - 2) / f.size_1();
  for (i = 1; i < f.size_1(); i++) {
    f.mAtomX[i] = f.mAtomX[i - 1] + $wnd.Math.sin(angleChange * (i - 1));
    f.mAtomY[i] = f.mAtomY[i - 1] + $wnd.Math.cos(angleChange * (i - 1));
  }
}
;
_.createRegularRingFragment_0 = function createRegularRingFragment_0(f, bondEConstraint, bondZConstraint){
  var angleChange, bitMinus1, bitMinus2, bitPlus1, currentBit, i, i0, i1, index_0, moveToCenter, offset, priority, shift_0, startIndex, startPriority;
  if (bondEConstraint == 0 || (bondEConstraint & bondZConstraint) != 0) {
    this.createRegularRingFragment(f);
    return;
  }
  startIndex = -1;
  startPriority = 0;
  bitMinus2 = 1 << f.size_1() - 2;
  bitMinus1 = 1 << f.size_1() - 1;
  currentBit = 1;
  bitPlus1 = 2;
  for (i0 = 0; i0 < f.size_1(); i0++) {
    if ((bondZConstraint & (bitMinus1 | currentBit)) == 0 && (bondEConstraint & (bitMinus1 | currentBit)) != 0 && (bondEConstraint & bitMinus2) == 0) {
      priority = 0;
      if ((bondZConstraint & bitMinus2) != 0)
        priority += 4;
      if ((bondEConstraint & bitMinus1) != 0)
        priority += 2;
      if ((bondEConstraint & currentBit) != 0)
        priority += 1;
      if (startPriority < priority) {
        startPriority = priority;
        startIndex = i0;
      }
    }
    bitMinus2 = bitMinus1;
    bitMinus1 = currentBit;
    currentBit = bitPlus1;
    bitPlus1 = 1 << (i0 + 2 < f.size_1()?i0 + 2:i0 + 2 - f.size_1());
  }
  if (startIndex == -1) {
    this.createRegularRingFragment(f);
    return;
  }
  moveToCenter = 0;
  moveToCenter |= 1 << startIndex;
  offset = 2;
  while (offset < f.size_1() - 1) {
    index_0 = startIndex + offset < f.size_1()?startIndex + offset:startIndex + offset - f.size_1();
    bitMinus1 = 1 << (index_0 == 0?f.size_1() - 1:index_0 - 1);
    if ((bondZConstraint & bitMinus1) != 0) {
      offset++;
      continue;
    }
    currentBit = 1 << index_0;
    if ((bondEConstraint & bitMinus1) != 0) {
      if ((bondZConstraint & currentBit) != 0) {
        this.createRegularRingFragment(f);
        return;
      }
      moveToCenter |= currentBit;
      offset += 2;
      continue;
    }
    bitPlus1 = 1 << (index_0 + 1 < f.size_1()?index_0 + 1:index_0 + 1 - f.size_1());
    if ((bondEConstraint & currentBit) != 0 && (bondZConstraint & bitPlus1) != 0) {
      moveToCenter |= currentBit;
      offset += 3;
      continue;
    }
    offset++;
  }
  if (moveToCenter == 0) {
    this.createRegularRingFragment(f);
    return;
  }
  angleChange = 3.141592653589793 - 3.141592653589793 * (f.size_1() - 2) / f.size_1();
  for (i1 = 1; i1 < f.size_1(); i1++) {
    f.mAtomX[i1] = f.mAtomX[i1 - 1] + $wnd.Math.sin(angleChange * (i1 - 1));
    f.mAtomY[i1] = f.mAtomY[i1 - 1] + $wnd.Math.cos(angleChange * (i1 - 1));
  }
  currentBit = 1;
  shift_0 = 2 * $wnd.Math.sin(angleChange / 2);
  for (i = 0; i < f.size_1(); i++) {
    if ((moveToCenter & currentBit) != 0) {
      f.mAtomX[i] += shift_0 * $wnd.Math.cos(angleChange * (i - 0.5));
      f.mAtomY[i] -= shift_0 * $wnd.Math.sin(angleChange * (i - 0.5));
    }
    currentBit <<= 1;
  }
}
;
_.getAngleDif_0 = function getAngleDif_0(angle1, angle2){
  var angleDif;
  angleDif = angle1 - angle2;
  while (angleDif < -3.141592653589793)
    angleDif += 2 * 3.141592653589793;
  while (angleDif > 3.141592653589793)
    angleDif -= 2 * 3.141592653589793;
  return angleDif;
}
;
_.getConnAtoms_1 = function getConnAtoms_0(f, atom){
  var connAtoms, i;
  connAtoms = 0;
  for (i = 0; i < this.mMol.getAllConnAtoms_0(atom); i++) {
    if (f.isMember(this.mMol.getConnAtom_0(atom, i)))
      connAtoms++;
  }
  return connAtoms;
}
;
_.getFusedFragment = function getFusedFragment(f1, f2, commonAtom){
  var angle1, angle2, angleInc, index1, index2;
  index1 = f1.getLocalAtom(commonAtom);
  index2 = f2.getLocalAtom(commonAtom);
  f2.translate(f1.mAtomX[index1] - f2.mAtomX[index2], f1.mAtomY[index1] - f2.mAtomY[index2]);
  angle1 = this.suggestNewBondAngle(f1, commonAtom);
  angle2 = this.suggestNewBondAngle(f2, commonAtom);
  angleInc = 0;
  if (this.getConnAtoms_1(f1, commonAtom) == 1 && this.getConnAtoms_1(f2, commonAtom) == 1)
    angleInc = 3.141592653589793 / 3;
  f2.rotate(f2.mAtomX[index2], f2.mAtomY[index2], angle1 - angle2 + angleInc + 3.141592653589793);
  return this.getMergedFragment(f1, f2, 1);
}
;
_.getFusedFragment_0 = function getFusedFragment_0(f1, f2, commonAtom, commonAtoms){
  var angleDif, angleDifFlip, connAtom, connIndex, f1Angle, f1NeighbourAngle, f2Angle, f2NeighbourAngle, f2NeighbourAngleFlip, i, i0, i1, i2, i3, index1, index2, j, meanAngleDif, meanAngleDifFlip, meanNeighbourAngleF1, meanNeighbourAngleF2, meanNeighbourAngleF2Flip, meanX1, meanX2, meanY1, meanY2, neighbourAngle, neighbourCountF1, neighbourCountF2;
  index1 = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, commonAtoms, 15, 1);
  index2 = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, commonAtoms, 15, 1);
  for (i0 = 0; i0 < commonAtoms; i0++) {
    index1[i0] = f1.getLocalAtom(commonAtom[i0]);
    index2[i0] = f2.getLocalAtom(commonAtom[i0]);
  }
  meanX1 = 0;
  meanY1 = 0;
  meanX2 = 0;
  meanY2 = 0;
  for (i1 = 0; i1 < commonAtoms; i1++) {
    meanX1 += f1.mAtomX[index1[i1]];
    meanY1 += f1.mAtomY[index1[i1]];
    meanX2 += f2.mAtomX[index2[i1]];
    meanY2 += f2.mAtomY[index2[i1]];
  }
  meanX1 /= commonAtoms;
  meanY1 /= commonAtoms;
  meanX2 /= commonAtoms;
  meanY2 /= commonAtoms;
  f2.translate(meanX1 - meanX2, meanY1 - meanY2);
  f1Angle = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, commonAtoms, 0, 1);
  f2Angle = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, commonAtoms, 0, 1);
  angleDif = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, commonAtoms, 0, 1);
  angleDifFlip = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, commonAtoms, 0, 1);
  for (i2 = 0; i2 < commonAtoms; i2++) {
    setCheck(f1Angle, i2, new carcc2.InventorAngle_0(meanX1, meanY1, f1.mAtomX[index1[i2]], f1.mAtomY[index1[i2]]));
    setCheck(f2Angle, i2, new carcc2.InventorAngle_0(meanX1, meanY1, f2.mAtomX[index2[i2]], f2.mAtomY[index2[i2]]));
    setCheck(angleDif, i2, new carcc2.InventorAngle(f1Angle[i2].mAngle - f2Angle[i2].mAngle, f1Angle[i2].mLength * f2Angle[i2].mLength));
    setCheck(angleDifFlip, i2, new carcc2.InventorAngle(f1Angle[i2].mAngle + f2Angle[i2].mAngle, f1Angle[i2].mLength * f2Angle[i2].mLength));
  }
  meanAngleDif = carcc2.getMeanAngle(angleDif, commonAtoms);
  meanAngleDifFlip = carcc2.getMeanAngle(angleDifFlip, commonAtoms);
  neighbourCountF1 = 0;
  neighbourCountF2 = 0;
  for (i3 = 0; i3 < commonAtoms; i3++) {
    for (j = 0; j < this.mMol.getAllConnAtoms_0(commonAtom[i3]); j++) {
      connAtom = this.mMol.getConnAtom_0(commonAtom[i3], j);
      if (f1.isMember(connAtom) && !f2.isMember(connAtom))
        neighbourCountF1++;
      if (!f1.isMember(connAtom) && f2.isMember(connAtom))
        neighbourCountF2++;
    }
  }
  f1NeighbourAngle = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, neighbourCountF1, 0, 1);
  f2NeighbourAngle = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, neighbourCountF2, 0, 1);
  f2NeighbourAngleFlip = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, neighbourCountF2, 0, 1);
  neighbourCountF1 = 0;
  neighbourCountF2 = 0;
  for (i = 0; i < commonAtoms; i++) {
    for (j = 0; j < this.mMol.getAllConnAtoms_0(commonAtom[i]); j++) {
      connAtom = this.mMol.getConnAtom_0(commonAtom[i], j);
      if (f1.isMember(connAtom) && !f2.isMember(connAtom)) {
        connIndex = f1.getLocalAtom(connAtom);
        setCheck(f1NeighbourAngle, neighbourCountF1, new carcc2.InventorAngle_0(f1.mAtomX[index1[i]], f1.mAtomY[index1[i]], f1.mAtomX[connIndex], f1.mAtomY[connIndex]));
        neighbourCountF1++;
      }
      if (!f1.isMember(connAtom) && f2.isMember(connAtom)) {
        connIndex = f2.getLocalAtom(connAtom);
        neighbourAngle = new carcc2.InventorAngle_0(f2.mAtomX[index2[i]], f2.mAtomY[index2[i]], f2.mAtomX[connIndex], f2.mAtomY[connIndex]);
        setCheck(f2NeighbourAngle, neighbourCountF2, new carcc2.InventorAngle(meanAngleDif.mAngle + neighbourAngle.mAngle, neighbourAngle.mLength));
        setCheck(f2NeighbourAngleFlip, neighbourCountF2, new carcc2.InventorAngle(meanAngleDifFlip.mAngle - neighbourAngle.mAngle, neighbourAngle.mLength));
        neighbourCountF2++;
      }
    }
  }
  meanNeighbourAngleF1 = carcc2.getMeanAngle(f1NeighbourAngle, neighbourCountF1);
  meanNeighbourAngleF2 = carcc2.getMeanAngle(f2NeighbourAngle, neighbourCountF2);
  meanNeighbourAngleF2Flip = carcc2.getMeanAngle(f2NeighbourAngleFlip, neighbourCountF2);
  if ($wnd.Math.abs(this.getAngleDif_0(meanNeighbourAngleF1.mAngle, meanNeighbourAngleF2.mAngle)) > $wnd.Math.abs(this.getAngleDif_0(meanNeighbourAngleF1.mAngle, meanNeighbourAngleF2Flip.mAngle))) {
    f2.rotate(meanX1, meanY1, meanAngleDif.mAngle);
  }
   else {
    f2.flip(meanX1, meanY1, 0);
    f2.rotate(meanX1, meanY1, meanAngleDifFlip.mAngle);
  }
  return this.getMergedFragment(f1, f2, commonAtoms);
}
;
_.getLargeRingBondParity = function getLargeRingBondParity(ringAtom, ringBond, index_0){
  var bondParity, higherIndex, highestIndex, lowerIndex, sharedRing1, sharedRing2;
  higherIndex = index_0 == ringAtom.length - 1?0:index_0 + 1;
  lowerIndex = index_0 == 0?ringAtom.length - 1:index_0 - 1;
  highestIndex = higherIndex == ringAtom.length - 1?0:higherIndex + 1;
  if (this.mMol.getBondOrder_0(ringBond[index_0]) == 2) {
    bondParity = this.mMol.getBondParity_0(ringBond[index_0]);
    if (bondParity == 1 || bondParity == 2) {
      if (this.isLowestIndexNeighbour(ringAtom[lowerIndex], ringAtom[index_0], ringAtom[higherIndex]) ^ this.isLowestIndexNeighbour(ringAtom[highestIndex], ringAtom[higherIndex], ringAtom[index_0]))
        bondParity = bondParity == 1?2:1;
      return bondParity;
    }
  }
  if (this.mMol.isSmallRingBond_0(ringBond[index_0])) {
    sharedRing1 = this.mMol.getRingSet_0().getSharedRing_0(ringBond[lowerIndex], ringBond[index_0]);
    sharedRing2 = this.mMol.getRingSet_0().getSharedRing_0(ringBond[higherIndex], ringBond[index_0]);
    if (sharedRing1 != -1 || sharedRing2 != -1)
      return sharedRing1 == sharedRing2?2:1;
  }
  return 0;
}
;
_.getLongestUnhandledChain = function getLongestUnhandledChain(atom){
  var candidate, current, graphAtom, graphBond, graphLevel, graphParent, highest, i, index_0, j, theBond, theChain;
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphParent = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphAtom[0] = atom;
  graphLevel[atom] = 1;
  graphParent[0] = -1;
  current = 0;
  highest = 0;
  while (current <= highest) {
    if (current == 0 || !this.mAtomHandled[graphAtom[current]]) {
      for (i = 0; i < this.mMol.getAllConnAtoms_0(graphAtom[current]); i++) {
        candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
        theBond = this.mMol.getConnBond_0(graphAtom[current], i);
        if (graphLevel[candidate] == 0 && !this.mBondHandled[theBond]) {
          graphAtom[++highest] = candidate;
          graphBond[highest] = theBond;
          graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
          graphParent[highest] = current;
        }
      }
    }
    if (current == highest) {
      theChain = new carcc2.InventorChain(graphLevel[graphAtom[current]]);
      index_0 = current;
      for (j = 0; j < theChain.getChainLength(); j++) {
        theChain.mAtom[j] = graphAtom[index_0];
        theChain.mBond[j] = graphBond[index_0];
        index_0 = graphParent[index_0];
      }
      return theChain;
    }
    current++;
  }
  return null;
}
;
_.getMaxPriorityAssociation = function getMaxPriorityAssociation(associationList){
  var association, association$iterator, maxFA, maxPriority;
  maxPriority = 0;
  maxFA = null;
  for (association$iterator = associationList.iterator(); association$iterator.hasNext_0();) {
    association = castTo(association$iterator.next_3(), 56);
    if (maxPriority < association.getPriority()) {
      maxPriority = association.getPriority();
      maxFA = association;
    }
  }
  return maxFA;
}
;
_.getMergedFragment = function getMergedFragment(f1, f2, commonAtoms){
  var count, f, i, i0, index_0;
  f = new carcc2.InventorFragment(this.mMol, f1.mGlobalAtom.length + f2.mGlobalAtom.length - commonAtoms, this.mMode);
  count = 0;
  for (i0 = 0; i0 < f1.mGlobalAtom.length; i0++) {
    f.mGlobalAtom[count] = f1.mGlobalAtom[i0];
    f.mPriority[count] = f1.mPriority[i0];
    f.mAtomX[count] = f1.mAtomX[i0];
    f.mAtomY[count++] = f1.mAtomY[i0];
  }
  for (i = 0; i < f2.mGlobalAtom.length; i++) {
    index_0 = f1.getLocalAtom(f2.mGlobalAtom[i]);
    if (index_0 == -1) {
      f.mGlobalAtom[count] = f2.mGlobalAtom[i];
      f.mPriority[count] = f2.mPriority[i];
      f.mAtomX[count] = f2.mAtomX[i];
      f.mAtomY[count++] = f2.mAtomY[i];
    }
     else {
      if (f.mPriority[index_0] < f2.mPriority[i]) {
        f.mPriority[index_0] = f2.mPriority[i];
        f.mAtomX[index_0] = f2.mAtomX[i];
        f.mAtomY[index_0] = f2.mAtomY[i];
      }
    }
  }
  return f;
}
;
_.getShortestConnection = function getShortestConnection(atom1, atom2){
  var bondSequence, candidate, chainLength, current, graphAtom, graphBond, graphLevel, graphParent, highest, i, j, theBond;
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphParent = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphAtom[0] = atom2;
  graphLevel[atom2] = 1;
  graphParent[0] = -1;
  current = 0;
  highest = 0;
  while (current <= highest) {
    for (i = 0; i < this.mMol.getAllConnAtoms_0(graphAtom[current]); i++) {
      candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
      theBond = this.mMol.getConnBond_0(graphAtom[current], i);
      if (candidate == atom1) {
        chainLength = graphLevel[graphAtom[current]];
        bondSequence = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, chainLength, 15, 1);
        bondSequence[0] = theBond;
        for (j = 1; j < chainLength; j++) {
          bondSequence[j] = graphBond[current];
          current = graphParent[current];
        }
        return bondSequence;
      }
      if (graphLevel[candidate] == 0) {
        graphAtom[++highest] = candidate;
        graphBond[highest] = theBond;
        graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
        graphParent[highest] = current;
      }
    }
    if (current == highest)
      return null;
    current++;
  }
  return null;
}
;
_.getSmallestRingFromBond = function getSmallestRingFromBond(bond){
  var atom1, atom2, candidate, current, graphAtom, graphBond, graphLevel, graphParent, highest, i, index_0, j, theRing;
  atom1 = this.mMol.getBondAtom_0(0, bond);
  atom2 = this.mMol.getBondAtom_0(1, bond);
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphParent = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphAtom[0] = atom1;
  graphAtom[1] = atom2;
  graphBond[1] = bond;
  graphLevel[atom1] = 1;
  graphLevel[atom2] = 2;
  graphParent[0] = -1;
  graphParent[1] = 0;
  current = 1;
  highest = 1;
  while (current <= highest) {
    for (i = 0; i < this.mMol.getAllConnAtoms_0(graphAtom[current]); i++) {
      candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
      if (current > 1 && candidate == atom1) {
        theRing = new carcc2.InventorChain(graphLevel[graphAtom[current]]);
        graphBond[0] = this.mMol.getConnBond_0(graphAtom[current], i);
        index_0 = current;
        for (j = 0; j < theRing.getChainLength(); j++) {
          theRing.mAtom[j] = graphAtom[index_0];
          theRing.mBond[j] = graphBond[index_0];
          index_0 = graphParent[index_0];
        }
        return theRing;
      }
      if (graphLevel[candidate] == 0 && this.mMol.isRingAtom_0(candidate)) {
        graphAtom[++highest] = candidate;
        graphBond[highest] = this.mMol.getConnBond_0(graphAtom[current], i);
        graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
        graphParent[highest] = current;
      }
    }
    current++;
  }
  return null;
}
;
_.getSmallestRingSize = function getSmallestRingSize(atom1, atom2, atom3){
  var candidate, current, graphAtom, graphLevel, highest, i;
  graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphLevel = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  graphAtom[0] = atom2;
  graphAtom[1] = atom1;
  graphLevel[atom2] = 1;
  graphLevel[atom1] = 2;
  current = 1;
  highest = 1;
  while (current <= highest) {
    for (i = 0; i < this.mMol.getAllConnAtoms_0(graphAtom[current]); i++) {
      candidate = this.mMol.getConnAtom_0(graphAtom[current], i);
      if (candidate == atom3)
        return 1 + graphLevel[graphAtom[current]];
      if (graphLevel[candidate] == 0 && this.mMol.isRingAtom_0(candidate)) {
        graphAtom[++highest] = candidate;
        graphLevel[candidate] = graphLevel[graphAtom[current]] + 1;
      }
    }
    current++;
  }
  return 0;
}
;
_.invent = function invent(mol){
  this.invent_0(mol, null);
}
;
_.invent_0 = function invent_0(mol, ffp){
  var atom, f, f$iterator, i, j, paritiesPresent;
  paritiesPresent = (mol.getHelperArrayStatus_0() & 7) != 0;
  if (isNull(this.mRandom))
    this.mRandom = new ju.Random;
  if ((this.mMode & 2) != 0)
    mol.removeExplicitHydrogens_0();
  this.mMol = mol;
  this.mMol.ensureHelperArrays_0(3);
  this.mFFP = ffp;
  this.mFragmentList = new ju.ArrayList;
  this.mAtomHandled = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 16, 1);
  this.mBondHandled = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAllBonds_0(), 16, 1);
  this.mUnPairedCharge = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++)
    this.mUnPairedCharge[atom] = this.mMol.getAtomCharge_0(atom);
  if ((this.mMode & 12) != 0)
    this.locateMarkedFragments();
  if (isNotNull(this.mCustomTemplateList))
    this.mAtomIsPartOfCustomTemplate = this.locateTemplateFragments(this.mCustomTemplateList, 512);
  if ((this.mMode & 1) == 0 && isNotNull(carcc2.sDefaultTemplateList))
    this.locateTemplateFragments(carcc2.sDefaultTemplateList, 256);
  this.locateInitialFragments();
  this.joinOverlappingFragments();
  this.locateChainFragments();
  this.joinOverlappingFragments();
  for (f$iterator = this.mFragmentList.iterator(); f$iterator.hasNext_0();) {
    f = castTo(f$iterator.next_3(), 19);
    f.locateBonds();
  }
  this.correctChainEZParities();
  this.optimizeFragments();
  this.locateSingleAtoms();
  this.joinMetalBondedFragments();
  this.joinChargedFragments();
  this.joinRemainingFragments();
  for (i = 0; i < this.mFragmentList.size(); i++) {
    f = castTo(this.mFragmentList.getAtIndex(i), 19);
    for (j = 0; j < f.size_1(); j++) {
      this.mMol.setAtomX_0(f.mGlobalAtom[j], f.mAtomX[j]);
      this.mMol.setAtomY_0(f.mGlobalAtom[j], f.mAtomY[j]);
      this.mMol.setAtomZ_0(f.mGlobalAtom[j], 0);
    }
  }
  if (paritiesPresent)
    this.mMol.setStereoBondsFromParity_0();
}
;
_.isLowestIndexNeighbour = function isLowestIndexNeighbour(atom, rootAtom, excludeAtom){
  var connAtom, i;
  for (i = 0; i < this.mMol.getConnAtoms_0(rootAtom); i++) {
    connAtom = this.mMol.getConnAtom_0(rootAtom, i);
    if (connAtom != excludeAtom && connAtom < atom)
      return false;
  }
  return true;
}
;
_.joinAssociatedFragments = function joinAssociatedFragments(association, minDistance){
  var mergedFragment;
  association.arrange(minDistance, (this.mMode & 12) != 0);
  mergedFragment = this.getMergedFragment(association.getFragment(0), association.getFragment(1), 0);
  this.updateFragmentList(association.getFragment(0), association.getFragment(1), mergedFragment);
}
;
_.joinChargedFragments = function joinChargedFragments(){
  var association;
  association = this.createChargeAssociation();
  while (isNotNull(association)) {
    this.joinAssociatedFragments(association, 1.5);
    association = this.createChargeAssociation();
  }
}
;
_.joinFragments = function joinFragments(f1, f2, commonAtoms){
  var commonAtom, count, i, j, joinedFragment;
  commonAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, commonAtoms, 15, 1);
  count = 0;
  for (i = 0; i < f1.mGlobalAtom.length; i++)
    for (j = 0; j < f2.mGlobalAtom.length; j++)
      if (f1.mGlobalAtom[i] == f2.mGlobalAtom[j])
        commonAtom[count++] = f1.mGlobalAtom[i];
  joinedFragment = commonAtoms == 1?this.getFusedFragment(f1, f2, commonAtom[0]):this.getFusedFragment_0(f1, f2, commonAtom, commonAtoms);
  this.updateFragmentList(f1, f2, joinedFragment);
}
;
_.joinMetalBondedFragments = function joinMetalBondedFragments(){
  var association, associationList;
  associationList = this.createMetalBondAssociations();
  while (isNotNull(associationList)) {
    association = this.getMaxPriorityAssociation(associationList);
    this.joinAssociatedFragments(association, 1.2);
    associationList = this.createMetalBondAssociations();
  }
}
;
_.joinOverlappingFragments = function joinOverlappingFragments(){
  var commonAtom, commonAtoms, f1, f2, handlePreferred, i, j, joinPriority, k, k0, k1, l, maxCommonAtoms, maxF1Priority, maxF2Priority, maxFragment1, maxFragment2, maxJoinPriority;
  while (true) {
    maxJoinPriority = 0;
    maxCommonAtoms = 0;
    maxFragment1 = null;
    maxFragment2 = null;
    for (i = 1; i < this.mFragmentList.size(); i++) {
      f1 = castTo(this.mFragmentList.getAtIndex(i), 19);
      for (j = 0; j < i; j++) {
        f2 = castTo(this.mFragmentList.getAtIndex(j), 19);
        commonAtom = 0;
        commonAtoms = 0;
        maxF1Priority = 0;
        maxF2Priority = 0;
        for (k0 = 0; k0 < f1.size_1(); k0++) {
          for (l = 0; l < f2.size_1(); l++) {
            if (f1.mGlobalAtom[k0] == f2.mGlobalAtom[l]) {
              commonAtoms++;
              commonAtom = f1.mGlobalAtom[k0];
              if (maxF1Priority < f1.mPriority[k0])
                maxF1Priority = f1.mPriority[k0];
              if (maxF2Priority < f2.mPriority[l])
                maxF2Priority = f2.mPriority[l];
            }
          }
        }
        if (commonAtoms > 0) {
          handlePreferred = commonAtoms == 1 && this.getConnAtoms_1(f1, commonAtom) == 1 && this.getConnAtoms_1(f2, commonAtom) == 1?0:1;
          if (maxF1Priority > maxF2Priority)
            joinPriority = (handlePreferred << 24) + (maxF1Priority << 16) + (maxF2Priority << 8) + commonAtoms;
          else 
            joinPriority = (handlePreferred << 24) + (maxF2Priority << 16) + (maxF1Priority << 8) + commonAtoms;
          if (maxJoinPriority < joinPriority) {
            maxJoinPriority = joinPriority;
            maxCommonAtoms = commonAtoms;
            maxF1Priority = 0;
            maxF2Priority = 0;
            for (k1 = 0; k1 < f1.size_1(); k1++)
              if (maxF1Priority < f1.mPriority[k1])
                maxF1Priority = f1.mPriority[k1];
            for (k = 0; k < f2.size_1(); k++)
              if (maxF2Priority < f2.mPriority[k])
                maxF2Priority = f2.mPriority[k];
            if (maxF1Priority > maxF2Priority) {
              maxFragment1 = f1;
              maxFragment2 = f2;
            }
             else {
              maxFragment1 = f2;
              maxFragment2 = f1;
            }
          }
        }
      }
    }
    if (maxJoinPriority == 0)
      break;
    if (maxCommonAtoms == maxFragment1.size_1())
      this.mFragmentList.remove(maxFragment1);
    else if (maxCommonAtoms == maxFragment2.size_1())
      this.mFragmentList.remove(maxFragment2);
    else 
      this.joinFragments(maxFragment1, maxFragment2, maxCommonAtoms);
  }
}
;
_.joinRemainingFragments = function joinRemainingFragments(){
  var association;
  association = this.createDisconnectedAssociation();
  while (isNotNull(association)) {
    this.joinAssociatedFragments(association, 1.8);
    association = this.createDisconnectedAssociation();
  }
}
;
_.locateChainFragments = function locateChainFragments(){
  var atom, f, i, i0, longestChain, theChain, unhandledBonds;
  while (true) {
    longestChain = null;
    for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
      unhandledBonds = 0;
      for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom); i0++)
        if (!this.mBondHandled[this.mMol.getConnBond_0(atom, i0)])
          unhandledBonds++;
      if (unhandledBonds == 1) {
        theChain = this.getLongestUnhandledChain(atom);
        if (isNull(longestChain) || theChain.getChainLength() > longestChain.getChainLength())
          longestChain = theChain;
      }
    }
    if (isNull(longestChain))
      break;
    f = new carcc2.InventorFragment(this.mMol, longestChain.getChainLength(), this.mMode);
    for (i = 0; i < longestChain.getChainLength(); i++) {
      this.mAtomHandled[longestChain.mAtom[i]] = true;
      if (i < longestChain.getChainLength() - 1)
        this.mBondHandled[longestChain.mBond[i]] = true;
      f.mGlobalAtom[i] = longestChain.mAtom[i];
      f.mAtomX[i] = $wnd.Math.cos(3.141592653589793 / 6) * i;
      f.mAtomY[i] = (i & 1) == 1?0:0.5;
      f.mPriority[i] = 128 + longestChain.getChainLength();
    }
    this.mFragmentList.add(f);
  }
}
;
_.locateFlipBonds = function locateFlipBonds(bondFlipPriority, atomSymRank){
  var atom1, atom2, bond, bondAtom, connAtom, connSymRank, i, j, oneBondEndIsSymmetric, symmetricEndFound;
  for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
    atom1 = this.mMol.getBondAtom_0(0, bond);
    atom2 = this.mMol.getBondAtom_0(1, bond);
    if (this.mMol.isRingBond_0(bond) || this.mMol.getBondOrder_0(bond) != 1 || this.mMol.getAllConnAtoms_0(atom1) == 1 || this.mMol.getAllConnAtoms_0(atom2) == 1)
      continue;
    if ((this.mMode & 4) != 0 && this.mMol.isMarkedAtom_0(atom1) && this.mMol.isMarkedAtom_0(atom2))
      continue;
    oneBondEndIsSymmetric = false;
    for (i = 0; i < 2; i++) {
      bondAtom = this.mMol.getBondAtom_0(i, bond);
      if (this.mMol.getAllConnAtoms_0(bondAtom) > 2) {
        symmetricEndFound = true;
        connSymRank = -1;
        for (j = 0; j < this.mMol.getAllConnAtoms_0(bondAtom); j++) {
          connAtom = this.mMol.getConnAtom_0(bondAtom, j);
          if (connAtom != this.mMol.getBondAtom_0(1 - i, bond)) {
            if (connSymRank == -1)
              connSymRank = atomSymRank[connAtom];
            else if (connSymRank != atomSymRank[connAtom])
              symmetricEndFound = false;
          }
        }
        if (symmetricEndFound) {
          oneBondEndIsSymmetric = true;
          break;
        }
      }
    }
    if (!oneBondEndIsSymmetric) {
      if ((this.mMode & 8) != 0 && this.mMol.isMarkedAtom_0(atom1) && this.mMol.isMarkedAtom_0(atom2))
        bondFlipPriority[bond] = 1;
      else 
        bondFlipPriority[bond] = 2;
    }
  }
}
;
_.locateInitialFragments = function locateInitialFragments(){
  var alleneAtom, atom, atom0, atom1, atom2, bond, bond0, bond1, connAtom, count, current, f, found, i, i0, i1, isElementaryRing, j, j0, j1, last, members, nextIndex, primaryConnAtom, primaryConnBond, primaryConns, ringAtom, ringBond, ringNo, ringSet, ringSize, skipRing, temp, theRing;
  for (atom0 = 0; atom0 < this.mMol.getAllAtoms_0(); atom0++) {
    if (this.mMol.getAllConnAtoms_0(atom0) > 4) {
      f = new carcc2.InventorFragment(this.mMol, 1 + this.mMol.getAllConnAtoms_0(atom0), this.mMode);
      f.mAtomX[this.mMol.getAllConnAtoms_0(atom0)] = 0;
      f.mAtomY[this.mMol.getAllConnAtoms_0(atom0)] = 0;
      f.mPriority[this.mMol.getAllConnAtoms_0(atom0)] = 32;
      f.mGlobalAtom[this.mMol.getAllConnAtoms_0(atom0)] = atom0;
      this.mAtomHandled[atom0] = true;
      for (i = 0; i < this.mMol.getAllConnAtoms_0(atom0); i++) {
        connAtom = this.mMol.getConnAtom_0(atom0, i);
        f.mAtomX[i] = $wnd.Math.sin(3.141592653589793 / 3 * i - 3.141592653589793 / 3 * 2);
        f.mAtomY[i] = $wnd.Math.cos(3.141592653589793 / 3 * i - 3.141592653589793 / 3 * 2);
        f.mPriority[i] = 32;
        f.mGlobalAtom[i] = connAtom;
        this.mAtomHandled[connAtom] = true;
        this.mBondHandled[this.mMol.getConnBond_0(atom0, i)] = true;
      }
      this.mFragmentList.add(f);
    }
  }
  ringSet = this.mMol.getRingSet_0();
  for (ringNo = 0; ringNo < ringSet.getSize_0(); ringNo++) {
    ringSize = ringSet.getRingSize_0(ringNo);
    ringAtom = ringSet.getRingAtoms_0(ringNo);
    skipRing = false;
    if ((this.mMode & 12) != 0) {
      skipRing = true;
      for (i = 0; i < ringSize; i++) {
        if (!this.mMol.isMarkedAtom_0(ringAtom[i])) {
          skipRing = false;
          break;
        }
      }
    }
    if (!skipRing) {
      isElementaryRing = false;
      for (i0 = 0; i0 < ringSize; i0++) {
        if (this.mMol.getAtomRingSize_0(ringAtom[i0]) == ringSize) {
          isElementaryRing = true;
          break;
        }
      }
      if (isElementaryRing) {
        ringBond = ringSet.getRingBonds_0(ringNo);
        this.addRingFragment(ringAtom, ringBond);
        for (i = 0; i < ringSize; i++) {
          this.mAtomHandled[ringAtom[i]] = true;
          this.mBondHandled[ringBond[i]] = true;
        }
      }
    }
  }
  for (bond0 = 0; bond0 < this.mMol.getAllBonds_0(); bond0++) {
    if (this.mMol.isRingBond_0(bond0) && !this.mBondHandled[bond0]) {
      theRing = this.getSmallestRingFromBond(bond0);
      ringAtom = theRing.getRingAtoms_1();
      ringBond = theRing.getRingBonds_2();
      this.addRingFragment(ringAtom, ringBond);
      for (i = 0; i < theRing.getChainLength(); i++) {
        this.mAtomHandled[ringAtom[i]] = true;
        this.mBondHandled[ringBond[i]] = true;
      }
    }
  }
  for (bond1 = 0; bond1 < this.mMol.getAllBonds_0(); bond1++) {
    if (!this.mBondHandled[bond1] && this.mMol.getBondOrder_0(bond1) == 3) {
      atom1 = this.mMol.getBondAtom_0(0, bond1);
      atom2 = this.mMol.getBondAtom_0(1, bond1);
      members = this.mMol.getAllConnAtoms_0(atom1) + this.mMol.getAllConnAtoms_0(atom2);
      if (members > 2) {
        f = new carcc2.InventorFragment(this.mMol, members, this.mMode);
        count = 0;
        for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom1); i0++) {
          connAtom = this.mMol.getConnAtom_0(atom1, i0);
          if (connAtom != atom2) {
            f.mGlobalAtom[count++] = connAtom;
            this.mAtomHandled[connAtom] = true;
            this.mBondHandled[this.mMol.getConnBond_0(atom1, i0)] = true;
          }
        }
        f.mGlobalAtom[count++] = atom1;
        f.mGlobalAtom[count++] = atom2;
        for (i1 = 0; i1 < this.mMol.getAllConnAtoms_0(atom2); i1++) {
          connAtom = this.mMol.getConnAtom_0(atom2, i1);
          if (connAtom != atom1) {
            f.mGlobalAtom[count++] = connAtom;
            this.mAtomHandled[connAtom] = true;
            this.mBondHandled[this.mMol.getConnBond_0(atom2, i1)] = true;
          }
        }
        for (i = 0; i < members; i++) {
          f.mAtomX[i] = i;
          f.mAtomY[i] = 0;
          f.mPriority[i] = 1;
        }
        this.mAtomHandled[atom1] = true;
        this.mAtomHandled[atom2] = true;
        this.mBondHandled[bond1] = true;
        this.mFragmentList.add(f);
      }
    }
  }
  for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
    if (!this.mBondHandled[bond] && this.mMol.getBondOrder_0(bond) == 2) {
      alleneAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
      for (i = 0; i < 2; i++) {
        alleneAtom[0] = this.mMol.getBondAtom_0(i, bond);
        alleneAtom[1] = this.mMol.getBondAtom_0(1 - i, bond);
        if (this.mMol.getAtomPi_0(alleneAtom[0]) == 1 && this.mMol.getAtomPi_0(alleneAtom[1]) == 2 && this.mMol.getAllConnAtoms_0(alleneAtom[1]) == 2) {
          this.mAtomHandled[alleneAtom[0]] = true;
          this.mAtomHandled[alleneAtom[1]] = true;
          this.mBondHandled[bond] = true;
          last = 1;
          do {
            nextIndex = this.mMol.getConnAtom_0(alleneAtom[last], 0) == alleneAtom[last - 1]?1:0;
            alleneAtom[last + 1] = this.mMol.getConnAtom_0(alleneAtom[last], nextIndex);
            if (this.mMol.getAtomPi_0(alleneAtom[last + 1]) == 2 && this.mMol.getAllConnAtoms_0(alleneAtom[last + 1]) > 2)
              break;
            this.mAtomHandled[alleneAtom[last + 1]] = true;
            this.mBondHandled[this.mMol.getConnBond_0(alleneAtom[last], nextIndex)] = true;
            last++;
          }
           while (this.mMol.getAtomPi_0(alleneAtom[last]) == 2 && this.mMol.getAllConnAtoms_0(alleneAtom[last]) == 2);
          members = this.mMol.getAllConnAtoms_0(alleneAtom[0]) + this.mMol.getAllConnAtoms_0(alleneAtom[last]) + last - 1;
          f = new carcc2.InventorFragment(this.mMol, members, this.mMode);
          for (j0 = 0; j0 <= last; j0++) {
            f.mAtomX[j0] = j0;
            f.mAtomY[j0] = 0;
            f.mPriority[j0] = 64;
            f.mGlobalAtom[j0] = alleneAtom[j0];
          }
          current = last + 1;
          found = false;
          for (j1 = 0; j1 < this.mMol.getAllConnAtoms_0(alleneAtom[0]); j1++) {
            connAtom = this.mMol.getConnAtom_0(alleneAtom[0], j1);
            if (connAtom != alleneAtom[1]) {
              f.mAtomX[current] = -0.5;
              f.mAtomY[current] = found?$wnd.Math.sin(3.141592653589793 / 3):-$wnd.Math.sin(3.141592653589793 / 3);
              f.mPriority[current] = 64;
              f.mGlobalAtom[current] = connAtom;
              current++;
              found = true;
            }
          }
          found = false;
          for (j = 0; j < this.mMol.getAllConnAtoms_0(alleneAtom[last]); j++) {
            connAtom = this.mMol.getConnAtom_0(alleneAtom[last], j);
            if (connAtom != alleneAtom[last - 1]) {
              f.mAtomX[current] = last + 0.5;
              f.mAtomY[current] = found?-$wnd.Math.sin(3.141592653589793 / 3):$wnd.Math.sin(3.141592653589793 / 3);
              f.mPriority[current] = 64;
              f.mGlobalAtom[current] = connAtom;
              current++;
              found = true;
            }
          }
          this.mFragmentList.add(f);
        }
      }
    }
  }
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    if (this.mMol.getAllConnAtoms_0(atom) == 4) {
      primaryConnAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
      primaryConnBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 4, 15, 1);
      primaryConns = 0;
      for (i0 = 0; i0 < 4; i0++) {
        primaryConnAtom[primaryConns] = this.mMol.getConnAtom_0(atom, i0);
        primaryConnBond[primaryConns] = this.mMol.getConnBond_0(atom, i0);
        if (this.mMol.getAllConnAtoms_0(primaryConnAtom[primaryConns]) == 1 && !this.mBondHandled[primaryConnBond[primaryConns]])
          primaryConns++;
      }
      if (primaryConns == 2) {
        f = new carcc2.InventorFragment(this.mMol, 3, this.mMode);
        for (i = 0; i < 2; i++) {
          this.mAtomHandled[primaryConnAtom[i]] = true;
          this.mBondHandled[primaryConnBond[i]] = true;
          f.mGlobalAtom[i] = primaryConnAtom[i];
          f.mPriority[i] = 32;
        }
        f.mAtomX[0] = -0.5;
        f.mAtomY[0] = 0.866;
        f.mAtomX[1] = 0.5;
        f.mAtomY[1] = 0.866;
        f.mAtomX[2] = 0;
        f.mAtomY[2] = 0;
        f.mPriority[2] = 32;
        f.mGlobalAtom[2] = atom;
        this.mFragmentList.add(f);
      }
      if (primaryConns == 3) {
        for (i1 = 0; i1 < 2; i1++) {
          if (this.mMol.getBondOrder_0(primaryConnBond[i1]) == 1) {
            temp = primaryConnAtom[i1];
            primaryConnAtom[i1] = primaryConnAtom[2];
            primaryConnAtom[2] = temp;
            temp = primaryConnBond[i1];
            primaryConnBond[i1] = primaryConnBond[2];
            primaryConnBond[2] = temp;
          }
        }
        f = new carcc2.InventorFragment(this.mMol, 4, this.mMode);
        for (i = 0; i < 3; i++) {
          this.mAtomHandled[primaryConnAtom[i]] = true;
          this.mBondHandled[primaryConnBond[i]] = true;
          f.mGlobalAtom[i] = primaryConnAtom[i];
          f.mPriority[i] = 32;
        }
        f.mAtomX[0] = -1;
        f.mAtomY[0] = 0;
        f.mAtomX[1] = 1;
        f.mAtomY[1] = 0;
        f.mAtomX[2] = 0;
        f.mAtomY[2] = 1;
        f.mAtomX[3] = 0;
        f.mAtomY[3] = 0;
        f.mPriority[3] = 32;
        f.mGlobalAtom[3] = atom;
        this.mFragmentList.add(f);
      }
    }
  }
}
;
_.locateMarkedFragments = function locateMarkedFragments(){
  var atom, atom0, atom1, atomIndex, avbl, bond, bondCount, coreFragmentCount, f, f0, f1, f2, fragment, fragmentAtomCount, fragmentNo, maxFragment, maxFragmentAtoms;
  bondCount = 0;
  avbl = 0;
  for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++) {
    if (this.mMol.isMarkedAtom_0(this.mMol.getBondAtom_0(0, bond)) && this.mMol.isMarkedAtom_0(this.mMol.getBondAtom_0(1, bond))) {
      this.mBondHandled[bond] = true;
      avbl += this.mMol.getBondLength_0(bond);
      bondCount++;
    }
  }
  if (bondCount == 0 || avbl == 0)
    return;
  avbl /= bondCount;
  for (atom0 = 0; atom0 < this.mMol.getAllAtoms_0(); atom0++) {
    if (this.mMol.isMarkedAtom_0(atom0)) {
      if (this.mMol.getAllConnAtomsPlusMetalBonds_0(atom0) == 0)
        this.mMol.setAtomMarker_0(atom0, false);
      else 
        this.mAtomHandled[atom0] = true;
    }
  }
  fragmentNo = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  coreFragmentCount = this.mMol.getFragmentNumbers_0(fragmentNo, true, true);
  fragmentAtomCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, coreFragmentCount, 15, 1);
  for (atom1 = 0; atom1 < this.mMol.getAllAtoms_0(); atom1++)
    if (fragmentNo[atom1] != -1)
      fragmentAtomCount[fragmentNo[atom1]]++;
  fragment = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorFragment_2_classLit, {4:1, 1:1, 8:1}, 19, coreFragmentCount, 0, 1);
  for (f0 = 0; f0 < coreFragmentCount; f0++)
    setCheck(fragment, f0, new carcc2.InventorFragment(this.mMol, fragmentAtomCount[f0], this.mMode));
  atomIndex = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, coreFragmentCount, 15, 1);
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    f1 = fragmentNo[atom];
    if (f1 != -1) {
      fragment[f1].mPriority[atomIndex[f1]] = 1024;
      fragment[f1].mGlobalAtom[atomIndex[f1]] = atom;
      fragment[f1].mAtomX[atomIndex[f1]] = this.mMol.getAtomX_1(atom) / avbl;
      fragment[f1].mAtomY[atomIndex[f1]] = this.mMol.getAtomY_1(atom) / avbl;
      atomIndex[f1]++;
    }
  }
  maxFragment = -1;
  maxFragmentAtoms = 0;
  for (f2 = 0; f2 < coreFragmentCount; f2++) {
    if (maxFragmentAtoms < fragmentAtomCount[f2]) {
      maxFragmentAtoms = fragmentAtomCount[f2];
      maxFragment = f2;
    }
  }
  this.mFragmentList.add(fragment[maxFragment]);
  for (f = 0; f < coreFragmentCount; f++)
    if (f != maxFragment)
      this.mFragmentList.add(fragment[f]);
}
;
_.locateSingleAtoms = function locateSingleAtoms(){
  var atom, f;
  for (atom = 0; atom < this.mMol.getAllAtoms_0(); atom++) {
    if (!this.mMol.isMarkedAtom_0(atom) && this.mMol.getAllConnAtoms_0(atom) == 0) {
      f = new carcc2.InventorFragment(this.mMol, 1, this.mMode);
      this.mAtomHandled[atom] = true;
      f.mGlobalAtom[0] = atom;
      f.mAtomX[0] = 0;
      f.mAtomY[0] = 0;
      f.mPriority[0] = 0;
      this.mFragmentList.add(f);
    }
  }
}
;
_.locateTemplateFragments = function locateTemplateFragments(templateList, priority){
  var atom, atom$array, atom$index, atom$max, atomIsPartOfTemplate, fragment, i, match_0, match$iterator, matchList, searcher, searcherWithIndex, template, template$iterator, templateAtomCount, useFFP;
  useFFP = jsNotEquals(this.mFFP, null) && templateList.size() != 0 && jsNotEquals(castTo(templateList.getAtIndex(0), 103).getFFP(), null);
  searcher = null;
  searcherWithIndex = null;
  if (useFFP) {
    searcherWithIndex = new carc.SSSearcherWithIndex;
    searcherWithIndex.setMolecule_2(this.mMol, this.mFFP);
  }
   else {
    searcher = new carc.SSSearcher;
    searcher.setMolecule_0(this.mMol);
  }
  atomIsPartOfTemplate = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAtoms_0(), 16, 1);
  for (template$iterator = templateList.iterator(); template$iterator.hasNext_0();) {
    template = castTo(template$iterator.next_3(), 103);
    matchList = null;
    if (useFFP) {
      searcherWithIndex.setFragment_3(template.getFragment_0(), template.getFFP());
      if (searcherWithIndex.findFragmentInMolecule(3, 8) != 0)
        matchList = searcherWithIndex.getMatchList();
    }
     else {
      searcher.setFragment_1(template.getFragment_0());
      if (searcher.findFragmentInMolecule(3, 8) != 0)
        matchList = searcher.getMatchList();
    }
    if (isNotNull(matchList)) {
      for (match$iterator = matchList.iterator(); match$iterator.hasNext_0();) {
        match_0 = castTo(match$iterator.next_3(), 6);
        templateAtomCount = 0;
        for (atom$array = match_0 , atom$index = 0 , atom$max = atom$array.length; atom$index < atom$max; ++atom$index) {
          atom = atom$array[atom$index];
          if (atomIsPartOfTemplate[atom])
            templateAtomCount++;
        }
        if (templateAtomCount <= 1) {
          fragment = new carcc2.InventorFragment(this.mMol, match_0.length, this.mMode);
          for (i = 0; i < match_0.length; i++) {
            atom = match_0[i];
            fragment.mPriority[i] = priority;
            fragment.mGlobalAtom[i] = atom;
            fragment.mAtomX[i] = template.getNormalizedAtomX(i);
            fragment.mAtomY[i] = template.getNormalizedAtomY(i);
            atomIsPartOfTemplate[atom] = true;
            this.mAtomHandled[atom] = true;
          }
          this.mFragmentList.add(fragment);
        }
      }
    }
  }
  return atomIsPartOfTemplate;
}
;
_.optimizeFragments = function optimizeFragments(){
  var atomSymRank, availableBond, availableBonds, bond, bondFlipPriority, bondSequence, collidingAtom, collisionList, collisionNo, currentRank, f, flip, fragmentNo, i, lastBond, minCollisionFragment, minCollisionPanalty, nextAvailableRank, theBond, theRank;
  atomSymRank = this.calculateAtomSymmetries();
  bondFlipPriority = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, this.mMol.getAllBonds_0(), 15, 1);
  this.locateFlipBonds(bondFlipPriority, atomSymRank);
  for (bond = 0; bond < this.mMol.getAllBonds_0(); bond++)
    if (bondFlipPriority[bond] == 2 && (this.mMol.isRingAtom_0(this.mMol.getBondAtom_0(0, bond)) || this.mMol.isRingAtom_0(this.mMol.getBondAtom_0(1, bond))))
      bondFlipPriority[bond] = 3;
  for (fragmentNo = 0; fragmentNo < this.mFragmentList.size(); fragmentNo++) {
    f = castTo(this.mFragmentList.getAtIndex(fragmentNo), 19);
    collisionList = f.getCollisionList();
    minCollisionPanalty = f.getCollisionPanalty();
    minCollisionFragment = new carcc2.InventorFragment_0(f, this.mMode);
    lastBond = -1;
    for (flip = 0; flip < 224 && collisionList.size() != 0; flip++) {
      collisionNo = this.mRandom.nextInt_0(collisionList.size());
      collidingAtom = castTo(collisionList.getAtIndex(collisionNo), 6);
      bondSequence = this.getShortestConnection(collidingAtom[0], collidingAtom[1]);
      availableBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, bondSequence.length, 15, 1);
      availableBonds = 0;
      if (flip < 32) {
        for (i = 1; i < bondSequence.length - 1; i++)
          if (bondFlipPriority[bondSequence[i]] == 3)
            availableBond[availableBonds++] = bondSequence[i];
      }
       else if (flip < 32 + 64) {
        for (i = 1; i < bondSequence.length - 1; i++)
          if (bondFlipPriority[bondSequence[i]] >= 2)
            availableBond[availableBonds++] = bondSequence[i];
      }
       else {
        for (i = 1; i < bondSequence.length - 1; i++)
          if (bondFlipPriority[bondSequence[i]] >= 1)
            availableBond[availableBonds++] = bondSequence[i];
      }
      if (availableBonds != 0) {
        theBond = availableBond[0];
        if (availableBonds > 1) {
          do {
            theBond = availableBond[this.mRandom.nextInt_0(availableBonds)];
          }
           while (theBond == lastBond);
        }
        if (theBond != lastBond) {
          lastBond = theBond;
          f.flipOneSide(theBond);
          collisionList = f.getCollisionList();
          if (minCollisionPanalty > f.getCollisionPanalty()) {
            minCollisionPanalty = f.getCollisionPanalty();
            minCollisionFragment = new carcc2.InventorFragment_0(f, this.mMode);
          }
        }
      }
    }
    this.mFragmentList.setAtIndex(fragmentNo, minCollisionFragment);
    f = minCollisionFragment;
    currentRank = 1;
    do {
      nextAvailableRank = 9999;
      for (i = 0; i < f.size_1(); i++) {
        theRank = atomSymRank[f.mGlobalAtom[i]];
        if (theRank == currentRank)
          f.optimizeAtomCoordinates(i);
        else if (theRank > currentRank && theRank < nextAvailableRank)
          nextAvailableRank = theRank;
      }
      currentRank = nextAvailableRank;
    }
     while (nextAvailableRank != 9999);
  }
}
;
_.setRandomSeed = function setRandomSeed(seed){
  this.mRandom = new ju.Random_0(seed);
}
;
_.suggestNewBondAngle = function suggestNewBondAngle(f, atom){
  var angleDif, connAngle, connAngles, connAtom, connBond, i, i0, i1, index_0, j, maxAngleDif, maxIndex, ringSize, rootIndex, tempAngle, tempAtom, tempBond;
  connAngle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, this.mMol.getAllConnAtoms_0(atom) + 1, 15, 1);
  connAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllConnAtoms_0(atom) + 1, 15, 1);
  connBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllConnAtoms_0(atom) + 1, 15, 1);
  rootIndex = f.getLocalAtom(atom);
  connAngles = 0;
  for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(atom); i0++) {
    connAtom[connAngles] = this.mMol.getConnAtom_0(atom, i0);
    connBond[connAngles] = this.mMol.getConnBond_0(atom, i0);
    index_0 = f.getLocalAtom(connAtom[connAngles]);
    if (index_0 != -1)
      connAngle[connAngles++] = carcc2.getAngle_0(f.mAtomX[rootIndex], f.mAtomY[rootIndex], f.mAtomX[index_0], f.mAtomY[index_0]);
  }
  if (connAngles == 1)
    return connAngle[0] + 3.141592653589793;
  for (i1 = connAngles - 1; i1 > 0; i1--) {
    for (j = 0; j < i1; j++) {
      if (connAngle[j] > connAngle[j + 1]) {
        tempAngle = connAngle[j];
        connAngle[j] = connAngle[j + 1];
        connAngle[j + 1] = tempAngle;
        tempAtom = connAtom[j];
        connAtom[j] = connAtom[j + 1];
        connAtom[j + 1] = tempAtom;
        tempBond = connBond[j];
        connBond[j] = connBond[j + 1];
        connBond[j + 1] = tempBond;
      }
    }
  }
  connAngle[connAngles] = connAngle[0] + 2 * 3.141592653589793;
  connAtom[connAngles] = connAtom[0];
  connBond[connAngles] = connBond[0];
  maxAngleDif = -100;
  maxIndex = 0;
  for (i = 0; i < connAngles; i++) {
    angleDif = connAngle[i + 1] - connAngle[i];
    if (connAngles > 2 && this.mMol.isRingBond_0(connBond[i]) && this.mMol.isRingBond_0(connBond[i + 1])) {
      ringSize = this.getSmallestRingSize(connAtom[i], atom, connAtom[i + 1]);
      if (ringSize != 0)
        angleDif -= 100 - ringSize;
    }
    if (maxAngleDif < angleDif) {
      maxAngleDif = angleDif;
      maxIndex = i;
    }
  }
  return (connAngle[maxIndex] + connAngle[maxIndex + 1]) / 2;
}
;
_.updateFragmentList = function updateFragmentList(fOld1, fOld2, fJoined){
  var index_0;
  index_0 = $wnd.Math.min(this.mFragmentList.indexOf(fOld1), this.mFragmentList.indexOf(fOld2));
  this.mFragmentList.addAtIndex(index_0, fJoined);
  this.mFragmentList.remove(fOld1);
  this.mFragmentList.remove(fOld2);
}
;
_.mMode = 0;
carcc2.FLIP_AS_LAST_RESORT = 1;
carcc2.FLIP_POSSIBLE = 2;
carcc2.FLIP_PREFERRED = 3;
carcc2.LAST_RESORT_FLIPS = 128;
carcc2.MODE_CONSIDER_MARKED_ATOMS = 0;
carcc2.MODE_KEEP_MARKED_ATOM_COORDS = 4;
carcc2.MODE_PREFER_MARKED_ATOM_COORDS = 8;
carcc2.MODE_REMOVE_HYDROGEN = 2;
carcc2.MODE_SKIP_DEFAULT_TEMPLATES = 1;
carcc2.POSSIBLE_FLIPS = 64;
carcc2.PREFERRED_FLIPS = 32;
carcc2.TOTAL_FLIPS = 0;
cggl.Lcom_actelion_research_chem_coords_CoordinateInventor_2_classLit = createForClass('com.actelion.research.chem.coords', 'CoordinateInventor', 88, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_CoordinateInventor$1 = function $clinit_CoordinateInventor$1(){
  carcc2.$clinit_CoordinateInventor$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
carcc2.CoordinateInventor$1 = function CoordinateInventor$1(this$0){
  carcc2.$clinit_CoordinateInventor$1();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_40();
}
;
defineClass(223, 1, {1:1, 26:1}, carcc2.CoordinateInventor$1);
_.$init_40 = function $init_40(){
}
;
_.compare_0 = function compare_9(o1, o2){
  return this.compare_3(castTo(o1, 35), castTo(o2, 35));
}
;
_.equals_0 = function equals_5(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_3 = function compare_8(o1, o2){
  var c1, c2;
  c1 = $wnd.Math.abs(o1.charge);
  c2 = $wnd.Math.abs(o2.charge);
  return c1 < c2?-1:c1 == c2?0:1;
}
;
cggl.Lcom_actelion_research_chem_coords_CoordinateInventor$1_2_classLit = createForClass('com.actelion.research.chem.coords', 'CoordinateInventor/1', 223, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_CoordinateInventor$2 = function $clinit_CoordinateInventor$2(){
  carcc2.$clinit_CoordinateInventor$2 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
carcc2.CoordinateInventor$2 = function CoordinateInventor$2(this$0){
  carcc2.$clinit_CoordinateInventor$2();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_41();
}
;
defineClass(224, 1, {1:1, 26:1}, carcc2.CoordinateInventor$2);
_.$init_41 = function $init_41(){
}
;
_.compare_0 = function compare_11(o1, o2){
  return this.compare_3(castTo(o1, 35), castTo(o2, 35));
}
;
_.equals_0 = function equals_6(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_3 = function compare_10(o1, o2){
  var c1, c2;
  c1 = o1.fragment_0.size_1();
  c2 = o1.fragment_0.size_1();
  return c1 < c2?1:c1 == c2?0:-1;
}
;
cggl.Lcom_actelion_research_chem_coords_CoordinateInventor$2_2_classLit = createForClass('com.actelion.research.chem.coords', 'CoordinateInventor/2', 224, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_CoordinateInventor$3 = function $clinit_CoordinateInventor$3(){
  carcc2.$clinit_CoordinateInventor$3 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
carcc2.CoordinateInventor$3 = function CoordinateInventor$3(this$0){
  carcc2.$clinit_CoordinateInventor$3();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_42();
}
;
defineClass(225, 1, {1:1, 26:1}, carcc2.CoordinateInventor$3);
_.$init_42 = function $init_42(){
}
;
_.compare_0 = function compare_13(o1, o2){
  return this.compare_3(castTo(o1, 35), castTo(o2, 35));
}
;
_.equals_0 = function equals_7(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_3 = function compare_12(o1, o2){
  var c1, c2;
  c1 = o1.fragment_0.size_1();
  c2 = o1.fragment_0.size_1();
  return c1 < c2?-1:c1 == c2?0:1;
}
;
cggl.Lcom_actelion_research_chem_coords_CoordinateInventor$3_2_classLit = createForClass('com.actelion.research.chem.coords', 'CoordinateInventor/3', 225, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_FragmentAssociation = function $clinit_FragmentAssociation(){
  carcc2.$clinit_FragmentAssociation = emptyMethod;
  jl.$clinit_Object();
}
;
carcc2.FragmentAssociation = function FragmentAssociation(f1, f2){
  carcc2.$clinit_FragmentAssociation();
  var i, j;
  Object_0.call(this);
  this.$init_43();
  this.mFragment = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorFragment_2_classLit, {4:1, 1:1, 8:1}, 19, 2, 0, 1);
  setCheck(this.mFragment, 0, f1);
  setCheck(this.mFragment, 1, f2);
  this.mX = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 2, 15, 1);
  this.mY = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 2, 15, 1);
  this.mCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  for (i = 0; i < 2; i++) {
    for (j = 0; j < this.mFragment[i].size_1(); j++) {
      this.mX[i] += this.mFragment[i].getAtomX_1(j);
      this.mY[i] += this.mFragment[i].getAtomY_1(j);
    }
    this.mCount[i] = this.mFragment[i].size_1();
  }
}
;
carcc2.FragmentAssociation_0 = function FragmentAssociation_0(f1, f2, atomIndex1, atomIndex2){
  carcc2.$clinit_FragmentAssociation();
  Object_0.call(this);
  this.$init_43();
  this.mFragment = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorFragment_2_classLit, {4:1, 1:1, 8:1}, 19, 2, 0, 1);
  setCheck(this.mFragment, 0, f1);
  setCheck(this.mFragment, 1, f2);
  this.mX = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 2, 15, 1);
  this.mY = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 2, 15, 1);
  this.mX[0] = this.mFragment[0].getAtomX_1(atomIndex1);
  this.mY[0] = this.mFragment[0].getAtomY_1(atomIndex1);
  this.mX[1] = this.mFragment[1].getAtomX_1(atomIndex2);
  this.mY[1] = this.mFragment[1].getAtomY_1(atomIndex2);
  this.mCount = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
  this.mCount[0] = 1;
  this.mCount[1] = 1;
}
;
defineClass(56, 1, {56:1, 1:1}, carcc2.FragmentAssociation, carcc2.FragmentAssociation_0);
_.$init_43 = function $init_43(){
}
;
_.add_2 = function add_2(atomIndex1, atomIndex2){
  this.mX[0] += this.mFragment[0].getAtomX_1(atomIndex1);
  this.mY[0] += this.mFragment[0].getAtomY_1(atomIndex1);
  this.mX[1] += this.mFragment[1].getAtomX_1(atomIndex2);
  this.mY[1] += this.mFragment[1].getAtomY_1(atomIndex2);
  this.mCount[0]++;
  this.mCount[1]++;
}
;
_.arrange = function arrange(minDistance, keepFirstFragment){
  var angle, binCount, dx, dy, high, i, i0, i1, i2, i3, i4, i5, index_0, j, leftX, low, range, relY, yMax, yMin;
  angle = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 2, 15, 1);
  for (i0 = 0; i0 < 2; i0++) {
    this.mX[i0] /= this.mCount[i0];
    this.mY[i0] /= this.mCount[i0];
    angle[i0] = this.mFragment[i0].calculatePreferredAttachmentAngle(this.mX[i0], this.mY[i0], this.mFragment[1 - i0].size_1(), minDistance);
  }
  this.mFragment[0].rotate(this.mX[0], this.mY[0], 3.141592653589793 / 2 - angle[0]);
  this.mFragment[1].rotate(this.mX[1], this.mY[1], 3.141592653589793 * 3 / 2 - angle[1]);
  yMin = 1.7976931348623157E308;
  yMax = -1.7976931348623157E308;
  dy = this.mY[0] - this.mY[1];
  for (i1 = 0; i1 < this.mFragment[1].mAtomY.length; i1++) {
    this.mFragment[1].mAtomY[i1] += dy;
    if (yMin > this.mFragment[1].mAtomY[i1])
      yMin = this.mFragment[1].mAtomY[i1];
    if (yMax < this.mFragment[1].mAtomY[i1])
      yMax = this.mFragment[1].mAtomY[i1];
  }
  range = yMax - yMin + 2 * minDistance;
  binCount = round_int($wnd.Math.ceil(range));
  yMin += (range - binCount) / 2 - minDistance;
  leftX = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, binCount, 15, 1);
  for (i2 = 0; i2 < binCount; i2++)
    leftX[i2] = this.mX[1] + minDistance;
  for (i3 = 0; i3 < this.mFragment[1].mAtomY.length; i3++) {
    relY = this.mFragment[1].mAtomY[i3] - yMin;
    low = round_int(relY - minDistance);
    high = $wnd.Math.min(round_int(relY + minDistance), binCount - 1);
    for (j = low; j <= high; j++) {
      if (leftX[j] > this.mFragment[1].mAtomX[i3])
        leftX[j] = this.mFragment[1].mAtomX[i3];
    }
  }
  for (i4 = 0; i4 < binCount; i4++)
    leftX[i4] -= minDistance;
  dx = this.mX[0] - this.mX[1];
  for (i5 = 0; i5 < this.mFragment[0].mAtomX.length; i5++) {
    index_0 = round_int(this.mFragment[0].mAtomY[i5] - yMin);
    if (index_0 >= 0 && index_0 < leftX.length && dx < this.mFragment[0].mAtomX[i5] - leftX[index_0])
      dx = this.mFragment[0].mAtomX[i5] - leftX[index_0];
  }
  for (i = 0; i < this.mFragment[1].mAtomX.length; i++)
    this.mFragment[1].mAtomX[i] += dx;
  if (keepFirstFragment) {
    this.mFragment[0].rotate(this.mX[0], this.mY[0], angle[0] - 3.141592653589793 / 2);
    this.mFragment[1].rotate(this.mX[0], this.mY[0], angle[0] - 3.141592653589793 / 2);
  }
}
;
_.getFragment = function getFragment(i){
  return this.mFragment[i];
}
;
_.getPriority = function getPriority(){
  return this.mFragment[0].size_1() * this.mFragment[1].size_1();
}
;
cggl.Lcom_actelion_research_chem_coords_FragmentAssociation_2_classLit = createForClass('com.actelion.research.chem.coords', 'FragmentAssociation', 56, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_InventorAngle = function $clinit_InventorAngle(){
  carcc2.$clinit_InventorAngle = emptyMethod;
  jl.$clinit_Object();
}
;
carcc2.InventorAngle = function InventorAngle(angle, length_0){
  carcc2.$clinit_InventorAngle();
  Object_0.call(this);
  this.$init_44();
  this.mAngle = angle;
  this.mLength = length_0;
}
;
carcc2.InventorAngle_0 = function InventorAngle_0(x1, y1, x2, y2){
  carcc2.$clinit_InventorAngle();
  var xdif, ydif;
  Object_0.call(this);
  this.$init_44();
  this.mAngle = carcc2.getAngle_0(x1, y1, x2, y2);
  xdif = x2 - x1;
  ydif = y2 - y1;
  this.mLength = $wnd.Math.sqrt(xdif * xdif + ydif * ydif);
}
;
carcc2.getAngle_0 = function getAngle_0(x1, y1, x2, y2){
  carcc2.$clinit_InventorAngle();
  var angle, xdif, ydif;
  xdif = x2 - x1;
  ydif = y2 - y1;
  if (ydif != 0) {
    angle = $wnd.Math.atan(xdif / ydif);
    if (ydif < 0) {
      if (xdif < 0)
        angle -= 3.141592653589793;
      else 
        angle += 3.141592653589793;
    }
  }
   else 
    angle = xdif > 0?3.141592653589793 / 2:-3.141592653589793 / 2;
  return angle;
}
;
defineClass(25, 1, {25:1, 1:1}, carcc2.InventorAngle, carcc2.InventorAngle_0);
_.$init_44 = function $init_44(){
}
;
_.mAngle = 0;
_.mLength = 0;
cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit = createForClass('com.actelion.research.chem.coords', 'InventorAngle', 25, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_InventorChain = function $clinit_InventorChain(){
  carcc2.$clinit_InventorChain = emptyMethod;
  jl.$clinit_Object();
}
;
carcc2.InventorChain = function InventorChain(chainLength){
  carcc2.$clinit_InventorChain();
  Object_0.call(this);
  this.$init_45();
  this.mAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, chainLength, 15, 1);
  this.mBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, chainLength, 15, 1);
}
;
defineClass(157, 1, {1:1}, carcc2.InventorChain);
_.$init_45 = function $init_45(){
}
;
_.getChainLength = function getChainLength(){
  return this.mAtom.length;
}
;
_.getRingAtoms_1 = function getRingAtoms_0(){
  return this.mAtom;
}
;
_.getRingBonds_2 = function getRingBonds_1(){
  return this.mBond;
}
;
cggl.Lcom_actelion_research_chem_coords_InventorChain_2_classLit = createForClass('com.actelion.research.chem.coords', 'InventorChain', 157, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_InventorCharge = function $clinit_InventorCharge(){
  carcc2.$clinit_InventorCharge = emptyMethod;
  jl.$clinit_Object();
}
;
carcc2.InventorCharge = function InventorCharge(fragment, atom, charge){
  carcc2.$clinit_InventorCharge();
  Object_0.call(this);
  this.$init_46();
  this.fragment_0 = fragment;
  this.atom = atom;
  this.charge = charge;
}
;
defineClass(35, 1, {35:1, 1:1}, carcc2.InventorCharge);
_.$init_46 = function $init_46(){
}
;
_.atom = 0;
_.charge = 0;
cggl.Lcom_actelion_research_chem_coords_InventorCharge_2_classLit = createForClass('com.actelion.research.chem.coords', 'InventorCharge', 35, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Iterable = function $clinit_Iterable(){
  jl.$clinit_Iterable = emptyMethod;
}
;
jl.$forEach = function $forEach(this$static, action){
  var t, t$iterator;
  ji2.checkNotNull_0(action);
  for (t$iterator = this$static.iterator(); t$iterator.hasNext_0();) {
    t = t$iterator.next_3();
    action.accept_0(t);
  }
}
;
jl.$spliterator = function $spliterator(this$static){
  return ju.spliteratorUnknownSize(this$static.iterator(), 0);
}
;
cggl.Ljava_lang_Iterable_2_classLit = createForInterface('java.lang', 'Iterable');
ju.$clinit_Collection = function $clinit_Collection(){
  ju.$clinit_Collection = emptyMethod;
}
;
ju.$spliterator_0 = function $spliterator_0(this$static){
  return ju.spliterator_10(this$static, 0);
}
;
ju.$stream = function $stream(this$static){
  return jus.stream_1(this$static.spliterator_0(), false);
}
;
cggl.Ljava_util_Collection_2_classLit = createForInterface('java.util', 'Collection');
ju.$clinit_AbstractCollection = function $clinit_AbstractCollection(){
  ju.$clinit_AbstractCollection = emptyMethod;
  jl.$clinit_Object();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
}
;
ju.AbstractCollection = function AbstractCollection(){
  ju.$clinit_AbstractCollection();
  Object_0.call(this);
  this.$init_47();
}
;
defineClass(119, 1, {1:1, 22:1});
_.$init_47 = function $init_47(){
}
;
_.forEach = function forEach(action){
  jl.$forEach(this, action);
}
;
_.spliterator_0 = function spliterator_0(){
  return ju.$spliterator_0(this);
}
;
_.stream = function stream(){
  return ju.$stream(this);
}
;
_.add = function add_3(o){
  throw toJs(new jl.UnsupportedOperationException_0('Add not supported on this collection'));
}
;
_.addAll = function addAll(c){
  var changed, e, e$iterator;
  ji2.checkNotNull_0(c);
  changed = false;
  for (e$iterator = c.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_3();
    changed = changed | this.add(e);
  }
  return changed;
}
;
_.advanceToFind = function advanceToFind(o, remove){
  var e, iter;
  for (iter = this.iterator(); iter.hasNext_0();) {
    e = iter.next_3();
    if (ju.equals_31(o, e)) {
      if (remove) {
        iter.remove_1();
      }
      return true;
    }
  }
  return false;
}
;
_.clear = function clear_1(){
  var iter;
  for (iter = this.iterator(); iter.hasNext_0();) {
    iter.next_3();
    iter.remove_1();
  }
}
;
_.contains = function contains_0(o){
  return this.advanceToFind(o, false);
}
;
_.containsAll = function containsAll(c){
  var e, e$iterator;
  ji2.checkNotNull_0(c);
  for (e$iterator = c.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_3();
    if (!this.contains(e)) {
      return false;
    }
  }
  return true;
}
;
_.isEmpty = function isEmpty(){
  return this.size() == 0;
}
;
_.remove = function remove_0(o){
  return this.advanceToFind(o, true);
}
;
_.removeAll = function removeAll(c){
  var changed, iter, o;
  ji2.checkNotNull_0(c);
  changed = false;
  for (iter = this.iterator(); iter.hasNext_0();) {
    o = iter.next_3();
    if (c.contains(o)) {
      iter.remove_1();
      changed = true;
    }
  }
  return changed;
}
;
_.retainAll = function retainAll(c){
  var changed, iter, o;
  ji2.checkNotNull_0(c);
  changed = false;
  for (iter = this.iterator(); iter.hasNext_0();) {
    o = iter.next_3();
    if (!c.contains(o)) {
      iter.remove_1();
      changed = true;
    }
  }
  return changed;
}
;
_.toArray = function toArray_1(){
  return this.toArray_1(initUnidimensionalArray(cggl.Ljava_lang_Object_2_classLit, {4:1, 1:1, 8:1}, 1, this.size(), 5, 1));
}
;
_.toArray_1 = function toArray_2(a){
  var i, it, result, size_0;
  size_0 = this.size();
  if (a.length < size_0) {
    a = ji2.createFrom(a, size_0);
  }
  result = a;
  it = this.iterator();
  for (i = 0; i < size_0; ++i) {
    setCheck(result, i, it.next_3());
  }
  if (a.length > size_0) {
    setCheck(a, size_0, null);
  }
  return a;
}
;
_.toString_0 = function toString_5(){
  var e, e$iterator, joiner;
  joiner = new ju.StringJoiner_0(', ', '[', ']');
  for (e$iterator = this.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_3();
    joiner.add_4(e === this?'(this Collection)':valueOf_17(e));
  }
  return joiner.toString_0();
}
;
cggl.Ljava_util_AbstractCollection_2_classLit = createForClass('java.util', 'AbstractCollection', 119, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_List = function $clinit_List(){
  ju.$clinit_List = emptyMethod;
}
;
ju.$sort = function $sort(this$static, c){
  var a, i;
  a = this$static.toArray();
  ju.sort_7(a, castTo(c, 26));
  for (i = 0; i < a.length; i++) {
    this$static.setAtIndex(i, a[i]);
  }
}
;
ju.$spliterator_1 = function $spliterator_1(this$static){
  return ju.spliterator_10(this$static, 16);
}
;
cggl.Ljava_util_List_2_classLit = createForInterface('java.util', 'List');
ju.$clinit_AbstractList = function $clinit_AbstractList(){
  ju.$clinit_AbstractList = emptyMethod;
  ju.$clinit_AbstractCollection();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_List();
}
;
ju.AbstractList = function AbstractList(){
  ju.$clinit_AbstractList();
  ju.AbstractCollection.call(this);
  this.$init_48();
}
;
defineClass(100, 119, {1:1, 22:1, 44:1});
_.$init_48 = function $init_48(){
}
;
_.sort_0 = function sort_0(c){
  ju.$sort(this, c);
}
;
_.spliterator_0 = function spliterator_1(){
  return ju.$spliterator_1(this);
}
;
_.addAtIndex = function add_4(index_0, element){
  throw toJs(new jl.UnsupportedOperationException_0('Add not supported on this list'));
}
;
_.add = function add_5(obj){
  this.addAtIndex(this.size(), obj);
  return true;
}
;
_.addAllAtIndex = function addAll_0(index_0, c){
  var changed, e, e$iterator;
  ji2.checkNotNull_0(c);
  changed = false;
  for (e$iterator = c.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_3();
    this.addAtIndex(index_0++, e);
    changed = true;
  }
  return changed;
}
;
_.clear = function clear_2(){
  this.removeRange(0, this.size());
}
;
_.equals_0 = function equals_8(o){
  var elem, elem$iterator, elemOther, iterOther, other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 44)) {
    return false;
  }
  other = castTo(o, 44);
  if (this.size() != other.size()) {
    return false;
  }
  iterOther = other.iterator();
  for (elem$iterator = this.iterator(); elem$iterator.hasNext_0();) {
    elem = elem$iterator.next_3();
    elemOther = iterOther.next_3();
    if (!ju.equals_31(elem, elemOther)) {
      return false;
    }
  }
  return true;
}
;
_.hashCode_0 = function hashCode_1(){
  return ju.hashCode_27(this);
}
;
_.indexOf = function indexOf(toFind){
  var i, n;
  for (i = 0 , n = this.size(); i < n; ++i) {
    if (ju.equals_31(toFind, this.getAtIndex(i))) {
      return i;
    }
  }
  return -1;
}
;
_.iterator = function iterator_0(){
  return new ju.AbstractList$IteratorImpl(this);
}
;
_.lastIndexOf = function lastIndexOf(toFind){
  var i;
  for (i = this.size() - 1; i > -1; --i) {
    if (ju.equals_31(toFind, this.getAtIndex(i))) {
      return i;
    }
  }
  return -1;
}
;
_.listIterator = function listIterator(){
  return this.listIterator_0(0);
}
;
_.listIterator_0 = function listIterator_0(from){
  return new ju.AbstractList$ListIteratorImpl(this, from);
}
;
_.removeAtIndex = function remove_1(index_0){
  throw toJs(new jl.UnsupportedOperationException_0('Remove not supported on this list'));
}
;
_.removeRange = function removeRange(fromIndex, endIndex){
  var i, iter;
  iter = this.listIterator_0(fromIndex);
  for (i = fromIndex; i < endIndex; ++i) {
    iter.next_3();
    iter.remove_1();
  }
}
;
_.setAtIndex = function set_3(index_0, o){
  throw toJs(new jl.UnsupportedOperationException_0('Set not supported on this list'));
}
;
_.subList = function subList(fromIndex, toIndex){
  return new ju.AbstractList$SubList(this, fromIndex, toIndex);
}
;
cggl.Ljava_util_AbstractList_2_classLit = createForClass('java.util', 'AbstractList', 100, cggl.Ljava_util_AbstractCollection_2_classLit);
jl.$clinit_Cloneable = function $clinit_Cloneable(){
  jl.$clinit_Cloneable = emptyMethod;
}
;
cggl.Ljava_lang_Cloneable_2_classLit = createForInterface('java.lang', 'Cloneable');
ju.$clinit_RandomAccess = function $clinit_RandomAccess(){
  ju.$clinit_RandomAccess = emptyMethod;
}
;
cggl.Ljava_util_RandomAccess_2_classLit = createForInterface('java.util', 'RandomAccess');
ju.$clinit_ArrayList = function $clinit_ArrayList(){
  ju.$clinit_ArrayList = emptyMethod;
  ju.$clinit_AbstractList();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_List();
}
;
ju.ArrayList = function ArrayList(){
  ju.$clinit_ArrayList();
  ju.AbstractList.call(this);
  this.$init_49();
}
;
defineClass(18, 100, {4:1, 1:1, 22:1, 44:1, 82:1}, ju.ArrayList);
_.$init_49 = function $init_49(){
  this.array = castToArray(initUnidimensionalArray(cggl.Ljava_lang_Object_2_classLit, {4:1, 1:1, 8:1}, 1, 0, 5, 1));
}
;
_.addAtIndex = function add_6(index_0, o){
  ji2.checkPositionIndex(index_0, this.array.length);
  ji2.insertTo(this.array, index_0, o);
}
;
_.add = function add_7(o){
  setCheck(this.array, this.array.length, o);
  return true;
}
;
_.addAllAtIndex = function addAll_1(index_0, c){
  var cArray, len;
  ji2.checkPositionIndex(index_0, this.array.length);
  cArray = c.toArray();
  len = cArray.length;
  if (len == 0) {
    return false;
  }
  ji2.insertTo_0(this.array, index_0, cArray);
  return true;
}
;
_.addAll = function addAll_2(c){
  var cArray, len;
  cArray = c.toArray();
  len = cArray.length;
  if (len == 0) {
    return false;
  }
  ji2.insertTo_0(this.array, this.array.length, cArray);
  return true;
}
;
_.clear = function clear_3(){
  this.array = castToArray(initUnidimensionalArray(cggl.Ljava_lang_Object_2_classLit, {4:1, 1:1, 8:1}, 1, 0, 5, 1));
}
;
_.contains = function contains_1(o){
  return this.indexOf(o) != -1;
}
;
_.forEach = function forEach_0(consumer){
  var e, e$array, e$index, e$max;
  ji2.checkNotNull_0(consumer);
  for (e$array = this.array , e$index = 0 , e$max = e$array.length; e$index < e$max; ++e$index) {
    e = e$array[e$index];
    consumer.accept_0(e);
  }
}
;
_.getAtIndex = function get_0(index_0){
  ji2.checkElementIndex(index_0, this.array.length);
  return this.array[index_0];
}
;
_.indexOf = function indexOf_0(o){
  return this.indexOf_0(o, 0);
}
;
_.indexOf_0 = function indexOf_1(o, index_0){
  for (; index_0 < this.array.length; ++index_0) {
    if (ju.equals_31(o, this.array[index_0])) {
      return index_0;
    }
  }
  return -1;
}
;
_.isEmpty = function isEmpty_0(){
  return this.array.length == 0;
}
;
_.iterator = function iterator_1(){
  return new ju.ArrayList$1(this);
}
;
_.lastIndexOf = function lastIndexOf_0(o){
  return this.lastIndexOf_0(o, this.size() - 1);
}
;
_.lastIndexOf_0 = function lastIndexOf_1(o, index_0){
  for (; index_0 >= 0; --index_0) {
    if (ju.equals_31(o, this.array[index_0])) {
      return index_0;
    }
  }
  return -1;
}
;
_.removeAtIndex = function remove_2(index_0){
  var previous;
  previous = this.getAtIndex(index_0);
  ji2.removeFrom(this.array, index_0, 1);
  return previous;
}
;
_.remove = function remove_3(o){
  var i;
  i = this.indexOf(o);
  if (i == -1) {
    return false;
  }
  this.removeAtIndex(i);
  return true;
}
;
_.removeRange = function removeRange_0(fromIndex, endIndex){
  var count;
  ji2.checkPositionIndexes(fromIndex, endIndex, this.array.length);
  count = endIndex - fromIndex;
  ji2.removeFrom(this.array, fromIndex, count);
}
;
_.setAtIndex = function set_4(index_0, o){
  var previous;
  previous = this.getAtIndex(index_0);
  setCheck(this.array, index_0, o);
  return previous;
}
;
_.size = function size_1(){
  return this.array.length;
}
;
_.sort_0 = function sort_1(c){
  ju.sort_6(this.array, 0, this.array.length, c);
}
;
_.toArray = function toArray_3(){
  return ji2.clone(this.array, 0, this.array.length);
}
;
_.toArray_1 = function toArray_4(out){
  var i, size_0;
  size_0 = this.array.length;
  if (out.length < size_0) {
    out = ji2.createFrom(out, size_0);
  }
  for (i = 0; i < size_0; ++i) {
    setCheck(out, i, this.array[i]);
  }
  if (out.length > size_0) {
    setCheck(out, size_0, null);
  }
  return out;
}
;
cggl.Ljava_util_ArrayList_2_classLit = createForClass('java.util', 'ArrayList', 18, cggl.Ljava_util_AbstractList_2_classLit);
carcc2.$clinit_InventorDefaultTemplateList = function $clinit_InventorDefaultTemplateList(){
  carcc2.$clinit_InventorDefaultTemplateList = emptyMethod;
  ju.$clinit_ArrayList();
  carcc2.DEFAULT_TEMPLATE = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['gkvt@@@@LddTTTrbTRTRTRRRRRRRRRRRRRrVRrIh\\IAaQxlY@gRHdJCJcRXlv_CfJx|A\\hRHejiLaQjTje^kSjtFcIhvXmVKMjt{lN{Kavy\\^wGjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjh@@vo@HBC@PhLN@bPhtFKCcpDbILaRhtzCIbsX\\nOO`JDbqDjSKdJeJmQjtz}Ahr[LVkMnpz\\nwGj{PBhBdBlBBBjBfBnBaBiBeBmBcBkBgBoB`bhbdblbbbjbfbnbabibebmbcbkbgbob`RhRdRlRbRjRfRnRaRiReRmRcRkRgRoR`rhrdrlrbrjrfrnrarirermrcrkrgror`JhJdJlJbJjJfJnJaJiJeJmJcJkJgJoJ`jhjdjljbjjjfjnjajijej` !BnkjyVwsVr|iQn|Q|goTZWPIJwbudnRkVYBez]siZymNJZUqNFBqZWxS~iCXVU]SeRjwrtSPAjkvXLpBAZauDPzq]PfMlecrMnkv|@\\SFD`m|mWiEoCXp`SIe_J[l|[XCbloTV`[Gc@FJGopyyoOlFQfUy^w\\Bgz|', 'gcrt@@@@LdbbbbTRbRbRbRRRRRRRRRRRRVRrVQIA`HtRGAaIxZAHfShTjCIbqylQGKgqdBaXeQJeruBiPitZmFoPZLFSYbvZlVGMnsZ]vWSmr{]UUUUUUUUUUUUUUUUUUUUUUUUUUUUUT@@[G`DAA`HTFG@QHTZCEaqxBQDfPiTZ]AdqYlNWGgpEBQXbUIerEReVhuZ]^`tYMfKUfwX]NW[jkPBhBdBlBbBjBfBnBaBiBeBmBcBkBgBoB`bhbdblbbbjbfbnbabibebmbcbkbgbob`RhRdRlRbRjRfRnRaRiReRmRcRkRgRoR`rhrdrlrbrjrfrnrarirermrcrkrgror`JhJdJlJbJjJfJnJaJiJeJmJcJkJgJoJ`jhjdjljbjjjfjnjajij` !B^cR]`]Fm]QkfljE\\p\x7FUVfgOmFXsQe_gXPyXis_wF|vUUX_XbxpzU]HUFgYViwFo~@uemc@}~T\x7FIEPioYVwr]JnM~[ZEC\\g}~o_pUfdo~irsklTLiyVJshnw^iVAsZ`_~}PYkckURH{FYMImFaRaccUlCZSHMfP', 'dml@@Dje^VGiyZjjjh@vtHSBinFU@ !BPTCTy[skMzUPF`AJbBixEZHS[Il', 'dml@@DjYVvGiyZjjjh@vtHSBinFU@ !BwLo~BJ~UquhXBinZ\\ykA@F_eMrT', 'dml@@LdfbbQX^fUZjjj`C[PaLJfxYT !BzxIHVc{OiJVRpprePho~]}y\x7FwLl', 'deL@@DjUYkfEijjjj@MeBDpj[ad !B\x7FaA\x7FMVr[AvkKzm_jKvVbD{sk', 'dil@@LddTQRl[NX^Fjjjj@MiBDpj[a@ !BPfL@\x7Fox@M~T@\x7Fox@\x7F`C~@@', 'daL@@DjYtKJqjynjjjj@MaBDpj[` !B`bL@_gx@@Gy~@Gx@_`@']);
}
;
carcc2.InventorDefaultTemplateList = function InventorDefaultTemplateList(){
  carcc2.$clinit_InventorDefaultTemplateList();
  var ffp, fragment, idcode, idcode$array, idcode$index, idcode$max, searcher, template;
  ju.ArrayList.call(this);
  this.$init_50();
  searcher = new carc.SSSearcherWithIndex;
  for (idcode$array = carcc2.DEFAULT_TEMPLATE , idcode$index = 0 , idcode$max = idcode$array.length; idcode$index < idcode$max; ++idcode$index) {
    idcode = idcode$array[idcode$index];
    fragment = (new carc.IDCodeParserWithoutCoordinateInvention).getCompactMolecule(idcode);
    ffp = searcher.createLongIndex(fragment);
    template = new carcc2.InventorTemplate(fragment, ffp);
    template.normalizeCoordinates();
    this.add(template);
  }
}
;
defineClass(264, 18, {4:1, 1:1, 22:1, 44:1, 82:1}, carcc2.InventorDefaultTemplateList);
_.$init_50 = function $init_50(){
}
;
cggl.Lcom_actelion_research_chem_coords_InventorDefaultTemplateList_2_classLit = createForClass('com.actelion.research.chem.coords', 'InventorDefaultTemplateList', 264, cggl.Ljava_util_ArrayList_2_classLit);
carcc2.$clinit_InventorFragment = function $clinit_InventorFragment(){
  carcc2.$clinit_InventorFragment = emptyMethod;
  jl.$clinit_Object();
}
;
carcc2.InventorFragment = function InventorFragment(mol, atoms, mode){
  carcc2.$clinit_InventorFragment();
  Object_0.call(this);
  this.$init_51();
  this.mMol = mol;
  this.mMode = mode;
  this.mGlobalAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atoms, 15, 1);
  this.mPriority = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, atoms, 15, 1);
  this.mAtomX = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, atoms, 15, 1);
  this.mAtomY = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, atoms, 15, 1);
}
;
carcc2.InventorFragment_0 = function InventorFragment_0(f, mode){
  carcc2.$clinit_InventorFragment();
  var i, i0;
  Object_0.call(this);
  this.$init_51();
  this.mMol = f.mMol;
  this.mMode = mode;
  this.mGlobalAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, f.size_1(), 15, 1);
  this.mPriority = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, f.size_1(), 15, 1);
  this.mAtomX = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, f.size_1(), 15, 1);
  this.mAtomY = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, f.size_1(), 15, 1);
  for (i0 = 0; i0 < f.size_1(); i0++) {
    this.mGlobalAtom[i0] = f.mGlobalAtom[i0];
    this.mPriority[i0] = f.mPriority[i0];
    this.mAtomX[i0] = f.mAtomX[i0];
    this.mAtomY[i0] = f.mAtomY[i0];
  }
  if (jsNotEquals(f.mGlobalBond, null)) {
    this.mGlobalBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, f.mGlobalBond.length, 15, 1);
    for (i = 0; i < f.mGlobalBond.length; i++)
      this.mGlobalBond[i] = f.mGlobalBond[i];
  }
  if (jsNotEquals(f.mGlobalToLocalAtom, null)) {
    this.mGlobalToLocalAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, f.mGlobalToLocalAtom.length, 15, 1);
    for (i = 0; i < f.mGlobalToLocalAtom.length; i++)
      this.mGlobalToLocalAtom[i] = f.mGlobalToLocalAtom[i];
  }
}
;
defineClass(19, 1, {19:1, 1:1}, carcc2.InventorFragment, carcc2.InventorFragment_0);
_.$init_51 = function $init_51(){
}
;
_.calculateMinMax = function calculateMinMax(){
  var i, surplus;
  if (this.mMinMaxAvail)
    return;
  this.mMinX = this.mAtomX[0];
  this.mMaxX = this.mAtomX[0];
  this.mMinY = this.mAtomY[0];
  this.mMaxY = this.mAtomY[0];
  for (i = 0; i < this.mGlobalAtom.length; i++) {
    surplus = this.getAtomSurplus(i);
    if (this.mMinX > this.mAtomX[i] - surplus)
      this.mMinX = this.mAtomX[i] - surplus;
    if (this.mMaxX < this.mAtomX[i] + surplus)
      this.mMaxX = this.mAtomX[i] + surplus;
    if (this.mMinY > this.mAtomY[i] - surplus)
      this.mMinY = this.mAtomY[i] - surplus;
    if (this.mMaxY < this.mAtomY[i] + surplus)
      this.mMaxY = this.mAtomY[i] + surplus;
  }
  this.mMinMaxAvail = true;
}
;
_.calculatePreferredAttachmentAngle = function calculatePreferredAttachmentAngle(x_0, y_0, neighbourAtomCount, padding){
  var BIN_ANGLE, angle, bin, bin0, cos_0, d, distance, dx, dy, i, i0, i1, i2, i3, j, localMinDistance, maxBin, maxDistance, minBin, minDistance, neighbourBin, neighbourCount, neighbourRadius, preferredBin, sd, sin_0, squareRadius;
  if (this.size_1() == 1)
    return 0;
  BIN_ANGLE = 2 * 3.141592653589793 / this.CIRCULAR_BINS;
  neighbourRadius = padding + $wnd.Math.sqrt(neighbourAtomCount);
  distance = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, this.CIRCULAR_BINS, 15, 1);
  for (i0 = 0; i0 < this.mGlobalAtom.length; i0++) {
    angle = carcc2.getAngle_0(x_0, y_0, this.mAtomX[i0], this.mAtomY[i0]);
    bin0 = this.correctBin(toInt_0(jl.round_0(angle * this.CIRCULAR_BINS / (2 * 3.141592653589793))));
    dx = x_0 - this.mAtomX[i0];
    dy = y_0 - this.mAtomY[i0];
    sd = dx * dx + dy * dy;
    if (distance[bin0] < sd)
      distance[bin0] = sd;
  }
  maxDistance = -1;
  maxBin = -1;
  for (i1 = 0; i1 < this.CIRCULAR_BINS; i1++) {
    distance[i1] = $wnd.Math.sqrt(distance[i1]);
    if (maxDistance < distance[i1]) {
      maxDistance = distance[i1];
      maxBin = i1;
    }
  }
  preferredBin = this.correctBin(maxBin - narrow_int(this.CIRCULAR_BINS / 2));
  for (i2 = 0; i2 <= narrow_int(this.CIRCULAR_BINS / 2); i2++) {
    distance[this.correctBin(preferredBin + i2)] += 0.01 * i2;
    distance[this.correctBin(preferredBin - i2)] += 0.01 * i2;
  }
  neighbourCount = narrow_int(this.CIRCULAR_BINS / 4);
  sin_0 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, neighbourCount, 15, 1);
  cos_0 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, neighbourCount, 15, 1);
  for (i3 = 1; i3 < neighbourCount; i3++) {
    sin_0[i3] = $wnd.Math.sin(i3 * 0.17453292519943295);
    cos_0[i3] = $wnd.Math.cos(i3 * 0.17453292519943295);
  }
  squareRadius = neighbourRadius * neighbourRadius;
  minDistance = 1.7976931348623157E308;
  minBin = -1;
  for (bin = 0; bin < this.CIRCULAR_BINS; bin++) {
    if (distance[bin] >= minDistance)
      continue;
    localMinDistance = distance[bin];
    for (i = 1; i < neighbourCount; i++) {
      for (j = -1; j <= 1; j += 2) {
        neighbourBin = this.correctBin(bin + j * i);
        if (distance[neighbourBin] * cos_0[i] <= localMinDistance)
          continue;
        d = cos_0[i] * $wnd.Math.min(distance[neighbourBin], neighbourRadius / sin_0[i]);
        if (localMinDistance < d) {
          localMinDistance = d;
          if (minDistance <= localMinDistance)
            break;
        }
      }
      if (minDistance <= localMinDistance)
        break;
    }
    if (minDistance > localMinDistance) {
      minDistance = localMinDistance;
      minBin = bin;
    }
  }
  return 3.141592653589793 * 2 * minBin / this.CIRCULAR_BINS;
}
;
_.correctBin = function correctBin(bin){
  return bin < 0?bin + this.CIRCULAR_BINS:bin >= this.CIRCULAR_BINS?bin - this.CIRCULAR_BINS:bin;
}
;
_.flip = function flip_0(x_0, y_0, mirrorAngle){
  var angle, distance, i;
  for (i = 0; i < this.mGlobalAtom.length; i++) {
    distance = $wnd.Math.sqrt((this.mAtomX[i] - x_0) * (this.mAtomX[i] - x_0) + (this.mAtomY[i] - y_0) * (this.mAtomY[i] - y_0));
    angle = 2 * mirrorAngle - carcc2.getAngle_0(x_0, y_0, this.mAtomX[i], this.mAtomY[i]);
    this.mAtomX[i] = x_0 + distance * $wnd.Math.sin(angle);
    this.mAtomY[i] = y_0 + distance * $wnd.Math.cos(angle);
  }
}
;
_.flipOneSide = function flipOneSide(bond){
  var angle, atom1, atom2, candidate, coreOffSide, coreOnSide, count, current, distance, flipOtherSide, graphAtom, highest, i, i0, i1, index_0, isOnSide, mirrorAngle, x_0, y_0;
  if (jsEquals(this.mFlipList, null))
    this.mFlipList = initUnidimensionalArray(cggl.I_classLit, {31:1, 4:1, 1:1, 8:1}, 6, this.mMol.getAllBonds_0(), 0, 2);
  if (jsEquals(this.mFlipList[bond], null)) {
    graphAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mGlobalAtom.length, 15, 1);
    isOnSide = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 16, 1);
    atom1 = this.mMol.getBondAtom_0(0, bond);
    atom2 = this.mMol.getBondAtom_0(1, bond);
    graphAtom[0] = atom1;
    isOnSide[atom1] = true;
    current = 0;
    highest = 0;
    while (current <= highest) {
      for (i0 = 0; i0 < this.mMol.getAllConnAtoms_0(graphAtom[current]); i0++) {
        candidate = this.mMol.getConnAtom_0(graphAtom[current], i0);
        if (!isOnSide[candidate] && candidate != atom2) {
          graphAtom[++highest] = candidate;
          isOnSide[candidate] = true;
        }
      }
      if (current == highest)
        break;
      current++;
    }
    flipOtherSide = highest + 1 > narrow_int(this.mGlobalAtom.length / 2);
    if ((this.mMode & 12) != 0) {
      coreOnSide = false;
      coreOffSide = false;
      for (i0 = 0; i0 < this.mGlobalAtom.length; i0++) {
        if (this.mMol.isMarkedAtom_0(this.mGlobalAtom[i0])) {
          if (isOnSide[this.mGlobalAtom[i0]])
            coreOnSide = true;
          else 
            coreOffSide = true;
        }
      }
      if (coreOnSide != coreOffSide)
        flipOtherSide = coreOnSide;
    }
    count = 2;
    this.mFlipList[bond] = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, flipOtherSide?this.mGlobalAtom.length - highest:highest + 2, 15, 1);
    for (i1 = 0; i1 < this.mGlobalAtom.length; i1++) {
      if (this.mGlobalAtom[i1] == atom1)
        this.mFlipList[bond][flipOtherSide?0:1] = i1;
      else if (this.mGlobalAtom[i1] == atom2)
        this.mFlipList[bond][flipOtherSide?1:0] = i1;
      else if (flipOtherSide ^ isOnSide[this.mGlobalAtom[i1]])
        this.mFlipList[bond][count++] = i1;
    }
  }
  x_0 = this.mAtomX[this.mFlipList[bond][0]];
  y_0 = this.mAtomY[this.mFlipList[bond][0]];
  mirrorAngle = carcc2.getAngle_0(x_0, y_0, this.mAtomX[this.mFlipList[bond][1]], this.mAtomY[this.mFlipList[bond][1]]);
  for (i = 2; i < this.mFlipList[bond].length; i++) {
    index_0 = this.mFlipList[bond][i];
    distance = $wnd.Math.sqrt((this.mAtomX[index_0] - x_0) * (this.mAtomX[index_0] - x_0) + (this.mAtomY[index_0] - y_0) * (this.mAtomY[index_0] - y_0));
    angle = 2 * mirrorAngle - carcc2.getAngle_0(x_0, y_0, this.mAtomX[index_0], this.mAtomY[index_0]);
    this.mAtomX[index_0] = x_0 + distance * $wnd.Math.sin(angle);
    this.mAtomY[index_0] = y_0 + distance * $wnd.Math.cos(angle);
  }
}
;
_.getAtomSurplus = function getAtomSurplus(atom){
  return this.mMol.getAtomQueryFeatures_0(this.mGlobalAtom[atom]) != 0?0.6:this.mMol.getAtomicNo_0(this.mGlobalAtom[atom]) != 6?0.25:0;
}
;
_.getAtomX_1 = function getAtomX_1(index_0){
  return this.mAtomX[index_0];
}
;
_.getAtomY_1 = function getAtomY_1(index_0){
  return this.mAtomY[index_0];
}
;
_.getCollisionList = function getCollisionList(){
  var collidingAtom, collisionList, dist, i, j, panalty, xdif, ydif;
  this.mCollisionPanalty = 0;
  collisionList = new ju.ArrayList;
  for (i = 1; i < this.mGlobalAtom.length; i++) {
    for (j = 0; j < i; j++) {
      xdif = $wnd.Math.abs(this.mAtomX[i] - this.mAtomX[j]);
      ydif = $wnd.Math.abs(this.mAtomY[i] - this.mAtomY[j]);
      dist = $wnd.Math.sqrt(xdif * xdif + ydif * ydif);
      if (dist < 0.8) {
        collidingAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 2, 15, 1);
        collidingAtom[0] = this.mGlobalAtom[i];
        collidingAtom[1] = this.mGlobalAtom[j];
        collisionList.add(collidingAtom);
      }
      panalty = 1 - $wnd.Math.min(dist, 1);
      this.mCollisionPanalty += panalty * panalty;
    }
  }
  return collisionList;
}
;
_.getCollisionPanalty = function getCollisionPanalty(){
  return this.mCollisionPanalty;
}
;
_.getGlobalAtom = function getGlobalAtom(localAtom){
  return this.mGlobalAtom[localAtom];
}
;
_.getHeight = function getHeight(){
  this.calculateMinMax();
  return this.mMaxY - this.mMinY + 1;
}
;
_.getLocalAtom = function getLocalAtom(globalAtom){
  var i;
  for (i = 0; i < this.mGlobalAtom.length; i++)
    if (globalAtom == this.mGlobalAtom[i])
      return i;
  return -1;
}
;
_.getWidth = function getWidth(){
  this.calculateMinMax();
  return this.mMaxX - this.mMinX + 1;
}
;
_.isMember = function isMember_0(globalAtom){
  var i;
  for (i = 0; i < this.mGlobalAtom.length; i++)
    if (globalAtom == this.mGlobalAtom[i])
      return true;
  return false;
}
;
_.locateBonds = function locateBonds(){
  var atom, connAtoms, fragmentBonds, i, i0, j;
  fragmentBonds = 0;
  for (i0 = 0; i0 < this.mGlobalAtom.length; i0++) {
    atom = this.mGlobalAtom[i0];
    connAtoms = this.mMol.getAllConnAtoms_0(atom);
    for (j = 0; j < connAtoms; j++)
      if (this.mMol.getConnAtom_0(atom, j) > atom)
        fragmentBonds++;
  }
  this.mGlobalBond = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, fragmentBonds, 15, 1);
  this.mGlobalToLocalAtom = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, this.mMol.getAllAtoms_0(), 15, 1);
  fragmentBonds = 0;
  for (i = 0; i < this.mGlobalAtom.length; i++) {
    atom = this.mGlobalAtom[i];
    connAtoms = this.mMol.getAllConnAtoms_0(atom);
    this.mGlobalToLocalAtom[atom] = i;
    for (j = 0; j < connAtoms; j++)
      if (this.mMol.getConnAtom_0(atom, j) > atom)
        this.mGlobalBond[fragmentBonds++] = this.mMol.getConnBond_0(atom, j);
  }
}
;
_.optimizeAtomCoordinates = function optimizeAtomCoordinates(atom){
  var a1, a2, bondLength, collisionForce, d, d1, d2, force, forces, i, m1, m2, x_0, x1, x2, xs, y_0, y1, y2, ys;
  x_0 = this.mAtomX[atom];
  y_0 = this.mAtomY[atom];
  collisionForce = initUnidimensionalArray(cggl.Lcom_actelion_research_chem_coords_InventorAngle_2_classLit, {4:1, 1:1, 8:1}, 25, 4, 0, 1);
  forces = 0;
  for (i = 0; i < this.mGlobalBond.length; i++) {
    if (forces >= 4)
      break;
    if (atom == this.mGlobalToLocalAtom[this.mMol.getBondAtom_0(0, this.mGlobalBond[i])] || atom == this.mGlobalToLocalAtom[this.mMol.getBondAtom_0(1, this.mGlobalBond[i])])
      continue;
    x1 = this.mAtomX[this.mGlobalToLocalAtom[this.mMol.getBondAtom_0(0, this.mGlobalBond[i])]];
    y1 = this.mAtomY[this.mGlobalToLocalAtom[this.mMol.getBondAtom_0(0, this.mGlobalBond[i])]];
    x2 = this.mAtomX[this.mGlobalToLocalAtom[this.mMol.getBondAtom_0(1, this.mGlobalBond[i])]];
    y2 = this.mAtomY[this.mGlobalToLocalAtom[this.mMol.getBondAtom_0(1, this.mGlobalBond[i])]];
    d1 = $wnd.Math.sqrt((x1 - x_0) * (x1 - x_0) + (y1 - y_0) * (y1 - y_0));
    d2 = $wnd.Math.sqrt((x2 - x_0) * (x2 - x_0) + (y2 - y_0) * (y2 - y_0));
    bondLength = $wnd.Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    if (d1 < bondLength && d2 < bondLength) {
      if (x1 == x2) {
        d = $wnd.Math.abs(x_0 - x1);
        if (d < 0.5)
          setCheck(collisionForce, forces++, new carcc2.InventorAngle(carcc2.getAngle_0(x1, y_0, x_0, y_0), (0.5 - d) / 2));
      }
       else if (y1 == y2) {
        d = $wnd.Math.abs(y_0 - y1);
        if (d < 0.5)
          setCheck(collisionForce, forces++, new carcc2.InventorAngle(carcc2.getAngle_0(x_0, y1, x_0, y_0), (0.5 - d) / 2));
      }
       else {
        m1 = (y2 - y1) / (x2 - x1);
        m2 = -1 / m1;
        a1 = y1 - m1 * x1;
        a2 = y_0 - m2 * x_0;
        xs = (a2 - a1) / (m1 - m2);
        ys = m1 * xs + a1;
        d = $wnd.Math.sqrt((xs - x_0) * (xs - x_0) + (ys - y_0) * (ys - y_0));
        if (d < 0.5)
          setCheck(collisionForce, forces++, new carcc2.InventorAngle(carcc2.getAngle_0(xs, ys, x_0, y_0), (0.5 - d) / 2));
      }
      continue;
    }
    if (d1 < 0.5) {
      setCheck(collisionForce, forces++, new carcc2.InventorAngle(carcc2.getAngle_0(x1, y1, x_0, y_0), (0.5 - d1) / 2));
      continue;
    }
    if (d2 < 0.5) {
      setCheck(collisionForce, forces++, new carcc2.InventorAngle(carcc2.getAngle_0(x2, y2, x_0, y_0), (0.5 - d2) / 2));
      continue;
    }
  }
  if (forces > 0) {
    force = carcc2.getMeanAngle(collisionForce, forces);
    this.mAtomX[atom] += force.mLength * $wnd.Math.sin(force.mAngle);
    this.mAtomY[atom] += force.mLength * $wnd.Math.cos(force.mAngle);
  }
}
;
_.rotate = function rotate(x_0, y_0, angleDif){
  var angle, distance, i;
  for (i = 0; i < this.mGlobalAtom.length; i++) {
    distance = $wnd.Math.sqrt((this.mAtomX[i] - x_0) * (this.mAtomX[i] - x_0) + (this.mAtomY[i] - y_0) * (this.mAtomY[i] - y_0));
    angle = carcc2.getAngle_0(x_0, y_0, this.mAtomX[i], this.mAtomY[i]) + angleDif;
    this.mAtomX[i] = x_0 + distance * $wnd.Math.sin(angle);
    this.mAtomY[i] = y_0 + distance * $wnd.Math.cos(angle);
  }
}
;
_.size_1 = function size_2(){
  return this.mGlobalAtom.length;
}
;
_.translate = function translate(dx, dy){
  var i;
  for (i = 0; i < this.mGlobalAtom.length; i++) {
    this.mAtomX[i] += dx;
    this.mAtomY[i] += dy;
  }
}
;
_.CIRCULAR_BINS = 36;
_.mCollisionPanalty = 0;
_.mMaxX = 0;
_.mMaxY = 0;
_.mMinMaxAvail = false;
_.mMinX = 0;
_.mMinY = 0;
_.mMode = 0;
carcc2.cCollisionLimitAtomMovement = 0.5;
carcc2.cCollisionLimitBondRotation = 0.8;
cggl.Lcom_actelion_research_chem_coords_InventorFragment_2_classLit = createForClass('com.actelion.research.chem.coords', 'InventorFragment', 19, cggl.Ljava_lang_Object_2_classLit);
carcc2.$clinit_InventorTemplate = function $clinit_InventorTemplate(){
  carcc2.$clinit_InventorTemplate = emptyMethod;
  jl.$clinit_Object();
}
;
carcc2.InventorTemplate = function InventorTemplate(fragment, ffp){
  carcc2.$clinit_InventorTemplate();
  Object_0.call(this);
  this.$init_52();
  this.mFragment = fragment;
  this.mFFP = ffp;
}
;
defineClass(103, 1, {103:1, 1:1}, carcc2.InventorTemplate);
_.$init_52 = function $init_52(){
}
;
_.getFFP = function getFFP(){
  return this.mFFP;
}
;
_.getFragment_0 = function getFragment_0(){
  return this.mFragment;
}
;
_.getNormalizedAtomX = function getNormalizedAtomX(atom){
  return this.mFragment.getAtomX_1(atom) / this.mAVBL;
}
;
_.getNormalizedAtomY = function getNormalizedAtomY(atom){
  return this.mFragment.getAtomY_1(atom) / this.mAVBL;
}
;
_.normalizeCoordinates = function normalizeCoordinates(){
  this.mAVBL = this.mFragment.getAverageBondLength_0();
}
;
_.mAVBL = 0;
cggl.Lcom_actelion_research_chem_coords_InventorTemplate_2_classLit = createForClass('com.actelion.research.chem.coords', 'InventorTemplate', 103, cggl.Ljava_lang_Object_2_classLit);
carci.$clinit_CompoundFileParser = function $clinit_CompoundFileParser(){
  carci.$clinit_CompoundFileParser = emptyMethod;
  jl.$clinit_Object();
}
;
carci.CompoundFileParser = function CompoundFileParser(){
  carci.$clinit_CompoundFileParser();
  Object_0.call(this);
  this.$init_53();
}
;
defineClass(198, 1, {1:1});
_.$init_53 = function $init_53(){
}
;
_.close_0 = function close_0(){
  var ioe;
  if (isNotNull(this.mReader)) {
    try {
      this.mReader.close_0();
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 52)) {
        ioe = $e0;
      }
       else 
        throw toJs($e0);
    }
  }
}
;
_.getCoordinates = function getCoordinates(){
  this.updateIDCodeAndCoords();
  return this.mCoords;
}
;
_.getIDCode_0 = function getIDCode_1(){
  this.updateIDCodeAndCoords();
  return this.mIDCode;
}
;
_.getMolecule_0 = function getMolecule_0(){
  var coords, e, idcode;
  if (!this.mStructureUpToDate) {
    idcode = this.getIDCode_0();
    coords = this.getCoordinates();
    this.mMol_0 = null;
    try {
      this.mMol_0 = (new carc.IDCodeParser(jsEquals(coords, null))).getCompactMolecule_0(idcode, coords);
      if (isNotNull(this.mMol_0))
        this.mMol_0.setName_0(this.getMoleculeName());
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
      }
       else 
        throw toJs($e0);
    }
  }
  this.mStructureUpToDate = true;
  return this.mMol_0;
}
;
_.next_1 = function next(){
  this.mStructureUpToDate = false;
  this.mIDCodeUpToDate = false;
  return this.advanceToNext();
}
;
_.updateIDCodeAndCoords = function updateIDCodeAndCoords(){
  var canonizer, e, mol;
  if (!this.mIDCodeUpToDate) {
    try {
      mol = new carc.StereoMolecule_0(this.getMolecule_0());
      mol.normalizeAmbiguousBonds_0();
      mol.canonizeCharge_0(true);
      canonizer = new carc.Canonizer(mol);
      this.mIDCode = canonizer.getIDCode_0();
      this.mCoords = canonizer.getEncodedCoordinates();
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 11)) {
        e = $e0;
        this.mIDCode = null;
        this.mCoords = null;
      }
       else 
        throw toJs($e0);
    }
    this.mIDCodeUpToDate = true;
  }
}
;
_.mIDCodeUpToDate = false;
_.mStructureUpToDate = false;
cggl.Lcom_actelion_research_chem_io_CompoundFileParser_2_classLit = createForClass('com.actelion.research.chem.io', 'CompoundFileParser', 198, cggl.Ljava_lang_Object_2_classLit);
carci.$clinit_SDFileParser = function $clinit_SDFileParser(){
  carci.$clinit_SDFileParser = emptyMethod;
  carci.$clinit_CompoundFileParser();
  carci.cIDFieldNames = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['Idorsia No', 'Actelion No', 'ID', 'IDNUMBER', 'COMPOUND_ID', 'NAME', 'COMPND']);
}
;
carci.SDFileParser = function SDFileParser(reader, fieldName){
  carci.$clinit_SDFileParser();
  carci.CompoundFileParser.call(this);
  this.$init_54();
  this.mNoOfRecords = -1;
  this.mFieldName = fieldName;
  this.mReader = new ji.BufferedReader(reader);
  this.init_3();
}
;
defineClass(197, 198, {1:1}, carci.SDFileParser);
_.$init_54 = function $init_54(){
}
;
_.advanceToNext = function advanceToNext(){
  var e, field, fieldIndex, fieldName, idName, idName$array, idName$index, idName$max, line, molfileComplete;
  if (isNull(this.mReader))
    return false;
  this.mMolfileBuffer.setLength(0);
  this.mDataBuffer.setLength(0);
  this.mMol = null;
  molfileComplete = false;
  fieldIndex = -1;
  fieldName = null;
  this.mFieldData = jsEquals(this.mFieldName, null)?null:initUnidimensionalArray(cggl.Ljava_lang_String_2_classLit, {4:1, 1:1, 8:1, 29:1}, 2, this.mFieldName.length, 6, 1);
  this.mIDFieldIndex = -1;
  do {
    try {
      line = this.mReader.readLine();
      if (jsEquals(line, null)) {
        this.mMolfileBuffer.setLength(0);
        this.mReader.close_0();
        return false;
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 52)) {
        e = $e0;
        this.mMolfileBuffer.setLength(0);
        return false;
      }
       else 
        throw toJs($e0);
    }
    if (!molfileComplete) {
      if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, '>')) {
        molfileComplete = true;
        this.mMolfileBuffer.append_5('M  END');
        this.mMolfileBuffer.append_1(10);
        this.mDataBuffer.append_5(line);
        this.mDataBuffer.append_1(10);
      }
       else {
        this.mMolfileBuffer.append_5(line);
        this.mMolfileBuffer.append_1(10);
        if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, 'M  END'))
          molfileComplete = true;
        continue;
      }
    }
     else {
      this.mDataBuffer.append_5(line);
      this.mDataBuffer.append_1(10);
    }
    if (jsNotEquals(this.mFieldName, null)) {
      if (jl.length__I__devirtual$_0(line) == 0) {
        fieldIndex = -1;
      }
       else if (fieldIndex == -1) {
        fieldName = this.extractFieldName(line);
        if (jsNotEquals(fieldName, null)) {
          fieldIndex = -1;
          for (field = 0; field < this.mFieldName.length; field++) {
            if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(fieldName, this.mFieldName[field])) {
              fieldIndex = field;
              break;
            }
          }
          if (this.mIDFieldIndex == -1) {
            for (idName$array = carci.cIDFieldNames , idName$index = 0 , idName$max = idName$array.length; idName$index < idName$max; ++idName$index) {
              idName = idName$array[idName$index];
              if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(fieldName, idName)) {
                this.mIDFieldIndex = fieldIndex;
                break;
              }
            }
          }
        }
      }
       else {
        if (jsEquals(this.mFieldData[fieldIndex], null)) {
          this.mFieldData[fieldIndex] = line;
        }
         else {
          this.mFieldData[fieldIndex] = jl.concat_Ljava_lang_String__Ljava_lang_String___devirtual$(jl.concat_Ljava_lang_String__Ljava_lang_String___devirtual$(this.mFieldData[fieldIndex], '\n'), line);
        }
      }
    }
  }
   while (!jl.startsWith_Ljava_lang_String__Z__devirtual$(line, '$$$$'));
  return true;
}
;
_.extractAllFieldNames = function extractAllFieldNames(recordsToInspect){
  var e, fieldName, fieldNameList, line, records;
  records = 0;
  fieldNameList = new carc.UniqueStringList;
  while (records < recordsToInspect) {
    try {
      line = this.mReader.readLine();
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 52)) {
        e = $e0;
        if (records < recordsToInspect)
          this.mNoOfRecords = records;
        break;
      }
       else 
        throw toJs($e0);
    }
    if (jsEquals(line, null)) {
      if (records < recordsToInspect)
        this.mNoOfRecords = records;
      break;
    }
    if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, '$$$$'))
      records++;
    if (jl.startsWith_Ljava_lang_String__Z__devirtual$(line, '>')) {
      fieldName = this.extractFieldName(line);
      if (jsNotEquals(fieldName, null))
        fieldNameList.addString(fieldName);
    }
  }
  try {
    this.mReader.close_0();
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 52)) {
      e = $e1;
    }
     else 
      throw toJs($e1);
  }
  this.mFieldName = fieldNameList.toArray_0();
}
;
_.extractFieldName = function extractFieldName(line){
  var closeBracket, i, index_0, openBracket;
  if (jl.length__I__devirtual$_0(line) == 0 || jl.charAt_I_C__devirtual$_0(line, 0) != 62)
    return null;
  index_0 = 1;
  openBracket = 0;
  closeBracket = 0;
  while (index_0 < jl.length__I__devirtual$_0(line)) {
    if (jl.charAt_I_C__devirtual$_0(line, index_0) == 60) {
      if (openBracket != 0)
        return null;
      openBracket = index_0;
    }
     else if (jl.charAt_I_C__devirtual$_0(line, index_0) == 62) {
      if (closeBracket != 0)
        return null;
      closeBracket = index_0;
    }
    index_0++;
  }
  if (openBracket != 0 && openBracket < closeBracket)
    return jl.substring_II_Ljava_lang_String___devirtual$(line, openBracket + 1, closeBracket);
  index_0 = jl.indexOf_Ljava_lang_String_I_I__devirtual$(line, 'DT', 1);
  if (index_0 == -1)
    return null;
  i = index_0 + 2;
  while (isDigit(jl.charAt_I_C__devirtual$_0(line, i)))
    i++;
  return i == index_0 + 2?null:jl.substring_II_Ljava_lang_String___devirtual$(line, index_0, i);
}
;
_.getFieldData_0 = function getFieldData(index_0){
  if (jsEquals(this.mFieldData, null))
    return null;
  return this.mFieldData[index_0];
}
;
_.getFieldNames_0 = function getFieldNames(){
  if (jsEquals(this.mFieldName, null))
    this.extractAllFieldNames(10240);
  return this.mFieldName;
}
;
_.getFieldNames_1 = function getFieldNames_0(recordsToInspect){
  if (jsEquals(this.mFieldName, null))
    this.extractAllFieldNames(recordsToInspect);
  return this.mFieldName;
}
;
_.getMolecule_0 = function getMolecule_1(){
  if (isNotNull(this.mMol))
    return this.mMol;
  this.mMol = (new carc.MolfileParser).getCompactMolecule(this.getNextMolFile_0());
  if (isNotNull(this.mMol) && (jsEquals(this.mMol.getName_0(), null) || jl.length__I__devirtual$_0(this.mMol.getName_0()) == 0))
    this.mMol.setName_0(this.getMoleculeName());
  return this.mMol;
}
;
_.getMoleculeName = function getMoleculeName(){
  return this.mIDFieldIndex != -1 && jsNotEquals(this.mFieldData, null)?this.mFieldData[this.mIDFieldIndex]:isNotNull(this.mMol)?this.mMol.getName_0():null;
}
;
_.getNextFieldData_0 = function getNextFieldData(){
  var fieldData;
  fieldData = this.mDataBuffer.toString_0();
  return fieldData;
}
;
_.getNextMolFile_0 = function getNextMolFile(){
  var molfile;
  molfile = this.mMolfileBuffer.toString_0();
  return molfile;
}
;
_.init_3 = function init_3(){
  this.mMolfileBuffer = new jl.StringBuilder_0(10240);
  this.mDataBuffer = new jl.StringBuilder_0(10240);
}
;
_.mIDFieldIndex = 0;
_.mNoOfRecords = 0;
carci.DEFAULT_RECORDS_TO_INSPECT = 10240;
carci.cNewLineString = '\n';
cggl.Lcom_actelion_research_chem_io_SDFileParser_2_classLit = createForClass('com.actelion.research.chem.io', 'SDFileParser', 197, cggl.Lcom_actelion_research_chem_io_CompoundFileParser_2_classLit);
cargm.$clinit_JSMolecule = function $clinit_JSMolecule(){
  cargm.$clinit_JSMolecule = emptyMethod;
  jl.$clinit_Object();
  cargm.services = cargm.getInstance();
  cargm.CANONIZER_CONSIDER_STEREOHETEROTOPICITY = 2 | 4;
  cargm.cHelperRings_0 = 1 | 2;
  cargm.cHelperParities_0 = 3 | 4;
  cargm.cHelperCIP_0 = 7 | 8;
  cargm.cHelperSymmetrySimple_0 = 15 | 16;
  cargm.cHelperSymmetryDiastereotopic_0 = 15 | 32;
  cargm.cHelperSymmetryEnantiotopic_0 = 15 | 64;
  cargm.cAtomLabel_0 = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['?', 'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10', 'R11', 'R12', 'R13', 'R14', 'R15', 'R16', 'R1', 'R2', 'R3', 'A', 'A1', 'A2', 'A3', '??', '??', 'D', 'T', 'X', 'R', 'H2', 'H+', 'Nnn', 'HYD', 'Pol', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', 'Ala', 'Arg', 'Asn', 'Asp', 'Cys', 'Gln', 'Glu', 'Gly', 'His', 'Ile', 'Leu', 'Lys', 'Met', 'Phe', 'Pro', 'Ser', 'Thr', 'Trp', 'Tyr', 'Val']);
  cargm.cRoundedMass_0 = stampJavaTypeInfo(getClassLiteralForArray(cggl.S_classLit, 1), {4:1, 1:1}, 5, 15, [0, 1, 4, 7, 9, 11, 12, 14, 16, 19, 20, 23, 24, 27, 28, 31, 32, 35, 40, 39, 40, 45, 48, 51, 52, 55, 56, 59, 58, 63, 64, 69, 74, 75, 80, 79, 84, 85, 88, 89, 90, 93, 98, 0, 102, 103, 106, 107, 114, 115, 120, 121, 130, 127, 132, 133, 138, 139, 140, 141, 142, 0, 152, 153, 158, 159, 164, 165, 166, 169, 174, 175, 180, 181, 184, 187, 192, 193, 195, 197, 202, 205, 208, 209, 0, 0, 0, 0, 0, 0, 232, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 156, 114, 115, 103, 128, 129, 57, 137, 113, 113, 128, 131, 147, 97, 87, 101, 186, 163, 99]);
  cargm.FISCHER_PROJECTION_LIMIT_0 = 3.141592653589793 / 36;
  cargm.STEREO_ANGLE_LIMIT_0 = 3.141592653589793 / 36;
  cargm.VALIDATION_ERRORS_STEREO_0 = stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['Members of ESR groups must only be stereo centers with known configuration.', 'Over- or under-specified stereo feature or more than one racemic type bond', 'Ambiguous configuration at stereo center because of 2 parallel bonds']);
}
;
cargm.JSMolecule = function JSMolecule(){
  cargm.JSMolecule_0.call(this, 32, 32, null);
}
;
cargm.JSMolecule_0 = function JSMolecule_0(maxAtoms, maxBonds, mol){
  cargm.$clinit_JSMolecule();
  Object_0.call(this);
  this.$init_55();
  if (isNotNull(mol)) {
    this.oclMolecule = mol;
  }
   else {
    this.oclMolecule = new carc.StereoMolecule(maxAtoms, maxBonds);
  }
}
;
cargm.JSMolecule_1 = function JSMolecule_1(mol){
  cargm.$clinit_JSMolecule();
  cargm.JSMolecule_0.call(this, 0, 0, mol);
}
;
cargm.createMolfileWithAtomMap = function createMolfileWithAtomMap(mol, map_0){
  return {molecule:mol, map:map_0};
}
;
cargm.fromIDCode = function fromIDCode(idcode, coordinates){
  cargm.$clinit_JSMolecule();
  var mol;
  if (typeof coordinates === 'undefined') {
    coordinates = true;
  }
  if (typeof coordinates === 'boolean') {
    mol = cargm.fromIDCode_1(idcode, false);
    if (coordinates === true) {
      mol.inventCoordinates();
    }
  }
   else if (typeof coordinates === 'string') {
    mol = cargm.fromIDCode_0(idcode, coordinates);
  }
  return mol;
}
;
cargm.fromIDCode_0 = function fromIDCode_0(idcode, coordinates){
  return new cargm.JSMolecule_1((new carc.IDCodeParser(false)).getCompactMolecule_0(idcode, coordinates));
}
;
cargm.fromIDCode_1 = function fromIDCode_1(idcode, ensure2DCoordinates){
  return new cargm.JSMolecule_1((new carc.IDCodeParser(ensure2DCoordinates)).getCompactMolecule(idcode));
}
;
cargm.fromMolfile = function fromMolfile(molfile){
  cargm.$clinit_JSMolecule();
  return new cargm.JSMolecule_1((new carc.MolfileParser).getCompactMolecule(molfile));
}
;
cargm.fromMolfileWithAtomMap = function fromMolfileWithAtomMap(molfile){
  cargm.$clinit_JSMolecule();
  var map_0, mol, parser;
  parser = new carc.MolfileParser_0(1);
  mol = parser.getCompactMolecule(molfile);
  map_0 = parser.getHandleHydrogenMap_0();
  return cargm.createMolfileWithAtomMap(new cargm.JSMolecule_1(mol), map_0);
}
;
cargm.fromSmiles = function fromSmiles(smiles, options){
  cargm.$clinit_JSMolecule();
  options = options || {};
  var coordinates = !options.noCoordinates;
  var stereo = !options.noStereo;
  return cargm.fromSmiles_0(smiles, coordinates, stereo);
}
;
cargm.fromSmiles_0 = function fromSmiles_0(smiles, ensure2DCoordinates, readStereoFeatures){
  var mol;
  mol = new cargm.JSMolecule;
  (new carc.SmilesParser).parse_2(mol.oclMolecule, jl.getBytes___B__devirtual$(smiles), false, readStereoFeatures);
  if (ensure2DCoordinates) {
    mol.inventCoordinates();
  }
  return mol;
}
;
cargm.getAngle_1 = function getAngle_1(x1, y1, x2, y2){
  cargm.$clinit_JSMolecule();
  return carc.getAngle(x1, y1, x2, y2);
}
;
cargm.getAngleDif_1 = function getAngleDif_1(angle1, angle2){
  cargm.$clinit_JSMolecule();
  return carc.getAngleDif(angle1, angle2);
}
;
cargm.getAtomicNoFromLabel_0 = function getAtomicNoFromLabel_0(atomLabel){
  cargm.$clinit_JSMolecule();
  return carc.getAtomicNoFromLabel(atomLabel);
}
;
cargm.getDefaultAverageBondLength_0 = function getDefaultAverageBondLength_0(){
  cargm.$clinit_JSMolecule();
  return carc.getDefaultAverageBondLength();
}
;
cargm.isAtomicNoElectronegative_0 = function isAtomicNoElectronegative_0(atomicNo){
  cargm.$clinit_JSMolecule();
  return carc.isAtomicNoElectronegative(atomicNo);
}
;
cargm.isAtomicNoElectropositive_0 = function isAtomicNoElectropositive_0(atomicNo){
  cargm.$clinit_JSMolecule();
  return carc.isAtomicNoElectropositive(atomicNo);
}
;
cargm.setDefaultAverageBondLength_0 = function setDefaultAverageBondLength_0(defaultAVBL){
  cargm.$clinit_JSMolecule();
  carc.setDefaultAverageBondLength(defaultAVBL);
}
;
defineClass(41, 1, {41:1, 1:1}, cargm.JSMolecule, cargm.JSMolecule_0, cargm.JSMolecule_1);
_.$init_55 = function $init_55(){
}
;
_.addAtom = function addAtom_2(atomicNo){
  return this.oclMolecule.addAtom_2(atomicNo);
}
;
_.addBond = function addBond_1(atom1, atom2){
  return this.oclMolecule.addBond_0(atom1, atom2);
}
;
_.addFragment = function addFragment_0(sourceMol, rootAtom, atomMap){
  this.oclMolecule.addFragment_0(sourceMol.getStereoMolecule(), rootAtom, atomMap);
}
;
_.addImplicitHydrogens_0 = function addImplicitHydrogens_1(){
  carcc.addImplicitHydrogens(this.oclMolecule);
}
;
_.addImplicitHydrogens_1 = function addImplicitHydrogens_2(atomNumber){
  carcc.addImplicitHydrogens_0(this.oclMolecule, atomNumber);
}
;
_.addImplicitHydrogens = function addImplicitHydrogens_3(atomNumber){
  if (atomNumber === undefined) {
    this.addImplicitHydrogens_0();
  }
   else {
    this.addImplicitHydrogens_1(atomNumber);
  }
}
;
_.addMissingChirality_0 = function addMissingChirality_1(){
  carcc.addMissingChirality(this.oclMolecule);
}
;
_.addMissingChirality_1 = function addMissingChirality_2(esrType){
  carcc.addMissingChirality_0(this.oclMolecule, esrType);
}
;
_.addMissingChirality = function addMissingChirality_3(esrType){
  if (esrType === undefined) {
    this.addMissingChirality_0();
  }
   else {
    this.addMissingChirality_1(esrType);
  }
}
;
_.addMolecule = function addMolecule_0(mol){
  return this.oclMolecule.addMolecule_0(mol.getStereoMolecule());
}
;
_.addOrChangeAtom = function addOrChangeAtom_0(x_0, y_0, atomicNo, mass, abnormalValence, radical, customLabel){
  return this.oclMolecule.addOrChangeAtom_0(x_0, y_0, atomicNo, mass, abnormalValence, radical, customLabel);
}
;
_.addOrChangeBond = function addOrChangeBond_0(atm1, atm2, type_0){
  return this.oclMolecule.addOrChangeBond_0(atm1, atm2, type_0);
}
;
_.addRing = function addRing_0(x_0, y_0, ringSize, aromatic){
  return this.oclMolecule.addRing_0(x_0, y_0, ringSize, aromatic);
}
;
_.addRingToAtom = function addRingToAtom_0(atom, ringSize, aromatic){
  return this.oclMolecule.addRingToAtom_0(atom, ringSize, aromatic);
}
;
_.addRingToBond = function addRingToBond_0(bond, ringSize, aromatic){
  return this.oclMolecule.addRingToBond_0(bond, ringSize, aromatic);
}
;
_.addSubstituent = function addSubstituent_0(substituent, connectionAtom){
  return this.oclMolecule.addSubstituent_0(substituent.getStereoMolecule(), connectionAtom);
}
;
_.calculateTorsion = function calculateTorsion_0(atom){
  return this.oclMolecule.calculateTorsion_0(atom);
}
;
_.canonizeCharge = function canonizeCharge_0(allowUnbalancedCharge){
  return this.oclMolecule.canonizeCharge_0(allowUnbalancedCharge);
}
;
_.changeAtom = function changeAtom_1(atom, atomicNo, mass, abnormalValence, radical){
  return this.oclMolecule.changeAtom_0(atom, atomicNo, mass, abnormalValence, radical);
}
;
_.changeAtomCharge = function changeAtomCharge_0(atom, positive){
  return this.oclMolecule.changeAtomCharge_0(atom, positive);
}
;
_.changeBond = function changeBond_0(bnd, type_0){
  return this.oclMolecule.changeBond_0(bnd, type_0);
}
;
_.convertStereoBondsToSingleBonds = function convertStereoBondsToSingleBonds_0(atom){
  this.oclMolecule.convertStereoBondsToSingleBonds_0(atom);
}
;
_.copyAtom = function copyAtom_0(destMol, sourceAtom, esrGroupOffsetAND, esrGroupOffsetOR){
  return this.oclMolecule.copyAtom_0(destMol.getStereoMolecule(), sourceAtom, esrGroupOffsetAND, esrGroupOffsetOR);
}
;
_.copyBond = function copyBond_1(destMol, sourceBond, esrGroupOffsetAND, esrGroupOffsetOR, atomMap, useBondTypeDelocalized){
  return this.oclMolecule.copyBond_1(destMol.getStereoMolecule(), sourceBond, esrGroupOffsetAND, esrGroupOffsetOR, atomMap, useBondTypeDelocalized);
}
;
_.copyMolecule = function copyMolecule_0(destMol){
  this.oclMolecule.copyMolecule_0(destMol.getStereoMolecule());
}
;
_.copyMoleculeByAtoms = function copyMoleculeByAtoms_0(destMol, includeAtom, recognizeDelocalizedBonds, atomMap){
  this.oclMolecule.copyMoleculeByAtoms_0(destMol.getStereoMolecule(), includeAtom, recognizeDelocalizedBonds, atomMap);
}
;
_.copyMoleculeByBonds = function copyMoleculeByBonds_0(destMol, includeBond, recognizeDelocalizedBonds, atomMap){
  return this.oclMolecule.copyMoleculeByBonds_0(destMol.getStereoMolecule(), includeBond, recognizeDelocalizedBonds, atomMap);
}
;
_.copyMoleculeProperties = function copyMoleculeProperties_1(destMol){
  this.oclMolecule.copyMoleculeProperties_0(destMol.getStereoMolecule());
}
;
_.deleteAtom = function deleteAtom_0(atom){
  this.oclMolecule.deleteAtom_0(atom);
}
;
_.deleteAtomOrBond = function deleteAtomOrBond_0(x_0, y_0){
  return this.oclMolecule.deleteAtomOrBond_0(x_0, y_0);
}
;
_.deleteAtoms = function deleteAtoms_0(atomList){
  return this.oclMolecule.deleteAtoms_0(atomList);
}
;
_.deleteBond = function deleteBond_0(bond){
  this.oclMolecule.deleteBond_0(bond);
}
;
_.deleteBondAndSurrounding = function deleteBondAndSurrounding_0(bond){
  this.oclMolecule.deleteBondAndSurrounding_0(bond);
}
;
_.deleteMarkedAtomsAndBonds = function deleteMarkedAtomsAndBonds_0(){
  return this.oclMolecule.deleteMarkedAtomsAndBonds_0();
}
;
_.deleteMolecule = function deleteMolecule_0(){
  this.oclMolecule.deleteMolecule_0();
}
;
_.deleteSelectedAtoms = function deleteSelectedAtoms_0(){
  return this.oclMolecule.deleteSelectedAtoms_0();
}
;
_.ensureHelperArrays = function ensureHelperArrays_1(required){
  this.oclMolecule.ensureHelperArrays_0(required);
}
;
_.findAlleneCenterAtom = function findAlleneCenterAtom_0(atom){
  return this.oclMolecule.findAlleneCenterAtom_0(atom);
}
;
_.findAtom = function findAtom_0(pickx, picky){
  return this.oclMolecule.findAtom_0(pickx, picky);
}
;
_.findBINAPChiralityBond = function findBINAPChiralityBond_0(atom){
  return this.oclMolecule.findBINAPChiralityBond_0(atom);
}
;
_.findBond = function findBond_0(pickx, picky){
  return this.oclMolecule.findBond_0(pickx, picky);
}
;
_.findRingSystem = function findRingSystem_0(startAtom, aromaticOnly, isMemberAtom, isMemberBond){
  this.oclMolecule.findRingSystem_0(startAtom, aromaticOnly, isMemberAtom, isMemberBond);
}
;
_.getAbsoluteAtomParity = function getAbsoluteAtomParity_0(atom){
  return this.oclMolecule.getAbsoluteAtomParity_0(atom);
}
;
_.getAbsoluteBondParity = function getAbsoluteBondParity_0(bond){
  return this.oclMolecule.getAbsoluteBondParity_0(bond);
}
;
_.getAllAtoms = function getAllAtoms_0(){
  return this.oclMolecule.getAllAtoms_0();
}
;
_.getAllBonds = function getAllBonds_0(){
  return this.oclMolecule.getAllBonds_0();
}
;
_.getAllConnAtoms = function getAllConnAtoms_0(atom){
  return this.oclMolecule.getAllConnAtoms_0(atom);
}
;
_.getAllConnAtomsPlusMetalBonds = function getAllConnAtomsPlusMetalBonds_0(atom){
  return this.oclMolecule.getAllConnAtomsPlusMetalBonds_0(atom);
}
;
_.getAllHydrogens = function getAllHydrogens_0(atom){
  return this.oclMolecule.getAllHydrogens_0(atom);
}
;
_.getAromaticRingCount = function getAromaticRingCount_0(){
  return this.oclMolecule.getAromaticRingCount_0();
}
;
_.getAtomAbnormalValence = function getAtomAbnormalValence_0(atom){
  return this.oclMolecule.getAtomAbnormalValence_0(atom);
}
;
_.getAtomCIPParity = function getAtomCIPParity_0(atom){
  return this.oclMolecule.getAtomCIPParity_0(atom);
}
;
_.getAtomCharge = function getAtomCharge_0(atom){
  return this.oclMolecule.getAtomCharge_0(atom);
}
;
_.getAtomColor = function getAtomColor_0(atom){
  return this.oclMolecule.getAtomColor_0(atom);
}
;
_.getAtomCustomLabel = function getAtomCustomLabel_0(atom){
  return this.oclMolecule.getAtomCustomLabel_0(atom);
}
;
_.getAtomESRGroup = function getAtomESRGroup_0(atom){
  return this.oclMolecule.getAtomESRGroup_0(atom);
}
;
_.getAtomESRType = function getAtomESRType_0(atom){
  return this.oclMolecule.getAtomESRType_0(atom);
}
;
_.getAtomLabel = function getAtomLabel_0(atom){
  return this.oclMolecule.getAtomLabel_0(atom);
}
;
_.getAtomList = function getAtomList_0(atom){
  return this.oclMolecule.getAtomList_0(atom);
}
;
_.getAtomListString = function getAtomListString_0(atom){
  return this.oclMolecule.getAtomListString_0(atom);
}
;
_.getAtomMapNo = function getAtomMapNo_0(atom){
  return this.oclMolecule.getAtomMapNo_0(atom);
}
;
_.getAtomMass = function getAtomMass_0(atom){
  return this.oclMolecule.getAtomMass_0(atom);
}
;
_.getAtomParity = function getAtomParity_0(atom){
  return this.oclMolecule.getAtomParity_0(atom);
}
;
_.getAtomPi = function getAtomPi_0(atom){
  return this.oclMolecule.getAtomPi_0(atom);
}
;
_.getAtomPreferredStereoBond = function getAtomPreferredStereoBond_0(atom){
  return this.oclMolecule.getAtomPreferredStereoBond_0(atom);
}
;
_.getAtomQueryFeatures = function getAtomQueryFeatures_0(atom){
  return this.oclMolecule.getAtomQueryFeatures_0(atom);
}
;
_.getAtomRadical = function getAtomRadical_0(atom){
  return this.oclMolecule.getAtomRadical_0(atom);
}
;
_.getAtomRingBondCount = function getAtomRingBondCount_0(atom){
  return this.oclMolecule.getAtomRingBondCount_0(atom);
}
;
_.getAtomRingCount = function getAtomRingCount_0(atom, maxRingSize){
  return this.oclMolecule.getAtomRingCount_0(atom, maxRingSize);
}
;
_.getAtomRingSize = function getAtomRingSize_1(atom){
  return this.oclMolecule.getAtomRingSize_0(atom);
}
;
_.getAtomX = function getAtomX_2(atom){
  return this.oclMolecule.getAtomX_1(atom);
}
;
_.getAtomY = function getAtomY_2(atom){
  return this.oclMolecule.getAtomY_1(atom);
}
;
_.getAtomZ = function getAtomZ_0(atom){
  return this.oclMolecule.getAtomZ_0(atom);
}
;
_.getAtomicNo = function getAtomicNo_0(atom){
  return this.oclMolecule.getAtomicNo_0(atom);
}
;
_.getAtoms = function getAtoms_0(){
  return this.oclMolecule.getAtoms_0();
}
;
_.getAverageBondLength = function getAverageBondLength_3(nonHydrogenBondsOnly){
  return this.oclMolecule.getAverageBondLength_3(nonHydrogenBondsOnly);
}
;
_.getAverageTopologicalAtomDistance = function getAverageTopologicalAtomDistance_0(){
  return this.oclMolecule.getAverageTopologicalAtomDistance_0();
}
;
_.getBond = function getBond_0(atom1, atom2){
  return this.oclMolecule.getBond_0(atom1, atom2);
}
;
_.getBondAngle = function getBondAngle_0(atom1, atom2){
  return this.oclMolecule.getBondAngle_0(atom1, atom2);
}
;
_.getBondAtom = function getBondAtom_0(no, bond){
  return this.oclMolecule.getBondAtom_0(no, bond);
}
;
_.getBondBridgeMaxSize = function getBondBridgeMaxSize_0(bond){
  return this.oclMolecule.getBondBridgeMaxSize_0(bond);
}
;
_.getBondBridgeMinSize = function getBondBridgeMinSize_0(bond){
  return this.oclMolecule.getBondBridgeMinSize_0(bond);
}
;
_.getBondCIPParity = function getBondCIPParity_0(bond){
  return this.oclMolecule.getBondCIPParity_0(bond);
}
;
_.getBondESRGroup = function getBondESRGroup_0(bond){
  return this.oclMolecule.getBondESRGroup_0(bond);
}
;
_.getBondESRType = function getBondESRType_0(bond){
  return this.oclMolecule.getBondESRType_0(bond);
}
;
_.getBondLength = function getBondLength_0(bond){
  return this.oclMolecule.getBondLength_0(bond);
}
;
_.getBondOrder = function getBondOrder_0(bond){
  return this.oclMolecule.getBondOrder_0(bond);
}
;
_.getBondParity = function getBondParity_0(bnd){
  return this.oclMolecule.getBondParity_0(bnd);
}
;
_.getBondPreferredStereoBond = function getBondPreferredStereoBond_0(bond){
  return this.oclMolecule.getBondPreferredStereoBond_0(bond);
}
;
_.getBondQueryFeatures = function getBondQueryFeatures_0(bnd){
  return this.oclMolecule.getBondQueryFeatures_0(bnd);
}
;
_.getBondRingSize = function getBondRingSize_1(bond){
  return this.oclMolecule.getBondRingSize_0(bond);
}
;
_.getBondType = function getBondType_0(bond){
  return this.oclMolecule.getBondType_0(bond);
}
;
_.getBondTypeSimple = function getBondTypeSimple_0(bond){
  return this.oclMolecule.getBondTypeSimple_0(bond);
}
;
_.getBonds = function getBonds_0(){
  return this.oclMolecule.getBonds_0();
}
;
_.getCanonizedIDCode = function getCanonizedIDCode(flag){
  var canonizer;
  canonizer = new carc.Canonizer_0(this.oclMolecule, flag);
  return canonizer.getIDCode_0();
}
;
_.getChiralText = function getChiralText_1(){
  return this.oclMolecule.getChiralText_0();
}
;
_.getChirality = function getChirality_0(){
  return this.oclMolecule.getChirality_0();
}
;
_.getCompactCopy = function getCompactCopy_0(){
  return new cargm.JSMolecule_1(this.oclMolecule.getCompactCopy_0());
}
;
_.getConnAtom = function getConnAtom_0(atom, i){
  return this.oclMolecule.getConnAtom_0(atom, i);
}
;
_.getConnAtoms = function getConnAtoms_1(atom){
  return this.oclMolecule.getConnAtoms_0(atom);
}
;
_.getConnBond = function getConnBond_0(atom, i){
  return this.oclMolecule.getConnBond_0(atom, i);
}
;
_.getConnBondOrder = function getConnBondOrder_0(atom, i){
  return this.oclMolecule.getConnBondOrder_0(atom, i);
}
;
_.getDefaultMaxValenceUncharged = function getDefaultMaxValenceUncharged_0(atom){
  return this.oclMolecule.getDefaultMaxValenceUncharged_0(atom);
}
;
_.getDiastereotopicAtomIDs = function getDiastereotopicAtomIDs(){
  return carcc.getAtomIds(this.oclMolecule);
}
;
_.getElectronValenceCorrection = function getElectronValenceCorrection_0(atom, occupiedValence){
  return this.oclMolecule.getElectronValenceCorrection_0(atom, occupiedValence);
}
;
_.getExcludeGroupValence = function getExcludeGroupValence_0(atom){
  return this.oclMolecule.getExcludeGroupValence_0(atom);
}
;
_.getExplicitHydrogens = function getExplicitHydrogens_0(atom){
  return this.oclMolecule.getExplicitHydrogens_0(atom);
}
;
_.getFisherProjectionParity = function getFisherProjectionParity_0(atom, sortedConnMap, angle, direction){
  return this.oclMolecule.getFisherProjectionParity_0(atom, sortedConnMap, angle, direction);
}
;
_.getFragmentAtoms = function getFragmentAtoms_0(rootAtom, considerMetalBonds){
  return this.oclMolecule.getFragmentAtoms_0(rootAtom, considerMetalBonds);
}
;
_.getFragmentNumbers = function getFragmentNumbers_0(fragmentNo, markedAtomsOnly, considerMetalBonds){
  return this.oclMolecule.getFragmentNumbers_0(fragmentNo, markedAtomsOnly, considerMetalBonds);
}
;
_.getFragments = function getFragments_1(){
  var fragments, i, newFragments;
  fragments = this.oclMolecule.getFragments_0();
  newFragments = initUnidimensionalArray(cggl.Lcom_actelion_research_gwt_minimal_JSMolecule_2_classLit, {4:1, 1:1, 8:1}, 41, fragments.length, 0, 1);
  for (i = 0; i < fragments.length; i++) {
    setCheck(newFragments, i, new cargm.JSMolecule_1(fragments[i]));
  }
  return newFragments;
}
;
_.getFreeValence = function getFreeValence_0(atom){
  return this.oclMolecule.getFreeValence_0(atom);
}
;
_.getHandleHydrogenMap = function getHandleHydrogenMap_1(){
  return this.oclMolecule.getHandleHydrogenMap_0();
}
;
_.getHelperArrayStatus = function getHelperArrayStatus_0(){
  return this.oclMolecule.getHelperArrayStatus_0();
}
;
_.getHoseCodes = function getHoseCodes_0(options){
  options = options || {};
  var maxSphereSize = (typeof options.maxSphereSize === 'undefined'?5:options.maxSphereSize) | 0;
  var type_0 = (typeof options.type === 'undefined'?0:options.type) | 0;
  return carcc.getHoseCodes(this.oclMolecule, maxSphereSize, type_0);
}
;
_.getIDCode = function getIDCode_2(){
  return this.oclMolecule.getIDCode_0();
}
;
_.getIDCodeAndCoordinates = function getIDCodeAndCoordinates(){
  return {idCode:this.getIDCode(), coordinates:this.getIDCoordinates()};
}
;
_.getIDCoordinates = function getIDCoordinates_0(){
  return this.oclMolecule.getIDCoordinates_0();
}
;
_.getImplicitHigherValence = function getImplicitHigherValence_0(atom, neglectExplicitHydrogen){
  return this.oclMolecule.getImplicitHigherValence_0(atom, neglectExplicitHydrogen);
}
;
_.getImplicitHydrogens = function getImplicitHydrogens_0(atom){
  return this.oclMolecule.getImplicitHydrogens_0(atom);
}
;
_.getIndex = function getIndex(){
  return cargm.services.getSSSearcherWithIndex().createIndex_0(this.oclMolecule);
}
;
_.getLowestFreeValence = function getLowestFreeValence_0(atom){
  return this.oclMolecule.getLowestFreeValence_0(atom);
}
;
_.getMaxAtoms = function getMaxAtoms_0(){
  return this.oclMolecule.getMaxAtoms_0();
}
;
_.getMaxBonds = function getMaxBonds_0(){
  return this.oclMolecule.getMaxBonds_0();
}
;
_.getMaxValence = function getMaxValence_0(atom){
  return this.oclMolecule.getMaxValence_0(atom);
}
;
_.getMaxValenceUncharged = function getMaxValenceUncharged_0(atom){
  return this.oclMolecule.getMaxValenceUncharged_0(atom);
}
;
_.getMetalBondedConnAtoms = function getMetalBondedConnAtoms_0(atom){
  return this.oclMolecule.getMetalBondedConnAtoms_0(atom);
}
;
_.getMolecularFormula = function getMolecularFormula(){
  return new cargm.MolecularFormula_0(this.oclMolecule);
}
;
_.getMoleculeColor = function getMoleculeColor_0(){
  return this.oclMolecule.getMoleculeColor_0();
}
;
_.getMolweight = function getMolweight_0(){
  return this.oclMolecule.getMolweight_0();
}
;
_.getName = function getName_0(){
  return this.oclMolecule.getName_0();
}
;
_.getNonHydrogenNeighbourCount = function getNonHydrogenNeighbourCount_0(atom){
  return this.oclMolecule.getNonHydrogenNeighbourCount_0(atom);
}
;
_.getNumberOfHydrogens = function getNumberOfHydrogens_0(){
  return carcc.getNumberOfHydrogens(this.oclMolecule);
}
;
_.getOccupiedValence = function getOccupiedValence_1(atom){
  return this.oclMolecule.getOccupiedValence_0(atom);
}
;
_.getPath = function getPath_0(pathAtom, atom1, atom2, maxLength, neglectBond){
  return this.oclMolecule.getPath_0(pathAtom, atom1, atom2, maxLength, neglectBond);
}
;
_.getPathBonds = function getPathBonds_0(pathAtom, pathBond, pathLength){
  this.oclMolecule.getPathBonds_0(pathAtom, pathBond, pathLength);
}
;
_.getPathLength = function getPathLength_1(atom1, atom2){
  return this.oclMolecule.getPathLength_0(atom1, atom2);
}
;
_.getRingSet = function getRingSet_0(){
  return new cargm.JSRingCollection(this.oclMolecule.getRingSet_0());
}
;
_.getRotatableBondCount = function getRotatableBondCount_0(){
  return this.oclMolecule.getRotatableBondCount_0();
}
;
_.getSVG = function getSVG(width_0, height, factorTextSize, id_0, options){
  var d, mode;
  mode = cargm.getDisplayMode(options);
  d = new carc.SVGDepictor(this.oclMolecule, mode, id_0);
  d.setFactorTextSize(factorTextSize);
  d.validateView(null, new jag.Rectangle2D$Double_0(0, 0, width_0, height), 65536);
  d.paint(null);
  return d.toString_0();
}
;
_.getStereoBond = function getStereoBond_0(atom){
  return this.oclMolecule.getStereoBond_0(atom);
}
;
_.getStereoCenterCount = function getStereoCenterCount_0(){
  return this.oclMolecule.getStereoCenterCount_0();
}
;
_.getStereoMolecule = function getStereoMolecule(){
  return this.oclMolecule;
}
;
_.getStereoProblem = function getStereoProblem_0(atom){
  return this.oclMolecule.getStereoProblem_0(atom);
}
;
_.getSubstituent = function getSubstituent_0(coreAtom, firstAtom, isMemberAtom, substituent, atomMap){
  return this.oclMolecule.getSubstituent_0(coreAtom, firstAtom, isMemberAtom, substituent.getStereoMolecule(), atomMap);
}
;
_.getSubstituentSize = function getSubstituentSize_0(coreAtom, firstAtom){
  return this.oclMolecule.getSubstituentSize_0(coreAtom, firstAtom);
}
;
_.getSymmetryRank = function getSymmetryRank_1(atom){
  return this.oclMolecule.getSymmetryRank_0(atom);
}
;
_.getZNeighbour = function getZNeighbour_0(connAtom, bond){
  return this.oclMolecule.getZNeighbour_0(connAtom, bond);
}
;
_.invalidateHelperArrays = function invalidateHelperArrays_0(helperBits){
  this.oclMolecule.invalidateHelperArrays_0(helperBits);
}
;
_.inventCoordinates = function inventCoordinates_1(){
  var inventor;
  inventor = new carcc2.CoordinateInventor;
  inventor.setRandomSeed(0);
  inventor.invent(this.oclMolecule);
  this.oclMolecule.setStereoBondsFromParity_0();
}
;
_.isAlkaliMetal = function isAlkaliMetal_0(atom){
  return this.oclMolecule.isAlkaliMetal_0(atom);
}
;
_.isAllylicAtom = function isAllylicAtom_0(atom){
  return this.oclMolecule.isAllylicAtom_0(atom);
}
;
_.isAmideTypeBond = function isAmideTypeBond_0(bond){
  return this.oclMolecule.isAmideTypeBond_0(bond);
}
;
_.isAromaticAtom = function isAromaticAtom_2(atom){
  return this.oclMolecule.isAromaticAtom_1(atom);
}
;
_.isAromaticBond = function isAromaticBond_1(bnd){
  return this.oclMolecule.isAromaticBond_0(bnd);
}
;
_.isAtomConfigurationUnknown = function isAtomConfigurationUnknown_0(atom){
  return this.oclMolecule.isAtomConfigurationUnknown_0(atom);
}
;
_.isAtomMarkedForDeletion = function isAtomMarkedForDeletion_0(atom){
  return this.oclMolecule.isAtomMarkedForDeletion_0(atom);
}
;
_.isAtomParityPseudo = function isAtomParityPseudo_0(atom){
  return this.oclMolecule.isAtomParityPseudo_0(atom);
}
;
_.isAtomStereoCenter = function isAtomStereoCenter_0(atom){
  return this.oclMolecule.isAtomStereoCenter_0(atom);
}
;
_.isAutoMappedAtom = function isAutoMappedAtom_0(atom){
  return this.oclMolecule.isAutoMappedAtom_0(atom);
}
;
_.isBINAPChiralityBond = function isBINAPChiralityBond_0(bond){
  return this.oclMolecule.isBINAPChiralityBond_0(bond);
}
;
_.isBondBackgroundHilited = function isBondBackgroundHilited_0(bond){
  return this.oclMolecule.isBondBackgroundHilited_0(bond);
}
;
_.isBondBridge = function isBondBridge_0(bond){
  return this.oclMolecule.isBondBridge_0(bond);
}
;
_.isBondForegroundHilited = function isBondForegroundHilited_0(bond){
  return this.oclMolecule.isBondForegroundHilited_0(bond);
}
;
_.isBondMarkedForDeletion = function isBondMarkedForDeletion_0(bond){
  return this.oclMolecule.isBondMarkedForDeletion_0(bond);
}
;
_.isBondParityPseudo = function isBondParityPseudo_0(bond){
  return this.oclMolecule.isBondParityPseudo_0(bond);
}
;
_.isBondParityUnknownOrNone = function isBondParityUnknownOrNone_0(bond){
  return this.oclMolecule.isBondParityUnknownOrNone_0(bond);
}
;
_.isChalcogene = function isChalcogene_0(atom){
  return this.oclMolecule.isChalcogene_0(atom);
}
;
_.isDelocalizedBond = function isDelocalizedBond_0(bond){
  return this.oclMolecule.isDelocalizedBond_0(bond);
}
;
_.isEarthAlkaliMetal = function isEarthAlkaliMetal_0(atom){
  return this.oclMolecule.isEarthAlkaliMetal_0(atom);
}
;
_.isElectronegative = function isElectronegative_0(atom){
  return this.oclMolecule.isElectronegative_0(atom);
}
;
_.isElectropositive = function isElectropositive_0(atom){
  return this.oclMolecule.isElectropositive_0(atom);
}
;
_.isFlatNitrogen = function isFlatNitrogen_0(atom){
  return this.oclMolecule.isFlatNitrogen_0(atom);
}
;
_.isFragment = function isFragment_1(){
  return this.oclMolecule.isFragment_0();
}
;
_.isHalogene = function isHalogene_0(atom){
  return this.oclMolecule.isHalogene_0(atom);
}
;
_.isMarkedAtom = function isMarkedAtom_0(atom){
  return this.oclMolecule.isMarkedAtom_0(atom);
}
;
_.isMetalAtom = function isMetalAtom_0(atom){
  return this.oclMolecule.isMetalAtom_0(atom);
}
;
_.isNaturalAbundance = function isNaturalAbundance_0(atom){
  return this.oclMolecule.isNaturalAbundance_0(atom);
}
;
_.isNitrogenFamily = function isNitrogenFamily_0(atom){
  return this.oclMolecule.isNitrogenFamily_0(atom);
}
;
_.isOrganicAtom = function isOrganicAtom_0(atom){
  return this.oclMolecule.isOrganicAtom_0(atom);
}
;
_.isPseudoRotatableBond = function isPseudoRotatableBond_0(bond){
  return this.oclMolecule.isPseudoRotatableBond_0(bond);
}
;
_.isPurelyOrganic = function isPurelyOrganic_0(){
  return this.oclMolecule.isPurelyOrganic_0();
}
;
_.isRingAtom = function isRingAtom_0(atom){
  return this.oclMolecule.isRingAtom_0(atom);
}
;
_.isRingBond = function isRingBond_0(bnd){
  return this.oclMolecule.isRingBond_0(bnd);
}
;
_.isSelectedAtom = function isSelectedAtom_0(atom){
  return this.oclMolecule.isSelectedAtom_0(atom);
}
;
_.isSelectedBond = function isSelectedBond_0(bond){
  return this.oclMolecule.isSelectedBond_0(bond);
}
;
_.isSimpleHydrogen = function isSimpleHydrogen_1(atom){
  return this.oclMolecule.isSimpleHydrogen_0(atom);
}
;
_.isSmallRingAtom = function isSmallRingAtom_0(atom){
  return this.oclMolecule.isSmallRingAtom_0(atom);
}
;
_.isSmallRingBond = function isSmallRingBond_0(bond){
  return this.oclMolecule.isSmallRingBond_0(bond);
}
;
_.isStabilizedAtom = function isStabilizedAtom_0(atom){
  return this.oclMolecule.isStabilizedAtom_0(atom);
}
;
_.isStereoBond = function isStereoBond_1(bond){
  return this.oclMolecule.isStereoBond_0(bond);
}
;
_.markAtomForDeletion = function markAtomForDeletion_0(atom){
  this.oclMolecule.markAtomForDeletion_0(atom);
}
;
_.markBondForDeletion = function markBondForDeletion_0(bond){
  this.oclMolecule.markBondForDeletion_0(bond);
}
;
_.normalizeAmbiguousBonds = function normalizeAmbiguousBonds_0(){
  return this.oclMolecule.normalizeAmbiguousBonds_0();
}
;
_.removeAtomColors = function removeAtomColors_0(){
  this.oclMolecule.removeAtomColors_0();
}
;
_.removeAtomCustomLabels = function removeAtomCustomLabels_0(){
  this.oclMolecule.removeAtomCustomLabels_0();
}
;
_.removeAtomMarkers = function removeAtomMarkers_0(){
  this.oclMolecule.removeAtomMarkers_0();
}
;
_.removeAtomSelection = function removeAtomSelection_0(){
  this.oclMolecule.removeAtomSelection_0();
}
;
_.removeBondHiliting = function removeBondHiliting_0(){
  this.oclMolecule.removeBondHiliting_0();
}
;
_.removeExplicitHydrogens = function removeExplicitHydrogens_0(){
  this.oclMolecule.removeExplicitHydrogens_0();
}
;
_.removeQueryFeatures = function removeQueryFeatures_0(){
  return this.oclMolecule.removeQueryFeatures_0();
}
;
_.renumberESRGroups = function renumberESRGroups_0(type_0){
  return this.oclMolecule.renumberESRGroups_0(type_0);
}
;
_.scaleCoords = function scaleCoords_0(f){
  this.oclMolecule.scaleCoords_0(f);
}
;
_.setAllAtoms = function setAllAtoms_0(no){
  this.oclMolecule.setAllAtoms_0(no);
}
;
_.setAllBonds = function setAllBonds_0(no){
  this.oclMolecule.setAllBonds_0(no);
}
;
_.setAssignParitiesToNitrogen = function setAssignParitiesToNitrogen_0(b){
  this.oclMolecule.setAssignParitiesToNitrogen_0(b);
}
;
_.setAtomAbnormalValence = function setAtomAbnormalValence_0(atom, valence){
  this.oclMolecule.setAtomAbnormalValence_0(atom, valence);
}
;
_.setAtomCIPParity = function setAtomCIPParity_0(atom, parity){
  this.oclMolecule.setAtomCIPParity_0(atom, parity);
}
;
_.setAtomCharge = function setAtomCharge_0(atom, charge){
  this.oclMolecule.setAtomCharge_0(atom, charge);
}
;
_.setAtomColor = function setAtomColor_0(atom, color_0){
  this.oclMolecule.setAtomColor_0(atom, color_0);
}
;
_.setAtomConfigurationUnknown = function setAtomConfigurationUnknown_0(atom, u){
  this.oclMolecule.setAtomConfigurationUnknown_0(atom, u);
}
;
_.setAtomCustomLabel = function setAtomCustomLabel_1(atom, label_0){
  this.oclMolecule.setAtomCustomLabel_0(atom, label_0);
}
;
_.setAtomESR = function setAtomESR_0(atom, type_0, group){
  this.oclMolecule.setAtomESR_0(atom, type_0, group);
}
;
_.setAtomList = function setAtomList_1(atom, list, isExcludeList){
  this.oclMolecule.setAtomList_1(atom, list, isExcludeList);
}
;
_.setAtomMapNo = function setAtomMapNo_0(atom, mapNo, autoMapped){
  this.oclMolecule.setAtomMapNo_0(atom, mapNo, autoMapped);
}
;
_.setAtomMarker = function setAtomMarker_0(atom, s){
  this.oclMolecule.setAtomMarker_0(atom, s);
}
;
_.setAtomMass = function setAtomMass_0(atom, mass){
  this.oclMolecule.setAtomMass_0(atom, mass);
}
;
_.setAtomParity = function setAtomParity_0(atom, parity, isPseudo){
  this.oclMolecule.setAtomParity_0(atom, parity, isPseudo);
}
;
_.setAtomQueryFeature = function setAtomQueryFeature_0(atom, feature, value_0){
  this.oclMolecule.setAtomQueryFeature_0(atom, feature, value_0);
}
;
_.setAtomRadical = function setAtomRadical_0(atom, radical){
  this.oclMolecule.setAtomRadical_0(atom, radical);
}
;
_.setAtomSelection = function setAtomSelection_0(atom, s){
  this.oclMolecule.setAtomSelection_0(atom, s);
}
;
_.setAtomX = function setAtomX_0(atom, x_0){
  this.oclMolecule.setAtomX_0(atom, x_0);
}
;
_.setAtomY = function setAtomY_0(atom, y_0){
  this.oclMolecule.setAtomY_0(atom, y_0);
}
;
_.setAtomZ = function setAtomZ_0(atom, z_0){
  this.oclMolecule.setAtomZ_0(atom, z_0);
}
;
_.setAtomicNo = function setAtomicNo_0(atom, no){
  this.oclMolecule.setAtomicNo_0(atom, no);
}
;
_.setBondAtom = function setBondAtom_0(no, bond, atom){
  this.oclMolecule.setBondAtom_0(no, bond, atom);
}
;
_.setBondBackgroundHiliting = function setBondBackgroundHiliting_0(bond, s){
  this.oclMolecule.setBondBackgroundHiliting_0(bond, s);
}
;
_.setBondCIPParity = function setBondCIPParity_0(bond, parity){
  this.oclMolecule.setBondCIPParity_0(bond, parity);
}
;
_.setBondESR = function setBondESR_0(bond, type_0, group){
  this.oclMolecule.setBondESR_0(bond, type_0, group);
}
;
_.setBondForegroundHiliting = function setBondForegroundHiliting_0(bond, s){
  this.oclMolecule.setBondForegroundHiliting_0(bond, s);
}
;
_.setBondOrder = function setBondOrder_0(bond, order){
  this.oclMolecule.setBondOrder_0(bond, order);
}
;
_.setBondParity = function setBondParity_0(bond, parity, isPseudo){
  this.oclMolecule.setBondParity_0(bond, parity, isPseudo);
}
;
_.setBondParityUnknownOrNone = function setBondParityUnknownOrNone_0(bond){
  this.oclMolecule.setBondParityUnknownOrNone_0(bond);
}
;
_.setBondQueryFeature = function setBondQueryFeature_0(bond, feature, value_0){
  this.oclMolecule.setBondQueryFeature_0(bond, feature, value_0);
}
;
_.setBondType = function setBondType_0(bond, type_0){
  this.oclMolecule.setBondType_0(bond, type_0);
}
;
_.setChirality = function setChirality_0(c){
  this.oclMolecule.setChirality_0(c);
}
;
_.setFragment = function setFragment_3(isFragment){
  this.oclMolecule.setFragment_0(isFragment);
}
;
_.setHelperValidity = function setHelperValidity_0(helperValidity){
  this.oclMolecule.setHelperValidity_0(helperValidity);
}
;
_.setHydrogenProtection = function setHydrogenProtection_0(protectHydrogen){
  this.oclMolecule.setHydrogenProtection_0(protectHydrogen);
}
;
_.setMaxAtoms = function setMaxAtoms_0(v){
  this.oclMolecule.setMaxAtoms_0(v);
}
;
_.setMaxBonds = function setMaxBonds_0(v){
  this.oclMolecule.setMaxBonds_0(v);
}
;
_.setMoleculeColor = function setMoleculeColor_0(color_0){
  this.oclMolecule.setMoleculeColor_0(color_0);
}
;
_.setName = function setName_0(name_0){
  this.oclMolecule.setName_0(name_0);
}
;
_.setParitiesValid = function setParitiesValid_0(helperStereoBits){
  this.oclMolecule.setParitiesValid_0(helperStereoBits);
}
;
_.setStereoBondFromAtomParity = function setStereoBondFromAtomParity_0(atom){
  this.oclMolecule.setStereoBondFromAtomParity_0(atom);
}
;
_.setStereoBondFromBondParity = function setStereoBondFromBondParity_0(bond){
  this.oclMolecule.setStereoBondFromBondParity_0(bond);
}
;
_.setStereoBondsFromParity = function setStereoBondsFromParity_0(){
  this.oclMolecule.setStereoBondsFromParity_0();
}
;
_.setToRacemate = function setToRacemate_0(){
  this.oclMolecule.setToRacemate_0();
}
;
_.setUnknownParitiesToExplicitlyUnknown = function setUnknownParitiesToExplicitlyUnknown_1(){
  this.oclMolecule.setUnknownParitiesToExplicitlyUnknown_0();
}
;
_.shareSameFragment = function shareSameFragment_0(atom1, atom2){
  return this.oclMolecule.shareSameFragment_0(atom1, atom2);
}
;
_.stripIsotopInfo = function stripIsotopInfo_0(){
  return this.oclMolecule.stripIsotopInfo_0();
}
;
_.stripSmallFragments = function stripSmallFragments_0(considerMetalBonds){
  return this.oclMolecule.stripSmallFragments_0(considerMetalBonds);
}
;
_.stripStereoInformation = function stripStereoInformation_0(){
  this.oclMolecule.stripStereoInformation_0();
}
;
_.suggestBondType = function suggestBondType_0(atom1, atom2){
  return this.oclMolecule.suggestBondType_0(atom1, atom2);
}
;
_.supportsImplicitHydrogen = function supportsImplicitHydrogen_0(atom){
  return this.oclMolecule.supportsImplicitHydrogen_0(atom);
}
;
_.toMolfile = function toMolfile(){
  var creator;
  creator = new carc.MolfileCreator(this.oclMolecule);
  return creator.getMolfile();
}
;
_.toMolfileV3 = function toMolfileV3(){
  var creator;
  creator = new carc.MolfileV3Creator(this.oclMolecule);
  return creator.getMolfile();
}
;
_.toSVG = function toSVG(width_0, height, id_0, options){
  options = options || {};
  var factorTextSize = options.factorTextSize || 1;
  var svg = this.getSVG(width_0, height, factorTextSize, id_0, options);
  if (options.fontWeight) {
    svg = svg.replace(/font-family=" Helvetica" /g, 'font-family=" Helvetica" font-weight="' + options.fontWeight + '" ');
  }
  if (options.strokeWidth) {
    svg = svg.replace(/stroke-width:1/g, 'stroke-width:' + options.strokeWidth + ' ');
  }
  return svg;
}
;
_.toSmiles = function toSmiles(){
  return (new carc.SmilesCreator).generateSmiles(this.oclMolecule);
}
;
_.translateCoords = function translateCoords_0(dx, dy){
  this.oclMolecule.translateCoords_0(dx, dy);
}
;
_.validate = function validate_1(){
  this.oclMolecule.validate_0();
}
;
_.zoomAndRotate = function zoomAndRotate_0(zoom, angle, selected){
  this.oclMolecule.zoomAndRotate_0(zoom, angle, selected);
}
;
_.zoomAndRotateInit = function zoomAndRotateInit_0(x_0, y_0){
  this.oclMolecule.zoomAndRotateInit_0(x_0, y_0);
}
;
cargm.CANONIZER_ASSIGN_PARITIES_TO_TETRAHEDRAL_N = 32;
cargm.CANONIZER_CONSIDER_DIASTEREOTOPICITY = 2;
cargm.CANONIZER_CONSIDER_ENANTIOTOPICITY = 4;
cargm.CANONIZER_CONSIDER_STEREOHETEROTOPICITY = 0;
cargm.CANONIZER_COORDS_ARE_3D = 64;
cargm.CANONIZER_CREATE_PSEUDO_STEREO_GROUPS = 128;
cargm.CANONIZER_CREATE_SYMMETRY_RANK = 1;
cargm.CANONIZER_DISTINGUISH_RACEMIC_OR_GROUPS = 256;
cargm.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS = 8;
cargm.CANONIZER_ENCODE_ATOM_SELECTION = 16;
cargm.FISCHER_PROJECTION_LIMIT_0 = 0;
cargm.STEREO_ANGLE_LIMIT_0 = 0;
cargm.VALIDATION_ERROR_AMBIGUOUS_CONFIGURATION_0 = 'Ambiguous configuration at stereo center because of 2 parallel bonds';
cargm.VALIDATION_ERROR_ESR_CENTER_UNKNOWN_0 = 'Members of ESR groups must only be stereo centers with known configuration.';
cargm.VALIDATION_ERROR_OVER_UNDER_SPECIFIED_0 = 'Over- or under-specified stereo feature or more than one racemic type bond';
cargm.cAtomCIPParityNone_0 = 0;
cargm.cAtomCIPParityProblem_0 = 3;
cargm.cAtomCIPParityRorM_0 = 1;
cargm.cAtomCIPParitySorP_0 = 2;
cargm.cAtomColorBlue_0 = 64;
cargm.cAtomColorDarkGreen_0 = 384;
cargm.cAtomColorDarkRed_0 = 448;
cargm.cAtomColorGreen_0 = 192;
cargm.cAtomColorMagenta_0 = 256;
cargm.cAtomColorNone_0 = 0;
cargm.cAtomColorOrange_0 = 320;
cargm.cAtomColorRed_0 = 128;
cargm.cAtomParity1_0 = 1;
cargm.cAtomParity2_0 = 2;
cargm.cAtomParityIsPseudo_0 = 4;
cargm.cAtomParityNone_0 = 0;
cargm.cAtomParityUnknown_0 = 3;
cargm.cAtomQFAny_0 = 1;
cargm.cAtomQFAromState_0 = 6;
cargm.cAtomQFAromStateBits_0 = 2;
cargm.cAtomQFAromStateShift_0 = 1;
cargm.cAtomQFAromatic_0 = 2;
cargm.cAtomQFCharge_0 = 234881024;
cargm.cAtomQFChargeBits_0 = 3;
cargm.cAtomQFChargeShift_0 = 25;
cargm.cAtomQFExcludeGroup_0 = 536870912;
cargm.cAtomQFFlatNitrogen_0 = 268435456;
cargm.cAtomQFHydrogen_0 = 1920;
cargm.cAtomQFHydrogenBits_0 = 4;
cargm.cAtomQFHydrogenShift_0 = 7;
cargm.cAtomQFMatchStereo_0 = 8192;
cargm.cAtomQFMoreNeighbours_0 = 4096;
cargm.cAtomQFNarrowing_0 = 239060990;
cargm.cAtomQFNeighbourBits_0 = 5;
cargm.cAtomQFNeighbourShift_0 = 17;
cargm.cAtomQFNeighbours_0 = 4063232;
cargm.cAtomQFNoMoreNeighbours_0 = 2048;
cargm.cAtomQFNoOfBits_0 = 30;
cargm.cAtomQFNot0Hydrogen_0 = 128;
cargm.cAtomQFNot0Neighbours_0 = 131072;
cargm.cAtomQFNot0PiElectrons_0 = 16384;
cargm.cAtomQFNot1Hydrogen_0 = 256;
cargm.cAtomQFNot1Neighbour_0 = 262144;
cargm.cAtomQFNot1PiElectron_0 = 32768;
cargm.cAtomQFNot2Hydrogen_0 = 512;
cargm.cAtomQFNot2Neighbours_0 = 524288;
cargm.cAtomQFNot2PiElectrons_0 = 65536;
cargm.cAtomQFNot2RingBonds_0 = 16;
cargm.cAtomQFNot3Hydrogen_0 = 1024;
cargm.cAtomQFNot3Neighbours_0 = 1048576;
cargm.cAtomQFNot3RingBonds_0 = 32;
cargm.cAtomQFNot4Neighbours_0 = 2097152;
cargm.cAtomQFNot4RingBonds_0 = 64;
cargm.cAtomQFNotAromatic_0 = 4;
cargm.cAtomQFNotChain_0 = 8;
cargm.cAtomQFNotCharge0_0 = 67108864;
cargm.cAtomQFNotChargeNeg_0 = 33554432;
cargm.cAtomQFNotChargePos_0 = 134217728;
cargm.cAtomQFPiElectronBits_0 = 3;
cargm.cAtomQFPiElectronShift_0 = 14;
cargm.cAtomQFPiElectrons_0 = 114688;
cargm.cAtomQFRingSize_0 = 29360128;
cargm.cAtomQFRingSizeBits_0 = 3;
cargm.cAtomQFRingSizeShift_0 = 22;
cargm.cAtomQFRingState_0 = 120;
cargm.cAtomQFRingStateBits_0 = 4;
cargm.cAtomQFRingStateShift_0 = 3;
cargm.cAtomQFSimpleFeatures_0 = 239060990;
cargm.cAtomRadicalState_0 = 48;
cargm.cAtomRadicalStateD_0 = 32;
cargm.cAtomRadicalStateNone_0 = 0;
cargm.cAtomRadicalStateS_0 = 16;
cargm.cAtomRadicalStateShift_0 = 4;
cargm.cAtomRadicalStateT_0 = 48;
cargm.cBondCIPParityEorP_0 = 1;
cargm.cBondCIPParityNone_0 = 0;
cargm.cBondCIPParityProblem_0 = 3;
cargm.cBondCIPParityZorM_0 = 2;
cargm.cBondParityEor1_0 = 1;
cargm.cBondParityNone_0 = 0;
cargm.cBondParityUnknown_0 = 3;
cargm.cBondParityZor2_0 = 2;
cargm.cBondQFAllFeatures_0 = 2097151;
cargm.cBondQFAromState_0 = 1572864;
cargm.cBondQFAromStateBits_0 = 2;
cargm.cBondQFAromStateShift_0 = 19;
cargm.cBondQFAromatic_0 = 524288;
cargm.cBondQFBondTypes_0 = 31;
cargm.cBondQFBondTypesBits_0 = 5;
cargm.cBondQFBondTypesShift_0 = 0;
cargm.cBondQFBridge_0 = 32640;
cargm.cBondQFBridgeBits_0 = 8;
cargm.cBondQFBridgeMin_0 = 1920;
cargm.cBondQFBridgeMinBits_0 = 4;
cargm.cBondQFBridgeMinShift_0 = 7;
cargm.cBondQFBridgeShift_0 = 7;
cargm.cBondQFBridgeSpan_0 = 30720;
cargm.cBondQFBridgeSpanBits_0 = 4;
cargm.cBondQFBridgeSpanShift_0 = 11;
cargm.cBondQFDelocalized_0 = 8;
cargm.cBondQFDouble_0 = 2;
cargm.cBondQFMatchStereo_0 = 262144;
cargm.cBondQFMetalLigand_0 = 16;
cargm.cBondQFNarrowing_0 = 1572960;
cargm.cBondQFNoOfBits_0 = 21;
cargm.cBondQFNotAromatic_0 = 1048576;
cargm.cBondQFNotRing_0 = 32;
cargm.cBondQFRing_0 = 64;
cargm.cBondQFRingSize_0 = 229376;
cargm.cBondQFRingSizeBits_0 = 3;
cargm.cBondQFRingSizeShift_0 = 15;
cargm.cBondQFRingState_0 = 96;
cargm.cBondQFRingStateBits_0 = 2;
cargm.cBondQFRingStateShift_0 = 5;
cargm.cBondQFSimpleFeatures_0 = 1572991;
cargm.cBondQFSingle_0 = 1;
cargm.cBondQFTriple_0 = 4;
cargm.cBondTypeCross_0 = 26;
cargm.cBondTypeDeleted_0 = 128;
cargm.cBondTypeDelocalized_0 = 64;
cargm.cBondTypeDouble_0 = 2;
cargm.cBondTypeDown_0 = 9;
cargm.cBondTypeIncreaseOrder_0 = 127;
cargm.cBondTypeMetalLigand_0 = 32;
cargm.cBondTypeSingle_0 = 1;
cargm.cBondTypeTriple_0 = 4;
cargm.cBondTypeUp_0 = 17;
cargm.cChiralityDiastereomers_0 = 458752;
cargm.cChiralityEpimers_0 = 393216;
cargm.cChiralityIsomerCountMask_0 = 65535;
cargm.cChiralityKnownEnantiomer_0 = 262144;
cargm.cChiralityMeso_0 = 131072;
cargm.cChiralityNotChiral_0 = 65536;
cargm.cChiralityRacemic_0 = 196608;
cargm.cChiralityUnknown_0 = 0;
cargm.cChiralityUnknownEnantiomer_0 = 327680;
cargm.cDefaultAtomValence_0 = 6;
cargm.cESRGroupBits_0 = 5;
cargm.cESRMaxGroups_0 = 32;
cargm.cESRTypeAbs_0 = 0;
cargm.cESRTypeAnd_0 = 1;
cargm.cESRTypeOr_0 = 2;
cargm.cHelperBitCIP_0 = 8;
cargm.cHelperBitIncludeNitrogenParities_0 = 128;
cargm.cHelperBitNeighbours_0 = 1;
cargm.cHelperBitParities_0 = 4;
cargm.cHelperBitRings_0 = 2;
cargm.cHelperBitSymmetryDiastereotopic_0 = 32;
cargm.cHelperBitSymmetryEnantiotopic_0 = 64;
cargm.cHelperBitSymmetrySimple_0 = 16;
cargm.cHelperBitsStereo_0 = 252;
cargm.cHelperCIP_0 = 0;
cargm.cHelperNeighbours_0 = 1;
cargm.cHelperNone_0 = 0;
cargm.cHelperParities_0 = 0;
cargm.cHelperRings_0 = 0;
cargm.cHelperSymmetryDiastereotopic_0 = 0;
cargm.cHelperSymmetryEnantiotopic_0 = 0;
cargm.cHelperSymmetrySimple_0 = 0;
cargm.cMaxAtomicNo_0 = 190;
cargm.cMaxConnAtoms_0 = 16;
cargm.cMoleculeColorDefault_0 = 0;
cargm.cMoleculeColorNeutral_0 = 1;
cggl.Lcom_actelion_research_gwt_minimal_JSMolecule_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'JSMolecule', 41, cggl.Ljava_lang_Object_2_classLit);
cargm.$clinit_JSRingCollection = function $clinit_JSRingCollection(){
  cargm.$clinit_JSRingCollection = emptyMethod;
  jl.$clinit_Object();
  cargm.MODE_SMALL_AND_LARGE_RINGS_0 = 1 | 2;
  cargm.MODE_SMALL_RINGS_AND_AROMATICITY_0 = 1 | 4;
  cargm.MODE_SMALL_AND_LARGE_RINGS_AND_AROMATICITY_0 = 1 | 2 | 4;
}
;
cargm.JSRingCollection = function JSRingCollection(input_0){
  cargm.$clinit_JSRingCollection();
  Object_0.call(this);
  this.$init_56();
  this.coll = input_0;
}
;
defineClass(194, 1, {1:1}, cargm.JSRingCollection);
_.$init_56 = function $init_56(){
}
;
_.determineAromaticity = function determineAromaticity_1(isAromatic, isDelocalized, heteroPosition, includeTautomericBonds){
  this.coll.determineAromaticity_1(isAromatic, isDelocalized, heteroPosition, includeTautomericBonds);
}
;
_.getAtomIndex = function getAtomIndex_0(ringNo, atom){
  return this.coll.getAtomIndex_0(ringNo, atom);
}
;
_.getAtomRingSize = function getAtomRingSize_2(atom){
  return this.coll.getAtomRingSize_0(atom);
}
;
_.getBondIndex = function getBondIndex_0(ringNo, bond){
  return this.coll.getBondIndex_0(ringNo, bond);
}
;
_.getBondRingSize = function getBondRingSize_2(bond){
  return this.coll.getBondRingSize_0(bond);
}
;
_.getHeteroPosition = function getHeteroPosition_0(ringNo){
  return this.coll.getHeteroPosition_0(ringNo);
}
;
_.getRingAtoms = function getRingAtoms_1(ringNo){
  return this.coll.getRingAtoms_0(ringNo);
}
;
_.getRingBonds = function getRingBonds_2(ringNo){
  return this.coll.getRingBonds_0(ringNo);
}
;
_.getRingSize = function getRingSize_0(ringNo){
  return this.coll.getRingSize_0(ringNo);
}
;
_.getSharedRing = function getSharedRing_0(bond1, bond2){
  return this.coll.getSharedRing_0(bond1, bond2);
}
;
_.getSize = function getSize_1(){
  return this.coll.getSize_0();
}
;
_.isAromatic = function isAromatic_1(ringNo){
  return this.coll.isAromatic_0(ringNo);
}
;
_.isAtomMember = function isAtomMember_0(ringNo, atom){
  return this.coll.isAtomMember_0(ringNo, atom);
}
;
_.isBondMember = function isBondMember_0(ringNo, bond){
  return this.coll.isBondMember_0(ringNo, bond);
}
;
_.isDelocalized = function isDelocalized_1(ringNo){
  return this.coll.isDelocalized_0(ringNo);
}
;
_.qualifiesAsAmideTypeBond = function qualifiesAsAmideTypeBond_0(bond){
  return this.coll.qualifiesAsAmideTypeBond_0(bond);
}
;
_.validateMemberIndex = function validateMemberIndex_0(ringNo, index_0){
  return this.coll.validateMemberIndex_0(ringNo, index_0);
}
;
cargm.MAX_SMALL_RING_SIZE_0 = 7;
cargm.MODE_AROMATICITY_0 = 4;
cargm.MODE_LARGE_RINGS_0 = 2;
cargm.MODE_SMALL_AND_LARGE_RINGS_0 = 0;
cargm.MODE_SMALL_AND_LARGE_RINGS_AND_AROMATICITY_0 = 0;
cargm.MODE_SMALL_RINGS_0 = 1;
cargm.MODE_SMALL_RINGS_AND_AROMATICITY_0 = 0;
cargm.MODE_SMALL_RINGS_ONLY_0 = 1;
cggl.Lcom_actelion_research_gwt_minimal_JSRingCollection_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'JSRingCollection', 194, cggl.Ljava_lang_Object_2_classLit);
cargm.$clinit_JSSDFileParser = function $clinit_JSSDFileParser(){
  cargm.$clinit_JSSDFileParser = emptyMethod;
  jl.$clinit_Object();
}
;
cargm.JSSDFileParser = function JSSDFileParser(sdf, fields){
  cargm.$clinit_JSSDFileParser();
  Object_0.call(this);
  this.$init_57();
  this.parser = new carci.SDFileParser(new ji.StringReader(sdf), fields);
}
;
defineClass(352, 1, {1:1}, cargm.JSSDFileParser);
_.$init_57 = function $init_57(){
}
;
_.getField = function getField(name_0){
  var i, names;
  names = this.parser.getFieldNames_0();
  for (i = 0; i < names.length; i++) {
    if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(names[i], name_0)) {
      return this.parser.getFieldData_0(i);
    }
  }
  return null;
}
;
_.getFieldData = function getFieldData_0(idx){
  return this.parser.getFieldData_0(idx);
}
;
_.getFieldNames = function getFieldNames_1(recordsToInspect){
  return this.parser.getFieldNames_1(recordsToInspect);
}
;
_.getMolecule = function getMolecule_2(){
  return new cargm.JSMolecule_1(this.parser.getMolecule_0());
}
;
_.getNextFieldData = function getNextFieldData_0(){
  return this.parser.getNextFieldData_0();
}
;
_.getNextMolFile = function getNextMolFile_0(){
  return this.parser.getNextMolFile_0();
}
;
_.next = function next_0(){
  return this.parser.next_1();
}
;
cggl.Lcom_actelion_research_gwt_minimal_JSSDFileParser_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'JSSDFileParser', 352, cggl.Ljava_lang_Object_2_classLit);
cargm.$clinit_JSSSSearcher = function $clinit_JSSSSearcher(){
  cargm.$clinit_JSSSSearcher = emptyMethod;
  jl.$clinit_Object();
}
;
cargm.JSSSSearcher = function JSSSSearcher(){
  cargm.$clinit_JSSSSearcher();
  Object_0.call(this);
  this.$init_58();
}
;
defineClass(353, 1, {1:1}, cargm.JSSSSearcher);
_.$init_58 = function $init_58(){
  this.searcher = new carc.SSSearcher;
}
;
_.isFragmentInMolecule = function isFragmentInMolecule_2(){
  return this.searcher.isFragmentInMolecule_0();
}
;
_.setFragment = function setFragment_4(fragment){
  this.searcher.setFragment_1(fragment.getStereoMolecule());
}
;
_.setMol = function setMol(fragment, molecule){
  this.setMolecule(molecule);
  this.setFragment(fragment);
}
;
_.setMolecule = function setMolecule_2(molecule){
  this.searcher.setMolecule_0(molecule.getStereoMolecule());
}
;
cggl.Lcom_actelion_research_gwt_minimal_JSSSSearcher_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'JSSSSearcher', 353, cggl.Ljava_lang_Object_2_classLit);
cargm.$clinit_JSSSSearcherWithIndex = function $clinit_JSSSSearcherWithIndex(){
  cargm.$clinit_JSSSSearcherWithIndex = emptyMethod;
  jl.$clinit_Object();
}
;
cargm.JSSSSearcherWithIndex = function JSSSSearcherWithIndex(){
  cargm.$clinit_JSSSSearcherWithIndex();
  Object_0.call(this);
  this.$init_59();
}
;
cargm.bitCount = function bitCount(x_0){
  cargm.$clinit_JSSSSearcherWithIndex();
  return bitCount_0(x_0);
}
;
cargm.getHexStringFromIndex_0 = function getHexStringFromIndex_0(index_0){
  cargm.$clinit_JSSSSearcherWithIndex();
  return carc.getHexStringFromIndex(index_0);
}
;
cargm.getIndexFromHexString_0 = function getIndexFromHexString_0(hex){
  cargm.$clinit_JSSSSearcherWithIndex();
  return carc.getIndexFromHexString(hex);
}
;
cargm.getKeyIDCode = function getKeyIDCode(){
  cargm.$clinit_JSSSSearcherWithIndex();
  return carc.$clinit_SSSearcherWithIndex() , carc.cKeyIDCode;
}
;
cargm.getSimilarityAngleCosine_0 = function getSimilarityAngleCosine_0(index1, index2){
  cargm.$clinit_JSSSSearcherWithIndex();
  return carc.getSimilarityAngleCosine(index1, index2);
}
;
cargm.getSimilarityTanimoto_0 = function getSimilarityTanimoto_0(index1, index2){
  cargm.$clinit_JSSSSearcherWithIndex();
  return carc.getSimilarityTanimoto(index1, index2);
}
;
defineClass(354, 1, {1:1}, cargm.JSSSSearcherWithIndex);
_.$init_59 = function $init_59(){
  this.searcher = new carc.SSSearcherWithIndex;
}
;
_.createIndex = function createIndex_0(molecule){
  return this.searcher.createIndex_0(molecule.getStereoMolecule());
}
;
_.isFragmentInMolecule = function isFragmentInMolecule_3(){
  return this.searcher.isFragmentInMolecule_0();
}
;
_.setFragment = function setFragment_5(fragment, index_0){
  this.searcher.setFragment_2(fragment.getStereoMolecule(), index_0);
}
;
_.setMolecule = function setMolecule_3(molecule, index_0){
  this.searcher.setMolecule_1(molecule.getStereoMolecule(), index_0);
}
;
cggl.Lcom_actelion_research_gwt_minimal_JSSSSearcherWithIndex_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'JSSSSearcherWithIndex', 354, cggl.Ljava_lang_Object_2_classLit);
cargm.$clinit_JSUtil = function $clinit_JSUtil(){
  cargm.$clinit_JSUtil = emptyMethod;
  jl.$clinit_Object();
}
;
cargm.JSUtil = function JSUtil(){
  cargm.$clinit_JSUtil();
  Object_0.call(this);
  this.$init_60();
}
;
cargm.getHoseCodesFromDiastereotopicID = function getHoseCodesFromDiastereotopicID(diastereotopicID, options){
  cargm.$clinit_JSUtil();
  options = options || {};
  var maxSphereSize = (typeof options.maxSphereSize === 'undefined'?5:options.maxSphereSize) | 0;
  var type_0 = (typeof options.type === 'undefined'?0:options.type) | 0;
  return carcc.getHoseCodesFromDiaID(diastereotopicID, maxSphereSize, type_0);
}
;
defineClass(355, 1, {1:1}, cargm.JSUtil);
_.$init_60 = function $init_60(){
}
;
cggl.Lcom_actelion_research_gwt_minimal_JSUtil_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'JSUtil', 355, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_EntryPoint = function $clinit_EntryPoint(){
  cggcc.$clinit_EntryPoint = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_EntryPoint_2_classLit = createForInterface('com.google.gwt.core.client', 'EntryPoint');
cargm.$clinit_Minimal = function $clinit_Minimal(){
  cargm.$clinit_Minimal = emptyMethod;
  jl.$clinit_Object();
}
;
cargm.Minimal = function Minimal(){
  cargm.$clinit_Minimal();
  Object_0.call(this);
  this.$init_61();
}
;
defineClass(167, 1, {83:1, 1:1}, cargm.Minimal);
_.$init_61 = function $init_61(){
}
;
_.onModuleLoad = function onModuleLoad(){
}
;
cggl.Lcom_actelion_research_gwt_minimal_Minimal_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'Minimal', 167, cggl.Ljava_lang_Object_2_classLit);
cargm.$clinit_MolecularFormula_0 = function $clinit_MolecularFormula_0(){
  cargm.$clinit_MolecularFormula_0 = emptyMethod;
  carc.$clinit_MolecularFormula();
}
;
cargm.MolecularFormula_0 = function MolecularFormula_0(mol){
  cargm.$clinit_MolecularFormula_0();
  carc.MolecularFormula.call(this, mol);
  this.$init_62();
}
;
defineClass(193, 94, {1:1}, cargm.MolecularFormula_0);
_.$init_62 = function $init_62(){
}
;
defineProperties(_, {absoluteWeight:{'get':function getAbsoluteWeight_0(){
  return getClassPrototype(94).getAbsoluteWeight.call(this);
}
}});
_.getAbsoluteWeight = function(){
  return this.absoluteWeight;
}
;
defineProperties(_, {formula:{'get':function getFormula_0(){
  return getClassPrototype(94).getFormula.call(this);
}
}});
_.getFormula = function(){
  return this.formula;
}
;
defineProperties(_, {relativeWeight:{'get':function getRelativeWeight_0(){
  return getClassPrototype(94).getRelativeWeight.call(this);
}
}});
_.getRelativeWeight = function(){
  return this.relativeWeight;
}
;
cggl.Lcom_actelion_research_gwt_minimal_MolecularFormula_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'MolecularFormula', 193, cggl.Lcom_actelion_research_chem_MolecularFormula_2_classLit);
cargm.$clinit_Services = function $clinit_Services(){
  cargm.$clinit_Services = emptyMethod;
  jl.$clinit_Object();
}
;
cargm.Services = function Services(){
  Object_0.call(this);
  this.$init_63();
}
;
cargm.getInstance = function getInstance(){
  cargm.$clinit_Services();
  if (isNull(cargm.instance_0)) {
    cargm.instance_0 = new cargm.Services;
  }
  return cargm.instance_0;
}
;
defineClass(196, 1, {1:1}, cargm.Services);
_.$init_63 = function $init_63(){
  this.sSSearcherWithIndex = null;
}
;
_.getSSSearcherWithIndex = function getSSSearcherWithIndex(){
  if (isNull(this.sSSearcherWithIndex)) {
    this.sSSearcherWithIndex = new carc.SSSearcherWithIndex;
  }
  return this.sSSearcherWithIndex;
}
;
cargm.instance_0 = null;
cggl.Lcom_actelion_research_gwt_minimal_Services_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'Services', 196, cggl.Ljava_lang_Object_2_classLit);
cargm.$clinit_Util = function $clinit_Util(){
  cargm.$clinit_Util = emptyMethod;
  jl.$clinit_Object();
}
;
cargm.getDisplayMode = function getDisplayMode(options){
  cargm.$clinit_Util();
  if (!options)
    return 0;
  var displayMode = 0;
  if (options.inflateToMaxAVBL)
    displayMode |= 65536;
  if (options.inflateToHighResAVBL)
    displayMode |= 131072;
  if (options.chiralTextBelowMolecule)
    displayMode |= 0;
  if (options.chiralTextAboveMolecule)
    displayMode |= 262144;
  if (options.chiralTextOnFrameTop)
    displayMode |= 524288;
  if (options.chiralTextOnFrameBottom)
    displayMode |= 786432;
  if (options.noTabus)
    displayMode |= 1;
  if (options.showAtomNumber)
    displayMode |= 2;
  if (options.showBondNumber)
    displayMode |= 4;
  if (options.highlightQueryFeatures)
    displayMode |= 8;
  if (options.showMapping)
    displayMode |= 16;
  if (options.suppressChiralText)
    displayMode |= 32;
  if (options.suppressCIPParity)
    displayMode |= 64;
  if (options.suppressESR)
    displayMode |= 128;
  if (options.showSymmetrySimple)
    displayMode |= 256;
  if (options.showSymmetryDiastereotopic)
    displayMode |= 512;
  if (options.showSymmetryEnantiotopic)
    displayMode |= 1024;
  if (options.noImplicitAtomLabelColors)
    displayMode |= 2048;
  if (options.noStereoProblem)
    displayMode |= 4096;
  return displayMode;
}
;
defineClass(401, 1, {1:1});
cggl.Lcom_actelion_research_gwt_minimal_Util_2_classLit = createForClass('com.actelion.research.gwt.minimal', 'Util', 401, cggl.Ljava_lang_Object_2_classLit);
caru.$clinit_Angle = function $clinit_Angle(){
  caru.$clinit_Angle = emptyMethod;
  jl.$clinit_Object();
}
;
caru.difference = function difference(a2, a1){
  caru.$clinit_Angle();
  var a;
  a = a2 - a1;
  if (a >= 3.141592653589793)
    a -= 2 * 3.141592653589793;
  else if (a < -3.141592653589793)
    a += 2 * 3.141592653589793;
  return a;
}
;
defineClass(436, 1, {1:1});
cggl.Lcom_actelion_research_util_Angle_2_classLit = createForClass('com.actelion.research.util', 'Angle', 436, cggl.Ljava_lang_Object_2_classLit);
caru.$clinit_ColorHelper = function $clinit_ColorHelper(){
  caru.$clinit_ColorHelper = emptyMethod;
  jl.$clinit_Object();
  caru.PERCEIVED_BRIGHTNESS = stampJavaTypeInfo(getClassLiteralForArray(cggl.F_classLit, 1), {4:1, 1:1}, 5, 15, [0.29899999499320984, 0.5870000123977661, 0.11400000005960464]);
}
;
caru.createColor = function createColor(c, perceivedBrightness){
  var cc, f, i, i0, i1, pb, remainingBrightness, sum, surplusBrightness;
  cc = c.getRGBComponents(null);
  pb = caru.perceivedBrightness_0(c);
  if (pb == 0)
    return new ja.Color(pb, pb, pb, cc[3]);
  f = perceivedBrightness / caru.perceivedBrightness_0(c);
  surplusBrightness = 0;
  sum = 0;
  for (i0 = 0; i0 < 3; i0++) {
    cc[i0] *= f;
    if (cc[i0] < 1) {
      sum += caru.PERCEIVED_BRIGHTNESS[i0];
    }
     else {
      surplusBrightness += (cc[i0] - 1) * caru.PERCEIVED_BRIGHTNESS[i0];
      cc[i0] = 1;
    }
  }
  if (surplusBrightness != 0) {
    remainingBrightness = 0;
    for (i1 = 0; i1 < 3; i1++) {
      if (cc[i1] < 1) {
        cc[i1] += surplusBrightness / sum;
        if (cc[i1] > 1) {
          remainingBrightness += (cc[i1] - 1) * caru.PERCEIVED_BRIGHTNESS[i1];
          cc[i1] = 1;
        }
      }
    }
    if (remainingBrightness != 0) {
      for (i = 0; i < 3; i++) {
        if (cc[i] < 1) {
          cc[i] += remainingBrightness / caru.PERCEIVED_BRIGHTNESS[i];
          if (cc[i] > 1) {
            cc[i] = 1;
          }
        }
      }
    }
  }
  return new ja.Color(cc[0], cc[1], cc[2], cc[3]);
}
;
caru.getContrastColor_0 = function getContrastColor_0(fg, bg){
  caru.$clinit_ColorHelper();
  var bgb, brightnessFactor, contrast, darken, fgb, hsbBG, hsbFG, hueDif, hueDifferenceFactor, neededContrast, saturationFactor;
  bgb = caru.perceivedBrightness_0(bg);
  fgb = caru.perceivedBrightness_0(fg);
  contrast = $wnd.Math.abs(bgb - fgb);
  if (contrast > 0.30000001192092896)
    return fg;
  hsbBG = initUnidimensionalArray(cggl.F_classLit, {4:1, 1:1}, 5, 3, 15, 1);
  ja.RGBtoHSB(bg.getRed(), bg.getGreen(), bg.getBlue(), hsbBG);
  hsbFG = initUnidimensionalArray(cggl.F_classLit, {4:1, 1:1}, 5, 3, 15, 1);
  ja.RGBtoHSB(fg.getRed(), fg.getGreen(), fg.getBlue(), hsbFG);
  hueDif = $wnd.Math.abs(hsbFG[0] - hsbBG[0]);
  if (hueDif > 0.5)
    hueDif = 1 - hueDif;
  saturationFactor = 1 - $wnd.Math.max(hsbFG[1], hsbBG[1]);
  brightnessFactor = $wnd.Math.abs(fgb + bgb - 1);
  hueDifferenceFactor = $wnd.Math.cos(3.141592653589793 * hueDif * 3);
  neededContrast = 0.30000001192092896 * $wnd.Math.max(saturationFactor, $wnd.Math.max(brightnessFactor, hueDifferenceFactor));
  if (contrast > neededContrast)
    return fg;
  darken = fgb > bgb?fgb + neededContrast > 1:fgb - neededContrast > 0;
  return caru.createColor(fg, darken?bgb - neededContrast:bgb + neededContrast);
}
;
caru.intermediateColor = function intermediateColor(c1, c2, ratio){
  caru.$clinit_ColorHelper();
  return new ja.Color_1(round_int(c1.getRed() + ratio * (c2.getRed() - c1.getRed())), round_int(c1.getGreen() + ratio * (c2.getGreen() - c1.getGreen())), round_int(c1.getBlue() + ratio * (c2.getBlue() - c1.getBlue())));
}
;
caru.perceivedBrightness_0 = function perceivedBrightness_0(c){
  return isNull(c)?1:(caru.PERCEIVED_BRIGHTNESS[0] * c.getRed() + caru.PERCEIVED_BRIGHTNESS[1] * c.getGreen() + caru.PERCEIVED_BRIGHTNESS[2] * c.getBlue()) / 255;
}
;
defineClass(437, 1, {1:1});
caru.MIN_CONTRAST_TO_BACKGROUND = 0.30000001192092896;
cggl.Lcom_actelion_research_util_ColorHelper_2_classLit = createForClass('com.actelion.research.util', 'ColorHelper', 437, cggl.Ljava_lang_Object_2_classLit);
caru.$clinit_IntArrayComparator = function $clinit_IntArrayComparator(){
  caru.$clinit_IntArrayComparator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
caru.IntArrayComparator = function IntArrayComparator(){
  caru.$clinit_IntArrayComparator();
  Object_0.call(this);
  this.$init_64();
}
;
defineClass(113, 1, {4:1, 1:1, 26:1}, caru.IntArrayComparator);
_.$init_64 = function $init_64(){
}
;
_.compare_0 = function compare_14(ia1, ia2){
  return this.compare_2(castTo(ia1, 6), castTo(ia2, 6));
}
;
_.equals_0 = function equals_9(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_2 = function compare_15(ia1, ia2){
  var i;
  if (jsEquals(ia1, null))
    return jsEquals(ia2, null)?0:1;
  if (jsEquals(ia2, null))
    return -1;
  for (i = 0; i < ia1.length; i++) {
    if (ia2.length == i)
      return 1;
    if (ia1[i] != ia2[i])
      return ia1[i] < ia2[i]?-1:1;
  }
  return ia2.length > ia1.length?-1:0;
}
;
caru.serialVersionUID_4 = 538185762;
cggl.Lcom_actelion_research_util_IntArrayComparator_2_classLit = createForClass('com.actelion.research.util', 'IntArrayComparator', 113, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_Callback = function $clinit_Callback(){
  cggcc.$clinit_Callback = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_Callback_2_classLit = createForInterface('com.google.gwt.core.client', 'Callback');
cggcc.$clinit_CodeDownloadException = function $clinit_CodeDownloadException(){
  cggcc.$clinit_CodeDownloadException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
cggcc.CodeDownloadException = function CodeDownloadException(message){
  cggcc.$clinit_CodeDownloadException();
  jl.RuntimeException_1.call(this, message);
  this.$init_68();
  this.reason = (cggcc.$clinit_CodeDownloadException$Reason() , cggcc.TERMINATED);
}
;
defineClass(573, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, cggcc.CodeDownloadException);
_.$init_68 = function $init_68(){
}
;
cggl.Lcom_google_gwt_core_client_CodeDownloadException_2_classLit = createForClass('com.google.gwt.core.client', 'CodeDownloadException', 573, cggl.Ljava_lang_RuntimeException_2_classLit);
jl.$clinit_Enum = function $clinit_Enum(){
  jl.$clinit_Enum = emptyMethod;
  jl.$clinit_Object();
}
;
function Enum(name_0, ordinal){
  jl.$clinit_Enum();
  Object_0.call(this);
  this.$init_69();
  this.name_0 = name_0;
  this.ordinal_0 = ordinal;
}

function createValueOfMap(enumConstants){
  jl.$clinit_Enum();
  var result, value_0, value$array, value$index, value$max;
  result = createObject();
  for (value$array = enumConstants , value$index = 0 , value$max = value$array.length; value$index < value$max; ++value$index) {
    value_0 = value$array[value$index];
    jl.put0(result, ':' + value_0.name(), value_0);
  }
  return result;
}

jl.get0 = function get0(map_0, name_0){
  return map_0[name_0];
}
;
jl.put0 = function put0(map_0, name_0, value_0){
  map_0[name_0] = value_0;
}
;
function valueOf(map_0, name_0){
  jl.$clinit_Enum();
  var result;
  ji2.checkNotNull_0(name_0);
  result = jl.get0(map_0, ':' + name_0);
  ji2.checkCriticalArgument_2(isNotNull(result), 'Enum constant undefined: %s', stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_Object_2_classLit, 1), {4:1, 1:1, 8:1}, 1, 5, [name_0]));
  return result;
}

defineClass(37, 1, {4:1, 20:1, 37:1, 1:1});
_.$init_69 = function $init_69(){
}
;
_.compareTo_1 = function compareTo_4(other){
  return this.compareTo(castTo(other, 37));
}
;
_.compareTo = function compareTo_3(other){
  return this.ordinal_0 - castTo(other, 37).ordinal_0;
}
;
_.equals = function equals_10(other){
  return this === other;
}
;
_.equals_0 = function(other){
  return this.equals(other);
}
;
_.hashCode = function hashCode_2(){
  return getClassPrototype(1).hashCode_0.call(this);
}
;
_.hashCode_0 = function(){
  return this.hashCode();
}
;
_.name = function name_1(){
  return jsNotEquals(this.name_0, null)?this.name_0:'' + this.ordinal_0;
}
;
_.ordinal = function ordinal_0(){
  return this.ordinal_0;
}
;
_.toString = function toString_8(){
  return this.name();
}
;
_.toString_0 = function(){
  return this.toString();
}
;
_.ordinal_0 = 0;
cggl.Ljava_lang_Enum_2_classLit = createForClass('java.lang', 'Enum', 37, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_CodeDownloadException$Reason = function $clinit_CodeDownloadException$Reason(){
  cggcc.$clinit_CodeDownloadException$Reason = emptyMethod;
  jl.$clinit_Enum();
  cggcc.TERMINATED = new cggcc.CodeDownloadException$Reason('TERMINATED', 0);
}
;
cggcc.CodeDownloadException$Reason = function CodeDownloadException$Reason(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
  this.$init_70();
}
;
cggcc.valueOf_0 = function valueOf_0(name_0){
  cggcc.$clinit_CodeDownloadException$Reason();
  return valueOf((cggcc.$clinit_CodeDownloadException$Reason$Map() , cggcc.$MAP), name_0);
}
;
cggcc.values_0 = function values_0(){
  cggcc.$clinit_CodeDownloadException$Reason();
  return stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_google_gwt_core_client_CodeDownloadException$Reason_2_classLit, 1), {4:1, 1:1, 8:1}, 131, 0, [cggcc.TERMINATED]);
}
;
defineClass(131, 37, {131:1, 4:1, 20:1, 37:1, 1:1}, cggcc.CodeDownloadException$Reason);
_.$init_70 = function $init_70(){
}
;
cggl.Lcom_google_gwt_core_client_CodeDownloadException$Reason_2_classLit = createForEnum('com.google.gwt.core.client', 'CodeDownloadException/Reason', 131, cggl.Ljava_lang_Enum_2_classLit, cggcc.values_0, cggcc.valueOf_0);
cggcc.$clinit_CodeDownloadException$Reason$Map = function $clinit_CodeDownloadException$Reason$Map(){
  cggcc.$clinit_CodeDownloadException$Reason$Map = emptyMethod;
  cggcc.$MAP = createValueOfMap(cggcc.values_0());
}
;
defineClass(574, 1, {1:1});
cggl.Lcom_google_gwt_core_client_CodeDownloadException$Reason$Map_2_classLit = createForClass('com.google.gwt.core.client', 'CodeDownloadException/Reason/Map', 574, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_Duration = function $clinit_Duration(){
  cggcc.$clinit_Duration = emptyMethod;
  jl.$clinit_Object();
}
;
cggcc.Duration = function Duration(){
  cggcc.$clinit_Duration();
  Object_0.call(this);
  this.$init_71();
}
;
cggcc.currentTimeMillis = function currentTimeMillis(){
  cggcc.$clinit_Duration();
  return cggcc.now_1();
}
;
cggcc.uncheckedConversion = function uncheckedConversion(elapsed){
  return elapsed;
}
;
defineClass(283, 1, {1:1}, cggcc.Duration);
_.$init_71 = function $init_71(){
  this.start_0 = cggcc.currentTimeMillis();
}
;
_.elapsedMillis = function elapsedMillis(){
  return cggcc.uncheckedConversion(cggcc.currentTimeMillis() - this.start_0);
}
;
_.start_0 = 0;
cggl.Lcom_google_gwt_core_client_Duration_2_classLit = createForClass('com.google.gwt.core.client', 'Duration', 283, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_Scheduler$ScheduledCommand = function $clinit_Scheduler$ScheduledCommand(){
  cggcc.$clinit_Scheduler$ScheduledCommand = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_Scheduler$ScheduledCommand_2_classLit = createForInterface('com.google.gwt.core.client', 'Scheduler/ScheduledCommand');
cggcc.$clinit_GWT$1 = function $clinit_GWT$1(){
  cggcc.$clinit_GWT$1 = emptyMethod;
}
;
defineClass(305, 1, {1:1});
cggl.Lcom_google_gwt_core_client_GWT$1_2_classLit = createForClass('com.google.gwt.core.client', 'GWT/1', 305, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_GWT$UncaughtExceptionHandler = function $clinit_GWT$UncaughtExceptionHandler(){
  cggcc.$clinit_GWT$UncaughtExceptionHandler = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_GWT$UncaughtExceptionHandler_2_classLit = createForInterface('com.google.gwt.core.client', 'GWT/UncaughtExceptionHandler');
cggcc.$clinit_GWT$DefaultUncaughtExceptionHandler = function $clinit_GWT$DefaultUncaughtExceptionHandler(){
  cggcc.$clinit_GWT$DefaultUncaughtExceptionHandler = emptyMethod;
}
;
defineClass(304, 1, {1:1});
cggl.Lcom_google_gwt_core_client_GWT$DefaultUncaughtExceptionHandler_2_classLit = createForClass('com.google.gwt.core.client', 'GWT/DefaultUncaughtExceptionHandler', 304, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_JsArray = function $clinit_JsArray(){
  cggcc.$clinit_JsArray = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggcc.$get = function $get(this$static, index_0){
  cggcc.$clinit_JsArray();
  return this$static[index_0];
}
;
cggcc.$length = function $length(this$static){
  cggcc.$clinit_JsArray();
  return this$static.length;
}
;
cggcc.$push = function $push(this$static, value_0){
  cggcc.$clinit_JsArray();
  this$static[this$static.length] = value_0;
}
;
cggcc.$set = function $set(this$static, index_0, value_0){
  cggcc.$clinit_JsArray();
  this$static[index_0] = value_0;
}
;
cggcc.$setLength = function $setLength(this$static, newLength){
  this$static.length = newLength;
}
;
cggcc.$clinit_JsArrayString = function $clinit_JsArrayString(){
  cggcc.$clinit_JsArrayString = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggcc.$get_0 = function $get_0(this$static, index_0){
  cggcc.$clinit_JsArrayString();
  return this$static[index_0];
}
;
cggcc.$length_0 = function $length_0(this$static){
  cggcc.$clinit_JsArrayString();
  return this$static.length;
}
;
cggcc.$setLength_0 = function $setLength_0(this$static, newLength){
  this$static.length = newLength;
}
;
cggcc.$clinit_JsDate = function $clinit_JsDate(){
  cggcc.$clinit_JsDate = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggcc.now_1 = function now_1(){
  cggcc.$clinit_JsDate();
  if (Date.now) {
    return Date.now();
  }
  return (new Date).getTime();
}
;
cggcc.$clinit_RunAsyncCallback = function $clinit_RunAsyncCallback(){
  cggcc.$clinit_RunAsyncCallback = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_RunAsyncCallback_2_classLit = createForInterface('com.google.gwt.core.client', 'RunAsyncCallback');
cggcc.$clinit_Scheduler = function $clinit_Scheduler(){
  cggcc.$clinit_Scheduler = emptyMethod;
  jl.$clinit_Object();
}
;
cggcc.Scheduler = function Scheduler(){
  cggcc.$clinit_Scheduler();
  Object_0.call(this);
  this.$init_75();
}
;
cggcc.get_1 = function get_1(){
  cggcc.$clinit_Scheduler();
  return cggcci.$clinit_SchedulerImpl() , cggcci.INSTANCE;
}
;
defineClass(170, 1, {1:1});
_.$init_75 = function $init_75(){
}
;
cggl.Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('com.google.gwt.core.client', 'Scheduler', 170, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_Scheduler$RepeatingCommand = function $clinit_Scheduler$RepeatingCommand(){
  cggcc.$clinit_Scheduler$RepeatingCommand = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_Scheduler$RepeatingCommand_2_classLit = createForInterface('com.google.gwt.core.client', 'Scheduler/RepeatingCommand');
cggcc.$clinit_ScriptInjector = function $clinit_ScriptInjector(){
  cggcc.$clinit_ScriptInjector = emptyMethod;
  jl.$clinit_Object();
  cggcc.TOP_WINDOW = cggcc.nativeTopWindow();
}
;
cggcc.attachListeners = function attachListeners(scriptElement, callback, removeTag){
  cggcc.$clinit_ScriptInjector();
  function clearCallbacks(){
    scriptElement.onerror = scriptElement.onreadystatechange = scriptElement.onload = null;
    if (removeTag) {
      cggcc.nativeRemove(scriptElement);
    }
  }

  scriptElement.onload = $entry(function(){
    clearCallbacks();
    if (callback) {
      callback.onSuccess(null);
    }
  }
  );
  scriptElement.onerror = $entry(function(){
    clearCallbacks();
    if (callback) {
      var ex = new cggcc.CodeDownloadException('onerror() called.');
      callback.onFailure(ex);
    }
  }
  );
  scriptElement.onreadystatechange = $entry(function(){
    if (/loaded|complete/.test(scriptElement.readyState)) {
      scriptElement.onload();
    }
  }
  );
}
;
cggcc.fromUrl = function fromUrl(scriptUrl){
  cggcc.$clinit_ScriptInjector();
  return new cggcc.ScriptInjector$FromUrl(scriptUrl);
}
;
cggcc.nativeAttachToHead = function nativeAttachToHead(doc, scriptElement){
  cggcc.$clinit_ScriptInjector();
  (doc.head || doc.getElementsByTagName('head')[0]).appendChild(scriptElement);
}
;
cggcc.nativeDefaultWindow = function nativeDefaultWindow(){
  cggcc.$clinit_ScriptInjector();
  return window;
}
;
cggcc.nativeGetDocument = function nativeGetDocument(wnd){
  cggcc.$clinit_ScriptInjector();
  return wnd.document;
}
;
cggcc.nativeMakeScriptElement = function nativeMakeScriptElement(doc){
  cggcc.$clinit_ScriptInjector();
  return doc.createElement('script');
}
;
cggcc.nativeRemove = function nativeRemove(scriptElement){
  scriptElement.parentNode.removeChild(scriptElement);
}
;
cggcc.nativeSetSrc = function nativeSetSrc(element, url_0){
  cggcc.$clinit_ScriptInjector();
  element.src = url_0;
}
;
cggcc.nativeTopWindow = function nativeTopWindow(){
  return $wnd;
}
;
defineClass(570, 1, {1:1});
cggl.Lcom_google_gwt_core_client_ScriptInjector_2_classLit = createForClass('com.google.gwt.core.client', 'ScriptInjector', 570, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_ScriptInjector$FromString = function $clinit_ScriptInjector$FromString(){
  cggcc.$clinit_ScriptInjector$FromString = emptyMethod;
}
;
defineClass(571, 1, {1:1});
cggl.Lcom_google_gwt_core_client_ScriptInjector$FromString_2_classLit = createForClass('com.google.gwt.core.client', 'ScriptInjector/FromString', 571, cggl.Ljava_lang_Object_2_classLit);
cggcc.$clinit_ScriptInjector$FromUrl = function $clinit_ScriptInjector$FromUrl(){
  cggcc.$clinit_ScriptInjector$FromUrl = emptyMethod;
  jl.$clinit_Object();
}
;
cggcc.ScriptInjector$FromUrl = function ScriptInjector$FromUrl(scriptUrl){
  cggcc.$clinit_ScriptInjector$FromUrl();
  Object_0.call(this);
  this.$init_76();
  this.scriptUrl = scriptUrl;
}
;
defineClass(298, 1, {1:1}, cggcc.ScriptInjector$FromUrl);
_.$init_76 = function $init_76(){
  this.removeTag = false;
}
;
_.inject = function inject(){
  var doc, scriptElement, wnd;
  wnd = isNull(this.window_0)?cggcc.nativeDefaultWindow():this.window_0;
  doc = cggcc.nativeGetDocument(wnd);
  scriptElement = cggcc.nativeMakeScriptElement(doc);
  if (isNotNull(this.callback) || this.removeTag) {
    cggcc.attachListeners(scriptElement, this.callback, this.removeTag);
  }
  cggcc.nativeSetSrc(scriptElement, this.scriptUrl);
  cggcc.nativeAttachToHead(doc, scriptElement);
  return scriptElement;
}
;
_.setCallback = function setCallback(callback){
  this.callback = callback;
  return this;
}
;
_.setRemoveTag = function setRemoveTag(removeTag){
  this.removeTag = removeTag;
  return this;
}
;
_.removeTag = false;
cggl.Lcom_google_gwt_core_client_ScriptInjector$FromUrl_2_classLit = createForClass('com.google.gwt.core.client', 'ScriptInjector/FromUrl', 298, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_AsyncFragmentLoader = function $clinit_AsyncFragmentLoader(){
  cggcci.$clinit_AsyncFragmentLoader = emptyMethod;
  jl.$clinit_Object();
  BROWSER_LOADER = cggcci.makeBrowserLoader(1, stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, []));
}
;
function AsyncFragmentLoader(numEntries, initialLoadSequence, loadingStrategy, logger, executor){
  var numEntriesPlusOne;
  Object_0.call(this);
  this.$init_77();
  this.numEntries = numEntries;
  this.initialLoadSequence = initialLoadSequence;
  this.loadingStrategy = loadingStrategy;
  this.logger = logger;
  this.onSuccessExecutor = executor;
  numEntriesPlusOne = numEntries + 1;
  this.allCallbacks = initUnidimensionalArray(cggl.Ljava_lang_Object_2_classLit, {4:1, 1:1, 8:1}, 8, numEntriesPlusOne, 3, 2);
  this.requestedExclusives = new cggcci.AsyncFragmentLoader$BoundedIntQueue(numEntriesPlusOne);
  this.isLoaded = initUnidimensionalArray(cggl.Z_classLit, {12:1, 4:1, 1:1}, 5, numEntriesPlusOne, 16, 1);
  this.pendingDownloadErrorHandlers = initUnidimensionalArray(cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LoadTerminatedHandler_2_classLit, {4:1, 1:1, 8:1}, 142, numEntriesPlusOne, 0, 1);
}

cggcci.makeBrowserLoader = function makeBrowserLoader(numFragments, initialLoad){
  if (isClient()) {
    return new AsyncFragmentLoader(numFragments, initialLoad, castTo(castTo(new cggcci.ScriptTagLoadingStrategy, 140), 140), castTo(castTo(new cggcci.AsyncFragmentLoader$StandardLogger, 203), 203), castTo(castTo(new cggcci.OnSuccessExecutor, 96), 96));
  }
   else {
    return null;
  }
}
;
function onLoad(fragment){
  cggcci.$clinit_AsyncFragmentLoader();
  BROWSER_LOADER.onLoadImpl(fragment);
}

function runAsync(fragment, callback){
  cggcci.$clinit_AsyncFragmentLoader();
  BROWSER_LOADER.runAsyncImpl(fragment, callback);
}

defineClass(204, 1, {1:1}, AsyncFragmentLoader);
_.$init_77 = function $init_77(){
  this.fragmentLoading = -1;
  this.prefetching = false;
  this.prefetchQueue = null;
  this.remainingInitialFragments = null;
}
;
_.anyPrefetchesRequested = function anyPrefetchesRequested(){
  return this.prefetching && isNotNull(this.prefetchQueue) && this.prefetchQueue.size_1() > 0;
}
;
_.clearRequestsAlreadyLoaded = function clearRequestsAlreadyLoaded(){
  var offset;
  while (this.requestedExclusives.size_1() > 0 && this.isLoaded[this.requestedExclusives.peek()]) {
    offset = this.requestedExclusives.remove_0();
    if (offset < this.pendingDownloadErrorHandlers.length) {
      setCheck(this.pendingDownloadErrorHandlers, offset, null);
    }
  }
  if (isNotNull(this.prefetchQueue)) {
    while (this.prefetchQueue.size_1() > 0 && this.isLoaded[this.prefetchQueue.peek()]) {
      this.prefetchQueue.remove_0();
    }
  }
}
;
_.downloadGroup = function downloadGroup(fragment){
  return fragment == this.leftoversFragment()?'leftoversDownload':cggcci.downloadGroupForExclusive(fragment);
}
;
_.executeOnSuccess0 = function executeOnSuccess0(callback){
  callback.onSuccess_0();
}
;
_.fragmentHasLoaded = function fragmentHasLoaded(fragment){
  this.logFragmentLoaded(fragment);
  if (fragment < this.pendingDownloadErrorHandlers.length) {
    setCheck(this.pendingDownloadErrorHandlers, fragment, null);
  }
  if (this.isInitial(fragment) && isNotNull(this.remainingInitialFragments)) {
    this.remainingInitialFragments.remove_0();
  }
  this.fragmentLoading = -1;
  this.isLoaded[fragment] = true;
  this.startLoadingNextFragment();
}
;
_.haveInitialFragmentsLoaded = function haveInitialFragmentsLoaded(){
  return isNotNull(this.remainingInitialFragments) && this.remainingInitialFragments.size_1() == 0;
}
;
_.initializeRemainingInitialFragments = function initializeRemainingInitialFragments(){
  var sp, sp$array, sp$index, sp$max;
  if (isNull(this.remainingInitialFragments)) {
    this.remainingInitialFragments = new cggcci.AsyncFragmentLoader$BoundedIntQueue(this.initialLoadSequence.length + 1);
    for (sp$array = this.initialLoadSequence , sp$index = 0 , sp$max = sp$array.length; sp$index < sp$max; ++sp$index) {
      sp = sp$array[sp$index];
      this.remainingInitialFragments.add_3(sp);
    }
    this.remainingInitialFragments.add_3(this.leftoversFragment());
  }
}
;
_.inject_0 = function inject_0(splitPoint, loadErrorHandler){
  setCheck(this.pendingDownloadErrorHandlers, splitPoint, loadErrorHandler);
  if (!this.isInitial(splitPoint)) {
    this.requestedExclusives.add_3(splitPoint);
  }
  this.startLoadingNextFragment();
}
;
_.isEmpty_0 = function isEmpty_1(array){
  var i;
  for (i = 0; i < array.length; i++) {
    if (jsNotEquals(array[i], null)) {
      return false;
    }
  }
  return true;
}
;
_.isInitial = function isInitial(splitPoint){
  var sp, sp$array, sp$index, sp$max;
  if (splitPoint == this.leftoversFragment()) {
    return true;
  }
  for (sp$array = this.initialLoadSequence , sp$index = 0 , sp$max = sp$array.length; sp$index < sp$max; ++sp$index) {
    sp = sp$array[sp$index];
    if (sp == splitPoint) {
      return true;
    }
  }
  return false;
}
;
_.isLoading = function isLoading(splitPoint){
  return isNotNull(this.pendingDownloadErrorHandlers[splitPoint]);
}
;
_.leftoversFragment = function leftoversFragment(){
  return this.numEntries;
}
;
_.logDownloadStart = function logDownloadStart(fragment){
  this.logEventProgress_0(this.downloadGroup(fragment), 'begin', fragment, -1);
}
;
_.logEventProgress = function logEventProgress(eventGroup, type_0){
  this.logEventProgress_0(eventGroup, type_0, -1, -1);
}
;
_.logEventProgress_0 = function logEventProgress_0(eventGroup, type_0, fragment, size_0){
  this.logger.logEventProgress_1(eventGroup, type_0, fragment, size_0);
}
;
_.logFragmentLoaded = function logFragmentLoaded(fragment){
  var logGroup;
  logGroup = this.downloadGroup(fragment);
  this.logEventProgress_0(logGroup, 'end', fragment, -1);
}
;
_.onLoadImpl = function onLoadImpl(fragment){
  var callback, callback$array, callback$index, callback$max, callbacks, t;
  this.fragmentHasLoaded(fragment);
  callbacks = this.allCallbacks[fragment];
  if (jsNotEquals(callbacks, null)) {
    this.logEventProgress('runCallbacks' + fragment, 'begin');
    setCheck(this.allCallbacks, fragment, null);
    for (callback$array = callbacks , callback$index = 0 , callback$max = callback$array.length; callback$index < callback$max; ++callback$index) {
      callback = callback$array[callback$index];
      try {
        castTo(callback, 200).onSuccess_0();
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 13)) {
          t = $e0;
          reportUncaughtException(t);
        }
         else 
          throw toJs($e0);
      }
    }
    this.logEventProgress('runCallbacks' + fragment, 'end');
  }
}
;
_.runAsyncImpl = function runAsyncImpl(fragment, callback){
  var callbacks;
  if (this.isLoaded[fragment]) {
    this.onSuccessExecutor.execute_1(this, callback);
    return;
  }
  callbacks = this.allCallbacks[fragment];
  if (jsEquals(callbacks, null)) {
    callbacks = setCheck(this.allCallbacks, fragment, initUnidimensionalArray(cggl.Lcom_google_gwt_core_client_RunAsyncCallback_2_classLit, {4:1, 1:1, 8:1}, 200, 0, 0, 1));
  }
  setCheck(callbacks, callbacks.length, callback);
  if (!this.isLoading(fragment)) {
    this.inject_0(fragment, new cggcci.AsyncFragmentLoader$1(this, fragment));
  }
}
;
_.startLoadingFragment = function startLoadingFragment(fragment){
  this.fragmentLoading = fragment;
  this.logDownloadStart(fragment);
  this.loadingStrategy.startLoadingFragment_0(fragment, new cggcci.AsyncFragmentLoader$ResetAfterDownloadFailure(this, fragment));
}
;
_.startLoadingNextFragment = function startLoadingNextFragment(){
  if (this.fragmentLoading >= 0) {
    return;
  }
  this.initializeRemainingInitialFragments();
  this.clearRequestsAlreadyLoaded();
  if (this.isEmpty_0(this.pendingDownloadErrorHandlers) && !this.anyPrefetchesRequested()) {
    return;
  }
  if (this.remainingInitialFragments.size_1() > 0) {
    this.startLoadingFragment(this.remainingInitialFragments.peek());
    return;
  }
  if (this.requestedExclusives.size_1() > 0) {
    this.startLoadingFragment(this.requestedExclusives.remove_0());
    return;
  }
  if (this.anyPrefetchesRequested()) {
    this.startLoadingFragment(this.prefetchQueue.remove_0());
    return;
  }
}
;
_.fragmentLoading = 0;
_.numEntries = 0;
_.prefetching = false;
var BROWSER_LOADER;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader', 204, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_AsyncFragmentLoader$LoadTerminatedHandler = function $clinit_AsyncFragmentLoader$LoadTerminatedHandler(){
  cggcci.$clinit_AsyncFragmentLoader$LoadTerminatedHandler = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LoadTerminatedHandler_2_classLit = createForInterface('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/LoadTerminatedHandler');
cggcci.$clinit_AsyncFragmentLoader$1 = function $clinit_AsyncFragmentLoader$1(){
  cggcci.$clinit_AsyncFragmentLoader$1 = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.AsyncFragmentLoader$1 = function AsyncFragmentLoader$1(this$0, val$fragment){
  cggcci.$clinit_AsyncFragmentLoader$1();
  this.this$01 = this$0;
  this.val$fragment2 = val$fragment;
  Object_0.call(this);
  this.$init_78();
}
;
defineClass(205, 1, {142:1, 1:1}, cggcci.AsyncFragmentLoader$1);
_.$init_78 = function $init_78(){
}
;
_.loadTerminated = function loadTerminated(reason){
  var callback, callback$array, callback$index, callback$max, callbacks;
  callbacks = this.this$01.allCallbacks[this.val$fragment2];
  if (jsNotEquals(callbacks, null)) {
    setCheck(this.this$01.allCallbacks, this.val$fragment2, null);
    for (callback$array = callbacks , callback$index = 0 , callback$max = callback$array.length; callback$index < callback$max; ++callback$index) {
      callback = callback$array[callback$index];
      castTo(callback, 200).onFailure_0(reason);
    }
  }
}
;
_.val$fragment2 = 0;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$1_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/1', 205, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_AsyncFragmentLoader$BoundedIntQueue = function $clinit_AsyncFragmentLoader$BoundedIntQueue(){
  cggcci.$clinit_AsyncFragmentLoader$BoundedIntQueue = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.AsyncFragmentLoader$BoundedIntQueue = function AsyncFragmentLoader$BoundedIntQueue(maxPuts){
  cggcci.$clinit_AsyncFragmentLoader$BoundedIntQueue();
  Object_0.call(this);
  this.$init_79();
  this.array = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, maxPuts, 15, 1);
}
;
defineClass(141, 1, {1:1}, cggcci.AsyncFragmentLoader$BoundedIntQueue);
_.$init_79 = function $init_79(){
  this.read = 0;
  this.write_0 = 0;
}
;
_.add_3 = function add_8(x_0){
  this.array[this.write_0++] = x_0;
}
;
_.clear_0 = function clear_4(){
  this.read = 0;
  this.write_0 = 0;
}
;
_.peek = function peek(){
  return this.array[this.read];
}
;
_.remove_0 = function remove_4(){
  return this.array[this.read++];
}
;
_.size_1 = function size_3(){
  return this.write_0 - this.read;
}
;
_.read = 0;
_.write_0 = 0;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$BoundedIntQueue_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/BoundedIntQueue', 141, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_AsyncFragmentLoader$HttpDownloadFailure = function $clinit_AsyncFragmentLoader$HttpDownloadFailure(){
  cggcci.$clinit_AsyncFragmentLoader$HttpDownloadFailure = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
cggcci.AsyncFragmentLoader$HttpDownloadFailure = function AsyncFragmentLoader$HttpDownloadFailure(url_0, statusCode, statusText){
  cggcci.$clinit_AsyncFragmentLoader$HttpDownloadFailure();
  jl.RuntimeException_1.call(this, 'Download of ' + url_0 + ' failed with status ' + statusCode + '(' + statusText + ')');
  this.$init_80();
  this.statusCode = statusCode;
}
;
defineClass(207, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, cggcci.AsyncFragmentLoader$HttpDownloadFailure);
_.$init_80 = function $init_80(){
}
;
_.statusCode = 0;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$HttpDownloadFailure_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/HttpDownloadFailure', 207, cggl.Ljava_lang_RuntimeException_2_classLit);
cggcci.$clinit_AsyncFragmentLoader$HttpInstallFailure = function $clinit_AsyncFragmentLoader$HttpInstallFailure(){
  cggcci.$clinit_AsyncFragmentLoader$HttpInstallFailure = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
cggcci.AsyncFragmentLoader$HttpInstallFailure = function AsyncFragmentLoader$HttpInstallFailure(url_0, text_0, rootCause){
  cggcci.$clinit_AsyncFragmentLoader$HttpInstallFailure();
  jl.RuntimeException_2.call(this, 'Install of ' + url_0 + ' failed with text ' + text_0, rootCause);
  this.$init_81();
}
;
defineClass(208, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, cggcci.AsyncFragmentLoader$HttpInstallFailure);
_.$init_81 = function $init_81(){
}
;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$HttpInstallFailure_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/HttpInstallFailure', 208, cggl.Ljava_lang_RuntimeException_2_classLit);
cggcci.$clinit_AsyncFragmentLoader$LoadingStrategy = function $clinit_AsyncFragmentLoader$LoadingStrategy(){
  cggcci.$clinit_AsyncFragmentLoader$LoadingStrategy = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LoadingStrategy_2_classLit = createForInterface('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/LoadingStrategy');
cggcci.$clinit_AsyncFragmentLoader$Logger = function $clinit_AsyncFragmentLoader$Logger(){
  cggcci.$clinit_AsyncFragmentLoader$Logger = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$Logger_2_classLit = createForInterface('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/Logger');
cggcci.$clinit_AsyncFragmentLoader$LwmLabels = function $clinit_AsyncFragmentLoader$LwmLabels(){
  cggcci.$clinit_AsyncFragmentLoader$LwmLabels = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.downloadGroupForExclusive = function downloadGroupForExclusive(splitPoint){
  cggcci.$clinit_AsyncFragmentLoader$LwmLabels();
  return 'download' + splitPoint;
}
;
defineClass(356, 1, {1:1});
cggcci.BEGIN = 'begin';
cggcci.END = 'end';
cggcci.LEFTOVERS_DOWNLOAD = 'leftoversDownload';
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LwmLabels_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/LwmLabels', 356, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_AsyncFragmentLoader$ResetAfterDownloadFailure = function $clinit_AsyncFragmentLoader$ResetAfterDownloadFailure(){
  cggcci.$clinit_AsyncFragmentLoader$ResetAfterDownloadFailure = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.AsyncFragmentLoader$ResetAfterDownloadFailure = function AsyncFragmentLoader$ResetAfterDownloadFailure(this$0, myFragment){
  cggcci.$clinit_AsyncFragmentLoader$ResetAfterDownloadFailure();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_82();
  this.fragment_0 = myFragment;
}
;
defineClass(206, 1, {142:1, 1:1}, cggcci.AsyncFragmentLoader$ResetAfterDownloadFailure);
_.$init_82 = function $init_82(){
}
;
_.loadTerminated = function loadTerminated_0(reason){
  var e, handler, handler$array, handler$index, handler$max, handlersToRun, lastException;
  if (this.this$01.fragmentLoading != this.fragment_0) {
    return;
  }
  handlersToRun = this.this$01.pendingDownloadErrorHandlers;
  this.this$01.pendingDownloadErrorHandlers = initUnidimensionalArray(cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LoadTerminatedHandler_2_classLit, {4:1, 1:1, 8:1}, 142, this.this$01.numEntries + 1, 0, 1);
  this.this$01.requestedExclusives.clear_0();
  this.this$01.fragmentLoading = -1;
  lastException = null;
  for (handler$array = handlersToRun , handler$index = 0 , handler$max = handler$array.length; handler$index < handler$max; ++handler$index) {
    handler = handler$array[handler$index];
    if (isNotNull(handler)) {
      try {
        handler.loadTerminated(reason);
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 16)) {
          e = $e0;
          lastException = e;
        }
         else 
          throw toJs($e0);
      }
    }
  }
  if (isNotNull(lastException)) {
    throw toJs(lastException);
  }
}
;
_.fragment_0 = 0;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$ResetAfterDownloadFailure_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/ResetAfterDownloadFailure', 206, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_AsyncFragmentLoader$StandardLogger = function $clinit_AsyncFragmentLoader$StandardLogger(){
  cggcci.$clinit_AsyncFragmentLoader$StandardLogger = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.AsyncFragmentLoader$StandardLogger = function AsyncFragmentLoader$StandardLogger(){
  cggcci.$clinit_AsyncFragmentLoader$StandardLogger();
  Object_0.call(this);
  this.$init_83();
}
;
cggcci.stats = function stats(data_0){
  return $stats(data_0);
}
;
defineClass(202, 1, {203:1, 1:1}, cggcci.AsyncFragmentLoader$StandardLogger);
_.$init_83 = function $init_83(){
}
;
_.createStatsEvent = function createStatsEvent(eventGroup, type_0, fragment, size_0){
  var evt = {moduleName:getModuleName(), sessionId:$sessionId, subSystem:'runAsync', evtGroup:eventGroup, millis:(new Date).getTime(), type:type_0};
  if (fragment >= 0) {
    evt.fragment = fragment;
  }
  if (size_0 >= 0) {
    evt.size = size_0;
  }
  return evt;
}
;
_.isStatsAvailable = function isStatsAvailable(){
  return !!$stats;
}
;
_.logEventProgress_1 = function logEventProgress_1(eventGroup, type_0, fragment, size_0){
  var toss;
  toss = this.isStatsAvailable() && cggcci.stats(this.createStatsEvent(eventGroup, type_0, fragment, size_0));
}
;
cggl.Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$StandardLogger_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/StandardLogger', 202, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_Impl = function $clinit_Impl(){
  cggcci.$clinit_Impl = emptyMethod;
  jl.$clinit_Object();
  {
    if (isScript() && isNotNull((cggcci.$clinit_StackTraceCreator() , cggcci.collector_1))) {
    }
  }
  watchdogEntryDepthTimerId = -1;
}
;
cggcci.apply_0 = function apply_0(jsFunction, thisObj, args){
  if (isScript()) {
    return jsFunction.apply(thisObj, args);
  }
   else {
    var __0 = jsFunction.apply(thisObj, args);
    if (__0 != null) {
      __0 = {val:__0};
    }
    return __0;
  }
}
;
cggcci.enter = function enter(){
  var now_0;
  if (isScript() && entryDepth != 0) {
    now_0 = cggcc.currentTimeMillis();
    if (now_0 - watchdogEntryDepthLastScheduled > 2000) {
      watchdogEntryDepthLastScheduled = now_0;
      watchdogEntryDepthTimerId = cggcci.watchdogEntryDepthSchedule();
    }
  }
  if (entryDepth++ == 0) {
    (cggcci.$clinit_SchedulerImpl() , cggcci.INSTANCE).flushEntryCommands();
    return true;
  }
  return false;
}
;
function entry_0(jsFunction){
  cggcci.$clinit_Impl();
  return function(){
    if (isScript()) {
      return cggcci.entry0(jsFunction, this, arguments);
    }
     else {
      var __0 = cggcci.entry0(jsFunction, this, arguments);
      if (__0 != null) {
        __0 = __0.val;
      }
      return __0;
    }
  }
  ;
}

cggcci.entry0 = function entry0(jsFunction, thisObj, args){
  var initialEntry, t;
  initialEntry = cggcci.enter();
  try {
    if (isNotNull(getUncaughtExceptionHandler())) {
      try {
        return cggcci.apply_0(jsFunction, thisObj, args);
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 13)) {
          t = $e0;
          reportUncaughtException_0(t);
          return cggcci.undefined_0();
        }
         else 
          throw toJs($e0);
      }
    }
     else {
      return cggcci.apply_0(jsFunction, thisObj, args);
    }
  }
   finally {
    cggcci.exit(initialEntry);
  }
}
;
cggcci.exit = function exit(initialEntry){
  if (initialEntry) {
    (cggcci.$clinit_SchedulerImpl() , cggcci.INSTANCE).flushFinallyCommands();
  }
  entryDepth--;
  if (initialEntry) {
    if (isScript() && watchdogEntryDepthTimerId != -1) {
      cggcci.watchdogEntryDepthCancel(watchdogEntryDepthTimerId);
      watchdogEntryDepthTimerId = -1;
    }
  }
}
;
function getModuleName_0(){
  cggcci.$clinit_Impl();
  return $moduleName;
}

function getNameOf(jsniIdent){
  cggcci.$clinit_Impl();
  throw toJs(new jl.UnsupportedOperationException_0('Impl.getNameOf() is unimplemented in Development Mode'));
}

function registerEntry(){
  cggcci.$clinit_Impl();
  if (isScript()) {
    return entry_0;
  }
   else {
    return $entry = entry_0;
  }
}

cggcci.reportToBrowser = function reportToBrowser(e){
  $wnd.setTimeout(function(){
    throw e;
  }
  , 0);
}
;
cggcci.reportToBrowser_0 = function reportToBrowser_0(e){
  cggcci.reportToBrowser(instanceOf(e, 75)?castTo(e, 75).getThrown():e);
}
;
function reportUncaughtException_0(e){
  cggcci.$clinit_Impl();
  cggcci.reportUncaughtException_1(e, true);
}

cggcci.reportUncaughtException_1 = function reportUncaughtException_1(e, reportSwallowedExceptionToBrowser){
  var handler;
  if (isNotNull(uncaughtExceptionHandlerForTest)) {
    uncaughtExceptionHandlerForTest.onUncaughtException(e);
  }
  handler = getUncaughtExceptionHandler();
  if (isNotNull(handler)) {
    if (jsEquals(handler, uncaughtExceptionHandlerForTest)) {
      return;
    }
    handler.onUncaughtException(e);
    return;
  }
  if (isClient() && reportSwallowedExceptionToBrowser) {
    cggcci.reportToBrowser_0(e);
  }
   else {
    (jl.$clinit_System() , jl.err).print_0('Uncaught exception ');
    e.printStackTrace_0((jl.$clinit_System() , jl.err));
  }
}
;
cggcci.undefined_0 = function undefined_0(){
  return;
}
;
cggcci.watchdogEntryDepthCancel = function watchdogEntryDepthCancel(timerId){
  $wnd.clearTimeout(timerId);
}
;
cggcci.watchdogEntryDepthRun = function watchdogEntryDepthRun(){
  if (isScript() && entryDepth != 0) {
    entryDepth = 0;
  }
  watchdogEntryDepthTimerId = -1;
}
;
cggcci.watchdogEntryDepthSchedule = function watchdogEntryDepthSchedule(){
  return $wnd.setTimeout(cggcci.watchdogEntryDepthRun, 10);
}
;
defineClass(357, 1, {1:1});
var WATCHDOG_ENTRY_DEPTH_CHECK_INTERVAL_MS = 2000;
var entryDepth = 0;
var uncaughtExceptionHandlerForTest;
var watchdogEntryDepthLastScheduled = 0;
var watchdogEntryDepthTimerId = 0;
cggl.Lcom_google_gwt_core_client_impl_Impl_2_classLit = createForClass('com.google.gwt.core.client.impl', 'Impl', 357, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_LoadingStrategyBase = function $clinit_LoadingStrategyBase(){
  cggcci.$clinit_LoadingStrategyBase = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.LoadingStrategyBase = function LoadingStrategyBase(downloadStrategy){
  cggcci.$clinit_LoadingStrategyBase();
  Object_0.call(this);
  this.$init_84();
  this.downloadStrategy = downloadStrategy;
}
;
cggcci.gwtInstallCode = function gwtInstallCode(text_0){
  cggcci.$clinit_LoadingStrategyBase();
  __gwtInstallCode(text_0);
}
;
cggcci.gwtStartLoadingFragment = function gwtStartLoadingFragment(fragment, loadErrorHandler){
  function loadFailed(e){
    loadErrorHandler.loadTerminated(e);
  }

  return __gwtStartLoadingFragment(fragment, $entry(loadFailed));
}
;
defineClass(232, 1, {140:1, 1:1});
_.$init_84 = function $init_84(){
  this.manualRetryNumbers = cggcci.create_0();
}
;
_.getManualRetryNum = function getManualRetryNum(fragment){
  var ser;
  ser = cggcci.$get_1(this.manualRetryNumbers, fragment);
  cggcci.$put(this.manualRetryNumbers, fragment, ser + 1);
  return ser;
}
;
_.getMaxAutoRetryCount = function getMaxAutoRetryCount(){
  return cggcci.MAX_AUTO_RETRY_COUNT;
}
;
_.startLoadingFragment_0 = function startLoadingFragment_0(fragment, loadErrorHandler){
  var connector, manualRetry, request, url_0;
  url_0 = cggcci.gwtStartLoadingFragment(fragment, loadErrorHandler);
  if (jsEquals(url_0, null)) {
    return;
  }
  manualRetry = this.getManualRetryNum(fragment);
  if (manualRetry > 0) {
    connector = jl.contains_Ljava_lang_CharSequence__Z__devirtual$(url_0, '?')?38:63;
    url_0 += charToString(connector) + 'manualRetry=' + manualRetry;
  }
  request = new cggcci.LoadingStrategyBase$RequestData(url_0, loadErrorHandler, fragment, this.downloadStrategy, this.getMaxAutoRetryCount());
  request.tryDownload_0();
}
;
cggcci.MAX_AUTO_RETRY_COUNT = 3;
cggl.Lcom_google_gwt_core_client_impl_LoadingStrategyBase_2_classLit = createForClass('com.google.gwt.core.client.impl', 'LoadingStrategyBase', 232, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_LoadingStrategyBase$DownloadStrategy = function $clinit_LoadingStrategyBase$DownloadStrategy(){
  cggcci.$clinit_LoadingStrategyBase$DownloadStrategy = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_impl_LoadingStrategyBase$DownloadStrategy_2_classLit = createForInterface('com.google.gwt.core.client.impl', 'LoadingStrategyBase/DownloadStrategy');
cggcci.$clinit_LoadingStrategyBase$FragmentReloadTracker = function $clinit_LoadingStrategyBase$FragmentReloadTracker(){
  cggcci.$clinit_LoadingStrategyBase$FragmentReloadTracker = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggcci.$get_1 = function $get_1(this$static, x_0){
  cggcci.$clinit_LoadingStrategyBase$FragmentReloadTracker();
  return this$static[x_0]?this$static[x_0]:0;
}
;
cggcci.$put = function $put(this$static, x_0, y_0){
  cggcci.$clinit_LoadingStrategyBase$FragmentReloadTracker();
  this$static[x_0] = y_0;
}
;
cggcci.create_0 = function create_0(){
  cggcci.$clinit_LoadingStrategyBase$FragmentReloadTracker();
  return cggcc.createArray();
}
;
cggcci.$clinit_LoadingStrategyBase$RequestData = function $clinit_LoadingStrategyBase$RequestData(){
  cggcci.$clinit_LoadingStrategyBase$RequestData = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.LoadingStrategyBase$RequestData = function LoadingStrategyBase$RequestData(url_0, errorHandler, fragment, downloadStrategy, maxRetryCount){
  cggcci.$clinit_LoadingStrategyBase$RequestData();
  Object_0.call(this);
  this.$init_85();
  this.url_0 = url_0;
  this.originalUrl = url_0;
  this.errorHandler = errorHandler;
  this.maxRetryCount = maxRetryCount;
  this.retryCount = 0;
  this.fragment_0 = fragment;
  this.downloadStrategy = downloadStrategy;
}
;
defineClass(235, 1, {1:1}, cggcci.LoadingStrategyBase$RequestData);
_.$init_85 = function $init_85(){
  this.errorHandler = null;
}
;
_.getFragment_1 = function getFragment_1(){
  return this.fragment_0;
}
;
_.getUrl = function getUrl(){
  return this.url_0;
}
;
_.onLoadError = function onLoadError(e, mayRetry){
  var connector;
  if (mayRetry) {
    this.retryCount++;
    if (this.retryCount <= this.maxRetryCount) {
      connector = jl.contains_Ljava_lang_CharSequence__Z__devirtual$(this.originalUrl, '?')?38:63;
      this.url_0 = this.originalUrl + charToString(connector) + 'autoRetry=' + this.retryCount;
      this.downloadStrategy.tryDownload(this);
      return;
    }
  }
  this.errorHandler.loadTerminated(e);
}
;
_.tryDownload_0 = function tryDownload(){
  this.downloadStrategy.tryDownload(this);
}
;
_.tryInstall = function tryInstall(code_0){
  var e, textIntro;
  try {
    cggcci.gwtInstallCode(code_0);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 16)) {
      e = $e0;
      textIntro = code_0;
      if (jsNotEquals(textIntro, null) && jl.length__I__devirtual$_0(textIntro) > 200) {
        textIntro = jl.substring_II_Ljava_lang_String___devirtual$(textIntro, 0, 200) + '...';
      }
      this.onLoadError(new cggcci.AsyncFragmentLoader$HttpInstallFailure(this.url_0, textIntro, e), false);
    }
     else 
      throw toJs($e0);
  }
}
;
_.fragment_0 = 0;
_.maxRetryCount = 0;
_.retryCount = 0;
cggcci.MAX_LOG_LENGTH = 200;
cggl.Lcom_google_gwt_core_client_impl_LoadingStrategyBase$RequestData_2_classLit = createForClass('com.google.gwt.core.client.impl', 'LoadingStrategyBase/RequestData', 235, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_OnSuccessExecutor = function $clinit_OnSuccessExecutor(){
  cggcci.$clinit_OnSuccessExecutor = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.OnSuccessExecutor = function OnSuccessExecutor(){
  cggcci.$clinit_OnSuccessExecutor();
  Object_0.call(this);
  this.$init_86();
}
;
defineClass(96, 1, {96:1, 1:1}, cggcci.OnSuccessExecutor);
_.$init_86 = function $init_86(){
}
;
_.execute_1 = function execute(fragmentLoader, callback){
  cggcc.get_1().scheduleDeferred(new cggcci.OnSuccessExecutor$1(this, fragmentLoader, callback));
}
;
cggl.Lcom_google_gwt_core_client_impl_OnSuccessExecutor_2_classLit = createForClass('com.google.gwt.core.client.impl', 'OnSuccessExecutor', 96, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_OnSuccessExecutor$1 = function $clinit_OnSuccessExecutor$1(){
  cggcci.$clinit_OnSuccessExecutor$1 = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.OnSuccessExecutor$1 = function OnSuccessExecutor$1(this$0, val$fragmentLoader, val$callback){
  cggcci.$clinit_OnSuccessExecutor$1();
  this.this$01 = this$0;
  this.val$fragmentLoader2 = val$fragmentLoader;
  this.val$callback3 = val$callback;
  Object_0.call(this);
  this.$init_87();
}
;
defineClass(236, 1, {1:1}, cggcci.OnSuccessExecutor$1);
_.$init_87 = function $init_87(){
}
;
_.execute_0 = function execute_0(){
  this.val$fragmentLoader2.executeOnSuccess0(this.val$callback3);
}
;
cggl.Lcom_google_gwt_core_client_impl_OnSuccessExecutor$1_2_classLit = createForClass('com.google.gwt.core.client.impl', 'OnSuccessExecutor/1', 236, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_SchedulerImpl = function $clinit_SchedulerImpl(){
  cggcci.$clinit_SchedulerImpl = emptyMethod;
  cggcc.$clinit_Scheduler();
  cggcci.INSTANCE = castTo(new cggcci.SchedulerImpl, 128);
}
;
cggcci.SchedulerImpl = function SchedulerImpl(){
  cggcc.Scheduler.call(this);
  this.$init_88();
}
;
cggcci.createQueue = function createQueue(){
  return cggcc.$cast(cggcc.createArray());
}
;
cggcci.execute_1 = function execute_1(cmd){
  return cmd.execute();
}
;
cggcci.push_0 = function push_0(queue, task){
  if (isNull(queue)) {
    queue = cggcci.createQueue();
  }
  cggcc.$push(queue, task);
  return queue;
}
;
cggcci.runScheduledTasks = function runScheduledTasks(tasks, rescheduled){
  var e, i, j, t;
  for (i = 0 , j = cggcc.$length(tasks); i < j; i++) {
    t = cggcc.$get(tasks, i);
    try {
      if (cggcci.$isRepeating(t)) {
        if (cggcci.$executeRepeating(t)) {
          rescheduled = cggcci.push_0(rescheduled, t);
        }
      }
       else {
        cggcci.$executeScheduled(t);
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        e = $e0;
        reportUncaughtException(e);
      }
       else 
        throw toJs($e0);
    }
  }
  return rescheduled;
}
;
cggcci.scheduleFixedDelayImpl = function scheduleFixedDelayImpl(cmd, delayMs){
  function callback(){
    var ret = $entry(cggcci.execute_1)(cmd);
    if (!isScript()) {
      ret = ret == true;
    }
    if (ret) {
      $wnd.setTimeout(callback, delayMs);
    }
  }

  $wnd.setTimeout(callback, delayMs);
}
;
defineClass(128, 170, {128:1, 1:1}, cggcci.SchedulerImpl);
_.$init_88 = function $init_88(){
  this.flushRunning = false;
  this.shouldBeRunning = false;
}
;
_.createDuration = function createDuration(){
  return new cggcc.Duration;
}
;
_.flushEntryCommands = function flushEntryCommands(){
  var oldQueue, rescheduled;
  if (isNotNull(this.entryCommands)) {
    rescheduled = null;
    do {
      oldQueue = this.entryCommands;
      this.entryCommands = null;
      rescheduled = cggcci.runScheduledTasks(oldQueue, rescheduled);
    }
     while (isNotNull(this.entryCommands));
    this.entryCommands = rescheduled;
  }
}
;
_.flushFinallyCommands = function flushFinallyCommands(){
  var oldQueue, rescheduled;
  if (isNotNull(this.finallyCommands)) {
    rescheduled = null;
    do {
      oldQueue = this.finallyCommands;
      this.finallyCommands = null;
      rescheduled = cggcci.runScheduledTasks(oldQueue, rescheduled);
    }
     while (isNotNull(this.finallyCommands));
    this.finallyCommands = rescheduled;
  }
}
;
_.flushPostEventPumpCommands = function flushPostEventPumpCommands(){
  var oldDeferred;
  if (isNotNull(this.deferredCommands)) {
    oldDeferred = this.deferredCommands;
    this.deferredCommands = null;
    if (isNull(this.incrementalCommands)) {
      this.incrementalCommands = cggcci.createQueue();
    }
    cggcci.runScheduledTasks(oldDeferred, this.incrementalCommands);
  }
  if (isNotNull(this.incrementalCommands)) {
    this.incrementalCommands = this.runRepeatingTasks(this.incrementalCommands);
  }
}
;
_.isWorkQueued = function isWorkQueued(){
  return isNotNull(this.deferredCommands) || isNotNull(this.incrementalCommands);
}
;
_.maybeSchedulePostEventPumpCommands = function maybeSchedulePostEventPumpCommands(){
  if (!this.shouldBeRunning) {
    this.shouldBeRunning = true;
    if (isNull(this.flusher)) {
      this.flusher = new cggcci.SchedulerImpl$Flusher(this);
    }
    cggcci.scheduleFixedDelayImpl(this.flusher, 1);
    if (isNull(this.rescue)) {
      this.rescue = new cggcci.SchedulerImpl$Rescuer(this);
    }
    cggcci.scheduleFixedDelayImpl(this.rescue, 50);
  }
}
;
_.runRepeatingTasks = function runRepeatingTasks(tasks){
  var canceledSomeTasks, duration, executedSomeTask, i, length_0, newTasks, t;
  length_0 = cggcc.$length(tasks);
  if (length_0 == 0) {
    return null;
  }
  canceledSomeTasks = false;
  duration = this.createDuration();
  while (duration.elapsedMillis() < 16) {
    executedSomeTask = false;
    for (i = 0; i < length_0; i++) {
      t = cggcc.$get(tasks, i);
      if (isNull(t)) {
        continue;
      }
      executedSomeTask = true;
      if (!cggcci.$executeRepeating(t)) {
        cggcc.$set(tasks, i, null);
        canceledSomeTasks = true;
      }
    }
    if (!executedSomeTask) {
      break;
    }
  }
  if (canceledSomeTasks) {
    newTasks = cggcci.createQueue();
    for (i = 0; i < length_0; i++) {
      if (isNotNull(cggcc.$get(tasks, i))) {
        cggcc.$push(newTasks, cggcc.$get(tasks, i));
      }
    }
    return cggcc.$length(newTasks) == 0?null:newTasks;
  }
   else {
    return tasks;
  }
}
;
_.scheduleDeferred = function scheduleDeferred(cmd){
  this.deferredCommands = cggcci.push_0(this.deferredCommands, cggcci.create_1(cmd));
  this.maybeSchedulePostEventPumpCommands();
}
;
_.scheduleFixedDelay = function scheduleFixedDelay(cmd, delayMs){
  cggcci.scheduleFixedDelayImpl(cmd, delayMs);
}
;
_.flushRunning = false;
_.shouldBeRunning = false;
cggcci.FLUSHER_DELAY = 1;
cggcci.RESCUE_DELAY = 50;
cggcci.TIME_SLICE = 16;
cggl.Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl', 128, cggl.Lcom_google_gwt_core_client_Scheduler_2_classLit);
cggcci.$clinit_SchedulerImpl$Flusher = function $clinit_SchedulerImpl$Flusher(){
  cggcci.$clinit_SchedulerImpl$Flusher = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.SchedulerImpl$Flusher = function SchedulerImpl$Flusher(this$0){
  cggcci.$clinit_SchedulerImpl$Flusher();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_89();
}
;
defineClass(268, 1, {1:1}, cggcci.SchedulerImpl$Flusher);
_.$init_89 = function $init_89(){
}
;
_.execute = function execute_2(){
  this.this$01.flushRunning = true;
  this.this$01.flushPostEventPumpCommands();
  this.this$01.flushRunning = false;
  return this.this$01.shouldBeRunning = this.this$01.isWorkQueued();
}
;
cggl.Lcom_google_gwt_core_client_impl_SchedulerImpl$Flusher_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl/Flusher', 268, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_SchedulerImpl$Rescuer = function $clinit_SchedulerImpl$Rescuer(){
  cggcci.$clinit_SchedulerImpl$Rescuer = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.SchedulerImpl$Rescuer = function SchedulerImpl$Rescuer(this$0){
  cggcci.$clinit_SchedulerImpl$Rescuer();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_90();
}
;
defineClass(269, 1, {1:1}, cggcci.SchedulerImpl$Rescuer);
_.$init_90 = function $init_90(){
}
;
_.execute = function execute_3(){
  if (this.this$01.flushRunning) {
    this.this$01.scheduleFixedDelay(this.this$01.flusher, 1);
  }
  return this.this$01.shouldBeRunning;
}
;
cggl.Lcom_google_gwt_core_client_impl_SchedulerImpl$Rescuer_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl/Rescuer', 269, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_SchedulerImpl$Task = function $clinit_SchedulerImpl$Task(){
  cggcci.$clinit_SchedulerImpl$Task = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggcci.$executeRepeating = function $executeRepeating(this$static){
  cggcci.$clinit_SchedulerImpl$Task();
  return cggcci.$getRepeating(this$static).execute();
}
;
cggcci.$executeScheduled = function $executeScheduled(this$static){
  cggcci.$clinit_SchedulerImpl$Task();
  cggcci.$getScheduled(this$static).execute_0();
}
;
cggcci.$getRepeating = function $getRepeating(this$static){
  return this$static[0];
}
;
cggcci.$getScheduled = function $getScheduled(this$static){
  return this$static[0];
}
;
cggcci.$isRepeating = function $isRepeating(this$static){
  cggcci.$clinit_SchedulerImpl$Task();
  return this$static[1];
}
;
cggcci.create_1 = function create_1(cmd){
  cggcci.$clinit_SchedulerImpl$Task();
  return [cmd, false];
}
;
cggcci.$clinit_ScriptTagLoadingStrategy = function $clinit_ScriptTagLoadingStrategy(){
  cggcci.$clinit_ScriptTagLoadingStrategy = emptyMethod;
  cggcci.$clinit_LoadingStrategyBase();
}
;
cggcci.ScriptTagLoadingStrategy = function ScriptTagLoadingStrategy(){
  cggcci.$clinit_ScriptTagLoadingStrategy();
  cggcci.LoadingStrategyBase.call(this, new cggcci.ScriptTagLoadingStrategy$ScriptTagDownloadStrategy);
  this.$init_91();
}
;
cggcci.asyncCallback = function asyncCallback(request, code_0){
  var firstTimeCalled;
  firstTimeCalled = cggcci.clearAsyncCallback(request.getFragment_1());
  if (firstTimeCalled) {
    request.tryInstall(code_0);
  }
}
;
cggcci.cleanup = function cleanup(request){
  cggcci.$clinit_ScriptTagLoadingStrategy();
  var neverCalled;
  neverCalled = cggcci.clearAsyncCallback(request.getFragment_1());
  if (neverCalled) {
    request.onLoadError(new cggcci.AsyncFragmentLoader$HttpDownloadFailure(request.getUrl(), 404, 'Script Tag Failure - no status available'), true);
  }
}
;
cggcci.clearAsyncCallback = function clearAsyncCallback(fragment){
  if (!__gwtModuleFunction['runAsyncCallback' + fragment]) {
    return false;
  }
  delete __gwtModuleFunction['runAsyncCallback' + fragment];
  return true;
}
;
cggcci.setAsyncCallback = function setAsyncCallback(fragment, request){
  cggcci.$clinit_ScriptTagLoadingStrategy();
  __gwtModuleFunction['runAsyncCallback' + fragment] = $entry(function(code_0, instance){
    cggcci.asyncCallback(request, code_0);
  }
  );
}
;
defineClass(201, 232, {140:1, 1:1}, cggcci.ScriptTagLoadingStrategy);
_.$init_91 = function $init_91(){
}
;
cggl.Lcom_google_gwt_core_client_impl_ScriptTagLoadingStrategy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'ScriptTagLoadingStrategy', 201, cggl.Lcom_google_gwt_core_client_impl_LoadingStrategyBase_2_classLit);
cggcci.$clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy = function $clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy(){
  cggcci.$clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.ScriptTagLoadingStrategy$ScriptTagDownloadStrategy = function ScriptTagLoadingStrategy$ScriptTagDownloadStrategy(){
  cggcci.$clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy();
  Object_0.call(this);
  this.$init_92();
}
;
defineClass(233, 1, {1:1}, cggcci.ScriptTagLoadingStrategy$ScriptTagDownloadStrategy);
_.$init_92 = function $init_92(){
}
;
_.tryDownload = function tryDownload_0(request){
  cggcci.setAsyncCallback(request.getFragment_1(), request);
  cggcc.fromUrl(request.getUrl()).setRemoveTag(true).setCallback(new cggcci.ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1(this, request)).inject();
}
;
cggl.Lcom_google_gwt_core_client_impl_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'ScriptTagLoadingStrategy/ScriptTagDownloadStrategy', 233, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1 = function $clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1(){
  cggcci.$clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1 = emptyMethod;
  jl.$clinit_Object();
}
;
cggcci.ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1 = function ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1(this$1, val$request){
  cggcci.$clinit_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1();
  this.this$11 = this$1;
  this.val$request2 = val$request;
  Object_0.call(this);
  this.$init_93();
}
;
defineClass(234, 1, {1:1}, cggcci.ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1);
_.$init_93 = function $init_93(){
}
;
_.onFailure = function onFailure_0(reason){
  this.onFailure_1(castTo(reason, 11));
}
;
_.onSuccess = function onSuccess(result){
  this.onSuccess_1(castTo(result, 166));
}
;
_.onFailure_1 = function onFailure(reason){
  cggcci.cleanup(this.val$request2);
}
;
_.onSuccess_1 = function onSuccess_0(result){
  cggcci.cleanup(this.val$request2);
}
;
cggl.Lcom_google_gwt_core_client_impl_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1_2_classLit = createForClass('com.google.gwt.core.client.impl', 'ScriptTagLoadingStrategy/ScriptTagDownloadStrategy/1', 234, cggl.Ljava_lang_Object_2_classLit);
cggcci.$clinit_StackTraceCreator$CollectorEmulated = function $clinit_StackTraceCreator$CollectorEmulated(){
  cggcci.$clinit_StackTraceCreator$CollectorEmulated = emptyMethod;
}
;
defineClass(393, 98, {1:1});
cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorEmulated_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorEmulated', 393, cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
cggcci.$clinit_StackTraceCreator$CollectorNull = function $clinit_StackTraceCreator$CollectorNull(){
  cggcci.$clinit_StackTraceCreator$CollectorNull = emptyMethod;
}
;
defineClass(394, 98, {1:1});
cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorNull_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorNull', 394, cggl.Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
cggccp.$clinit_PrefetchableResource = function $clinit_PrefetchableResource(){
  cggccp.$clinit_PrefetchableResource = emptyMethod;
}
;
cggl.Lcom_google_gwt_core_client_prefetch_PrefetchableResource_2_classLit = createForInterface('com.google.gwt.core.client.prefetch', 'PrefetchableResource');
cggccp.$clinit_RunAsyncCode = function $clinit_RunAsyncCode(){
  cggccp.$clinit_RunAsyncCode = emptyMethod;
}
;
defineClass(358, 1, {1:1});
cggl.Lcom_google_gwt_core_client_prefetch_RunAsyncCode_2_classLit = createForClass('com.google.gwt.core.client.prefetch', 'RunAsyncCode', 358, cggl.Ljava_lang_Object_2_classLit);
cggcs.$clinit_GWT_0 = function $clinit_GWT_0(){
  cggcs.$clinit_GWT_0 = emptyMethod;
  jl.$clinit_Object();
  {
    if (cggcs.isScript_0()) {
      cggcs.logger_0 = castTo(new cggcsi.JsLogger, 124);
    }
     else {
      cggcs.logger_0 = null;
    }
  }
}
;
cggcs.create_2 = function create_2(classLiteral){
  return cggcs.createImpl(classLiteral);
}
;
cggcs.createImpl = function createImpl(classLiteral){
  cggcs.$clinit_GWT_0();
  if (isNull(cggcs.sGWTBridge)) {
    throw toJs(new jl.UnsupportedOperationException_0('ERROR: GWT.create() is only usable in client code!  It cannot be called, for example, from server code.  If you are running a unit test, check that your test case extends GWTTestCase and that GWT.create() is not called from within an initializer or constructor.'));
  }
   else {
    return cggcs.sGWTBridge.create_0(classLiteral);
  }
}
;
cggcs.isScript_0 = function isScript_0(){
  return true;
}
;
cggcs.log_1 = function log_1(message){
  cggcs.$clinit_GWT_0();
  cggcs.log_2(message, null);
}
;
cggcs.log_2 = function log_2(message, e){
  if (isNotNull(cggcs.sGWTBridge)) {
    cggcs.sGWTBridge.log_0(message, e);
  }
   else if (isNotNull(cggcs.logger_0)) {
    cggcs.logger_0.log_0(message, e);
  }
}
;
defineClass(414, 1, {1:1});
cggcs.sGWTBridge = null;
cggl.Lcom_google_gwt_core_shared_GWT_2_classLit = createForClass('com.google.gwt.core.shared', 'GWT', 414, cggl.Ljava_lang_Object_2_classLit);
cggcs.$clinit_GWTBridge = function $clinit_GWTBridge(){
  cggcs.$clinit_GWTBridge = emptyMethod;
}
;
defineClass(434, 1, {1:1});
cggl.Lcom_google_gwt_core_shared_GWTBridge_2_classLit = createForClass('com.google.gwt.core.shared', 'GWTBridge', 434, cggl.Ljava_lang_Object_2_classLit);
cggcsi.$clinit_JsLogger = function $clinit_JsLogger(){
  cggcsi.$clinit_JsLogger = emptyMethod;
  jl.$clinit_Object();
}
;
cggcsi.JsLogger = function JsLogger(){
  cggcsi.$clinit_JsLogger();
  Object_0.call(this);
  this.$init_98();
}
;
defineClass(124, 1, {124:1, 1:1}, cggcsi.JsLogger);
_.$init_98 = function $init_98(){
}
;
_.log_0 = function log_3(message, e){
}
;
cggl.Lcom_google_gwt_core_shared_impl_JsLogger_2_classLit = createForClass('com.google.gwt.core.shared.impl', 'JsLogger', 124, cggl.Ljava_lang_Object_2_classLit);
cggdc.$clinit_Node = function $clinit_Node(){
  cggdc.$clinit_Node = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggdc.DOCUMENT_NODE = 9;
cggdc.ELEMENT_NODE = 1;
cggdc.TEXT_NODE = 3;
cggdc.$clinit_Document = function $clinit_Document(){
  cggdc.$clinit_Document = emptyMethod;
  cggdc.$clinit_Node();
}
;
cggdc.$getCompatMode = function $getCompatMode(this$static){
  cggdc.$clinit_Document();
  return this$static.compatMode;
}
;
cggdc.get_2 = function get_2(){
  cggdc.$clinit_Document();
  if (isScript()) {
    return cggdc.nativeGet();
  }
  if (isNull(cggdc.doc_0)) {
    cggdc.doc_0 = cggdc.nativeGet();
  }
  return cggdc.doc_0;
}
;
cggdc.nativeGet = function nativeGet(){
  return $doc;
}
;
cgggc.$clinit_Position = function $clinit_Position(){
  cgggc.$clinit_Position = emptyMethod;
}
;
cggl.Lcom_google_gwt_geolocation_client_Position_2_classLit = createForInterface('com.google.gwt.geolocation.client', 'Position');
cgggc.$clinit_Position$Coordinates = function $clinit_Position$Coordinates(){
  cgggc.$clinit_Position$Coordinates = emptyMethod;
}
;
cggl.Lcom_google_gwt_geolocation_client_Position$Coordinates_2_classLit = createForInterface('com.google.gwt.geolocation.client', 'Position/Coordinates');
cgggc.$clinit_PositionImpl = function $clinit_PositionImpl(){
  cgggc.$clinit_PositionImpl = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cgggc.$clinit_PositionImpl$CoordinatesImpl = function $clinit_PositionImpl$CoordinatesImpl(){
  cgggc.$clinit_PositionImpl$CoordinatesImpl = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggis.$clinit_Localizable_0 = function $clinit_Localizable_0(){
  cggis.$clinit_Localizable_0 = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_shared_Localizable_2_classLit = createForInterface('com.google.gwt.i18n.shared', 'Localizable');
cggic.$clinit_Localizable = function $clinit_Localizable(){
  cggic.$clinit_Localizable = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Localizable_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Localizable');
cggic.$clinit_LocalizableResource = function $clinit_LocalizableResource(){
  cggic.$clinit_LocalizableResource = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource');
cggic.$clinit_Constants = function $clinit_Constants(){
  cggic.$clinit_Constants = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants');
jla.$clinit_Annotation = function $clinit_Annotation(){
  jla.$clinit_Annotation = emptyMethod;
}
;
cggl.Ljava_lang_annotation_Annotation_2_classLit = createForInterface('java.lang.annotation', 'Annotation');
cggic.$clinit_Constants$DefaultBooleanValue = function $clinit_Constants$DefaultBooleanValue(){
  cggic.$clinit_Constants$DefaultBooleanValue = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants$DefaultBooleanValue_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants/DefaultBooleanValue');
cggic.$clinit_Constants$DefaultDoubleValue = function $clinit_Constants$DefaultDoubleValue(){
  cggic.$clinit_Constants$DefaultDoubleValue = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants$DefaultDoubleValue_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants/DefaultDoubleValue');
cggic.$clinit_Constants$DefaultFloatValue = function $clinit_Constants$DefaultFloatValue(){
  cggic.$clinit_Constants$DefaultFloatValue = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants$DefaultFloatValue_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants/DefaultFloatValue');
cggic.$clinit_Constants$DefaultIntValue = function $clinit_Constants$DefaultIntValue(){
  cggic.$clinit_Constants$DefaultIntValue = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants$DefaultIntValue_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants/DefaultIntValue');
cggic.$clinit_Constants$DefaultStringArrayValue = function $clinit_Constants$DefaultStringArrayValue(){
  cggic.$clinit_Constants$DefaultStringArrayValue = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants$DefaultStringArrayValue_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants/DefaultStringArrayValue');
cggic.$clinit_Constants$DefaultStringMapValue = function $clinit_Constants$DefaultStringMapValue(){
  cggic.$clinit_Constants$DefaultStringMapValue = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants$DefaultStringMapValue_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants/DefaultStringMapValue');
cggic.$clinit_Constants$DefaultStringValue = function $clinit_Constants$DefaultStringValue(){
  cggic.$clinit_Constants$DefaultStringValue = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_Constants$DefaultStringValue_2_classLit = createForInterface('com.google.gwt.i18n.client', 'Constants/DefaultStringValue');
cggic.$clinit_CurrencyData = function $clinit_CurrencyData(){
  cggic.$clinit_CurrencyData = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_CurrencyData_2_classLit = createForInterface('com.google.gwt.i18n.client', 'CurrencyData');
cggic.$clinit_CurrencyList = function $clinit_CurrencyList(){
  cggic.$clinit_CurrencyList = emptyMethod;
  jl.$clinit_Object();
  jl.$clinit_Iterable();
}
;
cggic.CurrencyList = function CurrencyList(){
  cggic.$clinit_CurrencyList();
  Object_0.call(this);
  this.$init_99();
}
;
cggic.get_3 = function get_3(){
  cggic.$clinit_CurrencyList();
  return cggic.$clinit_CurrencyList$CurrencyListInstance() , cggic.instance_1;
}
;
cggic.loadCurrencyValuesNative = function loadCurrencyValuesNative(map_0, collection){
  for (var key in map_0) {
    if (map_0.hasOwnProperty(key)) {
      collection.add(map_0[key]);
    }
  }
}
;
cggic.overrideMap = function overrideMap(original, override){
  cggic.$clinit_CurrencyList();
  for (var key in override) {
    if (override.hasOwnProperty(key)) {
      original[key] = override[key];
    }
  }
  return original;
}
;
defineClass(81, 1, {1:1});
_.$init_99 = function $init_99(){
}
;
_.forEach = function forEach_1(action){
  jl.$forEach(this, action);
}
;
_.spliterator_0 = function spliterator_2(){
  return jl.$spliterator(this);
}
;
_.ensureCurrencyMap = function ensureCurrencyMap(){
  if (isScript()) {
    if (isNull(this.dataMapNative)) {
      this.dataMapNative = this.loadCurrencyMapNative();
    }
  }
   else {
    if (isNull(this.dataMapJava)) {
      this.dataMapJava = this.loadCurrencyMapJava();
    }
  }
}
;
_.getDefault = function getDefault(){
  if (isScript()) {
    return this.getDefaultNative();
  }
   else {
    return this.getDefaultJava();
  }
}
;
_.getDefaultJava = function getDefaultJava(){
  return new cggici.CurrencyDataImpl('USD', '$', 2, 'US$', '$');
}
;
_.getDefaultNative = function getDefaultNative(){
  return ['USD', '$', 2, 'US$'];
}
;
_.iterator = function iterator_2(){
  return this.iterator_0(false);
}
;
_.iterator_0 = function iterator_3(includeDeprecated){
  var collection, item_0, item$iterator, newCollection, value_0, value$iterator;
  this.ensureCurrencyMap();
  collection = new ju.ArrayList;
  if (isScript()) {
    cggic.loadCurrencyValuesNative(this.dataMapNative, collection);
  }
   else {
    for (item$iterator = this.dataMapJava.values().iterator(); item$iterator.hasNext_0();) {
      item_0 = castToAllowJso(item$iterator.next_3(), 143);
      collection.add(item_0);
    }
  }
  if (!includeDeprecated) {
    newCollection = new ju.ArrayList;
    for (value$iterator = collection.iterator(); value$iterator.hasNext_0();) {
      value_0 = castToAllowJso(value$iterator.next_3(), 143);
      if (!cggici.isDeprecated__Z__devirtual$(value_0)) {
        newCollection.add(value_0);
      }
    }
    collection = newCollection;
  }
  return ju.unmodifiableList(collection).iterator();
}
;
_.loadCurrencyMapJava = function loadCurrencyMapJava(){
  var result;
  result = new ju.HashMap;
  result.put('USD', new cggici.CurrencyDataImpl('USD', '$', 2, 'US$', '$'));
  result.put('EUR', new cggici.CurrencyDataImpl('EUR', '\u20AC', 2, '\u20AC', '\u20AC'));
  result.put('GBP', new cggici.CurrencyDataImpl('GBP', 'UK\xA3', 2, 'UK\xA3', '\xA3'));
  result.put('JPY', new cggici.CurrencyDataImpl('JPY', '\xA5', 0, 'JP\xA5', '\xA5'));
  return result;
}
;
_.loadCurrencyMapNative = function loadCurrencyMapNative(){
  return {'USD':['USD', '$', 2], 'EUR':['EUR', '\u20AC', 2], 'GBP':['GBP', 'UK\xA3', 2], 'JPY':['JPY', '\xA5', 0]};
}
;
cggl.Lcom_google_gwt_i18n_client_CurrencyList_2_classLit = createForClass('com.google.gwt.i18n.client', 'CurrencyList', 81, cggl.Ljava_lang_Object_2_classLit);
cggic.$clinit_CurrencyList$CurrencyListInstance = function $clinit_CurrencyList$CurrencyListInstance(){
  cggic.$clinit_CurrencyList$CurrencyListInstance = emptyMethod;
  jl.$clinit_Object();
  cggic.instance_1 = castTo(new cggic.CurrencyList_, 81);
}
;
defineClass(482, 1, {1:1});
cggl.Lcom_google_gwt_i18n_client_CurrencyList$CurrencyListInstance_2_classLit = createForClass('com.google.gwt.i18n.client', 'CurrencyList/CurrencyListInstance', 482, cggl.Ljava_lang_Object_2_classLit);
cggic.$clinit_CurrencyList_ = function $clinit_CurrencyList_(){
  cggic.$clinit_CurrencyList_ = emptyMethod;
  cggic.$clinit_CurrencyList();
}
;
cggic.CurrencyList_ = function CurrencyList_(){
  cggic.$clinit_CurrencyList_();
  cggic.CurrencyList.call(this);
  this.$init_100();
}
;
defineClass(296, 81, {81:1, 1:1}, cggic.CurrencyList_);
_.$init_100 = function $init_100(){
}
;
_.getDefaultJava = function getDefaultJava_0(){
  return new cggici.CurrencyDataImpl('USD', 'US$', 2, 'US$', '$');
}
;
_.getDefaultNative = function getDefaultNative_0(){
  return ['USD', 'US$', 2, 'US$', '$'];
}
;
_.loadCurrencyMapJava = function loadCurrencyMapJava_0(){
  var result;
  result = getClassPrototype(81).loadCurrencyMapJava.call(this);
  result.put('ADP', new cggici.CurrencyDataImpl('ADP', 'ADP', 128, 'ADP', 'ADP'));
  result.put('AED', new cggici.CurrencyDataImpl('AED', 'DH', 2, 'DH', 'dh'));
  result.put('AFA', new cggici.CurrencyDataImpl('AFA', 'AFA', 130, 'AFA', 'AFA'));
  result.put('AFN', new cggici.CurrencyDataImpl('AFN', 'AFN', 0, 'AFN', 'Af.'));
  result.put('ALK', new cggici.CurrencyDataImpl('ALK', 'ALK', 130, 'ALK', 'ALK'));
  result.put('ALL', new cggici.CurrencyDataImpl('ALL', 'ALL', 0, 'ALL', 'Lek'));
  result.put('AMD', new cggici.CurrencyDataImpl('AMD', 'AMD', 0, 'AMD', 'Dram'));
  result.put('ANG', new cggici.CurrencyDataImpl('ANG', 'ANG', 2, 'ANG', 'ANG'));
  result.put('AOA', new cggici.CurrencyDataImpl('AOA', 'AOA', 2, 'AOA', 'Kz'));
  result.put('AOK', new cggici.CurrencyDataImpl('AOK', 'AOK', 130, 'AOK', 'AOK'));
  result.put('AON', new cggici.CurrencyDataImpl('AON', 'AON', 130, 'AON', 'AON'));
  result.put('AOR', new cggici.CurrencyDataImpl('AOR', 'AOR', 130, 'AOR', 'AOR'));
  result.put('ARA', new cggici.CurrencyDataImpl('ARA', 'ARA', 130, 'ARA', 'ARA'));
  result.put('ARL', new cggici.CurrencyDataImpl('ARL', 'ARL', 130, 'ARL', 'ARL'));
  result.put('ARM', new cggici.CurrencyDataImpl('ARM', 'ARM', 130, 'ARM', 'ARM'));
  result.put('ARP', new cggici.CurrencyDataImpl('ARP', 'ARP', 130, 'ARP', 'ARP'));
  result.put('ARS', new cggici.CurrencyDataImpl('ARS', 'AR$', 2, 'AR$', '$'));
  result.put('ATS', new cggici.CurrencyDataImpl('ATS', 'ATS', 130, 'ATS', 'ATS'));
  result.put('AUD', new cggici.CurrencyDataImpl('AUD', 'A$', 2, 'AU$', '$'));
  result.put('AWG', new cggici.CurrencyDataImpl('AWG', 'AWG', 2, 'AWG', 'Afl.'));
  result.put('AZM', new cggici.CurrencyDataImpl('AZM', 'AZM', 130, 'AZM', 'AZM'));
  result.put('AZN', new cggici.CurrencyDataImpl('AZN', 'AZN', 2, 'AZN', 'man.'));
  result.put('BAD', new cggici.CurrencyDataImpl('BAD', 'BAD', 130, 'BAD', 'BAD'));
  result.put('BAM', new cggici.CurrencyDataImpl('BAM', 'BAM', 2, 'BAM', 'KM'));
  result.put('BAN', new cggici.CurrencyDataImpl('BAN', 'BAN', 130, 'BAN', 'BAN'));
  result.put('BBD', new cggici.CurrencyDataImpl('BBD', 'BBD', 2, 'BBD', '$'));
  result.put('BDT', new cggici.CurrencyDataImpl('BDT', 'Tk', 2, 'Tk', '\u09F3'));
  result.put('BEC', new cggici.CurrencyDataImpl('BEC', 'BEC', 130, 'BEC', 'BEC'));
  result.put('BEF', new cggici.CurrencyDataImpl('BEF', 'BEF', 130, 'BEF', 'BEF'));
  result.put('BEL', new cggici.CurrencyDataImpl('BEL', 'BEL', 130, 'BEL', 'BEL'));
  result.put('BGL', new cggici.CurrencyDataImpl('BGL', 'BGL', 130, 'BGL', 'BGL'));
  result.put('BGM', new cggici.CurrencyDataImpl('BGM', 'BGM', 130, 'BGM', 'BGM'));
  result.put('BGN', new cggici.CurrencyDataImpl('BGN', 'BGN', 2, 'BGN', 'lev'));
  result.put('BGO', new cggici.CurrencyDataImpl('BGO', 'BGO', 130, 'BGO', 'BGO'));
  result.put('BHD', new cggici.CurrencyDataImpl('BHD', 'BHD', 3, 'BHD', 'din'));
  result.put('BIF', new cggici.CurrencyDataImpl('BIF', 'BIF', 0, 'BIF', 'FBu'));
  result.put('BMD', new cggici.CurrencyDataImpl('BMD', 'BMD', 2, 'BMD', '$'));
  result.put('BND', new cggici.CurrencyDataImpl('BND', 'BND', 2, 'BND', '$'));
  result.put('BOB', new cggici.CurrencyDataImpl('BOB', 'BOB', 2, 'BOB', 'Bs'));
  result.put('BOL', new cggici.CurrencyDataImpl('BOL', 'BOL', 130, 'BOL', 'BOL'));
  result.put('BOP', new cggici.CurrencyDataImpl('BOP', 'BOP', 130, 'BOP', 'BOP'));
  result.put('BOV', new cggici.CurrencyDataImpl('BOV', 'BOV', 130, 'BOV', 'BOV'));
  result.put('BRB', new cggici.CurrencyDataImpl('BRB', 'BRB', 130, 'BRB', 'BRB'));
  result.put('BRC', new cggici.CurrencyDataImpl('BRC', 'BRC', 130, 'BRC', 'BRC'));
  result.put('BRE', new cggici.CurrencyDataImpl('BRE', 'BRE', 130, 'BRE', 'BRE'));
  result.put('BRL', new cggici.CurrencyDataImpl('BRL', 'R$', 2, 'R$', 'R$'));
  result.put('BRN', new cggici.CurrencyDataImpl('BRN', 'BRN', 130, 'BRN', 'BRN'));
  result.put('BRR', new cggici.CurrencyDataImpl('BRR', 'BRR', 130, 'BRR', 'BRR'));
  result.put('BRZ', new cggici.CurrencyDataImpl('BRZ', 'BRZ', 130, 'BRZ', 'BRZ'));
  result.put('BSD', new cggici.CurrencyDataImpl('BSD', 'BSD', 2, 'BSD', '$'));
  result.put('BTN', new cggici.CurrencyDataImpl('BTN', 'BTN', 2, 'BTN', 'Nu.'));
  result.put('BUK', new cggici.CurrencyDataImpl('BUK', 'BUK', 130, 'BUK', 'BUK'));
  result.put('BWP', new cggici.CurrencyDataImpl('BWP', 'BWP', 2, 'BWP', 'P'));
  result.put('BYB', new cggici.CurrencyDataImpl('BYB', 'BYB', 130, 'BYB', 'BYB'));
  result.put('BYR', new cggici.CurrencyDataImpl('BYR', 'BYR', 0, 'BYR', 'BYR'));
  result.put('BZD', new cggici.CurrencyDataImpl('BZD', 'BZD', 2, 'BZD', '$'));
  result.put('CAD', new cggici.CurrencyDataImpl('CAD', 'CA$', 2, 'C$', '$'));
  result.put('CDF', new cggici.CurrencyDataImpl('CDF', 'CDF', 2, 'CDF', 'FrCD'));
  result.put('CHE', new cggici.CurrencyDataImpl('CHE', 'CHE', 130, 'CHE', 'CHE'));
  result.put('CHF', new cggici.CurrencyDataImpl('CHF', 'CHF', 2, 'CHF', 'CHF'));
  result.put('CHW', new cggici.CurrencyDataImpl('CHW', 'CHW', 130, 'CHW', 'CHW'));
  result.put('CLE', new cggici.CurrencyDataImpl('CLE', 'CLE', 130, 'CLE', 'CLE'));
  result.put('CLF', new cggici.CurrencyDataImpl('CLF', 'CLF', 128, 'CLF', 'CLF'));
  result.put('CLP', new cggici.CurrencyDataImpl('CLP', 'CL$', 0, 'CL$', '$'));
  result.put('CNX', new cggici.CurrencyDataImpl('CNX', 'CNX', 130, 'CNX', 'CNX'));
  result.put('CNY', new cggici.CurrencyDataImpl('CNY', 'CN\xA5', 2, 'RMB\xA5', '\xA5'));
  result.put('COP', new cggici.CurrencyDataImpl('COP', 'COL$', 0, 'COL$', '$'));
  result.put('COU', new cggici.CurrencyDataImpl('COU', 'COU', 130, 'COU', 'COU'));
  result.put('CRC', new cggici.CurrencyDataImpl('CRC', 'CR\u20A1', 0, 'CR\u20A1', '\u20A1'));
  result.put('CSD', new cggici.CurrencyDataImpl('CSD', 'CSD', 130, 'CSD', 'CSD'));
  result.put('CSK', new cggici.CurrencyDataImpl('CSK', 'CSK', 130, 'CSK', 'CSK'));
  result.put('CUC', new cggici.CurrencyDataImpl('CUC', 'CUC', 2, 'CUC', '$'));
  result.put('CUP', new cggici.CurrencyDataImpl('CUP', '$MN', 2, '$MN', '$'));
  result.put('CVE', new cggici.CurrencyDataImpl('CVE', 'CVE', 2, 'CVE', 'CVE'));
  result.put('CYP', new cggici.CurrencyDataImpl('CYP', 'CYP', 130, 'CYP', 'CYP'));
  result.put('CZK', new cggici.CurrencyDataImpl('CZK', 'K\u010D', 2, 'K\u010D', 'K\u010D'));
  result.put('DDM', new cggici.CurrencyDataImpl('DDM', 'DDM', 130, 'DDM', 'DDM'));
  result.put('DEM', new cggici.CurrencyDataImpl('DEM', 'DEM', 130, 'DEM', 'DEM'));
  result.put('DJF', new cggici.CurrencyDataImpl('DJF', 'Fdj', 0, 'Fdj', 'Fdj'));
  result.put('DKK', new cggici.CurrencyDataImpl('DKK', 'kr', 2, 'kr', 'kr'));
  result.put('DOP', new cggici.CurrencyDataImpl('DOP', 'RD$', 2, 'RD$', '$'));
  result.put('DZD', new cggici.CurrencyDataImpl('DZD', 'DZD', 2, 'DZD', 'din'));
  result.put('ECS', new cggici.CurrencyDataImpl('ECS', 'ECS', 130, 'ECS', 'ECS'));
  result.put('ECV', new cggici.CurrencyDataImpl('ECV', 'ECV', 130, 'ECV', 'ECV'));
  result.put('EEK', new cggici.CurrencyDataImpl('EEK', 'EEK', 130, 'EEK', 'EEK'));
  result.put('EGP', new cggici.CurrencyDataImpl('EGP', 'LE', 2, 'LE', 'E\xA3'));
  result.put('ERN', new cggici.CurrencyDataImpl('ERN', 'ERN', 2, 'ERN', 'Nfk'));
  result.put('ESA', new cggici.CurrencyDataImpl('ESA', 'ESA', 130, 'ESA', 'ESA'));
  result.put('ESB', new cggici.CurrencyDataImpl('ESB', 'ESB', 130, 'ESB', 'ESB'));
  result.put('ESP', new cggici.CurrencyDataImpl('ESP', 'ESP', 128, 'ESP', 'ESP'));
  result.put('ETB', new cggici.CurrencyDataImpl('ETB', 'ETB', 2, 'ETB', 'Birr'));
  result.put('EUR', new cggici.CurrencyDataImpl('EUR', '\u20AC', 2, '\u20AC', '\u20AC'));
  result.put('FIM', new cggici.CurrencyDataImpl('FIM', 'FIM', 130, 'FIM', 'FIM'));
  result.put('FJD', new cggici.CurrencyDataImpl('FJD', 'FJD', 2, 'FJD', '$'));
  result.put('FKP', new cggici.CurrencyDataImpl('FKP', 'FKP', 2, 'FKP', '\xA3'));
  result.put('FRF', new cggici.CurrencyDataImpl('FRF', 'FRF', 130, 'FRF', 'FRF'));
  result.put('GBP', new cggici.CurrencyDataImpl('GBP', '\xA3', 2, 'GB\xA3', '\xA3'));
  result.put('GEK', new cggici.CurrencyDataImpl('GEK', 'GEK', 130, 'GEK', 'GEK'));
  result.put('GEL', new cggici.CurrencyDataImpl('GEL', 'GEL', 2, 'GEL', 'GEL'));
  result.put('GHC', new cggici.CurrencyDataImpl('GHC', 'GHC', 130, 'GHC', 'GHC'));
  result.put('GHS', new cggici.CurrencyDataImpl('GHS', 'GHS', 2, 'GHS', 'GHS'));
  result.put('GIP', new cggici.CurrencyDataImpl('GIP', 'GIP', 2, 'GIP', '\xA3'));
  result.put('GMD', new cggici.CurrencyDataImpl('GMD', 'GMD', 2, 'GMD', 'GMD'));
  result.put('GNF', new cggici.CurrencyDataImpl('GNF', 'GNF', 0, 'GNF', 'FG'));
  result.put('GNS', new cggici.CurrencyDataImpl('GNS', 'GNS', 130, 'GNS', 'GNS'));
  result.put('GQE', new cggici.CurrencyDataImpl('GQE', 'GQE', 130, 'GQE', 'GQE'));
  result.put('GRD', new cggici.CurrencyDataImpl('GRD', 'GRD', 130, 'GRD', 'GRD'));
  result.put('GTQ', new cggici.CurrencyDataImpl('GTQ', 'GTQ', 2, 'GTQ', 'Q'));
  result.put('GWE', new cggici.CurrencyDataImpl('GWE', 'GWE', 130, 'GWE', 'GWE'));
  result.put('GWP', new cggici.CurrencyDataImpl('GWP', 'GWP', 130, 'GWP', 'GWP'));
  result.put('GYD', new cggici.CurrencyDataImpl('GYD', 'GYD', 0, 'GYD', '$'));
  result.put('HKD', new cggici.CurrencyDataImpl('HKD', 'HK$', 2, 'HK$', '$'));
  result.put('HNL', new cggici.CurrencyDataImpl('HNL', 'L', 2, 'L', 'L'));
  result.put('HRD', new cggici.CurrencyDataImpl('HRD', 'HRD', 130, 'HRD', 'HRD'));
  result.put('HRK', new cggici.CurrencyDataImpl('HRK', 'HRK', 2, 'HRK', 'kn'));
  result.put('HTG', new cggici.CurrencyDataImpl('HTG', 'HTG', 2, 'HTG', 'HTG'));
  result.put('HUF', new cggici.CurrencyDataImpl('HUF', 'HUF', 0, 'HUF', 'Ft'));
  result.put('IDR', new cggici.CurrencyDataImpl('IDR', 'IDR', 0, 'IDR', 'Rp'));
  result.put('IEP', new cggici.CurrencyDataImpl('IEP', 'IEP', 130, 'IEP', 'IEP'));
  result.put('ILP', new cggici.CurrencyDataImpl('ILP', 'ILP', 130, 'ILP', 'ILP'));
  result.put('ILR', new cggici.CurrencyDataImpl('ILR', 'ILR', 130, 'ILR', 'ILR'));
  result.put('ILS', new cggici.CurrencyDataImpl('ILS', '\u20AA', 2, 'IL\u20AA', '\u20AA'));
  result.put('INR', new cggici.CurrencyDataImpl('INR', 'Rs.', 2, 'Rs', '\u20B9'));
  result.put('IQD', new cggici.CurrencyDataImpl('IQD', 'IQD', 0, 'IQD', 'din'));
  result.put('IRR', new cggici.CurrencyDataImpl('IRR', 'IRR', 0, 'IRR', 'Rial'));
  result.put('ISJ', new cggici.CurrencyDataImpl('ISJ', 'ISJ', 130, 'ISJ', 'ISJ'));
  result.put('ISK', new cggici.CurrencyDataImpl('ISK', 'kr', 0, 'kr', 'kr'));
  result.put('ITL', new cggici.CurrencyDataImpl('ITL', 'ITL', 128, 'ITL', 'ITL'));
  result.put('JMD', new cggici.CurrencyDataImpl('JMD', 'JA$', 2, 'JA$', '$'));
  result.put('JOD', new cggici.CurrencyDataImpl('JOD', 'JOD', 3, 'JOD', 'din'));
  result.put('JPY', new cggici.CurrencyDataImpl('JPY', 'JP\xA5', 0, 'JP\xA5', '\xA5'));
  result.put('KES', new cggici.CurrencyDataImpl('KES', 'Ksh', 2, 'Ksh', 'Ksh'));
  result.put('KGS', new cggici.CurrencyDataImpl('KGS', 'KGS', 2, 'KGS', 'KGS'));
  result.put('KHR', new cggici.CurrencyDataImpl('KHR', 'KHR', 2, 'KHR', 'Riel'));
  result.put('KMF', new cggici.CurrencyDataImpl('KMF', 'KMF', 0, 'KMF', 'CF'));
  result.put('KPW', new cggici.CurrencyDataImpl('KPW', 'KPW', 0, 'KPW', '\u20A9'));
  result.put('KRH', new cggici.CurrencyDataImpl('KRH', 'KRH', 130, 'KRH', 'KRH'));
  result.put('KRO', new cggici.CurrencyDataImpl('KRO', 'KRO', 130, 'KRO', 'KRO'));
  result.put('KRW', new cggici.CurrencyDataImpl('KRW', '\u20A9', 0, 'KR\u20A9', '\u20A9'));
  result.put('KWD', new cggici.CurrencyDataImpl('KWD', 'KWD', 3, 'KWD', 'din'));
  result.put('KYD', new cggici.CurrencyDataImpl('KYD', 'KYD', 2, 'KYD', '$'));
  result.put('KZT', new cggici.CurrencyDataImpl('KZT', 'KZT', 2, 'KZT', '\u20B8'));
  result.put('LAK', new cggici.CurrencyDataImpl('LAK', 'LAK', 0, 'LAK', '\u20AD'));
  result.put('LBP', new cggici.CurrencyDataImpl('LBP', 'LBP', 0, 'LBP', 'L\xA3'));
  result.put('LKR', new cggici.CurrencyDataImpl('LKR', 'SLRs', 2, 'SLRs', 'Rs'));
  result.put('LRD', new cggici.CurrencyDataImpl('LRD', 'LRD', 2, 'LRD', '$'));
  result.put('LSL', new cggici.CurrencyDataImpl('LSL', 'LSL', 2, 'LSL', 'LSL'));
  result.put('LTL', new cggici.CurrencyDataImpl('LTL', 'LTL', 2, 'LTL', 'Lt'));
  result.put('LTT', new cggici.CurrencyDataImpl('LTT', 'LTT', 130, 'LTT', 'LTT'));
  result.put('LUC', new cggici.CurrencyDataImpl('LUC', 'LUC', 130, 'LUC', 'LUC'));
  result.put('LUF', new cggici.CurrencyDataImpl('LUF', 'LUF', 128, 'LUF', 'LUF'));
  result.put('LUL', new cggici.CurrencyDataImpl('LUL', 'LUL', 130, 'LUL', 'LUL'));
  result.put('LVL', new cggici.CurrencyDataImpl('LVL', 'LVL', 130, 'LVL', 'Ls'));
  result.put('LVR', new cggici.CurrencyDataImpl('LVR', 'LVR', 130, 'LVR', 'LVR'));
  result.put('LYD', new cggici.CurrencyDataImpl('LYD', 'LYD', 3, 'LYD', 'din'));
  result.put('MAD', new cggici.CurrencyDataImpl('MAD', 'MAD', 2, 'MAD', 'MAD'));
  result.put('MAF', new cggici.CurrencyDataImpl('MAF', 'MAF', 130, 'MAF', 'MAF'));
  result.put('MCF', new cggici.CurrencyDataImpl('MCF', 'MCF', 130, 'MCF', 'MCF'));
  result.put('MDC', new cggici.CurrencyDataImpl('MDC', 'MDC', 130, 'MDC', 'MDC'));
  result.put('MDL', new cggici.CurrencyDataImpl('MDL', 'MDL', 2, 'MDL', 'MDL'));
  result.put('MGA', new cggici.CurrencyDataImpl('MGA', 'MGA', 0, 'MGA', 'Ar'));
  result.put('MGF', new cggici.CurrencyDataImpl('MGF', 'MGF', 128, 'MGF', 'MGF'));
  result.put('MKD', new cggici.CurrencyDataImpl('MKD', 'MKD', 2, 'MKD', 'din'));
  result.put('MKN', new cggici.CurrencyDataImpl('MKN', 'MKN', 130, 'MKN', 'MKN'));
  result.put('MLF', new cggici.CurrencyDataImpl('MLF', 'MLF', 130, 'MLF', 'MLF'));
  result.put('MMK', new cggici.CurrencyDataImpl('MMK', 'MMK', 0, 'MMK', 'K'));
  result.put('MNT', new cggici.CurrencyDataImpl('MNT', 'MN\u20AE', 0, 'MN\u20AE', '\u20AE'));
  result.put('MOP', new cggici.CurrencyDataImpl('MOP', 'MOP', 2, 'MOP', 'MOP'));
  result.put('MRO', new cggici.CurrencyDataImpl('MRO', 'MRO', 0, 'MRO', 'MRO'));
  result.put('MTL', new cggici.CurrencyDataImpl('MTL', 'MTL', 130, 'MTL', 'MTL'));
  result.put('MTP', new cggici.CurrencyDataImpl('MTP', 'MTP', 130, 'MTP', 'MTP'));
  result.put('MUR', new cggici.CurrencyDataImpl('MUR', 'MUR', 0, 'MUR', 'Rs'));
  result.put('MVP', new cggici.CurrencyDataImpl('MVP', 'MVP', 130, 'MVP', 'MVP'));
  result.put('MVR', new cggici.CurrencyDataImpl('MVR', 'MVR', 2, 'MVR', 'MVR'));
  result.put('MWK', new cggici.CurrencyDataImpl('MWK', 'MWK', 2, 'MWK', 'MWK'));
  result.put('MXN', new cggici.CurrencyDataImpl('MXN', 'MX$', 2, 'Mex$', '$'));
  result.put('MXP', new cggici.CurrencyDataImpl('MXP', 'MXP', 130, 'MXP', 'MXP'));
  result.put('MXV', new cggici.CurrencyDataImpl('MXV', 'MXV', 130, 'MXV', 'MXV'));
  result.put('MYR', new cggici.CurrencyDataImpl('MYR', 'RM', 2, 'RM', 'RM'));
  result.put('MZE', new cggici.CurrencyDataImpl('MZE', 'MZE', 130, 'MZE', 'MZE'));
  result.put('MZM', new cggici.CurrencyDataImpl('MZM', 'MZM', 130, 'MZM', 'MZM'));
  result.put('MZN', new cggici.CurrencyDataImpl('MZN', 'MZN', 2, 'MZN', 'MTn'));
  result.put('NAD', new cggici.CurrencyDataImpl('NAD', 'NAD', 2, 'NAD', '$'));
  result.put('NGN', new cggici.CurrencyDataImpl('NGN', 'NGN', 2, 'NGN', '\u20A6'));
  result.put('NIC', new cggici.CurrencyDataImpl('NIC', 'NIC', 130, 'NIC', 'NIC'));
  result.put('NIO', new cggici.CurrencyDataImpl('NIO', 'NIO', 2, 'NIO', 'C$'));
  result.put('NLG', new cggici.CurrencyDataImpl('NLG', 'NLG', 130, 'NLG', 'NLG'));
  result.put('NOK', new cggici.CurrencyDataImpl('NOK', 'NOkr', 2, 'NOkr', 'kr'));
  result.put('NPR', new cggici.CurrencyDataImpl('NPR', 'NPR', 2, 'NPR', 'Rs'));
  result.put('NZD', new cggici.CurrencyDataImpl('NZD', 'NZ$', 2, 'NZ$', '$'));
  result.put('OMR', new cggici.CurrencyDataImpl('OMR', 'OMR', 3, 'OMR', 'Rial'));
  result.put('PAB', new cggici.CurrencyDataImpl('PAB', 'B/.', 2, 'B/.', 'B/.'));
  result.put('PEI', new cggici.CurrencyDataImpl('PEI', 'PEI', 130, 'PEI', 'PEI'));
  result.put('PEN', new cggici.CurrencyDataImpl('PEN', 'S/.', 2, 'S/.', 'S/.'));
  result.put('PES', new cggici.CurrencyDataImpl('PES', 'PES', 130, 'PES', 'PES'));
  result.put('PGK', new cggici.CurrencyDataImpl('PGK', 'PGK', 2, 'PGK', 'PGK'));
  result.put('PHP', new cggici.CurrencyDataImpl('PHP', 'PHP', 2, 'PHP', '\u20B1'));
  result.put('PKR', new cggici.CurrencyDataImpl('PKR', 'PKRs.', 0, 'PKRs.', 'Rs'));
  result.put('PLN', new cggici.CurrencyDataImpl('PLN', 'PLN', 2, 'PLN', 'z\u0142'));
  result.put('PLZ', new cggici.CurrencyDataImpl('PLZ', 'PLZ', 130, 'PLZ', 'PLZ'));
  result.put('PTE', new cggici.CurrencyDataImpl('PTE', 'PTE', 130, 'PTE', 'PTE'));
  result.put('PYG', new cggici.CurrencyDataImpl('PYG', 'PYG', 0, 'PYG', 'Gs'));
  result.put('QAR', new cggici.CurrencyDataImpl('QAR', 'QAR', 2, 'QAR', 'Rial'));
  result.put('RHD', new cggici.CurrencyDataImpl('RHD', 'RHD', 130, 'RHD', 'RHD'));
  result.put('ROL', new cggici.CurrencyDataImpl('ROL', 'ROL', 130, 'ROL', 'ROL'));
  result.put('RON', new cggici.CurrencyDataImpl('RON', 'RON', 2, 'RON', 'RON'));
  result.put('RSD', new cggici.CurrencyDataImpl('RSD', 'RSD', 0, 'RSD', 'din'));
  result.put('RUB', new cggici.CurrencyDataImpl('RUB', '\u0440\u0443\u0431.', 2, '\u0440\u0443\u0431.', '\u0440\u0443\u0431.'));
  result.put('RUR', new cggici.CurrencyDataImpl('RUR', 'RUR', 130, 'RUR', 'RUR'));
  result.put('RWF', new cggici.CurrencyDataImpl('RWF', 'RWF', 0, 'RWF', 'RF'));
  result.put('SAR', new cggici.CurrencyDataImpl('SAR', 'SR', 2, 'SR', 'Rial'));
  result.put('SBD', new cggici.CurrencyDataImpl('SBD', 'SBD', 2, 'SBD', '$'));
  result.put('SCR', new cggici.CurrencyDataImpl('SCR', 'SCR', 2, 'SCR', 'SCR'));
  result.put('SDD', new cggici.CurrencyDataImpl('SDD', 'SDD', 130, 'SDD', 'SDD'));
  result.put('SDG', new cggici.CurrencyDataImpl('SDG', 'SDG', 2, 'SDG', 'SDG'));
  result.put('SDP', new cggici.CurrencyDataImpl('SDP', 'SDP', 130, 'SDP', 'SDP'));
  result.put('SEK', new cggici.CurrencyDataImpl('SEK', 'kr', 2, 'kr', 'kr'));
  result.put('SGD', new cggici.CurrencyDataImpl('SGD', 'S$', 2, 'S$', '$'));
  result.put('SHP', new cggici.CurrencyDataImpl('SHP', 'SHP', 2, 'SHP', '\xA3'));
  result.put('SIT', new cggici.CurrencyDataImpl('SIT', 'SIT', 130, 'SIT', 'SIT'));
  result.put('SKK', new cggici.CurrencyDataImpl('SKK', 'SKK', 130, 'SKK', 'SKK'));
  result.put('SLL', new cggici.CurrencyDataImpl('SLL', 'SLL', 0, 'SLL', 'SLL'));
  result.put('SOS', new cggici.CurrencyDataImpl('SOS', 'SOS', 0, 'SOS', 'SOS'));
  result.put('SRD', new cggici.CurrencyDataImpl('SRD', 'SRD', 2, 'SRD', '$'));
  result.put('SRG', new cggici.CurrencyDataImpl('SRG', 'SRG', 130, 'SRG', 'SRG'));
  result.put('SSP', new cggici.CurrencyDataImpl('SSP', 'SSP', 2, 'SSP', 'SSP'));
  result.put('STD', new cggici.CurrencyDataImpl('STD', 'STD', 0, 'STD', 'Db'));
  result.put('SUR', new cggici.CurrencyDataImpl('SUR', 'SUR', 130, 'SUR', 'SUR'));
  result.put('SVC', new cggici.CurrencyDataImpl('SVC', 'SVC', 130, 'SVC', 'SVC'));
  result.put('SYP', new cggici.CurrencyDataImpl('SYP', 'SYP', 0, 'SYP', '\xA3'));
  result.put('SZL', new cggici.CurrencyDataImpl('SZL', 'SZL', 2, 'SZL', 'SZL'));
  result.put('THB', new cggici.CurrencyDataImpl('THB', '\u0E3F', 2, 'THB', '\u0E3F'));
  result.put('TJR', new cggici.CurrencyDataImpl('TJR', 'TJR', 130, 'TJR', 'TJR'));
  result.put('TJS', new cggici.CurrencyDataImpl('TJS', 'TJS', 2, 'TJS', 'Som'));
  result.put('TMM', new cggici.CurrencyDataImpl('TMM', 'TMM', 128, 'TMM', 'TMM'));
  result.put('TMT', new cggici.CurrencyDataImpl('TMT', 'TMT', 2, 'TMT', 'TMT'));
  result.put('TND', new cggici.CurrencyDataImpl('TND', 'TND', 3, 'TND', 'din'));
  result.put('TOP', new cggici.CurrencyDataImpl('TOP', 'TOP', 2, 'TOP', 'T$'));
  result.put('TPE', new cggici.CurrencyDataImpl('TPE', 'TPE', 130, 'TPE', 'TPE'));
  result.put('TRL', new cggici.CurrencyDataImpl('TRL', 'TRL', 128, 'TRL', 'TRL'));
  result.put('TRY', new cggici.CurrencyDataImpl('TRY', 'TL', 2, 'YTL', 'TL'));
  result.put('TTD', new cggici.CurrencyDataImpl('TTD', 'TTD', 2, 'TTD', '$'));
  result.put('TWD', new cggici.CurrencyDataImpl('TWD', 'NT$', 2, 'NT$', 'NT$'));
  result.put('TZS', new cggici.CurrencyDataImpl('TZS', 'TZS', 0, 'TZS', 'TSh'));
  result.put('UAH', new cggici.CurrencyDataImpl('UAH', 'UAH', 2, 'UAH', '\u20B4'));
  result.put('UAK', new cggici.CurrencyDataImpl('UAK', 'UAK', 130, 'UAK', 'UAK'));
  result.put('UGS', new cggici.CurrencyDataImpl('UGS', 'UGS', 130, 'UGS', 'UGS'));
  result.put('UGX', new cggici.CurrencyDataImpl('UGX', 'UGX', 0, 'UGX', 'UGX'));
  result.put('USD', new cggici.CurrencyDataImpl('USD', 'US$', 2, 'US$', '$'));
  result.put('USN', new cggici.CurrencyDataImpl('USN', 'USN', 130, 'USN', 'USN'));
  result.put('USS', new cggici.CurrencyDataImpl('USS', 'USS', 130, 'USS', 'USS'));
  result.put('UYI', new cggici.CurrencyDataImpl('UYI', 'UYI', 128, 'UYI', 'UYI'));
  result.put('UYP', new cggici.CurrencyDataImpl('UYP', 'UYP', 130, 'UYP', 'UYP'));
  result.put('UYU', new cggici.CurrencyDataImpl('UYU', 'UY$', 2, 'UY$', '$'));
  result.put('UZS', new cggici.CurrencyDataImpl('UZS', 'UZS', 0, 'UZS', 'so\u02BCm'));
  result.put('VEB', new cggici.CurrencyDataImpl('VEB', 'VEB', 130, 'VEB', 'VEB'));
  result.put('VEF', new cggici.CurrencyDataImpl('VEF', 'VEF', 2, 'VEF', 'Bs'));
  result.put('VND', new cggici.CurrencyDataImpl('VND', '\u20AB', 24, '\u20AB', '\u20AB'));
  result.put('VNN', new cggici.CurrencyDataImpl('VNN', 'VNN', 130, 'VNN', 'VNN'));
  result.put('VUV', new cggici.CurrencyDataImpl('VUV', 'VUV', 0, 'VUV', 'VUV'));
  result.put('WST', new cggici.CurrencyDataImpl('WST', 'WST', 2, 'WST', 'WST'));
  result.put('XAF', new cggici.CurrencyDataImpl('XAF', 'FCFA', 0, 'FCFA', 'FCFA'));
  result.put('XAG', new cggici.CurrencyDataImpl('XAG', 'XAG', 130, 'XAG', 'XAG'));
  result.put('XAU', new cggici.CurrencyDataImpl('XAU', 'XAU', 130, 'XAU', 'XAU'));
  result.put('XBA', new cggici.CurrencyDataImpl('XBA', 'XBA', 130, 'XBA', 'XBA'));
  result.put('XBB', new cggici.CurrencyDataImpl('XBB', 'XBB', 130, 'XBB', 'XBB'));
  result.put('XBC', new cggici.CurrencyDataImpl('XBC', 'XBC', 130, 'XBC', 'XBC'));
  result.put('XBD', new cggici.CurrencyDataImpl('XBD', 'XBD', 130, 'XBD', 'XBD'));
  result.put('XCD', new cggici.CurrencyDataImpl('XCD', 'EC$', 2, 'EC$', '$'));
  result.put('XDR', new cggici.CurrencyDataImpl('XDR', 'XDR', 130, 'XDR', 'XDR'));
  result.put('XEU', new cggici.CurrencyDataImpl('XEU', 'XEU', 130, 'XEU', 'XEU'));
  result.put('XFO', new cggici.CurrencyDataImpl('XFO', 'XFO', 130, 'XFO', 'XFO'));
  result.put('XFU', new cggici.CurrencyDataImpl('XFU', 'XFU', 130, 'XFU', 'XFU'));
  result.put('XOF', new cggici.CurrencyDataImpl('XOF', 'CFA', 0, 'CFA', 'CFA'));
  result.put('XPD', new cggici.CurrencyDataImpl('XPD', 'XPD', 130, 'XPD', 'XPD'));
  result.put('XPF', new cggici.CurrencyDataImpl('XPF', 'CFPF', 0, 'CFPF', 'FCFP'));
  result.put('XPT', new cggici.CurrencyDataImpl('XPT', 'XPT', 130, 'XPT', 'XPT'));
  result.put('XRE', new cggici.CurrencyDataImpl('XRE', 'XRE', 130, 'XRE', 'XRE'));
  result.put('XSU', new cggici.CurrencyDataImpl('XSU', 'XSU', 130, 'XSU', 'XSU'));
  result.put('XTS', new cggici.CurrencyDataImpl('XTS', 'XTS', 130, 'XTS', 'XTS'));
  result.put('XUA', new cggici.CurrencyDataImpl('XUA', 'XUA', 130, 'XUA', 'XUA'));
  result.put('XXX', new cggici.CurrencyDataImpl('XXX', 'XXX', 130, 'XXX', 'XXX'));
  result.put('YDD', new cggici.CurrencyDataImpl('YDD', 'YDD', 130, 'YDD', 'YDD'));
  result.put('YER', new cggici.CurrencyDataImpl('YER', 'YER', 0, 'YER', 'Rial'));
  result.put('YUD', new cggici.CurrencyDataImpl('YUD', 'YUD', 130, 'YUD', 'YUD'));
  result.put('YUM', new cggici.CurrencyDataImpl('YUM', 'YUM', 130, 'YUM', 'YUM'));
  result.put('YUN', new cggici.CurrencyDataImpl('YUN', 'YUN', 130, 'YUN', 'YUN'));
  result.put('YUR', new cggici.CurrencyDataImpl('YUR', 'YUR', 130, 'YUR', 'YUR'));
  result.put('ZAL', new cggici.CurrencyDataImpl('ZAL', 'ZAL', 130, 'ZAL', 'ZAL'));
  result.put('ZAR', new cggici.CurrencyDataImpl('ZAR', 'ZAR', 2, 'ZAR', 'R'));
  result.put('ZMK', new cggici.CurrencyDataImpl('ZMK', 'ZMK', 128, 'ZMK', 'ZWK'));
  result.put('ZMW', new cggici.CurrencyDataImpl('ZMW', 'ZMW', 2, 'ZMW', 'ZMW'));
  result.put('ZRN', new cggici.CurrencyDataImpl('ZRN', 'ZRN', 130, 'ZRN', 'ZRN'));
  result.put('ZRZ', new cggici.CurrencyDataImpl('ZRZ', 'ZRZ', 130, 'ZRZ', 'ZRZ'));
  result.put('ZWD', new cggici.CurrencyDataImpl('ZWD', 'ZWD', 128, 'ZWD', 'ZWD'));
  result.put('ZWL', new cggici.CurrencyDataImpl('ZWL', 'ZWL', 130, 'ZWL', 'ZWL'));
  result.put('ZWR', new cggici.CurrencyDataImpl('ZWR', 'ZWR', 130, 'ZWR', 'ZWR'));
  return result;
}
;
_.loadCurrencyMapNative = function loadCurrencyMapNative_0(){
  return cggic.overrideMap(getClassPrototype(81).loadCurrencyMapNative.call(this), this.loadMyCurrencyMapOverridesNative());
}
;
_.loadMyCurrencyMapOverridesNative = function loadMyCurrencyMapOverridesNative(){
  return {'ADP':['ADP', 'ADP', 128, 'ADP', 'ADP'], 'AED':['AED', 'DH', 2, 'DH', 'dh'], 'AFA':['AFA', 'AFA', 130, 'AFA', 'AFA'], 'AFN':['AFN', 'AFN', 0, 'AFN', 'Af.'], 'ALK':['ALK', 'ALK', 130, 'ALK', 'ALK'], 'ALL':['ALL', 'ALL', 0, 'ALL', 'Lek'], 'AMD':['AMD', 'AMD', 0, 'AMD', 'Dram'], 'ANG':['ANG', 'ANG', 2, 'ANG', 'ANG'], 'AOA':['AOA', 'AOA', 2, 'AOA', 'Kz'], 'AOK':['AOK', 'AOK', 130, 'AOK', 'AOK'], 'AON':['AON', 'AON', 130, 'AON', 'AON'], 'AOR':['AOR', 'AOR', 130, 'AOR', 'AOR'], 'ARA':['ARA', 'ARA', 130, 'ARA', 'ARA'], 'ARL':['ARL', 'ARL', 130, 'ARL', 'ARL'], 'ARM':['ARM', 'ARM', 130, 'ARM', 'ARM'], 'ARP':['ARP', 'ARP', 130, 'ARP', 'ARP'], 'ARS':['ARS', 'AR$', 2, 'AR$', '$'], 'ATS':['ATS', 'ATS', 130, 'ATS', 'ATS'], 'AUD':['AUD', 'A$', 2, 'AU$', '$'], 'AWG':['AWG', 'AWG', 2, 'AWG', 'Afl.'], 'AZM':['AZM', 'AZM', 130, 'AZM', 'AZM'], 'AZN':['AZN', 'AZN', 2, 'AZN', 'man.'], 'BAD':['BAD', 'BAD', 130, 'BAD', 'BAD'], 'BAM':['BAM', 'BAM', 2, 'BAM', 'KM'], 'BAN':['BAN', 'BAN', 130, 'BAN', 'BAN'], 'BBD':['BBD', 'BBD', 2, 'BBD', '$'], 'BDT':['BDT', 'Tk', 2, 'Tk', '\u09F3'], 'BEC':['BEC', 'BEC', 130, 'BEC', 'BEC'], 'BEF':['BEF', 'BEF', 130, 'BEF', 'BEF'], 'BEL':['BEL', 'BEL', 130, 'BEL', 'BEL'], 'BGL':['BGL', 'BGL', 130, 'BGL', 'BGL'], 'BGM':['BGM', 'BGM', 130, 'BGM', 'BGM'], 'BGN':['BGN', 'BGN', 2, 'BGN', 'lev'], 'BGO':['BGO', 'BGO', 130, 'BGO', 'BGO'], 'BHD':['BHD', 'BHD', 3, 'BHD', 'din'], 'BIF':['BIF', 'BIF', 0, 'BIF', 'FBu'], 'BMD':['BMD', 'BMD', 2, 'BMD', '$'], 'BND':['BND', 'BND', 2, 'BND', '$'], 'BOB':['BOB', 'BOB', 2, 'BOB', 'Bs'], 'BOL':['BOL', 'BOL', 130, 'BOL', 'BOL'], 'BOP':['BOP', 'BOP', 130, 'BOP', 'BOP'], 'BOV':['BOV', 'BOV', 130, 'BOV', 'BOV'], 'BRB':['BRB', 'BRB', 130, 'BRB', 'BRB'], 'BRC':['BRC', 'BRC', 130, 'BRC', 'BRC'], 'BRE':['BRE', 'BRE', 130, 'BRE', 'BRE'], 'BRL':['BRL', 'R$', 2, 'R$', 'R$'], 'BRN':['BRN', 'BRN', 130, 'BRN', 'BRN'], 'BRR':['BRR', 'BRR', 130, 'BRR', 'BRR'], 'BRZ':['BRZ', 'BRZ', 130, 'BRZ', 'BRZ'], 'BSD':['BSD', 'BSD', 2, 'BSD', '$'], 'BTN':['BTN', 'BTN', 2, 'BTN', 'Nu.'], 'BUK':['BUK', 'BUK', 130, 'BUK', 'BUK'], 'BWP':['BWP', 'BWP', 2, 'BWP', 'P'], 'BYB':['BYB', 'BYB', 130, 'BYB', 'BYB'], 'BYR':['BYR', 'BYR', 0, 'BYR', 'BYR'], 'BZD':['BZD', 'BZD', 2, 'BZD', '$'], 'CAD':['CAD', 'CA$', 2, 'C$', '$'], 'CDF':['CDF', 'CDF', 2, 'CDF', 'FrCD'], 'CHE':['CHE', 'CHE', 130, 'CHE', 'CHE'], 'CHF':['CHF', 'CHF', 2, 'CHF', 'CHF'], 'CHW':['CHW', 'CHW', 130, 'CHW', 'CHW'], 'CLE':['CLE', 'CLE', 130, 'CLE', 'CLE'], 'CLF':['CLF', 'CLF', 128, 'CLF', 'CLF'], 'CLP':['CLP', 'CL$', 0, 'CL$', '$'], 'CNX':['CNX', 'CNX', 130, 'CNX', 'CNX'], 'CNY':['CNY', 'CN\xA5', 2, 'RMB\xA5', '\xA5'], 'COP':['COP', 'COL$', 0, 'COL$', '$'], 'COU':['COU', 'COU', 130, 'COU', 'COU'], 'CRC':['CRC', 'CR\u20A1', 0, 'CR\u20A1', '\u20A1'], 'CSD':['CSD', 'CSD', 130, 'CSD', 'CSD'], 'CSK':['CSK', 'CSK', 130, 'CSK', 'CSK'], 'CUC':['CUC', 'CUC', 2, 'CUC', '$'], 'CUP':['CUP', '$MN', 2, '$MN', '$'], 'CVE':['CVE', 'CVE', 2, 'CVE', 'CVE'], 'CYP':['CYP', 'CYP', 130, 'CYP', 'CYP'], 'CZK':['CZK', 'K\u010D', 2, 'K\u010D', 'K\u010D'], 'DDM':['DDM', 'DDM', 130, 'DDM', 'DDM'], 'DEM':['DEM', 'DEM', 130, 'DEM', 'DEM'], 'DJF':['DJF', 'Fdj', 0, 'Fdj', 'Fdj'], 'DKK':['DKK', 'kr', 2, 'kr', 'kr'], 'DOP':['DOP', 'RD$', 2, 'RD$', '$'], 'DZD':['DZD', 'DZD', 2, 'DZD', 'din'], 'ECS':['ECS', 'ECS', 130, 'ECS', 'ECS'], 'ECV':['ECV', 'ECV', 130, 'ECV', 'ECV'], 'EEK':['EEK', 'EEK', 130, 'EEK', 'EEK'], 'EGP':['EGP', 'LE', 2, 'LE', 'E\xA3'], 'ERN':['ERN', 'ERN', 2, 'ERN', 'Nfk'], 'ESA':['ESA', 'ESA', 130, 'ESA', 'ESA'], 'ESB':['ESB', 'ESB', 130, 'ESB', 'ESB'], 'ESP':['ESP', 'ESP', 128, 'ESP', 'ESP'], 'ETB':['ETB', 'ETB', 2, 'ETB', 'Birr'], 'EUR':['EUR', '\u20AC', 2, '\u20AC', '\u20AC'], 'FIM':['FIM', 'FIM', 130, 'FIM', 'FIM'], 'FJD':['FJD', 'FJD', 2, 'FJD', '$'], 'FKP':['FKP', 'FKP', 2, 'FKP', '\xA3'], 'FRF':['FRF', 'FRF', 130, 'FRF', 'FRF'], 'GBP':['GBP', '\xA3', 2, 'GB\xA3', '\xA3'], 'GEK':['GEK', 'GEK', 130, 'GEK', 'GEK'], 'GEL':['GEL', 'GEL', 2, 'GEL', 'GEL'], 'GHC':['GHC', 'GHC', 130, 'GHC', 'GHC'], 'GHS':['GHS', 'GHS', 2, 'GHS', 'GHS'], 'GIP':['GIP', 'GIP', 2, 'GIP', '\xkn'], 'HTG':['HTG', 'HTG', 2, 'HTG', 'HTG'], 'HUF':['HUF', 'HUF', 0, 'HUF', 'Ft'], 'IDR':['IDR', 'IDR', 0, 'IDR', 'Rp'], 'IEP':['IEP', 'IEP', 130, 'IEP', 'IEP'], 'ILP':['ILP', 'ILP', 130, 'ILP', 'ILP'], 'ILR':['ILR', 'ILR', 130, 'ILR', 'ILR'], 'ILS':['ILS', '\u20AA', 2, 'IL\u20AA', '\u20AA'], 'INR':['INR', 'Rs.', 2, 'Rs', '\u20B9'], 'IQD':['IQD', 'IQD', 0, 'IQD', 'din'], 'IRR':['IRR', 'IRR', 0, 'IRR', 'Rial'], 'ISJ':['ISJ', 'ISJ', 130, 'ISJ', 'ISJ'], 'ISK':['ISK', 'kr', 0, 'kr', 'kr'], 'ITL':['ITL', 'ITL', 128, 'ITL', 'ITL'], 'JMD':['JMD', 'JA$', 2, 'JA$', '$'], 'JOD':['JOD', 'JOD', 3, 'JOD', 'din'], 'JPY':['JPY', 'JP\xA5', 0, 'JP\xA5', '\xA5'], 'KES':['KES', 'Ksh', 2, 'Ksh', 'Ksh'], 'KGS':['KGS', 'KGS', 2, 'KGS', 'KGS'], 'KHR':['KHR', 'KHR', 2, 'KHR', 'Riel'], 'KMF':['KMF', 'KMF', 0, 'KMF', 'CF'], 'KPW':['KPW', 'KPW', 0, 'KPW', '\u20A9'], 'KRH':['KRH', 'KRH', 130, 'KRH', 'KRH'], 'KRO':['KRO', 'KRO', 130, 'KRO', 'KRO'], 'KRW':['KRW', '\u20A9', 0, 'KR\u20A9', '\u20A9'], 'KWD':['KWD', 'KWD', 3, 'KWD', 'din'], 'KYD':['KYD', 'KYD', 2, 'KYD', '$'], 'KZT':['KZT', 'KZT', 2, 'KZT', '\u20B8'], 'LAK':['LAK', 'LAK', 0, 'LAK', '\u20AD'], 'LBP':['LBP', 'LBP', 0, 'LBP', 'L\xA3'], 'LKR':['LKR', 'SLRs', 2, 'SLRs', 'Rs'], 'LRD':['LRD', 'LRD', 2, 'LRD', '$'], 'LSL':['LSL', 'LSL', 2, 'LSL', 'LSL'], 'LTL':['LTL', 'LTL', 2, 'LTL', 'Lt'], 'LTT':['LTT', 'LTT', 130, 'LTT', 'LTT'], 'LUC':['LUC', 'LUC', 130, 'LUC', 'LUC'], 'LUF':['LUF', 'LUF', 128, 'LUF', 'LUF'], 'LUL':['LUL', 'LUL', 130, 'LUL', 'LUL'], 'LVL':['LVL', 'LVL', 130, 'LVL', 'Ls'], 'LVR':['LVR', 'LVR', 130, 'LVR', 'LVR'], 'LYD':['LYD', 'LYD', 3, 'LYD', 'din'], 'MAD':['MAD', 'MAD', 2, 'MAD', 'MAD'], 'MAF':['MAF', 'MAF', 130, 'MAF', 'MAF'], 'MCF':['MCF', 'MCF', 130, 'MCF', 'MCF'], 'MDC':['MDC', 'MDC', 130, 'MDC', 'MDC'], 'MDL':['MDL', 'MDL', 2, 'MDL', 'MDL'], 'MGA':['MGA', 'MGA', 0, 'MGA', 'Ar'], 'MGF':['MGF', 'MGF', 128, 'MGF', 'MGF'], 'MKD':['MKD', 'MKD', 2, 'MKD', 'din'], 'MKN':['MKN', 'MKN', 130, 'MKN', 'MKN'], 'MLF':['MLF', 'MLF', 130, 'MLF', 'MLF'], 'MMK':['MMK', 'MMK', 0, 'MMK', 'K'], 'MNT':['MNT', 'MN\u20AE', 0, 'MN\u20AE', '\u20AE'], 'MOP':['MOP', 'MOP', 2, 'MOP', 'MOP'], 'MRO':['MRO', 'MRO', 0, 'MRO', 'MRO'], 'MTL':['MTL', 'MTL', 130, 'MTL', 'MTL'], 'MTP':['MTP', 'MTP', 130, 'MTP', 'MTP'], 'MUR':['MUR', 'MUR', 0, 'MUR', 'Rs'], 'MVP':['MVP', 'MVP', 130, 'MVP', 'MVP'], 'MVR':['MVR', 'MVR', 2, 'MVR', 'MVR'], 'MWK':['MWK', 'MWK', 2, 'MWK', 'MWK'], 'MXN':['MXN', 'MX$', 2, 'Mex$', '$'], 'MXP':['MXP', 'MXP', 130, 'MXP', 'MXP'], 'MXV':['MXV', 'MXV', 130, 'MXV', 'MXV'], 'MYR':['MYR', 'RM', 2, 'RM', 'RM'], 'MZE':['MZE', 'MZE', 130, 'MZE', 'MZE'], 'MZM':['MZM', 'MZM', 130, 'MZM', 'MZM'], 'MZN':['MZN', 'MZN', 2, 'MZN', 'MTn'], 'NAD':['NAD', 'NAD', 2, 'NAD', '$'], 'NGN':['NGN', 'NGN', 2, 'NGN', '\u20A6'], 'NIC':['NIC', 'NIC', 130, 'NIC', 'NIC'], 'NIO':['NIO', 'NIO', 2, 'NIO', 'C$'], 'NLG':['NLG', 'NLG', 130, 'NLG', 'NLG'], 'NOK':['NOK', 'NOkr', 2, 'NOkr', 'kr'], 'NPR':['NPR', 'NPR', 2, 'NPR', 'Rs'], 'NZD':['NZD', 'NZ$', 2, 'NZ$', '$'], 'OMR':['OMR', 'OMR', 3, 'OMR', 'Rial'], 'PAB':['PAB', 'B/.', 2, 'B/.', 'B/.'], 'PEI':['PEI', 'PEI', 130, 'PEI', 'PEI'], 'PEN':['PEN', 'S/.', 2, 'S/.', 'S/.'], 'PES':['PES', 'PES', 130, 'PES', 'PES'], 'PGK':['PGK', 'PGK', 2, 'PGK', 'PGK'], 'PHP':['PHP', 'PHP', 2, 'PHP', '\u20B1'], 'PKR':['PKR', 'PKRs.', 0, 'PKRs.', 'Rs'], 'PLN':['PLN', 'PLN', 2, 'PLN', 'z\u0142'], 'PLZ':['PLZ', 'PLZ', 130, 'PLZ', 'PLZ'], 'PTE':['PTE', 'PTE', 130, 'PTE', 'PTE'], 'PYG':['PYG', 'PYG', 0, 'PYG', 'Gs'], 'QAR':['QAR', 'QAR', 2, 'QAR', 'Rial'], 'RHD':['RHD', 'RHD', 130, 'RHD', 'RHD'], 'ROL':['ROL', 'ROL', 130, 'ROL', 'ROL'], 'RON':['RON', 'RON', 2, 'RON', 'RON'], 'RSD':['RSD', 'RSD', 0, 'RSD', 'din'], 'RUB':['RUB', '\u0440\u0443\u0431.', 2, '\u0440\u0443\u0431.', '\u0440\u0443\u0431.'], 'RUR':['RUR', 'RUR', 130, 'RUR', 'RUR'], 'RWF':['RWF', 'RWF', 0, 'RWF', 'RF'], 'SAR':['SAR', 'SR', 2, 'SR', 'Rial'], 'SBD':['SBD', 'SBD', 2, 'SBD', '$'], 'SCR':['SCR', 'SCR', 2, 'SCR', 'SCR'], 'SDD':['SDD', 'SDD', 130, 'SDD', 'SDD'], 'SDG':['SDG', 'SDG', 2, 'SDG', 'SDG'], 'SDP':['SDP', 'SDP', 130, 'SDP', 'SDP'], 'SEK':['SEK', 'kr', 2, 'kr', 'kr'], 'SGD':['SGD', 'S$', 2, 'S$', '$'], 'SHP':['SHP', 'SHP', 2, 'SHP', '\xA3'], 'SIT':['SIT', 'SIT', 130, 'SIT', 'SIT'], 'SKK':['SKK', 'SKK', 130, 'SKK', 'SKK'], 'SLL':['SLL', 'SLL', 0, 'SLL', 'SLL'], 'SOS':['SOS', 'SOS', 0, 'SOS', 'SOS'], 'SRD':['SRD', 'SRD', 2, 'SRD', '$'], 'SRG':['SRG', 'SRG', 130, 'SRG', 'SRG'], 'SSP':['SSP', 'SSP', 2, 'SSP', 'SSP'], 'STD':['STD', 'STD', 0, 'STD', 'Db'], 'SUR':['SUR', 'SUR', 130, 'SUR', 'SUR'], 'SVC':['SVC', 'SVC', 130, 'SVC', 'SVC'], 'SYP':['SYP', 'SYP', 0, 'SYP', '\xA3'], 'SZL':['SZL', 'SZL', 2, 'SZL', 'SZL'], 'THB':['THB', '\u0E3F', 2, 'THB', '\u0E3F'], 'TJR':['TJR', 'TJR', 130, 'TJR', 'TJR'], 'TJS':['TJS', 'TJS', 2, 'TJS', 'Som'], 'TMM':['TMM', 'TMM', 128, 'TMM', 'TMM'], 'TMT':['TMT', 'TMT', 2, 'TMT', 'TMT'], 'TND':['TND', 'TND', 3, 'TND', 'din'], 'TOP':['TOP', 'TOP', 2, 'TOP', 'T$'], 'TPE':['TPE', 'TPE', 130, 'TPE', 'TPE'], 'TRL':['TRL', 'TRL', 128, 'TRL', 'TRL'], 'TRY':['TRY', 'TL', 2, 'YTL', 'TL'], 'TTD':['TTD', 'TTD', 2, 'TTD', '$'], 'TWD':['TWD', 'NT$', 2, 'NT$', 'NT$'], 'TZS':['TZS', 'TZS', 0, 'TZS', 'TSh'], 'UAH':['UAH', 'UAH', 2, 'UAH', '\u20B4'], 'UAK':['UAK', 'UAK', 130, 'UAK', 'UAK'], 'UGS':['UGS', 'UGS', 130, 'UGS', 'UGS'], 'UGX':['UGX', 'UGX', 0, 'UGX', 'UGX'], 'USD':['USD', 'US$', 2, 'US$', '$'], 'USN':['USN', 'USN', 130, 'USN', 'USN'], 'USS':['USS', 'USS', 130, 'USS', 'USS'], 'UYI':['UYI', 'UYI', 128, 'UYI', 'UYI'], 'UYP':['UYP', 'UYP', 130, 'UYP', 'UYP'], 'UYU':['UYU', 'UY$', 2, 'UY$', '$'], 'UZS':['UZS', 'UZS', 0, 'UZS', 'so\u02BCm'], 'VEB':['VEB', 'VEB', 130, 'VEB', 'VEB'], 'VEF':['VEF', 'VEF', 2, 'VEF', 'Bs'], 'VND':['VND', '\u20AB', 24, '\u20AB', '\u20AB'], 'VNN':['VNN', 'VNN', 130, 'VNN', 'VNN'], 'VUV':['VUV', 'VUV', 0, 'VUV', 'VUV'], 'WST':['WST', 'WST', 2, 'WST', 'WST'], 'XAF':['XAF', 'FCFA', 0, 'FCFA', 'FCFA'], 'XAG':['XAG', 'XAG', 130, 'XAG', 'XAG'], 'XAU':['XAU', 'XAU', 130, 'XAU', 'XAU'], 'XBA':['XBA', 'XBA', 130, 'XBA', 'XBA'], 'XBB':['XBB', 'XBB', 130, 'XBB', 'XBB'], 'XBC':['XBC', 'XBC', 130, 'XBC', 'XBC'], 'XBD':['XBD', 'XBD', 130, 'XBD', 'XBD'], 'XCD':['XCD', 'EC$', 2, 'EC$', '$'], 'XDR':['XDR', 'XDR', 130, 'XDR', 'XDR'], 'XEU':['XEU', 'XEU', 130, 'XEU', 'XEU'], 'XFO':['XFO', 'XFO', 130, 'XFO', 'XFO'], 'XFU':['XFU', 'XFU', 130, 'XFU', 'XFU'], 'XOF':['XOF', 'CFA', 0, 'CFA', 'CFA'], 'XPD':['XPD', 'XPD', 130, 'XPD', 'XPD'], 'XPF':['XPF', 'CFPF', 0, 'CFPF', 'FCFP'], 'XPT':['XPT', 'XPT', 130, 'XPT', 'XPT'], 'XRE':['XRE', 'XRE', 130, 'XRE', 'XRE'], 'XSU':['XSU', 'XSU', 130, 'XSU', 'XSU'], 'XTS':['XTS', 'XTS', 130, 'XTS', 'XTS'], 'XUA':['XUA', 'XUA', 130, 'XUA', 'XUA'], 'XXX':['XXX', 'XXX', 130, 'XXX', 'XXX'], 'YDD':['YDD', 'YDD', 130, 'YDD', 'YDD'], 'YER':['YER', 'YER', 0, 'YER', 'Rial'], 'YUD':['YUD', 'YUD', 130, 'YUD', 'YUD'], 'YUM':['YUM', 'YUM', 130, 'YUM', 'YUM'], 'YUN':['YUN', 'YUN', 130, 'YUN', 'YUN'], 'YUR':['YUR', 'YUR', 130, 'YUR', 'YUR'], 'ZAL':['ZAL', 'ZAL', 130, 'ZAL', 'ZAL'], 'ZAR':['ZAR', 'ZAR', 2, 'ZAR', 'R'], 'ZMK':['ZMK', 'ZMK', 128, 'ZMK', 'ZWK'], 'ZMW':['ZMW', 'ZMW', 2, 'ZMW', 'ZMW'], 'ZRN':['ZRN', 'ZRN', 130, 'ZRN', 'ZRN'], 'ZRZ':['ZRZ', 'ZRZ', 130, 'ZRZ', 'ZRZ'], 'ZWD':['ZWD', 'ZWD', 128, 'ZWD', 'ZWD'], 'ZWL':['ZWL', 'ZWL', 130, 'ZWL', 'ZWL'], 'ZWR':['ZWR', 'ZWR', 130, 'ZWR', 'ZWR']};
}
;
cggl.Lcom_google_gwt_i18n_client_CurrencyList_1_2_classLit = createForClass('com.google.gwt.i18n.client', 'CurrencyList_', 296, cggl.Lcom_google_gwt_i18n_client_CurrencyList_2_classLit);
cggic.$clinit_DefaultCurrencyData = function $clinit_DefaultCurrencyData(){
  cggic.$clinit_DefaultCurrencyData = emptyMethod;
  jl.$clinit_Object();
}
;
cggic.DefaultCurrencyData = function DefaultCurrencyData(currencyCode, currencySymbol, fractionDigits){
  cggic.$clinit_DefaultCurrencyData();
  Object_0.call(this);
  this.$init_101();
  this.currencyCode = currencyCode;
  this.currencySymbol = currencySymbol;
  this.fractionDigits = fractionDigits;
}
;
defineClass(297, 1, {143:1, 1:1});
_.$init_101 = function $init_101(){
}
;
_.getCurrencyCode = function getCurrencyCode(){
  return this.currencyCode;
}
;
_.getCurrencySymbol = function getCurrencySymbol(){
  return this.currencySymbol;
}
;
_.getDefaultFractionDigits = function getDefaultFractionDigits(){
  return this.fractionDigits;
}
;
_.getSimpleCurrencySymbol = function getSimpleCurrencySymbol(){
  return this.getCurrencySymbol();
}
;
_.isDeprecated = function isDeprecated(){
  return false;
}
;
_.fractionDigits = 0;
cggl.Lcom_google_gwt_i18n_client_DefaultCurrencyData_2_classLit = createForClass('com.google.gwt.i18n.client', 'DefaultCurrencyData', 297, cggl.Ljava_lang_Object_2_classLit);
cggic.$clinit_LocaleInfo = function $clinit_LocaleInfo(){
  cggic.$clinit_LocaleInfo = emptyMethod;
  jl.$clinit_Object();
  cggic.instance_2 = new cggic.LocaleInfo(castTo(castTo(new cggici.LocaleInfoImpl_, 70), 70), castTo(castTo(new cggici.CldrImpl, 105), 105));
}
;
cggic.LocaleInfo = function LocaleInfo(impl, cldr){
  Object_0.call(this);
  this.$init_102();
  this.infoImpl = impl;
  this.cldrImpl = cldr;
}
;
cggic.getCurrentLocale = function getCurrentLocale(){
  cggic.$clinit_LocaleInfo();
  return cggic.instance_2;
}
;
defineClass(288, 1, {1:1}, cggic.LocaleInfo);
_.$init_102 = function $init_102(){
}
;
_.ensureNumberConstants = function ensureNumberConstants(){
  if (isNull(this.numberConstants)) {
    this.numberConstants = this.infoImpl.getNumberConstants();
  }
}
;
_.getNumberConstants = function getNumberConstants(){
  this.ensureNumberConstants();
  return this.numberConstants;
}
;
cggl.Lcom_google_gwt_i18n_client_LocaleInfo_2_classLit = createForClass('com.google.gwt.i18n.client', 'LocaleInfo', 288, cggl.Ljava_lang_Object_2_classLit);
cggic.$clinit_LocalizableResource$DefaultLocale = function $clinit_LocalizableResource$DefaultLocale(){
  cggic.$clinit_LocalizableResource$DefaultLocale = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource$DefaultLocale_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource/DefaultLocale');
cggic.$clinit_LocalizableResource$Description = function $clinit_LocalizableResource$Description(){
  cggic.$clinit_LocalizableResource$Description = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource$Description_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource/Description');
cggic.$clinit_LocalizableResource$Generate = function $clinit_LocalizableResource$Generate(){
  cggic.$clinit_LocalizableResource$Generate = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource$Generate_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource/Generate');
cggic.$clinit_LocalizableResource$GenerateKeys = function $clinit_LocalizableResource$GenerateKeys(){
  cggic.$clinit_LocalizableResource$GenerateKeys = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource$GenerateKeys_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource/GenerateKeys');
cggic.$clinit_LocalizableResource$GeneratedFrom = function $clinit_LocalizableResource$GeneratedFrom(){
  cggic.$clinit_LocalizableResource$GeneratedFrom = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource$GeneratedFrom_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource/GeneratedFrom');
cggic.$clinit_LocalizableResource$Key = function $clinit_LocalizableResource$Key(){
  cggic.$clinit_LocalizableResource$Key = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource$Key_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource/Key');
cggic.$clinit_LocalizableResource$Meaning = function $clinit_LocalizableResource$Meaning(){
  cggic.$clinit_LocalizableResource$Meaning = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_LocalizableResource$Meaning_2_classLit = createForInterface('com.google.gwt.i18n.client', 'LocalizableResource/Meaning');
cggic.$clinit_NumberFormat = function $clinit_NumberFormat(){
  cggic.$clinit_NumberFormat = emptyMethod;
  jl.$clinit_Object();
  cggic.localizedNumberConstants = cggic.getCurrentLocale().getNumberConstants();
  cggic.defaultNumberConstants = cggic.localizedNumberConstants;
}
;
cggic.NumberFormat = function NumberFormat(numberConstants, pattern, cdata, userSuppliedPattern){
  Object_0.call(this);
  this.$init_103();
  if (isNull(cdata)) {
    throw toJs(new jl.IllegalArgumentException_0('Unknown currency code'));
  }
  this.numberConstants = numberConstants;
  this.pattern = pattern;
  this.currencyData = cdata;
  this.parsePattern(this.pattern);
  if (!userSuppliedPattern && this.isCurrencyFormat) {
    this.minimumFractionDigits = cggici.getDefaultFractionDigits__I__devirtual$(this.currencyData);
    this.maximumFractionDigits = this.minimumFractionDigits;
  }
}
;
cggic.NumberFormat_0 = function NumberFormat_0(pattern, cdata, userSuppliedPattern){
  cggic.NumberFormat.call(this, cggic.defaultNumberConstants, pattern, cdata, userSuppliedPattern);
}
;
cggic.getFormat = function getFormat(pattern){
  cggic.$clinit_NumberFormat();
  return new cggic.NumberFormat_0(pattern, cggic.get_3().getDefault(), true);
}
;
cggic.toPrecision = function toPrecision(d, digits){
  return d.toPrecision(digits);
}
;
cggic.toScaledString = function toScaledString(buf, val){
  var dot, expDigits, expIdx, scale, startLen;
  startLen = buf.length_0();
  buf.append_5(cggic.toPrecision(val, 20));
  scale = 0;
  expIdx = buf.indexOf_2('e', startLen);
  if (expIdx < 0) {
    expIdx = buf.indexOf_2('E', startLen);
  }
  if (expIdx >= 0) {
    expDigits = expIdx + 1;
    if (expDigits < buf.length_0() && buf.charAt(expDigits) == 43) {
      ++expDigits;
    }
    if (expDigits < buf.length_0()) {
      scale = jl.parseInt_1(buf.substring_0(expDigits));
    }
    buf.delete_0(expIdx, buf.length_0());
  }
  dot = buf.indexOf_2('.', startLen);
  if (dot >= 0) {
    buf.deleteCharAt(dot);
    scale -= buf.length_0() - dot;
  }
  return scale;
}
;
defineClass(162, 1, {1:1}, cggic.NumberFormat_0);
_.$init_103 = function $init_103(){
  this.decimalSeparatorAlwaysShown = false;
  this.groupingSize = 3;
  this.isCurrencyFormat = false;
  this.maximumFractionDigits = 3;
  this.maximumIntegerDigits = 40;
  this.minimumFractionDigits = 0;
  this.minimumIntegerDigits = 1;
  this.multiplier = 1;
  this.negativePrefix = '-';
  this.negativeSuffix = '';
  this.positivePrefix = '';
  this.positiveSuffix = '';
  this.useExponentialNotation = false;
}
;
_.addExponent = function addExponent(digits){
  var exponentDigits, i;
  digits.append_5(this.numberConstants.exponentialSymbol());
  if (this.exponent < 0) {
    this.exponent = -this.exponent;
    digits.append_5(this.numberConstants.minusSign());
  }
  exponentDigits = jl.valueOf_15(this.exponent);
  for (i = jl.length__I__devirtual$_0(exponentDigits); i < this.minExponentDigits; ++i) {
    digits.append_1(48);
  }
  digits.append_5(exponentDigits);
}
;
_.addZeroAndDecimal = function addZeroAndDecimal(digits, decimalSeparator){
  if (this.digitsLength == 0) {
    digits.insert(0, 48);
    ++this.decimalPosition;
    ++this.digitsLength;
  }
  if (this.decimalPosition < this.digitsLength || this.decimalSeparatorAlwaysShown) {
    digits.insert(this.decimalPosition, decimalSeparator);
    ++this.digitsLength;
  }
}
;
_.adjustFractionDigits = function adjustFractionDigits(digits){
  var requiredDigits, toRemove;
  requiredDigits = this.decimalPosition + this.minimumFractionDigits;
  if (this.digitsLength < requiredDigits) {
    while (this.digitsLength < requiredDigits) {
      digits.append_1(48);
      ++this.digitsLength;
    }
  }
   else {
    toRemove = this.decimalPosition + this.maximumFractionDigits;
    if (toRemove > this.digitsLength) {
      toRemove = this.digitsLength;
    }
    while (toRemove > requiredDigits && digits.charAt(toRemove - 1) == 48) {
      --toRemove;
    }
    if (toRemove < this.digitsLength) {
      digits.delete_0(toRemove, this.digitsLength);
      this.digitsLength = toRemove;
    }
  }
}
;
_.computeExponent = function computeExponent(digits){
  var remainder, strip;
  strip = 0;
  while (strip < this.digitsLength - 1 && digits.charAt(strip) == 48) {
    ++strip;
  }
  if (strip > 0) {
    digits.delete_0(0, strip);
    this.digitsLength -= strip;
    this.exponent -= strip;
  }
  if (this.maximumIntegerDigits > this.minimumIntegerDigits && this.maximumIntegerDigits > 0) {
    this.exponent += this.decimalPosition - 1;
    remainder = this.exponent % this.maximumIntegerDigits;
    if (remainder < 0) {
      remainder += this.maximumIntegerDigits;
    }
    this.decimalPosition = remainder + 1;
    this.exponent -= remainder;
  }
   else {
    this.exponent += this.decimalPosition - this.minimumIntegerDigits;
    this.decimalPosition = this.minimumIntegerDigits;
  }
  if (this.digitsLength == 1 && digits.charAt(0) == 48) {
    this.exponent = 0;
    this.decimalPosition = this.minimumIntegerDigits;
  }
}
;
_.format = function format(number){
  var buf, isNegative, preRound, scale;
  if (isNaN(number)) {
    return this.numberConstants.notANumber();
  }
  isNegative = number < 0 || number == 0 && 1 / number < 0;
  if (isNegative) {
    number = -number;
  }
  buf = new jl.StringBuilder;
  if (jl.isInfinite(number)) {
    buf.append_5(isNegative?this.negativePrefix:this.positivePrefix);
    buf.append_5(this.numberConstants.infinity());
    buf.append_5(isNegative?this.negativeSuffix:this.positiveSuffix);
    return buf.toString_0();
  }
  number *= this.multiplier;
  scale = cggic.toScaledString(buf, number);
  preRound = buf.length_0() + scale + this.maximumFractionDigits + 3;
  if (preRound > 0 && preRound < buf.length_0() && buf.charAt(preRound) == 57) {
    this.propagateCarry(buf, preRound - 1);
    scale += buf.length_0() - preRound;
    buf.delete_0(preRound, buf.length_0());
  }
  this.format_0(isNegative, buf, scale);
  return buf.toString_0();
}
;
_.format_0 = function format_0(isNegative, digits, scale){
  var currentGroupingSize, decimalSeparator, groupingSeparator, useExponent, zeroChar;
  if (this.isCurrencyFormat) {
    decimalSeparator = jl.charAt_I_C__devirtual$_0(this.numberConstants.monetarySeparator(), 0);
    groupingSeparator = jl.charAt_I_C__devirtual$_0(this.numberConstants.monetaryGroupingSeparator(), 0);
  }
   else {
    decimalSeparator = jl.charAt_I_C__devirtual$_0(this.numberConstants.decimalSeparator(), 0);
    groupingSeparator = jl.charAt_I_C__devirtual$_0(this.numberConstants.groupingSeparator(), 0);
  }
  this.exponent = 0;
  this.digitsLength = digits.length_0();
  this.decimalPosition = this.digitsLength + scale;
  useExponent = this.useExponentialNotation;
  currentGroupingSize = this.groupingSize;
  if (this.decimalPosition > 1024) {
    useExponent = true;
  }
  if (useExponent) {
    this.computeExponent(digits);
  }
  this.processLeadingZeros(digits);
  this.roundValue(digits);
  this.insertGroupingSeparators(digits, groupingSeparator, currentGroupingSize);
  this.adjustFractionDigits(digits);
  this.addZeroAndDecimal(digits, decimalSeparator);
  if (useExponent) {
    this.addExponent(digits);
  }
  zeroChar = jl.charAt_I_C__devirtual$_0(this.numberConstants.zeroDigit(), 0);
  if (zeroChar != 48) {
    this.localizeDigits(digits, zeroChar);
  }
  digits.insert_1(0, isNegative?this.negativePrefix:this.positivePrefix);
  digits.append_5(isNegative?this.negativeSuffix:this.positiveSuffix);
}
;
_.getNumberConstants = function getNumberConstants_0(){
  return this.numberConstants;
}
;
_.insertGroupingSeparators = function insertGroupingSeparators(digits, groupingSeparator, g){
  var i;
  if (g > 0) {
    for (i = g; i < this.decimalPosition; i += g + 1) {
      digits.insert(this.decimalPosition - i, groupingSeparator);
      ++this.decimalPosition;
      ++this.digitsLength;
    }
  }
}
;
_.localizeDigits = function localizeDigits(digits, zero){
  var ch_0, i, n;
  n = digits.length_0();
  for (i = 0; i < n; ++i) {
    ch_0 = digits.charAt(i);
    if (ch_0 >= 48 && ch_0 <= 57) {
      digits.setCharAt(i, narrow_char(ch_0 - 48 + zero));
    }
  }
}
;
_.parseAffix = function parseAffix(pattern, start_0, affix, inNegativePattern){
  var ch_0, inQuote, len, pos;
  affix.delete_0(0, affix.length_0());
  inQuote = false;
  len = jl.length__I__devirtual$_0(pattern);
  for (pos = start_0; pos < len; ++pos) {
    ch_0 = jl.charAt_I_C__devirtual$_0(pattern, pos);
    if (ch_0 == 39) {
      if (pos + 1 < len && jl.charAt_I_C__devirtual$_0(pattern, pos + 1) == 39) {
        ++pos;
        affix.append_5("'");
      }
       else {
        inQuote = !inQuote;
      }
      continue;
    }
    if (inQuote) {
      affix.append_1(ch_0);
    }
     else {
      switch (ch_0) {
        case 35:
        case 48:
        case 44:
        case 46:
        case 59:
          return pos - start_0;
        case 164:
          this.isCurrencyFormat = true;
          if (pos + 1 < len && jl.charAt_I_C__devirtual$_0(pattern, pos + 1) == 164) {
            ++pos;
            if (pos < len - 2 && jl.charAt_I_C__devirtual$_0(pattern, pos + 1) == 164 && jl.charAt_I_C__devirtual$_0(pattern, pos + 2) == 164) {
              pos += 2;
              affix.append_5(cggici.getSimpleCurrencySymbol__Ljava_lang_String___devirtual$(this.currencyData));
            }
             else {
              affix.append_5(cggici.getCurrencyCode__Ljava_lang_String___devirtual$(this.currencyData));
            }
          }
           else {
            affix.append_5(cggici.getCurrencySymbol__Ljava_lang_String___devirtual$(this.currencyData));
          }

          break;
        case 37:
          if (!inNegativePattern) {
            if (this.multiplier != 1) {
              throw toJs(new jl.IllegalArgumentException_0('Too many percent/per mille characters in pattern "' + pattern + '"'));
            }
            this.multiplier = 100;
          }

          affix.append_5(this.numberConstants.percent());
          break;
        case 8240:
          if (!inNegativePattern) {
            if (this.multiplier != 1) {
              throw toJs(new jl.IllegalArgumentException_0('Too many percent/per mille characters in pattern "' + pattern + '"'));
            }
            this.multiplier = 1000;
          }

          affix.append_5(this.numberConstants.perMill());
          break;
        case 45:
          affix.append_5('-');
          break;
        default:affix.append_1(ch_0);
      }
    }
  }
  return len - start_0;
}
;
_.parsePattern = function parsePattern(pattern){
  var affix, pos;
  pos = 0;
  affix = new jl.StringBuilder;
  pos += this.parseAffix(pattern, pos, affix, false);
  this.positivePrefix = affix.toString_0();
  pos += this.parseTrunk(pattern, pos, false);
  pos += this.parseAffix(pattern, pos, affix, false);
  this.positiveSuffix = affix.toString_0();
  if (pos < jl.length__I__devirtual$_0(pattern) && jl.charAt_I_C__devirtual$_0(pattern, pos) == 59) {
    ++pos;
    pos += this.parseAffix(pattern, pos, affix, true);
    this.negativePrefix = affix.toString_0();
    pos += this.parseTrunk(pattern, pos, true);
    pos += this.parseAffix(pattern, pos, affix, true);
    this.negativeSuffix = affix.toString_0();
  }
   else {
    this.negativePrefix = this.numberConstants.minusSign() + ('' + this.positivePrefix);
    this.negativeSuffix = this.positiveSuffix;
  }
}
;
_.parseTrunk = function parseTrunk(pattern, start_0, ignorePattern){
  var ch_0, decimalPos, digitLeftCount, digitRightCount, effectiveDecimalPos, groupingCount, len, loop, n, pos, totalDigits, zeroDigitCount;
  decimalPos = -1;
  digitLeftCount = 0;
  zeroDigitCount = 0;
  digitRightCount = 0;
  groupingCount = -1;
  len = jl.length__I__devirtual$_0(pattern);
  pos = start_0;
  loop = true;
  for (; pos < len && loop; ++pos) {
    ch_0 = jl.charAt_I_C__devirtual$_0(pattern, pos);
    switch (ch_0) {
      case 35:
        if (zeroDigitCount > 0) {
          ++digitRightCount;
        }
         else {
          ++digitLeftCount;
        }

        if (groupingCount >= 0 && decimalPos < 0) {
          ++groupingCount;
        }

        break;
      case 48:
        if (digitRightCount > 0) {
          throw toJs(new jl.IllegalArgumentException_0("Unexpected '0' in pattern \"" + pattern + '"'));
        }

        ++zeroDigitCount;
        if (groupingCount >= 0 && decimalPos < 0) {
          ++groupingCount;
        }

        break;
      case 44:
        groupingCount = 0;
        break;
      case 46:
        if (decimalPos >= 0) {
          throw toJs(new jl.IllegalArgumentException_0('Multiple decimal separators in pattern "' + pattern + '"'));
        }

        decimalPos = digitLeftCount + zeroDigitCount + digitRightCount;
        break;
      case 69:
        if (!ignorePattern) {
          if (this.useExponentialNotation) {
            throw toJs(new jl.IllegalArgumentException_0('Multiple exponential symbols in pattern "' + pattern + '"'));
          }
          this.useExponentialNotation = true;
          this.minExponentDigits = 0;
        }

        while (pos + 1 < len && jl.charAt_I_C__devirtual$_0(pattern, pos + 1) == 48) {
          ++pos;
          if (!ignorePattern) {
            ++this.minExponentDigits;
          }
        }

        if (!ignorePattern && digitLeftCount + zeroDigitCount < 1 || this.minExponentDigits < 1) {
          throw toJs(new jl.IllegalArgumentException_0('Malformed exponential pattern "' + pattern + '"'));
        }

        loop = false;
        break;
      default:--pos;
        loop = false;
        break;
    }
  }
  if (zeroDigitCount == 0 && digitLeftCount > 0 && decimalPos >= 0) {
    n = decimalPos;
    if (n == 0) {
      ++n;
    }
    digitRightCount = digitLeftCount - n;
    digitLeftCount = n - 1;
    zeroDigitCount = 1;
  }
  if (decimalPos < 0 && digitRightCount > 0 || decimalPos >= 0 && (decimalPos < digitLeftCount || decimalPos > digitLeftCount + zeroDigitCount) || groupingCount == 0) {
    throw toJs(new jl.IllegalArgumentException_0('Malformed pattern "' + pattern + '"'));
  }
  if (ignorePattern) {
    return pos - start_0;
  }
  totalDigits = digitLeftCount + zeroDigitCount + digitRightCount;
  this.maximumFractionDigits = decimalPos >= 0?totalDigits - decimalPos:0;
  if (decimalPos >= 0) {
    this.minimumFractionDigits = digitLeftCount + zeroDigitCount - decimalPos;
    if (this.minimumFractionDigits < 0) {
      this.minimumFractionDigits = 0;
    }
  }
  effectiveDecimalPos = decimalPos >= 0?decimalPos:totalDigits;
  this.minimumIntegerDigits = effectiveDecimalPos - digitLeftCount;
  if (this.useExponentialNotation) {
    this.maximumIntegerDigits = digitLeftCount + this.minimumIntegerDigits;
    if (this.maximumFractionDigits == 0 && this.minimumIntegerDigits == 0) {
      this.minimumIntegerDigits = 1;
    }
  }
  this.groupingSize = groupingCount > 0?groupingCount:0;
  this.decimalSeparatorAlwaysShown = decimalPos == 0 || decimalPos == totalDigits;
  return pos - start_0;
}
;
_.processLeadingZeros = function processLeadingZeros(digits){
  var i, prefix, strip;
  if (this.decimalPosition > this.digitsLength) {
    while (this.digitsLength < this.decimalPosition) {
      digits.append_1(48);
      ++this.digitsLength;
    }
  }
  if (!this.useExponentialNotation) {
    if (this.decimalPosition < this.minimumIntegerDigits) {
      prefix = new jl.StringBuilder;
      while (this.decimalPosition < this.minimumIntegerDigits) {
        prefix.append_1(48);
        ++this.decimalPosition;
        ++this.digitsLength;
      }
      digits.insert_0(0, prefix);
    }
     else if (this.decimalPosition > this.minimumIntegerDigits) {
      strip = this.decimalPosition - this.minimumIntegerDigits;
      for (i = 0; i < strip; ++i) {
        if (digits.charAt(i) != 48) {
          strip = i;
          break;
        }
      }
      if (strip > 0) {
        digits.delete_0(0, strip);
        this.digitsLength -= strip;
        this.decimalPosition -= strip;
      }
    }
  }
}
;
_.propagateCarry = function propagateCarry(digits, i){
  var carry, digit;
  carry = true;
  while (carry && i >= 0) {
    digit = digits.charAt(i);
    if (digit == 57) {
      digits.setCharAt(i--, 48);
    }
     else {
      digits.setCharAt(i, narrow_char(digit + 1));
      carry = false;
    }
  }
  if (carry) {
    digits.insert(0, 49);
    ++this.decimalPosition;
    ++this.digitsLength;
  }
}
;
_.roundValue = function roundValue(digits){
  var i;
  if (this.digitsLength > this.decimalPosition + this.maximumFractionDigits && digits.charAt(this.decimalPosition + this.maximumFractionDigits) >= 53) {
    i = this.decimalPosition + this.maximumFractionDigits - 1;
    this.propagateCarry(digits, i);
  }
}
;
_.decimalPosition = 0;
_.decimalSeparatorAlwaysShown = false;
_.digitsLength = 0;
_.exponent = 0;
_.groupingSize = 0;
_.isCurrencyFormat = false;
_.maximumFractionDigits = 0;
_.maximumIntegerDigits = 0;
_.minExponentDigits = 0;
_.minimumFractionDigits = 0;
_.minimumIntegerDigits = 0;
_.multiplier = 0;
_.useExponentialNotation = false;
cggic.CURRENCY_SIGN = 164;
cggic.LOCALIZED_COMMA_EQUIVALENTS = ',\u060C\u066B\u3001\uFE10\uFE11\uFE50\uFE51\uFF0C\uFF64';
cggic.LOCALIZED_DOT_EQUIVALENTS = '.\u2024\u3002\uFE12\uFE52\uFF0E\uFF61';
cggic.PATTERN_DECIMAL_SEPARATOR = 46;
cggic.PATTERN_DIGIT = 35;
cggic.PATTERN_EXPONENT = 69;
cggic.PATTERN_GROUPING_SEPARATOR = 44;
cggic.PATTERN_MINUS = 45;
cggic.PATTERN_PERCENT = 37;
cggic.PATTERN_PER_MILLE = 8240;
cggic.PATTERN_SEPARATOR = 59;
cggic.PATTERN_ZERO_DIGIT = 48;
cggic.QUOTE = 39;
cggic.latinNumberConstants = null;
cggl.Lcom_google_gwt_i18n_client_NumberFormat_2_classLit = createForClass('com.google.gwt.i18n.client', 'NumberFormat', 162, cggl.Ljava_lang_Object_2_classLit);
cggicc.$clinit_NumberConstants = function $clinit_NumberConstants(){
  cggicc.$clinit_NumberConstants = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_constants_NumberConstants_2_classLit = createForInterface('com.google.gwt.i18n.client.constants', 'NumberConstants');
cggic.$clinit_NumberFormat$1 = function $clinit_NumberFormat$1(){
  cggic.$clinit_NumberFormat$1 = emptyMethod;
}
;
defineClass(481, 1, {1:1});
cggl.Lcom_google_gwt_i18n_client_NumberFormat$1_2_classLit = createForClass('com.google.gwt.i18n.client', 'NumberFormat/1', 481, cggl.Ljava_lang_Object_2_classLit);
cggicc.$clinit_NumberConstantsImpl = function $clinit_NumberConstantsImpl(){
  cggicc.$clinit_NumberConstantsImpl = emptyMethod;
}
;
cggl.Lcom_google_gwt_i18n_client_constants_NumberConstantsImpl_2_classLit = createForInterface('com.google.gwt.i18n.client.constants', 'NumberConstantsImpl');
cggicc.$clinit_NumberConstantsImpl_ = function $clinit_NumberConstantsImpl_(){
  cggicc.$clinit_NumberConstantsImpl_ = emptyMethod;
  jl.$clinit_Object();
}
;
cggicc.NumberConstantsImpl_ = function NumberConstantsImpl_(){
  cggicc.$clinit_NumberConstantsImpl_();
  Object_0.call(this);
  this.$init_104();
}
;
defineClass(165, 1, {301:1, 1:1}, cggicc.NumberConstantsImpl_);
_.$init_104 = function $init_104(){
}
;
_.decimalSeparator = function decimalSeparator_0(){
  return '.';
}
;
_.exponentialSymbol = function exponentialSymbol(){
  return 'E';
}
;
_.groupingSeparator = function groupingSeparator_0(){
  return ',';
}
;
_.infinity = function infinity(){
  return '\u221E';
}
;
_.minusSign = function minusSign(){
  return '-';
}
;
_.monetaryGroupingSeparator = function monetaryGroupingSeparator(){
  return ',';
}
;
_.monetarySeparator = function monetarySeparator(){
  return '.';
}
;
_.notANumber = function notANumber(){
  return 'NaN';
}
;
_.perMill = function perMill(){
  return '\u2030';
}
;
_.percent = function percent(){
  return '%';
}
;
_.zeroDigit = function zeroDigit(){
  return '0';
}
;
cggl.Lcom_google_gwt_i18n_client_constants_NumberConstantsImpl_1_2_classLit = createForClass('com.google.gwt.i18n.client.constants', 'NumberConstantsImpl_', 165, cggl.Ljava_lang_Object_2_classLit);
cggici.$clinit_CldrImpl = function $clinit_CldrImpl(){
  cggici.$clinit_CldrImpl = emptyMethod;
  jl.$clinit_Object();
}
;
cggici.CldrImpl = function CldrImpl(){
  cggici.$clinit_CldrImpl();
  Object_0.call(this);
  this.$init_105();
}
;
defineClass(105, 1, {105:1, 1:1}, cggici.CldrImpl);
_.$init_105 = function $init_105(){
}
;
cggl.Lcom_google_gwt_i18n_client_impl_CldrImpl_2_classLit = createForClass('com.google.gwt.i18n.client.impl', 'CldrImpl', 105, cggl.Ljava_lang_Object_2_classLit);
cggici.$clinit_CurrencyDataImpl = function $clinit_CurrencyDataImpl(){
  cggici.$clinit_CurrencyDataImpl = emptyMethod;
  cggic.$clinit_DefaultCurrencyData();
}
;
cggici.CurrencyDataImpl = function CurrencyDataImpl(currencyCode, currencySymbol, flagsAndPrecision, portableCurrencySymbol, simpleCurrencySymbol){
  cggici.$clinit_CurrencyDataImpl();
  cggic.DefaultCurrencyData.call(this, currencyCode, currencySymbol, cggici.getDefaultFractionDigits_1(flagsAndPrecision));
  this.$init_106();
  this.flagsAndPrecision = flagsAndPrecision;
  this.portableCurrencySymbol = jsEquals(portableCurrencySymbol, null)?currencySymbol:portableCurrencySymbol;
  this.simpleCurrencySymbol = jsEquals(simpleCurrencySymbol, null)?currencySymbol:simpleCurrencySymbol;
}
;
cggici.getDefaultFractionDigits_1 = function getDefaultFractionDigits_1(flagsAndPrecision){
  cggici.$clinit_CurrencyDataImpl();
  return flagsAndPrecision & 7;
}
;
cggici.isDeprecated_1 = function isDeprecated_1(flagsAndPrecision){
  cggici.$clinit_CurrencyDataImpl();
  return (flagsAndPrecision & 128) != 0;
}
;
defineClass(7, 297, {143:1, 1:1}, cggici.CurrencyDataImpl);
_.$init_106 = function $init_106(){
}
;
_.getDefaultFractionDigits = function getDefaultFractionDigits_0(){
  return cggici.getDefaultFractionDigits_1(this.flagsAndPrecision);
}
;
_.getSimpleCurrencySymbol = function getSimpleCurrencySymbol_0(){
  return this.simpleCurrencySymbol;
}
;
_.isDeprecated = function isDeprecated_0(){
  return cggici.isDeprecated_1(this.flagsAndPrecision);
}
;
_.flagsAndPrecision = 0;
cggici.DEPRECATED_FLAG = 128;
cggici.POS_FIXED_FLAG = 16;
cggici.POS_SUFFIX_FLAG = 8;
cggici.PRECISION_MASK = 7;
cggici.SPACE_FORCED_FLAG = 32;
cggici.SPACING_FIXED_FLAG = 64;
cggl.Lcom_google_gwt_i18n_client_impl_CurrencyDataImpl_2_classLit = createForClass('com.google.gwt.i18n.client.impl', 'CurrencyDataImpl', 7, cggl.Lcom_google_gwt_i18n_client_DefaultCurrencyData_2_classLit);
cggici.$clinit_CurrencyDataJso = function $clinit_CurrencyDataJso(){
  cggici.$clinit_CurrencyDataJso = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggici.$getCurrencyCode = function $getCurrencyCode(this$static){
  return this$static[0];
}
;
cggici.$getCurrencySymbol = function $getCurrencySymbol(this$static){
  return this$static[1];
}
;
cggici.$getDefaultFractionDigits = function $getDefaultFractionDigits(this$static){
  return cggici.getDefaultFractionDigits_1(cggici.$getFlagsAndPrecision(this$static));
}
;
cggici.$getFlagsAndPrecision = function $getFlagsAndPrecision(this$static){
  return this$static[2];
}
;
cggici.$getSimpleCurrencySymbol = function $getSimpleCurrencySymbol(this$static){
  return this$static[4] || this$static[1];
}
;
cggici.$isDeprecated = function $isDeprecated(this$static){
  return cggici.isDeprecated_1(cggici.$getFlagsAndPrecision(this$static));
}
;
cggici.getCurrencyCode__Ljava_lang_String___devirtual$ = function getCurrencyCode__Ljava_lang_String___devirtual$(this$static){
  cggici.$clinit_CurrencyDataJso();
  return hasJavaObjectVirtualDispatch(this$static)?this$static.getCurrencyCode():cggici.$getCurrencyCode(this$static);
}
;
cggici.getCurrencySymbol__Ljava_lang_String___devirtual$ = function getCurrencySymbol__Ljava_lang_String___devirtual$(this$static){
  cggici.$clinit_CurrencyDataJso();
  return hasJavaObjectVirtualDispatch(this$static)?this$static.getCurrencySymbol():cggici.$getCurrencySymbol(this$static);
}
;
cggici.getDefaultFractionDigits__I__devirtual$ = function getDefaultFractionDigits__I__devirtual$(this$static){
  cggici.$clinit_CurrencyDataJso();
  return hasJavaObjectVirtualDispatch(this$static)?this$static.getDefaultFractionDigits():cggici.$getDefaultFractionDigits(this$static);
}
;
cggici.getSimpleCurrencySymbol__Ljava_lang_String___devirtual$ = function getSimpleCurrencySymbol__Ljava_lang_String___devirtual$(this$static){
  cggici.$clinit_CurrencyDataJso();
  return hasJavaObjectVirtualDispatch(this$static)?this$static.getSimpleCurrencySymbol():cggici.$getSimpleCurrencySymbol(this$static);
}
;
cggici.isDeprecated__Z__devirtual$ = function isDeprecated__Z__devirtual$(this$static){
  cggici.$clinit_CurrencyDataJso();
  return hasJavaObjectVirtualDispatch(this$static)?this$static.isDeprecated():cggici.$isDeprecated(this$static);
}
;
cggici.$clinit_LocaleInfoImpl = function $clinit_LocaleInfoImpl(){
  cggici.$clinit_LocaleInfoImpl = emptyMethod;
  jl.$clinit_Object();
}
;
cggici.LocaleInfoImpl = function LocaleInfoImpl(){
  cggici.$clinit_LocaleInfoImpl();
  Object_0.call(this);
  this.$init_107();
}
;
defineClass(70, 1, {70:1, 1:1});
_.$init_107 = function $init_107(){
}
;
_.getNumberConstants = function getNumberConstants_1(){
  return castTo(new cggicc.NumberConstantsImpl_, 301);
}
;
cggl.Lcom_google_gwt_i18n_client_impl_LocaleInfoImpl_2_classLit = createForClass('com.google.gwt.i18n.client.impl', 'LocaleInfoImpl', 70, cggl.Ljava_lang_Object_2_classLit);
cggici.$clinit_LocaleInfoImpl_shared = function $clinit_LocaleInfoImpl_shared(){
  cggici.$clinit_LocaleInfoImpl_shared = emptyMethod;
  cggici.$clinit_LocaleInfoImpl();
}
;
cggici.LocaleInfoImpl_shared = function LocaleInfoImpl_shared(){
  cggici.$clinit_LocaleInfoImpl_shared();
  cggici.LocaleInfoImpl.call(this);
  this.$init_108();
}
;
defineClass(291, 70, {70:1, 1:1});
_.$init_108 = function $init_108(){
}
;
cggl.Lcom_google_gwt_i18n_client_impl_LocaleInfoImpl_1shared_2_classLit = createForClass('com.google.gwt.i18n.client.impl', 'LocaleInfoImpl_shared', 291, cggl.Lcom_google_gwt_i18n_client_impl_LocaleInfoImpl_2_classLit);
cggici.$clinit_LocaleInfoImpl_ = function $clinit_LocaleInfoImpl_(){
  cggici.$clinit_LocaleInfoImpl_ = emptyMethod;
  cggici.$clinit_LocaleInfoImpl_shared();
}
;
cggici.LocaleInfoImpl_ = function LocaleInfoImpl_(){
  cggici.$clinit_LocaleInfoImpl_();
  cggici.LocaleInfoImpl_shared.call(this);
  this.$init_109();
}
;
defineClass(292, 291, {70:1, 1:1}, cggici.LocaleInfoImpl_);
_.$init_109 = function $init_109(){
}
;
_.getNumberConstants = function getNumberConstants_2(){
  return castTo(new cggicc.NumberConstantsImpl_, 301);
}
;
cggl.Lcom_google_gwt_i18n_client_impl_LocaleInfoImpl_1_2_classLit = createForClass('com.google.gwt.i18n.client.impl', 'LocaleInfoImpl_', 292, cggl.Lcom_google_gwt_i18n_client_impl_LocaleInfoImpl_1shared_2_classLit);
cggl.$clinit_BigLongLibBase = function $clinit_BigLongLibBase(){
  cggl.$clinit_BigLongLibBase = emptyMethod;
  jl.$clinit_Object();
  cggl.BITS01 = 2 * 22;
  cggl.BITS2 = 64 - 44;
  cggl.MASK = (1 << 22) - 1;
  cggl.MASK_2 = (1 << 20) - 1;
  cggl.SIGN_BIT = 20 - 1;
  cggl.SIGN_BIT_VALUE = 1 << 19;
  cggl.TWO_PWR_31_DBL = 65536 * 32768;
  cggl.TWO_PWR_32_DBL = 65536 * 65536;
  cggl.TWO_PWR_44_DBL = 4194304 * 4194304;
  cggl.TWO_PWR_63_DBL = 4294967296 * 2147483648;
}
;
cggl.create_3 = function create_3(){
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    return new cggl.BigLongLibBase$BigLong;
  }
  return cggl.create0(0, 0, 0);
}
;
cggl.create_4 = function create_4(value_0){
  cggl.$clinit_BigLongLibBase();
  var a, a0, a1, a2;
  a0 = value_0 & 4194303;
  a1 = value_0 >> 22 & 4194303;
  a2 = value_0 < 0?1048575:0;
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    a = new cggl.BigLongLibBase$BigLong;
    a.l_0 = a0;
    a.m_0 = a1;
    a.h_0 = a2;
    return a;
  }
  return cggl.create0(a0, a1, a2);
}
;
cggl.create_5 = function create_5(a0, a1, a2){
  cggl.$clinit_BigLongLibBase();
  var a;
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    a = new cggl.BigLongLibBase$BigLong;
    a.l_0 = a0;
    a.m_0 = a1;
    a.h_0 = a2;
    return a;
  }
  return cggl.create0(a0, a1, a2);
}
;
cggl.create_6 = function create_6(a){
  cggl.$clinit_BigLongLibBase();
  var b;
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    b = new cggl.BigLongLibBase$BigLong;
    b.l_0 = cggl.getL(a);
    b.m_0 = cggl.getM(a);
    b.h_0 = cggl.getH(a);
    return b;
  }
  return cggl.create0(cggl.getL(a), cggl.getM(a), cggl.getH(a));
}
;
cggl.create0 = function create0(l, m, h){
  return {l:l, m:m, h:h};
}
;
cggl.divMod = function divMod(a, b, computeRemainder){
  cggl.$clinit_BigLongLibBase();
  var aIsCopy, aIsMinValue, aIsNegative, bpower, c, negative;
  if (cggl.isZero(b)) {
    throw toJs(new jl.ArithmeticException('divide by zero'));
  }
  if (cggl.isZero(a)) {
    if (computeRemainder) {
      cggl.remainder_0 = cggl.create_3();
    }
    return cggl.create_3();
  }
  if (cggl.isMinValue(b)) {
    return cggl.divModByMinValue(a, computeRemainder);
  }
  negative = false;
  if (cggl.isNegative_0(b)) {
    b = cggl.neg(b);
    negative = !negative;
  }
  bpower = cggl.powerOfTwo(b);
  aIsNegative = false;
  aIsMinValue = false;
  aIsCopy = false;
  if (cggl.isMinValue(a)) {
    aIsMinValue = true;
    aIsNegative = true;
    if (bpower == -1) {
      a = cggl.create_6((cggl.$clinit_BigLongLib$Const() , cggl.MAX_VALUE));
      aIsCopy = true;
      negative = !negative;
    }
     else {
      c = cggl.shr(a, bpower);
      if (negative) {
        cggl.negate(c);
      }
      if (computeRemainder) {
        cggl.remainder_0 = cggl.create_3();
      }
      return c;
    }
  }
   else if (cggl.isNegative_0(a)) {
    aIsNegative = true;
    a = cggl.neg(a);
    aIsCopy = true;
    negative = !negative;
  }
  if (bpower != -1) {
    return cggl.divModByShift(a, bpower, negative, aIsNegative, computeRemainder);
  }
  if (cggl.compare_16(a, b) < 0) {
    if (computeRemainder) {
      if (aIsNegative) {
        cggl.remainder_0 = cggl.neg(a);
      }
       else {
        cggl.remainder_0 = cggl.create_6(a);
      }
    }
    return cggl.create_3();
  }
  return cggl.divModHelper(aIsCopy?a:cggl.create_6(a), b, negative, aIsNegative, aIsMinValue, computeRemainder);
}
;
cggl.divModByMinValue = function divModByMinValue(a, computeRemainder){
  if (cggl.isMinValue(a)) {
    if (computeRemainder) {
      cggl.remainder_0 = cggl.create_3();
    }
    return cggl.create_6((cggl.$clinit_BigLongLib$Const() , cggl.ONE));
  }
  if (computeRemainder) {
    cggl.remainder_0 = cggl.create_6(a);
  }
  return cggl.create_3();
}
;
cggl.divModByShift = function divModByShift(a, bpower, negative, aIsNegative, computeRemainder){
  var c;
  c = cggl.shr(a, bpower);
  if (negative) {
    cggl.negate(c);
  }
  if (computeRemainder) {
    a = cggl.maskRight(a, bpower);
    if (aIsNegative) {
      cggl.remainder_0 = cggl.neg(a);
    }
     else {
      cggl.remainder_0 = cggl.create_6(a);
    }
  }
  return c;
}
;
cggl.divModHelper = function divModHelper(a, b, negative, aIsNegative, aIsMinValue, computeRemainder){
  var bshift, gte, quotient, shift_0;
  shift_0 = cggl.numberOfLeadingZeros(b) - cggl.numberOfLeadingZeros(a);
  bshift = cggl.shl(b, shift_0);
  quotient = cggl.create_3();
  while (shift_0 >= 0) {
    gte = cggl.trialSubtract(a, bshift);
    if (gte) {
      cggl.setBit(quotient, shift_0);
      if (cggl.isZero(a)) {
        break;
      }
    }
    cggl.toShru1(bshift);
    shift_0--;
  }
  if (negative) {
    cggl.negate(quotient);
  }
  if (computeRemainder) {
    if (aIsNegative) {
      cggl.remainder_0 = cggl.neg(a);
      if (aIsMinValue) {
        cggl.remainder_0 = cggl.sub_0(cggl.remainder_0, (cggl.$clinit_BigLongLib$Const() , cggl.ONE));
      }
    }
     else {
      cggl.remainder_0 = cggl.create_6(a);
    }
  }
  return quotient;
}
;
cggl.getH = function getH(a){
  cggl.$clinit_BigLongLibBase();
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    return a.h_0;
  }
  return cggl.getHNative(a);
}
;
cggl.getHNative = function getHNative(a){
  return a.h;
}
;
cggl.getL = function getL(a){
  cggl.$clinit_BigLongLibBase();
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    return a.l_0;
  }
  return cggl.getLNative(a);
}
;
cggl.getLNative = function getLNative(a){
  return a.l;
}
;
cggl.getM = function getM(a){
  cggl.$clinit_BigLongLibBase();
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    return a.m_0;
  }
  return cggl.getMNative(a);
}
;
cggl.getMNative = function getMNative(a){
  return a.m;
}
;
cggl.isMinValue = function isMinValue(a){
  cggl.$clinit_BigLongLibBase();
  return cggl.getH(a) == 524288 && cggl.getM(a) == 0 && cggl.getL(a) == 0;
}
;
cggl.isNegative_0 = function isNegative_0(a){
  cggl.$clinit_BigLongLibBase();
  return cggl.sign(a) != 0;
}
;
cggl.isZero = function isZero(a){
  cggl.$clinit_BigLongLibBase();
  return cggl.getL(a) == 0 && cggl.getM(a) == 0 && cggl.getH(a) == 0;
}
;
cggl.maskRight = function maskRight(a, bits){
  var b0, b1, b2;
  if (bits <= 22) {
    b0 = cggl.getL(a) & (1 << bits) - 1;
    b1 = b2 = 0;
  }
   else if (bits <= 44) {
    b0 = cggl.getL(a);
    b1 = cggl.getM(a) & (1 << bits - 22) - 1;
    b2 = 0;
  }
   else {
    b0 = cggl.getL(a);
    b1 = cggl.getM(a);
    b2 = cggl.getH(a) & (1 << bits - 44) - 1;
  }
  return cggl.create_5(b0, b1, b2);
}
;
cggl.negate = function negate(a){
  cggl.$clinit_BigLongLibBase();
  var neg0, neg1, neg2;
  neg0 = ~cggl.getL(a) + 1 & 4194303;
  neg1 = ~cggl.getM(a) + (neg0 == 0?1:0) & 4194303;
  neg2 = ~cggl.getH(a) + (neg0 == 0 && neg1 == 0?1:0) & 1048575;
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    a.l_0 = neg0;
    a.m_0 = neg1;
    a.h_0 = neg2;
  }
   else {
    cggl.setL(a, neg0);
    cggl.setM(a, neg1);
    cggl.setH(a, neg2);
  }
}
;
cggl.numberOfLeadingZeros = function numberOfLeadingZeros(a){
  var b1, b2;
  b2 = numberOfLeadingZeros_0(cggl.getH(a));
  if (b2 == 32) {
    b1 = numberOfLeadingZeros_0(cggl.getM(a));
    if (b1 == 32) {
      return numberOfLeadingZeros_0(cggl.getL(a)) + 32;
    }
     else {
      return b1 + 20 - (32 - 22);
    }
  }
   else {
    return b2 - (32 - 20);
  }
}
;
cggl.powerOfTwo = function powerOfTwo(a){
  var h, l, m;
  l = cggl.getL(a);
  if ((l & l - 1) != 0) {
    return -1;
  }
  m = cggl.getM(a);
  if ((m & m - 1) != 0) {
    return -1;
  }
  h = cggl.getH(a);
  if ((h & h - 1) != 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l == 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l != 0) {
    return numberOfTrailingZeros(l);
  }
  if (h == 0 && m != 0 && l == 0) {
    return numberOfTrailingZeros(m) + 22;
  }
  if (h != 0 && m == 0 && l == 0) {
    return numberOfTrailingZeros(h) + 44;
  }
  return -1;
}
;
cggl.setBit = function setBit(a, bit){
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    if (bit < 22) {
      a.l_0 |= 1 << bit;
    }
     else if (bit < 44) {
      a.m_0 |= 1 << bit - 22;
    }
     else {
      a.h_0 |= 1 << bit - 44;
    }
  }
   else {
    if (bit < 22) {
      cggl.setBitL(a, bit);
    }
     else if (bit < 44) {
      cggl.setBitM(a, bit - 22);
    }
     else {
      cggl.setBitH(a, bit - 44);
    }
  }
}
;
cggl.setBitH = function setBitH(a, bit){
  a.h |= 1 << bit;
}
;
cggl.setBitL = function setBitL(a, bit){
  a.l |= 1 << bit;
}
;
cggl.setBitM = function setBitM(a, bit){
  a.m |= 1 << bit;
}
;
cggl.setH = function setH(a, x_0){
  a.h = x_0;
}
;
cggl.setL = function setL(a, x_0){
  a.l = x_0;
}
;
cggl.setM = function setM(a, x_0){
  a.m = x_0;
}
;
cggl.sign = function sign(a){
  cggl.$clinit_BigLongLibBase();
  return cggl.getH(a) >> 20 - 1;
}
;
cggl.toDoubleHelper = function toDoubleHelper(a){
  cggl.$clinit_BigLongLibBase();
  return cggl.getL(a) + cggl.getM(a) * 4194304 + cggl.getH(a) * 17592186044416;
}
;
cggl.toShru1 = function toShru1(a){
  var a0, a1, a2;
  a1 = cggl.getM(a);
  a2 = cggl.getH(a);
  a0 = cggl.getL(a);
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    a.h_0 = a2 >>> 1;
    a.m_0 = a1 >>> 1 | (a2 & 1) << 22 - 1;
    a.l_0 = a0 >>> 1 | (a1 & 1) << 22 - 1;
  }
   else {
    cggl.setH(a, a2 >>> 1);
    cggl.setM(a, a1 >>> 1 | (a2 & 1) << 22 - 1);
    cggl.setL(a, a0 >>> 1 | (a1 & 1) << 22 - 1);
  }
}
;
cggl.trialSubtract = function trialSubtract(a, b){
  var sum0, sum1, sum2;
  sum2 = cggl.getH(a) - cggl.getH(b);
  if (sum2 < 0) {
    return false;
  }
  sum0 = cggl.getL(a) - cggl.getL(b);
  sum1 = cggl.getM(a) - cggl.getM(b) + (sum0 >> 22);
  sum2 += sum1 >> 22;
  if (sum2 < 0) {
    return false;
  }
  if (cggl.$clinit_LongLib() , RUN_IN_JVM) {
    a.l_0 = sum0 & 4194303;
    a.m_0 = sum1 & 4194303;
    a.h_0 = sum2 & 1048575;
  }
   else {
    cggl.setL(a, sum0 & 4194303);
    cggl.setM(a, sum1 & 4194303);
    cggl.setH(a, sum2 & 1048575);
  }
  return true;
}
;
defineClass(377, 1, {1:1});
cggl.BITS = 22;
cggl.BITS01 = 0;
cggl.BITS2 = 0;
cggl.MASK = 0;
cggl.MASK_2 = 0;
cggl.SIGN_BIT = 0;
cggl.SIGN_BIT_VALUE = 0;
cggl.TWO_PWR_15_DBL = 32768;
cggl.TWO_PWR_16_DBL = 65536;
cggl.TWO_PWR_22_DBL = 4194304;
cggl.TWO_PWR_31_DBL = 0;
cggl.TWO_PWR_32_DBL = 0;
cggl.TWO_PWR_44_DBL = 0;
cggl.TWO_PWR_63_DBL = 0;
cggl.Lcom_google_gwt_lang_BigLongLibBase_2_classLit = createForClass('com.google.gwt.lang', 'BigLongLibBase', 377, cggl.Ljava_lang_Object_2_classLit);
cggl.$clinit_BigLongLib = function $clinit_BigLongLib(){
  cggl.$clinit_BigLongLib = emptyMethod;
  cggl.$clinit_BigLongLibBase();
}
;
cggl.add_9 = function add_9(a, b){
  cggl.$clinit_BigLongLib();
  var sum0, sum1, sum2;
  sum0 = cggl.getL(a) + cggl.getL(b);
  sum1 = cggl.getM(a) + cggl.getM(b) + (sum0 >> 22);
  sum2 = cggl.getH(a) + cggl.getH(b) + (sum1 >> 22);
  return cggl.create_5(sum0 & 4194303, sum1 & 4194303, sum2 & 1048575);
}
;
cggl.and = function and(a, b){
  cggl.$clinit_BigLongLib();
  return cggl.create_5(cggl.getL(a) & cggl.getL(b), cggl.getM(a) & cggl.getM(b), cggl.getH(a) & cggl.getH(b));
}
;
cggl.compare_16 = function compare_16(a, b){
  cggl.$clinit_BigLongLib();
  var a0, a1, a2, b0, b1, b2, signA, signB;
  signA = cggl.sign(a);
  signB = cggl.sign(b);
  if (signA != signB) {
    return signB - signA;
  }
  a2 = cggl.getH(a);
  b2 = cggl.getH(b);
  if (a2 != b2) {
    return a2 - b2;
  }
  a1 = cggl.getM(a);
  b1 = cggl.getM(b);
  if (a1 != b1) {
    return a1 - b1;
  }
  a0 = cggl.getL(a);
  b0 = cggl.getL(b);
  return a0 - b0;
}
;
cggl.div = function div(a, b){
  cggl.$clinit_BigLongLib();
  return cggl.divMod(a, b, false);
}
;
cggl.fromDouble = function fromDouble(value_0){
  cggl.$clinit_BigLongLib();
  var a0, a1, a2, negative, result;
  if (isNaN(value_0)) {
    return cggl.$clinit_BigLongLib$Const() , cggl.ZERO;
  }
  if (value_0 < -9223372036854775807) {
    return cggl.$clinit_BigLongLib$Const() , cggl.MIN_VALUE;
  }
  if (value_0 >= 9223372036854775807) {
    return cggl.$clinit_BigLongLib$Const() , cggl.MAX_VALUE;
  }
  negative = false;
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  a2 = 0;
  if (value_0 >= 17592186044416) {
    a2 = round_int(value_0 / 17592186044416);
    value_0 -= a2 * 17592186044416;
  }
  a1 = 0;
  if (value_0 >= 4194304) {
    a1 = round_int(value_0 / 4194304);
    value_0 -= a1 * 4194304;
  }
  a0 = round_int(value_0);
  result = cggl.create_5(a0, a1, a2);
  if (negative) {
    cggl.negate(result);
  }
  return result;
}
;
cggl.fromInt = function fromInt(value_0){
  cggl.$clinit_BigLongLib();
  return cggl.create_4(value_0);
}
;
cggl.getAsLongArray = function getAsLongArray(l){
  cggl.$clinit_BigLongLib();
  var a;
  a = initUnidimensionalArray(cggl.J_classLit, {4:1, 1:1}, 5, 3, 14, 1);
  a[0] = fromInt_0(toInt_0(and_0(l, 4194303)));
  a[1] = fromInt_0(toInt_0(and_0(shr_0(l, 22), 4194303)));
  a[2] = fromInt_0(toInt_0(and_0(shr_0(l, 44), 1048575)));
  return a;
}
;
cggl.mod = function mod(a, b){
  cggl.$clinit_BigLongLib();
  cggl.divMod(a, b, true);
  return cggl.$clinit_BigLongLibBase() , cggl.remainder_0;
}
;
cggl.mul = function mul(a, b){
  cggl.$clinit_BigLongLib();
  var a0, a1, a2, a3, a4, b0, b1, b2, b3, b4, c0, c00, c01, c1, c10, c11, c12, c13, c2, c22, c23, c24, p0, p1, p2, p3, p4;
  a0 = cggl.getL(a) & 8191;
  a1 = cggl.getL(a) >> 13 | (cggl.getM(a) & 15) << 9;
  a2 = cggl.getM(a) >> 4 & 8191;
  a3 = cggl.getM(a) >> 17 | (cggl.getH(a) & 255) << 5;
  a4 = (cggl.getH(a) & 1048320) >> 8;
  b0 = cggl.getL(b) & 8191;
  b1 = cggl.getL(b) >> 13 | (cggl.getM(b) & 15) << 9;
  b2 = cggl.getM(b) >> 4 & 8191;
  b3 = cggl.getM(b) >> 17 | (cggl.getH(b) & 255) << 5;
  b4 = (cggl.getH(b) & 1048320) >> 8;
  p0 = a0 * b0;
  p1 = a1 * b0;
  p2 = a2 * b0;
  p3 = a3 * b0;
  p4 = a4 * b0;
  if (b1 != 0) {
    p1 += a0 * b1;
    p2 += a1 * b1;
    p3 += a2 * b1;
    p4 += a3 * b1;
  }
  if (b2 != 0) {
    p2 += a0 * b2;
    p3 += a1 * b2;
    p4 += a2 * b2;
  }
  if (b3 != 0) {
    p3 += a0 * b3;
    p4 += a1 * b3;
  }
  if (b4 != 0) {
    p4 += a0 * b4;
  }
  c00 = p0 & 4194303;
  c01 = (p1 & 511) << 13;
  c0 = c00 + c01;
  c10 = p0 >> 22;
  c11 = p1 >> 9;
  c12 = (p2 & 262143) << 4;
  c13 = (p3 & 31) << 17;
  c1 = c10 + c11 + c12 + c13;
  c22 = p2 >> 18;
  c23 = p3 >> 5;
  c24 = (p4 & 4095) << 8;
  c2 = c22 + c23 + c24;
  c1 += c0 >> 22;
  c0 &= 4194303;
  c2 += c1 >> 22;
  c1 &= 4194303;
  c2 &= 1048575;
  return cggl.create_5(c0, c1, c2);
}
;
cggl.neg = function neg(a){
  cggl.$clinit_BigLongLib();
  var neg0, neg1, neg2;
  neg0 = ~cggl.getL(a) + 1 & 4194303;
  neg1 = ~cggl.getM(a) + (neg0 == 0?1:0) & 4194303;
  neg2 = ~cggl.getH(a) + (neg0 == 0 && neg1 == 0?1:0) & 1048575;
  return cggl.create_5(neg0, neg1, neg2);
}
;
cggl.not = function not(a){
  cggl.$clinit_BigLongLib();
  return cggl.create_5(~cggl.getL(a) & 4194303, ~cggl.getM(a) & 4194303, ~cggl.getH(a) & 1048575);
}
;
cggl.or = function or(a, b){
  cggl.$clinit_BigLongLib();
  return cggl.create_5(cggl.getL(a) | cggl.getL(b), cggl.getM(a) | cggl.getM(b), cggl.getH(a) | cggl.getH(b));
}
;
cggl.shl = function shl(a, n){
  cggl.$clinit_BigLongLib();
  var res0, res1, res2;
  n &= 63;
  if (n < 22) {
    res0 = cggl.getL(a) << n;
    res1 = cggl.getM(a) << n | cggl.getL(a) >> 22 - n;
    res2 = cggl.getH(a) << n | cggl.getM(a) >> 22 - n;
  }
   else if (n < 44) {
    res0 = 0;
    res1 = cggl.getL(a) << n - 22;
    res2 = cggl.getM(a) << n - 22 | cggl.getL(a) >> 44 - n;
  }
   else {
    res0 = 0;
    res1 = 0;
    res2 = cggl.getL(a) << n - 44;
  }
  return cggl.create_5(res0 & 4194303, res1 & 4194303, res2 & 1048575);
}
;
cggl.shr = function shr(a, n){
  cggl.$clinit_BigLongLib();
  var a2, negative, res0, res1, res2;
  n &= 63;
  a2 = cggl.getH(a);
  negative = (a2 & 524288) != 0;
  if (negative) {
    a2 |= ~1048575;
  }
  if (n < 22) {
    res2 = a2 >> n;
    res1 = cggl.getM(a) >> n | a2 << 22 - n;
    res0 = cggl.getL(a) >> n | cggl.getM(a) << 22 - n;
  }
   else if (n < 44) {
    res2 = negative?1048575:0;
    res1 = a2 >> n - 22;
    res0 = cggl.getM(a) >> n - 22 | a2 << 44 - n;
  }
   else {
    res2 = negative?1048575:0;
    res1 = negative?4194303:0;
    res0 = a2 >> n - 44;
  }
  return cggl.create_5(res0 & 4194303, res1 & 4194303, res2 & 1048575);
}
;
cggl.shru = function shru(a, n){
  cggl.$clinit_BigLongLib();
  var a2, res0, res1, res2;
  n &= 63;
  a2 = cggl.getH(a) & 1048575;
  if (n < 22) {
    res2 = a2 >>> n;
    res1 = cggl.getM(a) >> n | a2 << 22 - n;
    res0 = cggl.getL(a) >> n | cggl.getM(a) << 22 - n;
  }
   else if (n < 44) {
    res2 = 0;
    res1 = a2 >>> n - 22;
    res0 = cggl.getM(a) >> n - 22 | cggl.getH(a) << 44 - n;
  }
   else {
    res2 = 0;
    res1 = 0;
    res0 = a2 >>> n - 44;
  }
  return cggl.create_5(res0 & 4194303, res1 & 4194303, res2 & 1048575);
}
;
cggl.sub_0 = function sub_0(a, b){
  cggl.$clinit_BigLongLib();
  var sum0, sum1, sum2;
  sum0 = cggl.getL(a) - cggl.getL(b);
  sum1 = cggl.getM(a) - cggl.getM(b) + (sum0 >> 22);
  sum2 = cggl.getH(a) - cggl.getH(b) + (sum1 >> 22);
  return cggl.create_5(sum0 & 4194303, sum1 & 4194303, sum2 & 1048575);
}
;
cggl.toDouble = function toDouble(a){
  cggl.$clinit_BigLongLib();
  if (cggl.compare_16(a, (cggl.$clinit_BigLongLib$Const() , cggl.ZERO)) < 0) {
    return -cggl.toDoubleHelper(cggl.neg(a));
  }
  return cggl.toDoubleHelper(a);
}
;
cggl.toInt = function toInt(a){
  cggl.$clinit_BigLongLib();
  return cggl.getL(a) | cggl.getM(a) << 22;
}
;
cggl.toString_9 = function toString_9(a){
  cggl.$clinit_BigLongLib();
  var digits, rem, res, tenPower, tenPowerLong, tenPowerZeroes, zeroesNeeded;
  if (cggl.isZero(a)) {
    return '0';
  }
  if (cggl.isMinValue(a)) {
    return '-9223372036854775808';
  }
  if (cggl.isNegative_0(a)) {
    return '-' + cggl.toString_9(cggl.neg(a));
  }
  rem = a;
  res = '';
  while (!cggl.isZero(rem)) {
    tenPowerZeroes = 9;
    tenPower = 1000000000;
    tenPowerLong = cggl.fromInt(1000000000);
    rem = cggl.divMod(rem, tenPowerLong, true);
    digits = '' + cggl.toInt((cggl.$clinit_BigLongLibBase() , cggl.remainder_0));
    if (!cggl.isZero(rem)) {
      zeroesNeeded = 9 - jl.length__I__devirtual$_0(digits);
      for (; zeroesNeeded > 0; zeroesNeeded--) {
        digits = '0' + digits;
      }
    }
    res = digits + ('' + res);
  }
  return res;
}
;
cggl.xor = function xor(a, b){
  cggl.$clinit_BigLongLib();
  return cggl.create_5(cggl.getL(a) ^ cggl.getL(b), cggl.getM(a) ^ cggl.getM(b), cggl.getH(a) ^ cggl.getH(b));
}
;
defineClass(403, 377, {1:1});
cggl.Lcom_google_gwt_lang_BigLongLib_2_classLit = createForClass('com.google.gwt.lang', 'BigLongLib', 403, cggl.Lcom_google_gwt_lang_BigLongLibBase_2_classLit);
cggl.$clinit_BigLongLib$Const = function $clinit_BigLongLib$Const(){
  cggl.$clinit_BigLongLib$Const = emptyMethod;
  jl.$clinit_Object();
  cggl.MAX_VALUE = cggl.create_5(4194303, 4194303, 1048575 >> 1);
  cggl.MIN_VALUE = cggl.create_5(0, 0, 524288);
  cggl.ONE = cggl.fromInt(1);
  cggl.TWO = cggl.fromInt(2);
  cggl.ZERO = cggl.fromInt(0);
}
;
defineClass(404, 1, {1:1});
cggl.Lcom_google_gwt_lang_BigLongLib$Const_2_classLit = createForClass('com.google.gwt.lang', 'BigLongLib/Const', 404, cggl.Ljava_lang_Object_2_classLit);
cggl.$clinit_BigLongLibBase$BigLong = function $clinit_BigLongLibBase$BigLong(){
  cggl.$clinit_BigLongLibBase$BigLong = emptyMethod;
  jl.$clinit_Object();
}
;
cggl.BigLongLibBase$BigLong = function BigLongLibBase$BigLong(){
  cggl.$clinit_BigLongLibBase$BigLong();
  Object_0.call(this);
  this.$init_111();
}
;
defineClass(97, 1, {1:1}, cggl.BigLongLibBase$BigLong);
_.$init_111 = function $init_111(){
}
;
_.h_0 = 0;
_.l_0 = 0;
_.m_0 = 0;
cggl.Lcom_google_gwt_lang_BigLongLibBase$BigLong_2_classLit = createForClass('com.google.gwt.lang', 'BigLongLibBase/BigLong', 97, cggl.Ljava_lang_Object_2_classLit);
cggl.$clinit_LongLib = function $clinit_LongLib(){
  cggl.$clinit_LongLib = emptyMethod;
  jl.$clinit_Object();
}
;
cggl.LongLib = function LongLib(){
  Object_0.call(this);
  this.$init_114();
}
;
function add_10(a, b){
  cggl.$clinit_LongLib();
  var result;
  if (cggl.isSmallLong(a) && cggl.isSmallLong(b)) {
    result = cggl.asDouble(a) + cggl.asDouble(b);
    if (cggl.isSafeIntegerRange(result)) {
      return cggl.createSmallLongEmul(result);
    }
  }
  return cggl.createLongEmul(cggl.add_9(cggl.toBigLong(a), cggl.toBigLong(b)));
}

function and_0(a, b){
  cggl.$clinit_LongLib();
  return cggl.createLongEmul(cggl.and(cggl.toBigLong(a), cggl.toBigLong(b)));
}

function asBigLong(value_0){
  cggl.$clinit_LongLib();
  if (RUN_IN_JVM) {
    return value_0.big_0;
  }
  return cggl.asBigLong0(value_0);
}

cggl.asBigLong0 = function asBigLong0(value_0){
  return value_0;
}
;
cggl.asDouble = function asDouble(value_0){
  return cggl.asDouble_0(cggl.asSmallLong(value_0));
}
;
cggl.asDouble_0 = function asDouble_0(value_0){
  if (RUN_IN_JVM) {
    return isNull(value_0)?NaN:value_0.d;
  }
  return cggl.asDouble0(value_0);
}
;
cggl.asDouble0 = function asDouble0(value_0){
  return value_0;
}
;
cggl.asSmallLong = function asSmallLong(value_0){
  if (RUN_IN_JVM) {
    return value_0.small_0;
  }
  return cggl.asSmallLong0(value_0);
}
;
cggl.asSmallLong0 = function asSmallLong0(value_0){
  return value_0;
}
;
cggl.coerceToInt = function coerceToInt(value_0){
  if (RUN_IN_JVM) {
    return toInt_0(fromDouble_0(value_0));
  }
  return cggl.coerceToInt0(value_0);
}
;
cggl.coerceToInt0 = function coerceToInt0(value_0){
  return value_0 | 0;
}
;
function compare_17(a, b){
  cggl.$clinit_LongLib();
  var result;
  if (cggl.isSmallLong(a) && cggl.isSmallLong(b)) {
    result = cggl.asDouble(a) - cggl.asDouble(b);
    if (!isNaN(result)) {
      return result;
    }
  }
  return cggl.compare_16(cggl.toBigLong(a), cggl.toBigLong(b));
}

function copy_0(value_0){
  cggl.$clinit_LongLib();
  if (cggl.isSmallLong(value_0)) {
    return cggl.createSmallLongEmul(cggl.asDouble(value_0));
  }
   else {
    return cggl.createBigLongEmul(cggl.create_6(asBigLong(value_0)));
  }
}

cggl.createBigLongEmul = function createBigLongEmul(big_0){
  var emul;
  if (RUN_IN_JVM) {
    emul = new cggl.LongLib$LongEmul;
    emul.big_0 = big_0;
    return emul;
  }
  return cggl.createBigLongEmul0(big_0);
}
;
cggl.createBigLongEmul0 = function createBigLongEmul0(value_0){
  return value_0;
}
;
cggl.createLongEmul = function createLongEmul(big_0){
  var a2;
  a2 = cggl.getH(big_0);
  if (a2 == 0) {
    return cggl.createSmallLongEmul(cggl.getL(big_0) + cggl.getM(big_0) * 4194304);
  }
  if (a2 == 1048575) {
    return cggl.createSmallLongEmul(cggl.getL(big_0) + cggl.getM(big_0) * 4194304 - 17592186044416);
  }
  return cggl.createBigLongEmul(big_0);
}
;
cggl.createSmallLongEmul = function createSmallLongEmul(value_0){
  var emul, small_0;
  if (RUN_IN_JVM) {
    small_0 = new cggl.LongLib$SmallLong;
    small_0.d = value_0;
    emul = new cggl.LongLib$LongEmul;
    emul.small_0 = small_0;
    return emul;
  }
  return cggl.createSmallLongEmul0(value_0);
}
;
cggl.createSmallLongEmul0 = function createSmallLongEmul0(value_0){
  return value_0;
}
;
function div_0(a, b){
  cggl.$clinit_LongLib();
  var result;
  if (cggl.isSmallLong(a) && cggl.isSmallLong(b)) {
    result = cggl.asDouble(a) / cggl.asDouble(b);
    if (cggl.isSafeIntegerRange(result)) {
      return cggl.createSmallLongEmul(cggl.truncate(result));
    }
  }
  return cggl.createLongEmul(cggl.div(cggl.toBigLong(a), cggl.toBigLong(b)));
}

function eq(a, b){
  cggl.$clinit_LongLib();
  return compare_17(a, b) == 0;
}

function fromDouble_0(value_0){
  cggl.$clinit_LongLib();
  if (cggl.isSafeIntegerRange(value_0)) {
    return cggl.createSmallLongEmul(cggl.truncate(value_0));
  }
  return cggl.createLongEmul(cggl.fromDouble(value_0));
}

function fromInt_0(value_0){
  cggl.$clinit_LongLib();
  return cggl.createSmallLongEmul(value_0);
}

function getAsLongArray_0(l){
  cggl.$clinit_LongLib();
  if (cggl.isSafeIntegerRange(toDouble_0(l))) {
    return stampJavaTypeInfo(getClassLiteralForArray(cggl.J_classLit, 1), {4:1, 1:1}, 5, 14, [l]);
  }
  return cggl.getAsLongArray(l);
}

function gt(a, b){
  cggl.$clinit_LongLib();
  return compare_17(a, b) > 0;
}

function gte_0(a, b){
  cggl.$clinit_LongLib();
  return compare_17(a, b) >= 0;
}

cggl.isSafeIntegerRange = function isSafeIntegerRange(value_0){
  return -17592186044416 < value_0 && value_0 < 17592186044416;
}
;
cggl.isSmallLong = function isSmallLong(value_0){
  if (RUN_IN_JVM) {
    return isNotNull(value_0.small_0);
  }
  return cggl.isSmallLong0(value_0);
}
;
cggl.isSmallLong0 = function isSmallLong0(value_0){
  return typeof value_0 === 'number';
}
;
function lt(a, b){
  cggl.$clinit_LongLib();
  return compare_17(a, b) < 0;
}

function lte(a, b){
  cggl.$clinit_LongLib();
  return compare_17(a, b) <= 0;
}

function mod_0(a, b){
  cggl.$clinit_LongLib();
  var result;
  if (cggl.isSmallLong(a) && cggl.isSmallLong(b)) {
    result = cggl.asDouble(a) % cggl.asDouble(b);
    if (cggl.isSafeIntegerRange(result)) {
      return cggl.createSmallLongEmul(result);
    }
  }
  return cggl.createLongEmul(cggl.mod(cggl.toBigLong(a), cggl.toBigLong(b)));
}

function mul_0(a, b){
  cggl.$clinit_LongLib();
  var result;
  if (cggl.isSmallLong(a) && cggl.isSmallLong(b)) {
    result = cggl.asDouble(a) * cggl.asDouble(b);
    if (cggl.isSafeIntegerRange(result)) {
      return cggl.createSmallLongEmul(result);
    }
  }
  return cggl.createLongEmul(cggl.mul(cggl.toBigLong(a), cggl.toBigLong(b)));
}

function neg_0(a){
  cggl.$clinit_LongLib();
  var result;
  if (cggl.isSmallLong(a)) {
    result = 0 - cggl.asDouble(a);
    if (!isNaN(result)) {
      return cggl.createSmallLongEmul(result);
    }
  }
  return cggl.createLongEmul(cggl.neg(asBigLong(a)));
}

function neq(a, b){
  cggl.$clinit_LongLib();
  return compare_17(a, b) != 0;
}

function not_0(a){
  cggl.$clinit_LongLib();
  return cggl.createLongEmul(cggl.not(cggl.toBigLong(a)));
}

function or_0(a, b){
  cggl.$clinit_LongLib();
  return cggl.createLongEmul(cggl.or(cggl.toBigLong(a), cggl.toBigLong(b)));
}

function shl_0(a, n){
  cggl.$clinit_LongLib();
  return cggl.createLongEmul(cggl.shl(cggl.toBigLong(a), n));
}

function shr_0(a, n){
  cggl.$clinit_LongLib();
  return cggl.createLongEmul(cggl.shr(cggl.toBigLong(a), n));
}

function shru_0(a, n){
  cggl.$clinit_LongLib();
  return cggl.createLongEmul(cggl.shru(cggl.toBigLong(a), n));
}

function sub_1(a, b){
  cggl.$clinit_LongLib();
  var result;
  if (cggl.isSmallLong(a) && cggl.isSmallLong(b)) {
    result = cggl.asDouble(a) - cggl.asDouble(b);
    if (cggl.isSafeIntegerRange(result)) {
      return cggl.createSmallLongEmul(result);
    }
  }
  return cggl.createLongEmul(cggl.sub_0(cggl.toBigLong(a), cggl.toBigLong(b)));
}

cggl.toBigLong = function toBigLong(value_0){
  return cggl.isSmallLong(value_0)?cggl.toBigLong_0(cggl.asSmallLong(value_0)):asBigLong(value_0);
}
;
cggl.toBigLong_0 = function toBigLong_0(longValue){
  var a0, a1, a3, value_0;
  value_0 = cggl.asDouble_0(longValue);
  a3 = 0;
  if (value_0 < 0) {
    value_0 += 17592186044416;
    a3 = 1048575;
  }
  a1 = round_int(value_0 / 4194304);
  a0 = round_int(value_0 - a1 * 4194304);
  return cggl.create_5(a0, a1, a3);
}
;
function toDouble_0(a){
  cggl.$clinit_LongLib();
  var d;
  if (cggl.isSmallLong(a)) {
    d = cggl.asDouble(a);
    return d == -0?0:d;
  }
  return cggl.toDouble(asBigLong(a));
}

function toInt_0(a){
  cggl.$clinit_LongLib();
  if (cggl.isSmallLong(a)) {
    return cggl.coerceToInt(cggl.asDouble(a));
  }
  return cggl.toInt(asBigLong(a));
}

cggl.toString_10 = function toString_10(value_0){
  if (RUN_IN_JVM) {
    return jl.valueOf_16(fromDouble_0(value_0));
  }
  return jl.valueOf_13(value_0);
}
;
function toString_11(a){
  cggl.$clinit_LongLib();
  if (cggl.isSmallLong(a)) {
    return cggl.toString_10(cggl.asDouble(a));
  }
  return cggl.toString_9(asBigLong(a));
}

cggl.truncate = function truncate(value_0){
  return value_0 < 0?$wnd.Math.ceil(value_0):$wnd.Math.floor(value_0);
}
;
function xor_0(a, b){
  cggl.$clinit_LongLib();
  return cggl.createLongEmul(cggl.xor(cggl.toBigLong(a), cggl.toBigLong(b)));
}

defineClass(363, 1, {1:1});
_.$init_114 = function $init_114(){
}
;
var RUN_IN_JVM = false;
cggl.Lcom_google_gwt_lang_LongLib_2_classLit = createForClass('com.google.gwt.lang', 'LongLib', 363, cggl.Ljava_lang_Object_2_classLit);
cggl.$clinit_LongLib$LongEmul = function $clinit_LongLib$LongEmul(){
  cggl.$clinit_LongLib$LongEmul = emptyMethod;
  jl.$clinit_Object();
}
;
cggl.LongLib$LongEmul = function LongLib$LongEmul(){
  cggl.$clinit_LongLib$LongEmul();
  Object_0.call(this);
  this.$init_115();
}
;
defineClass(144, 1, {1:1}, cggl.LongLib$LongEmul);
_.$init_115 = function $init_115(){
}
;
cggl.Lcom_google_gwt_lang_LongLib$LongEmul_2_classLit = createForClass('com.google.gwt.lang', 'LongLib/LongEmul', 144, cggl.Ljava_lang_Object_2_classLit);
cggl.$clinit_LongLib$SmallLong = function $clinit_LongLib$SmallLong(){
  cggl.$clinit_LongLib$SmallLong = emptyMethod;
  jl.$clinit_Object();
}
;
cggl.LongLib$SmallLong = function LongLib$SmallLong(){
  cggl.$clinit_LongLib$SmallLong();
  Object_0.call(this);
  this.$init_116();
}
;
defineClass(210, 1, {1:1}, cggl.LongLib$SmallLong);
_.$init_116 = function $init_116(){
}
;
_.d = 0;
cggl.Lcom_google_gwt_lang_LongLib$SmallLong_2_classLit = createForClass('com.google.gwt.lang', 'LongLib/SmallLong', 210, cggl.Ljava_lang_Object_2_classLit);
cggl.$clinit_Stats = function $clinit_Stats(){
  cggl.$clinit_Stats = emptyMethod;
  jl.$clinit_Object();
}
;
function Stats(){
  Object_0.call(this);
  this.$init_117();
}

function isStatsAvailable_0(){
  cggl.$clinit_Stats();
  return !!$stats;
}

function onModuleStart(mainClassName){
  cggl.$clinit_Stats();
  return $stats({moduleName:$moduleName, sessionId:$sessionId, subSystem:'startup', evtGroup:'moduleStartup', millis:(new Date).getTime(), type:'onModuleLoadStart', className:mainClassName});
}

defineClass(366, 1, {1:1});
_.$init_117 = function $init_117(){
}
;
cggl.Lcom_google_gwt_lang_Stats_2_classLit = createForClass('com.google.gwt.lang', 'Stats', 366, cggl.Ljava_lang_Object_2_classLit);
cggl.$clinit_com_00046actelion_00046research_00046gwt_00046Minimal__EntryMethodHolder = function $clinit_com_00046actelion_00046research_00046gwt_00046Minimal__EntryMethodHolder(){
  cggl.$clinit_com_00046actelion_00046research_00046gwt_00046Minimal__EntryMethodHolder = emptyMethod;
  jl.$clinit_Object();
}
;
function init_4(){
  cggl.$clinit_com_00046actelion_00046research_00046gwt_00046Minimal__EntryMethodHolder();
  castTo(new cargm.Minimal, 83).onModuleLoad();
  castTo(new cgguc2.UserAgentAsserter$UserAgentAsserterDisabled, 83).onModuleLoad();
  castTo(new cgguc.DocumentModeAsserter, 83).onModuleLoad();
}

defineClass(302, 1, {1:1});
cggl.Lcom_google_gwt_lang_com_100046actelion_100046research_100046gwt_100046Minimal_1_1EntryMethodHolder_2_classLit = createForClass('com.google.gwt.lang', 'com_00046actelion_00046research_00046gwt_00046Minimal__EntryMethodHolder', 302, cggl.Ljava_lang_Object_2_classLit);
cggts.$clinit_ArrayBuffer = function $clinit_ArrayBuffer(){
  cggts.$clinit_ArrayBuffer = emptyMethod;
}
;
cggl.Lcom_google_gwt_typedarrays_shared_ArrayBuffer_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'ArrayBuffer');
cggtc.$clinit_ArrayBufferNative = function $clinit_ArrayBufferNative(){
  cggtc.$clinit_ArrayBufferNative = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggts.$clinit_ArrayBufferView = function $clinit_ArrayBufferView(){
  cggts.$clinit_ArrayBufferView = emptyMethod;
}
;
cggl.Lcom_google_gwt_typedarrays_shared_ArrayBufferView_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'ArrayBufferView');
cggtc.$clinit_ArrayBufferViewNative = function $clinit_ArrayBufferViewNative(){
  cggtc.$clinit_ArrayBufferViewNative = emptyMethod;
  cggcc.$clinit_JavaScriptObject();
}
;
cggts.$clinit_DataView = function $clinit_DataView(){
  cggts.$clinit_DataView = emptyMethod;
}
;
cggl.Lcom_google_gwt_typedarrays_shared_DataView_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'DataView');
cggtc.$clinit_DataViewNative = function $clinit_DataViewNative(){
  cggtc.$clinit_DataViewNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggts.$clinit_Float32Array = function $clinit_Float32Array(){
  cggts.$clinit_Float32Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT = 4;
cggl.Lcom_google_gwt_typedarrays_shared_Float32Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Float32Array');
cggtc.$clinit_Float32ArrayNative = function $clinit_Float32ArrayNative(){
  cggtc.$clinit_Float32ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$length_1 = function $length_1(this$static){
  return this$static.length;
}
;
cggts.$clinit_Float64Array = function $clinit_Float64Array(){
  cggts.$clinit_Float64Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT_0 = 8;
cggl.Lcom_google_gwt_typedarrays_shared_Float64Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Float64Array');
cggtc.$clinit_Float64ArrayNative = function $clinit_Float64ArrayNative(){
  cggtc.$clinit_Float64ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$length_2 = function $length_2(this$static){
  return this$static.length;
}
;
cggts.$clinit_Int16Array = function $clinit_Int16Array(){
  cggts.$clinit_Int16Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT_1 = 2;
cggl.Lcom_google_gwt_typedarrays_shared_Int16Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Int16Array');
cggtc.$clinit_Int16ArrayNative = function $clinit_Int16ArrayNative(){
  cggtc.$clinit_Int16ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$length_3 = function $length_3(this$static){
  return this$static.length;
}
;
cggts.$clinit_Int32Array = function $clinit_Int32Array(){
  cggts.$clinit_Int32Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT_2 = 4;
cggl.Lcom_google_gwt_typedarrays_shared_Int32Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Int32Array');
cggtc.$clinit_Int32ArrayNative = function $clinit_Int32ArrayNative(){
  cggtc.$clinit_Int32ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$get_2 = function $get_2(this$static, index_0){
  return this$static[index_0];
}
;
cggtc.$length_4 = function $length_4(this$static){
  return this$static.length;
}
;
cggts.$clinit_Int8Array = function $clinit_Int8Array(){
  cggts.$clinit_Int8Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT_3 = 1;
cggl.Lcom_google_gwt_typedarrays_shared_Int8Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Int8Array');
cggtc.$clinit_Int8ArrayNative = function $clinit_Int8ArrayNative(){
  cggtc.$clinit_Int8ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$length_5 = function $length_5(this$static){
  return this$static.length;
}
;
cggts.$clinit_Uint16Array = function $clinit_Uint16Array(){
  cggts.$clinit_Uint16Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT_4 = 2;
cggl.Lcom_google_gwt_typedarrays_shared_Uint16Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Uint16Array');
cggtc.$clinit_Uint16ArrayNative = function $clinit_Uint16ArrayNative(){
  cggtc.$clinit_Uint16ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$get_3 = function $get_3(this$static, index_0){
  return this$static[index_0];
}
;
cggtc.$length_6 = function $length_6(this$static){
  return this$static.length;
}
;
cggts.$clinit_Uint32Array = function $clinit_Uint32Array(){
  cggts.$clinit_Uint32Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT_5 = 4;
cggl.Lcom_google_gwt_typedarrays_shared_Uint32Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Uint32Array');
cggtc.$clinit_Uint32ArrayNative = function $clinit_Uint32ArrayNative(){
  cggtc.$clinit_Uint32ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$length_7 = function $length_7(this$static){
  return this$static.length;
}
;
cggts.$clinit_Uint8Array = function $clinit_Uint8Array(){
  cggts.$clinit_Uint8Array = emptyMethod;
}
;
cggts.BYTES_PER_ELEMENT_6 = 1;
cggl.Lcom_google_gwt_typedarrays_shared_Uint8Array_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Uint8Array');
cggts.$clinit_Uint8ClampedArray = function $clinit_Uint8ClampedArray(){
  cggts.$clinit_Uint8ClampedArray = emptyMethod;
}
;
cggl.Lcom_google_gwt_typedarrays_shared_Uint8ClampedArray_2_classLit = createForInterface('com.google.gwt.typedarrays.shared', 'Uint8ClampedArray');
cggtc.$clinit_Uint8ArrayNative = function $clinit_Uint8ArrayNative(){
  cggtc.$clinit_Uint8ArrayNative = emptyMethod;
  cggtc.$clinit_ArrayBufferViewNative();
}
;
cggtc.$length_8 = function $length_8(this$static){
  return this$static.length;
}
;
cgguc.$clinit_DocumentModeAsserter = function $clinit_DocumentModeAsserter(){
  cgguc.$clinit_DocumentModeAsserter = emptyMethod;
  jl.$clinit_Object();
}
;
cgguc.DocumentModeAsserter = function DocumentModeAsserter(){
  cgguc.$clinit_DocumentModeAsserter();
  Object_0.call(this);
  this.$init_119();
}
;
defineClass(169, 1, {83:1, 1:1}, cgguc.DocumentModeAsserter);
_.$init_119 = function $init_119(){
}
;
_.onModuleLoad = function onModuleLoad_0(){
  var allowedModes, currentMode, i, impl, message, severity;
  impl = castTo(new cgguc.DocumentModeAsserter_DocumentModeProperty, 349);
  severity = impl.getDocumentModeSeverity();
  if (jsEquals(severity, (cgguc.$clinit_DocumentModeAsserter$Severity() , cgguc.IGNORE))) {
    return;
  }
  currentMode = cggdc.$getCompatMode(cggdc.get_2());
  allowedModes = impl.getAllowedDocumentModes();
  for (i = 0; i < allowedModes.length; i++) {
    if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(allowedModes[i], currentMode)) {
      return;
    }
  }
  if (allowedModes.length == 1 && jl.equals_Ljava_lang_Object__Z__devirtual$_2('CSS1Compat', allowedModes[0]) && jl.equals_Ljava_lang_Object__Z__devirtual$_2('BackCompat', currentMode)) {
    message = "GWT no longer supports Quirks Mode (document.compatMode=' " + 'BackCompat' + "').<br>Make sure your application's host HTML page has a Standards Mode " + "(document.compatMode=' " + 'CSS1Compat' + "') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML " + 'page.<br><br>To continue using this unsupported rendering mode and risk layout problems, ' + 'suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>' + '&nbsp;&nbsp;&lt;extend-configuration-property name="document.compatMode" value="' + currentMode + '"/&gt;';
  }
   else {
    message = "Your *.gwt.xml module configuration prohibits the use of the current document rendering mode (document.compatMode=' " + currentMode + "').<br>Modify your application's host HTML page doctype, or update your custom " + "'document.compatMode' configuration property settings.";
  }
  if (jsEquals(severity, (cgguc.$clinit_DocumentModeAsserter$Severity() , cgguc.ERROR))) {
    throw toJs(new jl.RuntimeException_1(message));
  }
  cggcc.log_0(message);
}
;
cgguc.PROPERTY_DOCUMENT_COMPATMODE = 'document.compatMode';
cgguc.PROPERTY_DOCUMENT_COMPATMODE_SEVERITY = 'document.compatMode.severity';
cgguc.QUIRKS_MODE_BACK_COMPAT = 'BackCompat';
cgguc.STANDARDS_MODE_CSS1_COMPAT = 'CSS1Compat';
cggl.Lcom_google_gwt_user_client_DocumentModeAsserter_2_classLit = createForClass('com.google.gwt.user.client', 'DocumentModeAsserter', 169, cggl.Ljava_lang_Object_2_classLit);
cgguc.$clinit_DocumentModeAsserter$DocumentModeProperty = function $clinit_DocumentModeAsserter$DocumentModeProperty(){
  cgguc.$clinit_DocumentModeAsserter$DocumentModeProperty = emptyMethod;
}
;
cggl.Lcom_google_gwt_user_client_DocumentModeAsserter$DocumentModeProperty_2_classLit = createForInterface('com.google.gwt.user.client', 'DocumentModeAsserter/DocumentModeProperty');
cgguc.$clinit_DocumentModeAsserter$Severity = function $clinit_DocumentModeAsserter$Severity(){
  cgguc.$clinit_DocumentModeAsserter$Severity = emptyMethod;
  jl.$clinit_Enum();
  cgguc.ERROR = new cgguc.DocumentModeAsserter$Severity('ERROR', 0);
  cgguc.IGNORE = new cgguc.DocumentModeAsserter$Severity('IGNORE', 1);
  cgguc.WARN = new cgguc.DocumentModeAsserter$Severity('WARN', 2);
}
;
cgguc.DocumentModeAsserter$Severity = function DocumentModeAsserter$Severity(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
  this.$init_120();
}
;
cgguc.valueOf_1 = function valueOf_1(name_0){
  cgguc.$clinit_DocumentModeAsserter$Severity();
  return valueOf((cgguc.$clinit_DocumentModeAsserter$Severity$Map() , cgguc.$MAP_0), name_0);
}
;
cgguc.values_1 = function values_1(){
  cgguc.$clinit_DocumentModeAsserter$Severity();
  return stampJavaTypeInfo(getClassLiteralForArray(cggl.Lcom_google_gwt_user_client_DocumentModeAsserter$Severity_2_classLit, 1), {4:1, 1:1, 8:1}, 74, 0, [cgguc.ERROR, cgguc.IGNORE, cgguc.WARN]);
}
;
defineClass(74, 37, {74:1, 4:1, 20:1, 37:1, 1:1}, cgguc.DocumentModeAsserter$Severity);
_.$init_120 = function $init_120(){
}
;
cggl.Lcom_google_gwt_user_client_DocumentModeAsserter$Severity_2_classLit = createForEnum('com.google.gwt.user.client', 'DocumentModeAsserter/Severity', 74, cggl.Ljava_lang_Enum_2_classLit, cgguc.values_1, cgguc.valueOf_1);
cgguc.$clinit_DocumentModeAsserter$Severity$Map = function $clinit_DocumentModeAsserter$Severity$Map(){
  cgguc.$clinit_DocumentModeAsserter$Severity$Map = emptyMethod;
  cgguc.$MAP_0 = createValueOfMap(cgguc.values_1());
}
;
defineClass(350, 1, {1:1});
cggl.Lcom_google_gwt_user_client_DocumentModeAsserter$Severity$Map_2_classLit = createForClass('com.google.gwt.user.client', 'DocumentModeAsserter/Severity/Map', 350, cggl.Ljava_lang_Object_2_classLit);
cgguc.$clinit_DocumentModeAsserter_DocumentModeProperty = function $clinit_DocumentModeAsserter_DocumentModeProperty(){
  cgguc.$clinit_DocumentModeAsserter_DocumentModeProperty = emptyMethod;
  jl.$clinit_Object();
}
;
cgguc.DocumentModeAsserter_DocumentModeProperty = function DocumentModeAsserter_DocumentModeProperty(){
  cgguc.$clinit_DocumentModeAsserter_DocumentModeProperty();
  Object_0.call(this);
  this.$init_121();
}
;
defineClass(190, 1, {349:1, 1:1}, cgguc.DocumentModeAsserter_DocumentModeProperty);
_.$init_121 = function $init_121(){
}
;
_.getAllowedDocumentModes = function getAllowedDocumentModes(){
  return stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_String_2_classLit, 1), {4:1, 1:1, 8:1, 29:1}, 2, 6, ['CSS1Compat']);
}
;
_.getDocumentModeSeverity = function getDocumentModeSeverity(){
  return cgguc.$clinit_DocumentModeAsserter$Severity() , cgguc.WARN;
}
;
cggl.Lcom_google_gwt_user_client_DocumentModeAsserter_1DocumentModeProperty_2_classLit = createForClass('com.google.gwt.user.client', 'DocumentModeAsserter_DocumentModeProperty', 190, cggl.Ljava_lang_Object_2_classLit);
cgguc2.$clinit_UserAgentAsserter = function $clinit_UserAgentAsserter(){
  cgguc2.$clinit_UserAgentAsserter = emptyMethod;
}
;
defineClass(306, 1, {1:1});
cggl.Lcom_google_gwt_useragent_client_UserAgentAsserter_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentAsserter', 306, cggl.Ljava_lang_Object_2_classLit);
cgguc2.$clinit_UserAgentAsserter$UserAgentAsserterDisabled = function $clinit_UserAgentAsserter$UserAgentAsserterDisabled(){
  cgguc2.$clinit_UserAgentAsserter$UserAgentAsserterDisabled = emptyMethod;
  jl.$clinit_Object();
}
;
cgguc2.UserAgentAsserter$UserAgentAsserterDisabled = function UserAgentAsserter$UserAgentAsserterDisabled(){
  cgguc2.$clinit_UserAgentAsserter$UserAgentAsserterDisabled();
  Object_0.call(this);
  this.$init_122();
}
;
defineClass(168, 1, {83:1, 1:1}, cgguc2.UserAgentAsserter$UserAgentAsserterDisabled);
_.$init_122 = function $init_122(){
}
;
_.onModuleLoad = function onModuleLoad_1(){
}
;
cggl.Lcom_google_gwt_useragent_client_UserAgentAsserter$UserAgentAsserterDisabled_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentAsserter/UserAgentAsserterDisabled', 168, cggl.Ljava_lang_Object_2_classLit);
cgguc2.$clinit_UserAgentAsserter$UserAgentAssertionError = function $clinit_UserAgentAsserter$UserAgentAssertionError(){
  cgguc2.$clinit_UserAgentAsserter$UserAgentAssertionError = emptyMethod;
}
;
defineClass(307, 21, {4:1, 50:1, 1:1, 13:1});
cggl.Lcom_google_gwt_useragent_client_UserAgentAsserter$UserAgentAssertionError_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentAsserter/UserAgentAssertionError', 307, cggl.Ljava_lang_AssertionError_2_classLit);
ja.$clinit_Color = function $clinit_Color(){
  ja.$clinit_Color = emptyMethod;
  jl.$clinit_Object();
  ja.white = new ja.Color_1(255, 255, 255);
  ja.WHITE = ja.white;
  ja.gray = new ja.Color_1(128, 128, 128);
  ja.black = new ja.Color_1(0, 0, 0);
}
;
ja.Color = function Color(red, green, blue, alpha_0){
  ja.$clinit_Color();
  ja.Color_2.call(this, round_int(red * 255 + 0.5), round_int(green * 255 + 0.5), round_int(blue * 255 + 0.5), round_int(alpha_0 * 255 + 0.5));
  this.realRGBValues = initUnidimensionalArray(cggl.F_classLit, {4:1, 1:1}, 5, 3, 15, 1);
  this.realRGBValues[0] = red;
  this.realRGBValues[1] = green;
  this.realRGBValues[2] = blue;
  this.alphaValue = alpha_0;
}
;
ja.Color_0 = function Color_0(rgb){
  ja.$clinit_Color();
  Object_0.call(this);
  this.$init_125();
  this.rgbValue = -16777216 | rgb;
}
;
ja.Color_1 = function Color_1(red, green, blue){
  ja.$clinit_Color();
  ja.Color_2.call(this, red, green, blue, 255);
}
;
ja.Color_2 = function Color_2(red, green, blue, alpha_0){
  Object_0.call(this);
  this.$init_125();
  this.rgbValue = (alpha_0 & 255) << 24 | (red & 255) << 16 | (green & 255) << 8 | (blue & 255) << 0;
}
;
ja.RGBtoHSB = function RGBtoHSB(r, g, b, hsbvals){
  ja.$clinit_Color();
  return ja.RGBtoHSV(r / 255, g / 255, b / 255, hsbvals);
}
;
ja.RGBtoHSV = function RGBtoHSV(r, g, b, hsbvals){
  var brightness, delta, hue, max_0, min_0, saturation;
  hue = 0;
  saturation = 0;
  brightness = 0;
  if (jsEquals(hsbvals, null)) {
    hsbvals = initUnidimensionalArray(cggl.F_classLit, {4:1, 1:1}, 5, 3, 15, 1);
  }
  min_0 = $wnd.Math.min(r, $wnd.Math.min(g, b));
  max_0 = $wnd.Math.max(r, $wnd.Math.max(g, b));
  brightness = max_0;
  delta = max_0 - min_0;
  if (delta == 0) {
    brightness = min_0;
    hue = 0;
    hsbvals[0] = hue;
    hsbvals[1] = saturation;
    hsbvals[2] = brightness;
    return hsbvals;
  }
  if (max_0 != 0)
    saturation = delta / max_0;
  else {
    saturation = 0;
    hue = 0;
    hsbvals[0] = hue;
    hsbvals[1] = saturation;
    hsbvals[2] = brightness;
    return hsbvals;
  }
  if (r == max_0)
    hue = (g - b) / delta;
  else if (g == max_0)
    hue = 2 + (b - r) / delta;
  else 
    hue = 4 + (r - g) / delta;
  hue *= 60;
  if (hue < 0)
    hue += 360;
  hsbvals[0] = hue / 360;
  hsbvals[1] = saturation;
  hsbvals[2] = brightness;
  return hsbvals;
}
;
defineClass(28, 1, {1:1}, ja.Color, ja.Color_0, ja.Color_1);
_.$init_125 = function $init_125(){
  this.realRGBValues = null;
  this.alphaValue = 0;
}
;
_.getAlpha = function getAlpha(){
  return this.rgbValue >> 24 & 255;
}
;
_.getBlue = function getBlue(){
  return this.rgbValue >> 0 & 255;
}
;
_.getGreen = function getGreen(){
  return this.rgbValue >> 8 & 255;
}
;
_.getRGBComponents = function getRGBComponents(compArray){
  var f;
  if (jsEquals(compArray, null)) {
    f = initUnidimensionalArray(cggl.F_classLit, {4:1, 1:1}, 5, 4, 15, 1);
  }
   else {
    f = compArray;
  }
  if (jsEquals(this.realRGBValues, null)) {
    f[0] = this.getRed() / 255;
    f[1] = this.getGreen() / 255;
    f[2] = this.getBlue() / 255;
    f[3] = this.getAlpha() / 255;
  }
   else {
    f[0] = this.realRGBValues[0];
    f[1] = this.realRGBValues[1];
    f[2] = this.realRGBValues[2];
    f[3] = this.alphaValue;
  }
  return f;
}
;
_.getRed = function getRed(){
  return this.rgbValue >> 16 & 255;
}
;
_.alphaValue = 0;
_.rgbValue = 0;
cggl.Ljava_awt_Color_2_classLit = createForClass('java.awt', 'Color', 28, cggl.Ljava_lang_Object_2_classLit);
ja.$clinit_Font = function $clinit_Font(){
  ja.$clinit_Font = emptyMethod;
  jl.$clinit_Object();
  ja.helveticaSizes = stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [5.55, 15, 15, 15, 15, 15, 15, 15, 15, 5.56, 5.56, 5.56, 5.56, 5.56, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 5.56, 5.56, 7.1, 11.12, 11.12, 17.78, 13.34, 3.82, 6.66, 6.66, 7.78, 11.68, 5.56, 6.66, 5.56, 5.56, 11.12, 11.12, 11.12, 11.12, 11.12, 11.12, 11.12, 11.12, 11.12, 11.12, 5.56, 5.56, 11.68, 11.68, 11.68, 11.12, 20.3, 13.34, 13.34, 14.44, 14.44, 13.34, 12.22, 15.56, 14.44, 5.56, 10, 13.34, 11.12, 16.66, 14.44, 15.56, 13.34, 15.56, 14.44, 13.34, 12.22, 14.44, 13.34, 18.88, 13.34, 13.34, 12.22, 5.56, 5.56, 5.56, 9.38, 11.12, 6.66, 11.12, 11.12, 10, 11.12, 11.12, 5.56, 11.12, 11.12, 4.44, 4.44, 10, 4.44, 16.66, 11.12, 11.12, 11.12, 11.12, 6.66, 10, 5.56, 11.12, 10, 14.44, 10, 10, 10, 6.68, 5.2, 6.68, 11.68, 10.5]);
}
;
ja.Font = function Font(name_0, type_0, size_0){
  ja.$clinit_Font();
  Object_0.call(this);
  this.$init_126();
  this.name_0 = name_0;
  this.size_0 = size_0;
}
;
defineClass(153, 1, {1:1}, ja.Font);
_.$init_126 = function $init_126(){
}
;
_.getCharWidth = function getCharWidth(ch_0){
  var width_0;
  if (ch_0 < 128) {
    width_0 = ja.helveticaSizes[ch_0];
  }
   else {
    width_0 = 5.56;
  }
  return width_0 * this.size_0 / 20;
}
;
_.getName_0 = function getName_2(){
  return this.name_0;
}
;
_.getSize_0 = function getSize_2(){
  return this.size_0;
}
;
_.getStringBounds = function getStringBounds(theString, fontRenderContext){
  var width_0;
  width_0 = this.getStringWidth_0(theString);
  return new jag.Rectangle2D$Double_0(0, 0, width_0, 0);
}
;
_.getStringWidth_0 = function getStringWidth_0(text_0){
  var ch_0, i, n, total;
  if (jl.equals_Ljava_lang_Object__Z__devirtual$_2(this.name_0, 'Helvetica')) {
    total = 0;
    for (i = 0 , n = jl.length__I__devirtual$_0(text_0); i < n; i++) {
      ch_0 = jl.charAt_I_C__devirtual$_0(text_0, i);
      total += this.getCharWidth(ch_0);
    }
    return total;
  }
   else {
    return this.getStringWidthCanvas(text_0);
  }
}
;
_.getStringWidthCanvas = function getStringWidthCanvas(text_0){
  var canvas = ja.canvas_0;
  if (!canvas) {
    canvas = $doc.createElement('canvas');
    ja.canvas_0 = canvas;
  }
  var f = '' + this.size_0 + 'px ' + this.name_0;
  var ctx = canvas.getContext('2d');
  ctx.font = f;
  var text_0 = ctx.measureText(text_0);
  return text_0.width;
}
;
_.size_0 = 0;
ja.PLAIN = 0;
ja.canvas_0 = null;
cggl.Ljava_awt_Font_2_classLit = createForClass('java.awt', 'Font', 153, cggl.Ljava_lang_Object_2_classLit);
ja.$clinit_Graphics2D = function $clinit_Graphics2D(){
  ja.$clinit_Graphics2D = emptyMethod;
  jl.$clinit_Object();
}
;
ja.Graphics2D = function Graphics2D(){
  ja.$clinit_Graphics2D();
  Object_0.call(this);
  this.$init_127();
}
;
defineClass(254, 1, {1:1}, ja.Graphics2D);
_.$init_127 = function $init_127(){
}
;
_.getFontRenderContext = function getFontRenderContext(){
  return new jaf.FontRenderContext;
}
;
cggl.Ljava_awt_Graphics2D_2_classLit = createForClass('java.awt', 'Graphics2D', 254, cggl.Ljava_lang_Object_2_classLit);
ja.$clinit_Shape = function $clinit_Shape(){
  ja.$clinit_Shape = emptyMethod;
}
;
cggl.Ljava_awt_Shape_2_classLit = createForInterface('java.awt', 'Shape');
jaf.$clinit_FontRenderContext = function $clinit_FontRenderContext(){
  jaf.$clinit_FontRenderContext = emptyMethod;
  jl.$clinit_Object();
}
;
jaf.FontRenderContext = function FontRenderContext(){
  jaf.$clinit_FontRenderContext();
  Object_0.call(this);
  this.$init_128();
}
;
defineClass(266, 1, {1:1}, jaf.FontRenderContext);
_.$init_128 = function $init_128(){
}
;
cggl.Ljava_awt_font_FontRenderContext_2_classLit = createForClass('java.awt.font', 'FontRenderContext', 266, cggl.Ljava_lang_Object_2_classLit);
jag.$clinit_Point2D = function $clinit_Point2D(){
  jag.$clinit_Point2D = emptyMethod;
  jl.$clinit_Object();
}
;
jag.Point2D = function Point2D(){
  jag.$clinit_Point2D();
  Object_0.call(this);
  this.$init_129();
}
;
defineClass(63, 1, {63:1, 1:1});
_.$init_129 = function $init_129(){
}
;
_.equals_0 = function equals_11(obj){
  var p2d;
  if (this === obj)
    return true;
  if (instanceOf(obj, 63)) {
    p2d = castTo(obj, 63);
    return this.getX() == p2d.getX() && this.getY() == p2d.getY();
  }
  return getClassPrototype(1).equals_0.call(this, obj);
}
;
_.hashCode_0 = function hashCode_3(){
  var sum;
  sum = this.getX() + this.getY();
  return round_int(sum) * 37;
}
;
cggl.Ljava_awt_geom_Point2D_2_classLit = createForClass('java.awt.geom', 'Point2D', 63, cggl.Ljava_lang_Object_2_classLit);
jag.$clinit_Point2D$Double = function $clinit_Point2D$Double(){
  jag.$clinit_Point2D$Double = emptyMethod;
  jag.$clinit_Point2D();
}
;
jag.Point2D$Double = function Point2D$Double(){
  jag.$clinit_Point2D$Double();
  jag.Point2D.call(this);
  this.$init_130();
}
;
jag.Point2D$Double_0 = function Point2D$Double_0(x_0, y_0){
  jag.$clinit_Point2D$Double();
  jag.Point2D.call(this);
  this.$init_130();
  this.x_0 = x_0;
  this.y_0 = y_0;
}
;
defineClass(48, 63, {63:1, 48:1, 4:1, 1:1}, jag.Point2D$Double, jag.Point2D$Double_0);
_.$init_130 = function $init_130(){
}
;
_.getX = function getX(){
  return this.x_0;
}
;
_.getY = function getY(){
  return this.y_0;
}
;
_.x_0 = 0;
_.y_0 = 0;
cggl.Ljava_awt_geom_Point2D$Double_2_classLit = createForClass('java.awt.geom', 'Point2D/Double', 48, cggl.Ljava_awt_geom_Point2D_2_classLit);
jag.$clinit_Point2D$Float = function $clinit_Point2D$Float(){
  jag.$clinit_Point2D$Float = emptyMethod;
}
;
defineClass(417, 63, {63:1, 1:1});
cggl.Ljava_awt_geom_Point2D$Float_2_classLit = createForClass('java.awt.geom', 'Point2D/Float', 417, cggl.Ljava_awt_geom_Point2D_2_classLit);
jag.$clinit_RectangularShape = function $clinit_RectangularShape(){
  jag.$clinit_RectangularShape = emptyMethod;
  jl.$clinit_Object();
}
;
jag.RectangularShape = function RectangularShape(){
  jag.$clinit_RectangularShape();
  Object_0.call(this);
  this.$init_131();
}
;
defineClass(226, 1, {1:1});
_.$init_131 = function $init_131(){
}
;
_.contains_3 = function contains_2(r){
  return this.contains_2(r.getX(), r.getY(), r.getWidth(), r.getHeight());
}
;
_.getMaxX = function getMaxX(){
  return this.getX() + this.getWidth();
}
;
_.getMaxY = function getMaxY(){
  return this.getY() + this.getHeight();
}
;
_.getMinX = function getMinX(){
  return this.getX();
}
;
_.getMinY = function getMinY(){
  return this.getY();
}
;
_.setFrameFromDiagonal = function setFrameFromDiagonal(x1, y1, x2, y2){
  var t;
  if (x2 < x1) {
    t = x1;
    x1 = x2;
    x2 = t;
  }
  if (y2 < y1) {
    t = y1;
    y1 = y2;
    y2 = t;
  }
  this.setFrame(x1, y1, x2 - x1, y2 - y1);
}
;
cggl.Ljava_awt_geom_RectangularShape_2_classLit = createForClass('java.awt.geom', 'RectangularShape', 226, cggl.Ljava_lang_Object_2_classLit);
jag.$clinit_Rectangle2D = function $clinit_Rectangle2D(){
  jag.$clinit_Rectangle2D = emptyMethod;
  jag.$clinit_RectangularShape();
}
;
jag.Rectangle2D = function Rectangle2D(){
  jag.$clinit_Rectangle2D();
  jag.RectangularShape.call(this);
  this.$init_132();
}
;
jag.union = function union(src1, src2, dest){
  jag.$clinit_Rectangle2D();
  var x1, x2, y1, y2;
  x1 = $wnd.Math.min(src1.getMinX(), src2.getMinX());
  y1 = $wnd.Math.min(src1.getMinY(), src2.getMinY());
  x2 = $wnd.Math.max(src1.getMaxX(), src2.getMaxX());
  y2 = $wnd.Math.max(src1.getMaxY(), src2.getMaxY());
  dest.setFrameFromDiagonal(x1, y1, x2, y2);
}
;
defineClass(53, 226, {53:1, 1:1});
_.$init_132 = function $init_132(){
}
;
_.contains_1 = function contains_3(x_0, y_0){
  var x0, y0;
  x0 = this.getX();
  y0 = this.getY();
  return x_0 >= x0 && y_0 >= y0 && x_0 < x0 + this.getWidth() && y_0 < y0 + this.getHeight();
}
;
_.contains_2 = function contains_4(x_0, y_0, w, h){
  var x0, y0;
  if (this.isEmpty_1() || w <= 0 || h <= 0) {
    return false;
  }
  x0 = this.getX();
  y0 = this.getY();
  return x_0 >= x0 && y_0 >= y0 && x_0 + w <= x0 + this.getWidth() && y_0 + h <= y0 + this.getHeight();
}
;
_.equals_0 = function equals_12(obj){
  var r2d;
  if (obj === this) {
    return true;
  }
  if (instanceOf(obj, 53)) {
    r2d = castTo(obj, 53);
    return this.getX() == r2d.getX() && this.getY() == r2d.getY() && this.getWidth() == r2d.getWidth() && this.getHeight() == r2d.getHeight();
  }
  return false;
}
;
_.hashCode_0 = function hashCode_4(){
  var bits;
  bits = doubleToLongBits(this.getX());
  bits = add_10(bits, mul_0(doubleToLongBits(this.getY()), 37));
  bits = add_10(bits, mul_0(doubleToLongBits(this.getWidth()), 43));
  bits = add_10(bits, mul_0(doubleToLongBits(this.getHeight()), 47));
  return toInt_0(bits) ^ toInt_0(shr_0(bits, 32));
}
;
_.setFrame = function setFrame(x_0, y_0, w, h){
  this.setRect(x_0, y_0, w, h);
}
;
jag.OUT_BOTTOM = 8;
jag.OUT_LEFT = 1;
jag.OUT_RIGHT = 4;
jag.OUT_TOP = 2;
cggl.Ljava_awt_geom_Rectangle2D_2_classLit = createForClass('java.awt.geom', 'Rectangle2D', 53, cggl.Ljava_awt_geom_RectangularShape_2_classLit);
jag.$clinit_Rectangle2D$Double = function $clinit_Rectangle2D$Double(){
  jag.$clinit_Rectangle2D$Double = emptyMethod;
  jag.$clinit_Rectangle2D();
}
;
jag.Rectangle2D$Double = function Rectangle2D$Double(){
  jag.$clinit_Rectangle2D$Double();
  jag.Rectangle2D.call(this);
  this.$init_133();
}
;
jag.Rectangle2D$Double_0 = function Rectangle2D$Double_0(x_0, y_0, w, h){
  jag.$clinit_Rectangle2D$Double();
  jag.Rectangle2D.call(this);
  this.$init_133();
  this.setRect(x_0, y_0, w, h);
}
;
defineClass(32, 53, {53:1, 32:1, 1:1}, jag.Rectangle2D$Double, jag.Rectangle2D$Double_0);
_.$init_133 = function $init_133(){
}
;
_.createUnion = function createUnion(r){
  var dest;
  dest = new jag.Rectangle2D$Double;
  jag.union(this, r, dest);
  return dest;
}
;
_.getHeight = function getHeight_0(){
  return this.height;
}
;
_.getWidth = function getWidth_0(){
  return this.width_0;
}
;
_.getX = function getX_0(){
  return this.x_0;
}
;
_.getY = function getY_0(){
  return this.y_0;
}
;
_.isEmpty_1 = function isEmpty_2(){
  return this.width_0 <= 0 || this.height <= 0;
}
;
_.setRect = function setRect(x_0, y_0, w, h){
  this.x_0 = x_0;
  this.y_0 = y_0;
  this.width_0 = w;
  this.height = h;
}
;
_.height = 0;
_.width_0 = 0;
_.x_0 = 0;
_.y_0 = 0;
cggl.Ljava_awt_geom_Rectangle2D$Double_2_classLit = createForClass('java.awt.geom', 'Rectangle2D/Double', 32, cggl.Ljava_awt_geom_Rectangle2D_2_classLit);
jag.$clinit_Rectangle2D$Float = function $clinit_Rectangle2D$Float(){
  jag.$clinit_Rectangle2D$Float = emptyMethod;
}
;
defineClass(402, 53, {53:1, 1:1});
cggl.Ljava_awt_geom_Rectangle2D$Float_2_classLit = createForClass('java.awt.geom', 'Rectangle2D/Float', 402, cggl.Ljava_awt_geom_Rectangle2D_2_classLit);
jai.$clinit_BufferedImage = function $clinit_BufferedImage(){
  jai.$clinit_BufferedImage = emptyMethod;
  jl.$clinit_Object();
}
;
jai.BufferedImage = function BufferedImage(width_0, height, typeIntArgb){
  jai.$clinit_BufferedImage();
  Object_0.call(this);
  this.$init_134();
}
;
defineClass(253, 1, {1:1}, jai.BufferedImage);
_.$init_134 = function $init_134(){
}
;
_.createGraphics = function createGraphics(){
  return new ja.Graphics2D;
}
;
jai.TYPE_CUSTOM = 0;
jai.TYPE_INT_ARGB = 2;
jai.TYPE_INT_ARGB_PRE = 3;
jai.TYPE_INT_RGB = 1;
cggl.Ljava_awt_image_BufferedImage_2_classLit = createForClass('java.awt.image', 'BufferedImage', 253, cggl.Ljava_lang_Object_2_classLit);
ji.$clinit_Reader = function $clinit_Reader(){
  ji.$clinit_Reader = emptyMethod;
  jl.$clinit_Object();
}
;
ji.Reader = function Reader(){
  ji.$clinit_Reader();
  Object_0.call(this);
  this.$init_135();
}
;
defineClass(148, 1, {1:1});
_.$init_135 = function $init_135(){
}
;
cggl.Ljava_io_Reader_2_classLit = createForClass('java.io', 'Reader', 148, cggl.Ljava_lang_Object_2_classLit);
ji.$clinit_BufferedReader = function $clinit_BufferedReader(){
  ji.$clinit_BufferedReader = emptyMethod;
  ji.$clinit_Reader();
}
;
ji.BufferedReader = function BufferedReader(source){
  ji.$clinit_BufferedReader();
  ji.Reader.call(this);
  this.$init_136();
  this.source = source;
  this.savedNextChar = -2;
}
;
defineClass(138, 148, {1:1}, ji.BufferedReader);
_.$init_136 = function $init_136(){
}
;
_.close_0 = function close_1(){
}
;
_.getSource = function getSource(){
  return this.source;
}
;
_.read_0 = function read(){
  var result;
  result = -1;
  if (this.savedNextChar != -2) {
    result = this.savedNextChar;
    this.savedNextChar = -2;
  }
   else {
    result = this.getSource().read_0();
  }
  return result;
}
;
_.readLine = function readLine(){
  var eol, nextChar, sb;
  nextChar = this.read_0();
  if (nextChar == -1)
    return null;
  sb = new jl.StringBuilder;
  eol = false;
  while (!eol) {
    if (nextChar == 10) {
      eol = true;
    }
     else if (nextChar == 13) {
      eol = true;
      nextChar = this.read_0();
      if (nextChar != 10) {
        this.savedNextChar = nextChar;
      }
    }
    if (!eol) {
      if (nextChar == -1) {
        break;
      }
      sb.append_1(narrow_char(nextChar));
      nextChar = this.read_0();
    }
  }
  return sb.toString_0();
}
;
_.savedNextChar = 0;
cggl.Ljava_io_BufferedReader_2_classLit = createForClass('java.io', 'BufferedReader', 138, cggl.Ljava_io_Reader_2_classLit);
jl.$clinit_AutoCloseable = function $clinit_AutoCloseable(){
  jl.$clinit_AutoCloseable = emptyMethod;
}
;
cggl.Ljava_lang_AutoCloseable_2_classLit = createForInterface('java.lang', 'AutoCloseable');
ji.$clinit_Closeable = function $clinit_Closeable(){
  ji.$clinit_Closeable = emptyMethod;
}
;
cggl.Ljava_io_Closeable_2_classLit = createForInterface('java.io', 'Closeable');
ji.$clinit_Flushable = function $clinit_Flushable(){
  ji.$clinit_Flushable = emptyMethod;
}
;
cggl.Ljava_io_Flushable_2_classLit = createForInterface('java.io', 'Flushable');
ji.$clinit_OutputStream = function $clinit_OutputStream(){
  ji.$clinit_OutputStream = emptyMethod;
  jl.$clinit_Object();
}
;
ji.OutputStream = function OutputStream(){
  ji.$clinit_OutputStream();
  Object_0.call(this);
  this.$init_137();
}
;
defineClass(189, 1, {1:1});
_.$init_137 = function $init_137(){
}
;
_.close_0 = function close_2(){
}
;
_.flush = function flush(){
}
;
cggl.Ljava_io_OutputStream_2_classLit = createForClass('java.io', 'OutputStream', 189, cggl.Ljava_lang_Object_2_classLit);
ji.$clinit_FilterOutputStream = function $clinit_FilterOutputStream(){
  ji.$clinit_FilterOutputStream = emptyMethod;
  ji.$clinit_OutputStream();
}
;
ji.FilterOutputStream = function FilterOutputStream(out){
  ji.$clinit_FilterOutputStream();
  ji.OutputStream.call(this);
  this.$init_138();
  this.out = out;
}
;
defineClass(188, 189, {1:1});
_.$init_138 = function $init_138(){
}
;
_.close_0 = function close_3(){
  var e, thrown;
  thrown = null;
  try {
    this.flush();
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      e = $e0;
      thrown = e;
    }
     else 
      throw toJs($e0);
  }
  try {
    this.out.close_0();
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 13)) {
      e = $e1;
      if (isNull(thrown)) {
        thrown = e;
      }
    }
     else 
      throw toJs($e1);
  }
  if (isNotNull(thrown)) {
    throw toJs(new ji.IOException_0(thrown));
  }
}
;
_.flush = function flush_0(){
  this.out.flush();
}
;
cggl.Ljava_io_FilterOutputStream_2_classLit = createForClass('java.io', 'FilterOutputStream', 188, cggl.Ljava_io_OutputStream_2_classLit);
ji.$clinit_IOException = function $clinit_IOException(){
  ji.$clinit_IOException = emptyMethod;
  jl.$clinit_Exception();
}
;
ji.IOException = function IOException(message){
  ji.$clinit_IOException();
  jl.Exception_1.call(this, message);
  this.$init_139();
}
;
ji.IOException_0 = function IOException_0(throwable){
  ji.$clinit_IOException();
  jl.Exception_3.call(this, throwable);
  this.$init_139();
}
;
defineClass(52, 11, {52:1, 4:1, 11:1, 1:1, 13:1}, ji.IOException_0);
_.$init_139 = function $init_139(){
}
;
cggl.Ljava_io_IOException_2_classLit = createForClass('java.io', 'IOException', 52, cggl.Ljava_lang_Exception_2_classLit);
ji.$clinit_PrintStream = function $clinit_PrintStream(){
  ji.$clinit_PrintStream = emptyMethod;
  ji.$clinit_FilterOutputStream();
}
;
ji.PrintStream = function PrintStream(out){
  ji.$clinit_PrintStream();
  ji.FilterOutputStream.call(this, out);
  this.$init_140();
}
;
defineClass(136, 188, {1:1}, ji.PrintStream);
_.$init_140 = function $init_140(){
}
;
_.flush = function flush_1(){
}
;
_.print_0 = function print_0(s){
}
;
_.println = function println(s){
}
;
cggl.Ljava_io_PrintStream_2_classLit = createForClass('java.io', 'PrintStream', 136, cggl.Ljava_io_FilterOutputStream_2_classLit);
ji.$clinit_StringReader = function $clinit_StringReader(){
  ji.$clinit_StringReader = emptyMethod;
  ji.$clinit_Reader();
}
;
ji.StringReader = function StringReader(text_0){
  ji.$clinit_StringReader();
  ji.Reader.call(this);
  this.$init_141();
  this.text_0 = text_0;
  this.position = 0;
}
;
defineClass(137, 148, {1:1}, ji.StringReader);
_.$init_141 = function $init_141(){
}
;
_.close_0 = function close_4(){
}
;
_.read_0 = function read_0(){
  return this.position == jl.length__I__devirtual$_0(this.text_0)?-1:jl.charAt_I_C__devirtual$_0(this.text_0, this.position++);
}
;
_.position = 0;
cggl.Ljava_io_StringReader_2_classLit = createForClass('java.io', 'StringReader', 137, cggl.Ljava_io_Reader_2_classLit);
ji.$clinit_UnsupportedEncodingException = function $clinit_UnsupportedEncodingException(){
  ji.$clinit_UnsupportedEncodingException = emptyMethod;
  ji.$clinit_IOException();
}
;
ji.UnsupportedEncodingException = function UnsupportedEncodingException(msg){
  ji.$clinit_UnsupportedEncodingException();
  ji.IOException.call(this, msg);
  this.$init_142();
}
;
defineClass(172, 52, {52:1, 4:1, 11:1, 1:1, 13:1}, ji.UnsupportedEncodingException);
_.$init_142 = function $init_142(){
}
;
cggl.Ljava_io_UnsupportedEncodingException_2_classLit = createForClass('java.io', 'UnsupportedEncodingException', 172, cggl.Ljava_io_IOException_2_classLit);
jl.$clinit_Appendable = function $clinit_Appendable(){
  jl.$clinit_Appendable = emptyMethod;
}
;
cggl.Ljava_lang_Appendable_2_classLit = createForInterface('java.lang', 'Appendable');
jl.$clinit_AbstractStringBuilder = function $clinit_AbstractStringBuilder(){
  jl.$clinit_AbstractStringBuilder = emptyMethod;
  jl.$clinit_Object();
  jl.$clinit_CharSequence();
}
;
jl.AbstractStringBuilder = function AbstractStringBuilder(string){
  jl.$clinit_AbstractStringBuilder();
  Object_0.call(this);
  this.$init_143();
  this.string = string;
}
;
defineClass(86, 1, {84:1, 1:1});
_.$init_143 = function $init_143(){
}
;
_.chars = function chars_0(){
  return jl.$chars(this);
}
;
_.charAt = function charAt(index_0){
  return jl.charAt_I_C__devirtual$_0(this.string, index_0);
}
;
_.getChars = function getChars(srcStart, srcEnd, dst, dstStart){
  jl.getChars_II_CI_V__devirtual$(this.string, srcStart, srcEnd, dst, dstStart);
}
;
_.indexOf_1 = function indexOf_2(x_0){
  return jl.indexOf_Ljava_lang_String__I__devirtual$(this.string, x_0);
}
;
_.indexOf_2 = function indexOf_3(x_0, start_0){
  return jl.indexOf_Ljava_lang_String_I_I__devirtual$(this.string, x_0, start_0);
}
;
_.lastIndexOf_1 = function lastIndexOf_2(s){
  return jl.lastIndexOf_Ljava_lang_String__I__devirtual$(this.string, s);
}
;
_.lastIndexOf_2 = function lastIndexOf_3(s, start_0){
  return jl.lastIndexOf_Ljava_lang_String_I_I__devirtual$(this.string, s, start_0);
}
;
_.length_0 = function length_1(){
  return jl.length__I__devirtual$_0(this.string);
}
;
_.replace0 = function replace0(start_0, end, toInsert){
  this.string = jl.substring_II_Ljava_lang_String___devirtual$(this.string, 0, start_0) + ('' + toInsert) + jl.substring_I_Ljava_lang_String___devirtual$(this.string, end);
}
;
_.setCharAt = function setCharAt(index_0, x_0){
  this.replace0(index_0, index_0 + 1, jl.valueOf_12(x_0));
}
;
_.setLength = function setLength(newLength){
  var oldLength;
  oldLength = this.length_0();
  if (newLength < oldLength) {
    this.string = jl.substring_II_Ljava_lang_String___devirtual$(this.string, 0, newLength);
  }
   else if (newLength > oldLength) {
    this.string += '' + jl.valueOf_19(initUnidimensionalArray(cggl.C_classLit, {4:1, 1:1}, 5, newLength - oldLength, 15, 1));
  }
}
;
_.subSequence = function subSequence(start_0, end){
  return jl.substring_II_Ljava_lang_String___devirtual$(this.string, start_0, end);
}
;
_.substring_0 = function substring(begin){
  return jl.substring_I_Ljava_lang_String___devirtual$(this.string, begin);
}
;
_.substring_1 = function substring_0(begin, end){
  return jl.substring_II_Ljava_lang_String___devirtual$(this.string, begin, end);
}
;
_.toString_0 = function toString_13(){
  return this.string;
}
;
cggl.Ljava_lang_AbstractStringBuilder_2_classLit = createForClass('java.lang', 'AbstractStringBuilder', 86, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_ArithmeticException = function $clinit_ArithmeticException(){
  jl.$clinit_ArithmeticException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.ArithmeticException = function ArithmeticException(explanation){
  jl.$clinit_ArithmeticException();
  jl.RuntimeException_1.call(this, explanation);
  this.$init_144();
}
;
defineClass(262, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.ArithmeticException);
_.$init_144 = function $init_144(){
}
;
cggl.Ljava_lang_ArithmeticException_2_classLit = createForClass('java.lang', 'ArithmeticException', 262, cggl.Ljava_lang_RuntimeException_2_classLit);
jl.$clinit_ArrayIndexOutOfBoundsException = function $clinit_ArrayIndexOutOfBoundsException(){
  jl.$clinit_ArrayIndexOutOfBoundsException = emptyMethod;
  jl.$clinit_IndexOutOfBoundsException();
}
;
jl.ArrayIndexOutOfBoundsException = function ArrayIndexOutOfBoundsException(){
  jl.$clinit_ArrayIndexOutOfBoundsException();
  jl.IndexOutOfBoundsException.call(this);
  this.$init_146();
}
;
jl.ArrayIndexOutOfBoundsException_0 = function ArrayIndexOutOfBoundsException_0(msg){
  jl.$clinit_ArrayIndexOutOfBoundsException();
  jl.IndexOutOfBoundsException_0.call(this, msg);
  this.$init_146();
}
;
defineClass(130, 54, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.ArrayIndexOutOfBoundsException, jl.ArrayIndexOutOfBoundsException_0);
_.$init_146 = function $init_146(){
}
;
cggl.Ljava_lang_ArrayIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'ArrayIndexOutOfBoundsException', 130, cggl.Ljava_lang_IndexOutOfBoundsException_2_classLit);
jl.$clinit_ArrayStoreException = function $clinit_ArrayStoreException(){
  jl.$clinit_ArrayStoreException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.ArrayStoreException = function ArrayStoreException(){
  jl.$clinit_ArrayStoreException();
  jl.RuntimeException.call(this);
  this.$init_147();
}
;
jl.ArrayStoreException_0 = function ArrayStoreException_0(message){
  jl.$clinit_ArrayStoreException();
  jl.RuntimeException_1.call(this, message);
  this.$init_147();
}
;
defineClass(156, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.ArrayStoreException, jl.ArrayStoreException_0);
_.$init_147 = function $init_147(){
}
;
cggl.Ljava_lang_ArrayStoreException_2_classLit = createForClass('java.lang', 'ArrayStoreException', 156, cggl.Ljava_lang_RuntimeException_2_classLit);
jl.$clinit_Byte = function $clinit_Byte(){
  jl.$clinit_Byte = emptyMethod;
  jl.$clinit_Number();
  MIN_VALUE_0 = narrow_byte(128);
  MAX_VALUE_0 = narrow_byte(127);
  BYTES = narrow_int(8 / 8);
  TYPE_0 = cggl.B_classLit;
}
;
jl.Byte = function Byte(value_0){
  jl.Number_0.call(this);
  this.$init_149();
  this.value_0 = value_0;
}
;
function compare_19(x_0, y_0){
  jl.$clinit_Byte();
  return x_0 - y_0;
}

jl.hashCode_7 = function hashCode_7(b){
  return b;
}
;
jl.toString_16 = function toString_16(b){
  return jl.valueOf_15(b);
}
;
jl.valueOf_4 = function valueOf_4(b){
  var rebase, result;
  rebase = b + 128;
  result = (jl.$clinit_Byte$BoxedValues() , jl.boxedValues)[rebase];
  if (isNull(result)) {
    result = (jl.$clinit_Byte$BoxedValues() , jl.boxedValues)[rebase] = new jl.Byte(b);
  }
  return result;
}
;
defineClass(65, 59, {4:1, 65:1, 20:1, 1:1}, jl.Byte);
_.$init_149 = function $init_149(){
}
;
_.compareTo_1 = function compareTo_6(b){
  return this.compareTo_3(castTo(b, 65));
}
;
_.byteValue = function byteValue_0(){
  return this.value_0;
}
;
_.compareTo_3 = function compareTo_5(b){
  return compare_19(this.value_0, b.value_0);
}
;
_.doubleValue = function doubleValue_0(){
  return this.value_0;
}
;
_.equals_0 = function equals_13(o){
  return instanceOf(o, 65) && castTo(o, 65).value_0 == this.value_0;
}
;
_.floatValue = function floatValue(){
  return this.value_0;
}
;
_.hashCode_0 = function hashCode_6(){
  return jl.hashCode_7(this.value_0);
}
;
_.intValue = function intValue_0(){
  return this.value_0;
}
;
_.longValue = function longValue_0(){
  return fromInt_0(this.value_0);
}
;
_.shortValue = function shortValue_0(){
  return this.value_0;
}
;
_.toString_0 = function toString_15(){
  return jl.toString_16(this.value_0);
}
;
_.value_0 = 0;
var BYTES = 0;
var MAX_VALUE_0 = 0;
var MIN_VALUE_0 = 0;
var SIZE = 8;
var TYPE_0;
cggl.Ljava_lang_Byte_2_classLit = createForClass('java.lang', 'Byte', 65, cggl.Ljava_lang_Number_2_classLit);
jl.$clinit_Byte$BoxedValues = function $clinit_Byte$BoxedValues(){
  jl.$clinit_Byte$BoxedValues = emptyMethod;
  jl.$clinit_Object();
  jl.boxedValues = initUnidimensionalArray(cggl.Ljava_lang_Byte_2_classLit, {4:1, 1:1, 8:1}, 65, 256, 0, 1);
}
;
defineClass(368, 1, {1:1});
cggl.Ljava_lang_Byte$BoxedValues_2_classLit = createForClass('java.lang', 'Byte/BoxedValues', 368, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Iterator = function $clinit_Iterator(){
  ju.$clinit_Iterator = emptyMethod;
}
;
ju.$forEachRemaining = function $forEachRemaining(this$static, consumer){
  ji2.checkNotNull_0(consumer);
  while (this$static.hasNext_0()) {
    consumer.accept_0(this$static.next_3());
  }
}
;
ju.$remove = function $remove(this$static){
  throw toJs(new jl.UnsupportedOperationException);
}
;
cggl.Ljava_util_Iterator_2_classLit = createForInterface('java.util', 'Iterator');
ju.$clinit_PrimitiveIterator = function $clinit_PrimitiveIterator(){
  ju.$clinit_PrimitiveIterator = emptyMethod;
}
;
cggl.Ljava_util_PrimitiveIterator_2_classLit = createForInterface('java.util', 'PrimitiveIterator');
ju.$clinit_PrimitiveIterator$OfInt = function $clinit_PrimitiveIterator$OfInt(){
  ju.$clinit_PrimitiveIterator$OfInt = emptyMethod;
}
;
ju.$forEachRemaining_0 = function $forEachRemaining_0(this$static, consumer){
  this$static.forEachRemaining_1(castTo(consumer, 17));
}
;
ju.$forEachRemaining_1 = function $forEachRemaining_1(this$static, consumer){
  if (instanceOf(consumer, 17)) {
    this$static.forEachRemaining_1(castTo(consumer, 17));
  }
   else {
    this$static.forEachRemaining_1(castTo(new ju.PrimitiveIterator$OfInt$1methodref$accept$Type(consumer), 17));
  }
}
;
ju.$forEachRemaining_2 = function $forEachRemaining_2(this$static, consumer){
  ji2.checkNotNull_0(consumer);
  while (this$static.hasNext_0()) {
    consumer.accept(this$static.nextInt());
  }
}
;
ju.$next = function $next(this$static){
  return jl.valueOf_9(this$static.nextInt());
}
;
ju.$next_0 = function $next_0(this$static){
  return this$static.next_2();
}
;
cggl.Ljava_util_PrimitiveIterator$OfInt_2_classLit = createForInterface('java.util', 'PrimitiveIterator/OfInt');
jl.$clinit_CharSequence$1 = function $clinit_CharSequence$1(){
  jl.$clinit_CharSequence$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
  ju.$clinit_PrimitiveIterator$OfInt();
}
;
jl.CharSequence$1 = function CharSequence$1(this$0){
  jl.$clinit_CharSequence$1();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_150();
}
;
defineClass(174, 1, {1:1, 27:1, 176:1}, jl.CharSequence$1);
_.$init_150 = function $init_150(){
}
;
_.forEachRemaining = function forEachRemaining(arg0){
  this.forEachRemaining_1(castTo(arg0, 17));
}
;
_.forEachRemaining_0 = function forEachRemaining_0(consumer){
  ju.$forEachRemaining_1(this, consumer);
}
;
_.forEachRemaining_1 = function forEachRemaining_1(consumer){
  ju.$forEachRemaining_2(this, consumer);
}
;
_.next_2 = function next_1(){
  return ju.$next(this);
}
;
_.next_3 = function next_2(){
  return this.next_2();
}
;
_.remove_1 = function remove_5(){
  ju.$remove(this);
}
;
_.hasNext_0 = function hasNext(){
  return this.cursor < jl.length__I__devirtual$(this.this$01);
}
;
_.nextInt = function nextInt(){
  ji2.checkElement(this.hasNext_0());
  return jl.charAt_I_C__devirtual$(this.this$01, this.cursor++);
}
;
_.cursor = 0;
cggl.Ljava_lang_CharSequence$1_2_classLit = createForClass('java.lang', 'CharSequence/1', 174, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Supplier = function $clinit_Supplier(){
  juf.$clinit_Supplier = emptyMethod;
}
;
cggl.Ljava_util_function_Supplier_2_classLit = createForInterface('java.util.function', 'Supplier');
jl.$clinit_CharSequence$lambda$0$Type = function $clinit_CharSequence$lambda$0$Type(){
  jl.$clinit_CharSequence$lambda$0$Type = emptyMethod;
}
;
jl.CharSequence$lambda$0$Type = function CharSequence$lambda$0$Type($$outer_0){
  jl.$clinit_CharSequence$lambda$0$Type();
  this.$$outer_0 = $$outer_0;
}
;
defineClass(173, 1, {1:1, 36:1}, jl.CharSequence$lambda$0$Type);
_.get_0 = function get_4(){
  return jl.$lambda$0(this.$$outer_0);
}
;
cggl.Ljava_lang_CharSequence$lambda$0$Type_2_classLit = createForClass('java.lang', 'CharSequence/lambda$0$Type', 173, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Character = function $clinit_Character(){
  jl.$clinit_Character = emptyMethod;
  jl.$clinit_Object();
  TYPE_1 = cggl.Ljava_lang_Character_2_classLit;
}
;
function Character(value_0){
  Object_0.call(this);
  this.$init_151();
  this.value_0 = value_0;
}

function charCount_0(codePoint){
  jl.$clinit_Character();
  return codePoint >= 65536?2:1;
}

function checkCriticalArgument(expression){
  jl.$clinit_Character();
  if (!expression) {
    throw toJs(new jl.IllegalArgumentException);
  }
}

function codePointAt(cs, index_0, limit){
  jl.$clinit_Character();
  var hiSurrogate, loSurrogate;
  hiSurrogate = jl.charAt_I_C__devirtual$(cs, index_0++);
  if (isHighSurrogate(hiSurrogate) && index_0 < limit && isLowSurrogate(loSurrogate = jl.charAt_I_C__devirtual$(cs, index_0))) {
    return toCodePoint(hiSurrogate, loSurrogate);
  }
  return hiSurrogate;
}

function codePointBefore(cs, index_0, start_0){
  jl.$clinit_Character();
  var highSurrogate, loSurrogate;
  loSurrogate = jl.charAt_I_C__devirtual$(cs, --index_0);
  if (isLowSurrogate(loSurrogate) && index_0 > start_0 && isHighSurrogate(highSurrogate = jl.charAt_I_C__devirtual$(cs, index_0 - 1))) {
    return toCodePoint(highSurrogate, loSurrogate);
  }
  return loSurrogate;
}

function codePointCount(seq, beginIndex, endIndex){
  jl.$clinit_Character();
  var ch_0, count, idx;
  count = 0;
  for (idx = beginIndex; idx < endIndex;) {
    ch_0 = jl.charAt_I_C__devirtual$(seq, idx++);
    if (isHighSurrogate(ch_0) && idx < endIndex && isLowSurrogate(jl.charAt_I_C__devirtual$(seq, idx))) {
      ++idx;
    }
    ++count;
  }
  return count;
}

function compare_20(x_0, y_0){
  jl.$clinit_Character();
  return x_0 - y_0;
}

function digit_0(c, radix){
  jl.$clinit_Character();
  if (radix < 2 || radix > 36) {
    return -1;
  }
  if (c >= 48 && c < 48 + $wnd.Math.min(radix, 10)) {
    return c - 48;
  }
  if (c >= 97 && c < radix + 97 - 10) {
    return c - 97 + 10;
  }
  if (c >= 65 && c < radix + 65 - 10) {
    return c - 65 + 10;
  }
  return -1;
}

function getHighSurrogate(codePoint){
  jl.$clinit_Character();
  return narrow_char(55296 + (codePoint - 65536 >> 10 & 1023));
}

function getLowSurrogate(codePoint){
  jl.$clinit_Character();
  return narrow_char(56320 + (codePoint - 65536 & 1023));
}

jl.hashCode_9 = function hashCode_9(c){
  return c;
}
;
function isDigit(c){
  jl.$clinit_Character();
  return null != String.fromCharCode(c).match(/\d/);
}

jl.isDigit_0 = function isDigit_0(c){
  jl.$clinit_Character();
  return isDigit(narrow_char(c));
}
;
function isHighSurrogate(ch_0){
  jl.$clinit_Character();
  return ch_0 >= 55296 && ch_0 <= 56319;
}

function isLetter(c){
  jl.$clinit_Character();
  return null != String.fromCharCode(c).match(/[A-Z]/i);
}

function isLowSurrogate(ch_0){
  jl.$clinit_Character();
  return ch_0 >= 56320 && ch_0 <= 57343;
}

function isLowerCase(c){
  jl.$clinit_Character();
  return toLowerCase(c) == c && isLetter(c);
}

jl.isLowerCase_0 = function isLowerCase_0(c){
  jl.$clinit_Character();
  return isLowerCase(narrow_char(c));
}
;
function offsetByCodePoints(seq, index_0, codePointOffset){
  jl.$clinit_Character();
  if (codePointOffset < 0) {
    while (codePointOffset < 0) {
      --index_0;
      if (isLowSurrogate(jl.charAt_I_C__devirtual$(seq, index_0)) && isHighSurrogate(jl.charAt_I_C__devirtual$(seq, index_0 - 1))) {
        --index_0;
      }
      ++codePointOffset;
    }
  }
   else {
    while (codePointOffset > 0) {
      if (isHighSurrogate(jl.charAt_I_C__devirtual$(seq, index_0)) && isLowSurrogate(jl.charAt_I_C__devirtual$(seq, index_0 + 1))) {
        ++index_0;
      }
      ++index_0;
      --codePointOffset;
    }
  }
  return index_0;
}

function toChars(codePoint, dst, dstIndex){
  jl.$clinit_Character();
  checkCriticalArgument(codePoint >= 0 && codePoint <= 1114111);
  if (codePoint >= 65536) {
    dst[dstIndex++] = getHighSurrogate(codePoint);
    dst[dstIndex] = getLowSurrogate(codePoint);
    return 2;
  }
   else {
    dst[dstIndex] = narrow_char(codePoint);
    return 1;
  }
}

function toCodePoint(highSurrogate, lowSurrogate){
  jl.$clinit_Character();
  return 65536 + ((highSurrogate & 1023) << 10) + (lowSurrogate & 1023);
}

function toLowerCase(c){
  jl.$clinit_Character();
  return String.fromCharCode(c).toLowerCase().charCodeAt(0);
}

function toUpperCase(c){
  jl.$clinit_Character();
  return String.fromCharCode(c).toUpperCase().charCodeAt(0);
}

function valueOf_5(c){
  jl.$clinit_Character();
  var result;
  if (c < 128) {
    result = (jl.$clinit_Character$BoxedValues() , jl.boxedValues_0)[c];
    if (isNull(result)) {
      result = (jl.$clinit_Character$BoxedValues() , jl.boxedValues_0)[c] = new Character(c);
    }
    return result;
  }
  return new Character(c);
}

defineClass(60, 1, {4:1, 60:1, 20:1, 1:1}, Character);
_.$init_151 = function $init_151(){
}
;
_.compareTo_1 = function compareTo_8(c){
  return this.compareTo_4(castTo(c, 60));
}
;
_.charValue = function charValue(){
  return this.value_0;
}
;
_.compareTo_4 = function compareTo_7(c){
  return compare_20(this.value_0, c.value_0);
}
;
_.equals_0 = function equals_14(o){
  return instanceOf(o, 60) && castTo(o, 60).value_0 == this.value_0;
}
;
_.hashCode_0 = function hashCode_8(){
  return jl.hashCode_9(this.value_0);
}
;
_.toString_0 = function toString_17(){
  return jl.valueOf_12(this.value_0);
}
;
_.value_0 = 0;
var MAX_CODE_POINT = 1114111;
var MAX_HIGH_SURROGATE = 56319;
var MAX_LOW_SURROGATE = 57343;
var MAX_RADIX = 36;
var MAX_SURROGATE = 57343;
var MAX_VALUE_1 = 65535;
var MIN_CODE_POINT = 0;
var MIN_HIGH_SURROGATE = 55296;
var MIN_LOW_SURROGATE = 56320;
var MIN_RADIX = 2;
var MIN_SUPPLEMENTARY_CODE_POINT = 65536;
var MIN_SURROGATE = 55296;
var MIN_VALUE_1 = 0;
var SIZE_0 = 16;
var TYPE_1;
cggl.Ljava_lang_Character_2_classLit = createForClass('java.lang', 'Character', 60, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Character$BoxedValues = function $clinit_Character$BoxedValues(){
  jl.$clinit_Character$BoxedValues = emptyMethod;
  jl.$clinit_Object();
  jl.boxedValues_0 = initUnidimensionalArray(cggl.Ljava_lang_Character_2_classLit, {4:1, 1:1, 8:1}, 60, 128, 0, 1);
}
;
defineClass(371, 1, {1:1});
cggl.Ljava_lang_Character$BoxedValues_2_classLit = createForClass('java.lang', 'Character/BoxedValues', 371, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Character$CharSequenceAdapter = function $clinit_Character$CharSequenceAdapter(){
  jl.$clinit_Character$CharSequenceAdapter = emptyMethod;
}
;
defineClass(370, 1, {84:1, 1:1});
cggl.Ljava_lang_Character$CharSequenceAdapter_2_classLit = createForClass('java.lang', 'Character/CharSequenceAdapter', 370, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Double$PowersTable = function $clinit_Double$PowersTable(){
  jl.$clinit_Double$PowersTable = emptyMethod;
  jl.$clinit_Object();
  jl.powers = stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [1.3407807929942597E154, 1.157920892373162E77, 3.4028236692093846E38, 1.8446744073709552E19, 4294967296, 65536, 256, 16, 4, 2]);
  jl.invPowers = stampJavaTypeInfo(getClassLiteralForArray(cggl.D_classLit, 1), {14:1, 4:1, 1:1}, 5, 15, [7.458340731200207E-155, 8.636168555094445E-78, 2.9387358770557188E-39, 5.421010862427522E-20, 2.3283064365386963E-10, 1.52587890625E-5, 0.00390625, 0.0625, 0.25, 0.5]);
}
;
defineClass(372, 1, {1:1});
cggl.Ljava_lang_Double$PowersTable_2_classLit = createForClass('java.lang', 'Double/PowersTable', 372, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Float = function $clinit_Float(){
  jl.$clinit_Float = emptyMethod;
  jl.$clinit_Number();
  MIN_EXPONENT_0 = -126;
  NaN_1 = 0 / 0;
  NEGATIVE_INFINITY_0 = -1 / 0;
  POSITIVE_INFINITY_0 = 1 / 0;
  BYTES_1 = narrow_int(32 / 8);
  TYPE_3 = cggl.F_classLit;
}
;
jl.Float = function Float(value_0){
  jl.Number_0.call(this);
  this.$init_154();
  this.value_0 = value_0;
}
;
function compare_22(x_0, y_0){
  jl.$clinit_Float();
  return compare_21(x_0, y_0);
}

jl.hashCode_12 = function hashCode_12(f){
  return round_int(f);
}
;
jl.isInfinite_1 = function isInfinite_1(x_0){
  return jl.isInfinite(x_0);
}
;
jl.isNaN_2 = function isNaN_2(x_0){
  return isNaN(x_0);
}
;
function parseFloat_0(s){
  jl.$clinit_Float();
  var doubleValue;
  doubleValue = jl.__parseAndValidateDouble(s);
  if (doubleValue > 3.4028234663852886E38) {
    return Infinity;
  }
   else if (doubleValue < -3.4028234663852886E38) {
    return -Infinity;
  }
  return doubleValue;
}

jl.toString_21 = function toString_21(b){
  return jl.valueOf_14(b);
}
;
jl.valueOf_8 = function valueOf_8(f){
  return new jl.Float(f);
}
;
defineClass(76, 59, {4:1, 20:1, 76:1, 1:1}, jl.Float);
_.$init_154 = function $init_154(){
}
;
_.compareTo_1 = function compareTo_10(b){
  return this.compareTo_5(castTo(b, 76));
}
;
_.byteValue = function byteValue_1(){
  return round_byte(this.value_0);
}
;
_.compareTo_5 = function compareTo_9(b){
  return compare_22(this.value_0, b.value_0);
}
;
_.doubleValue = function doubleValue_1(){
  return this.value_0;
}
;
_.equals_0 = function equals_15(o){
  return instanceOf(o, 76) && castTo(o, 76).value_0 == this.value_0;
}
;
_.floatValue = function floatValue_0(){
  return this.value_0;
}
;
_.hashCode_0 = function hashCode_11(){
  return jl.hashCode_12(this.value_0);
}
;
_.intValue = function intValue_1(){
  return round_int(this.value_0);
}
;
_.isInfinite = function isInfinite_0(){
  return jl.isInfinite_1(this.value_0);
}
;
_.isNaN_0 = function isNaN_1(){
  return jl.isNaN_2(this.value_0);
}
;
_.longValue = function longValue_1(){
  return fromDouble_0(this.value_0);
}
;
_.shortValue = function shortValue_1(){
  return round_short(this.value_0);
}
;
_.toString_0 = function toString_20(){
  return jl.toString_21(this.value_0);
}
;
_.value_0 = 0;
var BYTES_1 = 0;
var MAX_EXPONENT_0 = 127;
var MAX_VALUE_3 = 3.4028234663852886E38;
var MIN_EXPONENT_0 = 0;
var MIN_NORMAL_0 = 1.1754943508222875E-38;
var MIN_VALUE_3 = 1.401298464324817E-45;
var NEGATIVE_INFINITY_0 = 0;
var NaN_1 = 0;
var POSITIVE_INFINITY_0 = 0;
var POWER_31_INT = 2147483648;
var SIZE_2 = 32;
var TYPE_3;
cggl.Ljava_lang_Float_2_classLit = createForClass('java.lang', 'Float', 76, cggl.Ljava_lang_Number_2_classLit);
jl.$clinit_HasCharSequenceTypeMarker = function $clinit_HasCharSequenceTypeMarker(){
  jl.$clinit_HasCharSequenceTypeMarker = emptyMethod;
}
;
jl.$clinit_HasComparableTypeMarker = function $clinit_HasComparableTypeMarker(){
  jl.$clinit_HasComparableTypeMarker = emptyMethod;
}
;
jl.$clinit_IllegalArgumentException = function $clinit_IllegalArgumentException(){
  jl.$clinit_IllegalArgumentException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.IllegalArgumentException = function IllegalArgumentException(){
  jl.$clinit_IllegalArgumentException();
  jl.RuntimeException.call(this);
  this.$init_155();
}
;
jl.IllegalArgumentException_0 = function IllegalArgumentException_0(message){
  jl.$clinit_IllegalArgumentException();
  jl.RuntimeException_1.call(this, message);
  this.$init_155();
}
;
defineClass(24, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.IllegalArgumentException, jl.IllegalArgumentException_0);
_.$init_155 = function $init_155(){
}
;
cggl.Ljava_lang_IllegalArgumentException_2_classLit = createForClass('java.lang', 'IllegalArgumentException', 24, cggl.Ljava_lang_RuntimeException_2_classLit);
jl.$clinit_Integer$BoxedValues = function $clinit_Integer$BoxedValues(){
  jl.$clinit_Integer$BoxedValues = emptyMethod;
  jl.$clinit_Object();
  jl.boxedValues_1 = initUnidimensionalArray(cggl.Ljava_lang_Integer_2_classLit, {4:1, 1:1, 8:1}, 33, 256, 0, 1);
}
;
defineClass(373, 1, {1:1});
cggl.Ljava_lang_Integer$BoxedValues_2_classLit = createForClass('java.lang', 'Integer/BoxedValues', 373, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Integer$NativeNumber = function $clinit_Integer$NativeNumber(){
  jl.$clinit_Integer$NativeNumber = emptyMethod;
}
;
jl.$clinit_Integer$ReverseNibbles = function $clinit_Integer$ReverseNibbles(){
  jl.$clinit_Integer$ReverseNibbles = emptyMethod;
}
;
defineClass(374, 1, {1:1});
cggl.Ljava_lang_Integer$ReverseNibbles_2_classLit = createForClass('java.lang', 'Integer/ReverseNibbles', 374, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Long = function $clinit_Long(){
  jl.$clinit_Long = emptyMethod;
  jl.$clinit_Number();
  BYTES_3 = narrow_int(64 / 8);
  TYPE_5 = cggl.J_classLit;
}
;
jl.Long = function Long(value_0){
  jl.Number_0.call(this);
  this.$init_158();
  this.value_0 = value_0;
}
;
function compare_24(x_0, y_0){
  jl.$clinit_Long();
  if (lt(x_0, y_0)) {
    return -1;
  }
   else if (gt(x_0, y_0)) {
    return 1;
  }
   else {
    return 0;
  }
}

jl.hashCode_16 = function hashCode_16(l){
  return toInt_0(l);
}
;
jl.toString_25 = function toString_25(value_0){
  return jl.valueOf_16(value_0);
}
;
jl.valueOf_10 = function valueOf_10(i){
  var rebase, result;
  if (gt(i, fromInt_0(-129)) && lt(i, 128)) {
    rebase = toInt_0(i) + 128;
    result = (jl.$clinit_Long$BoxedValues() , jl.boxedValues_2)[rebase];
    if (isNull(result)) {
      result = (jl.$clinit_Long$BoxedValues() , jl.boxedValues_2)[rebase] = new jl.Long(i);
    }
    return result;
  }
  return new jl.Long(i);
}
;
defineClass(61, 59, {4:1, 20:1, 61:1, 1:1}, jl.Long);
_.$init_158 = function $init_158(){
}
;
_.compareTo_1 = function compareTo_14(b){
  return this.compareTo_7(castTo(b, 61));
}
;
_.byteValue = function byteValue_3(){
  return narrow_byte(toInt_0(this.value_0));
}
;
_.compareTo_7 = function compareTo_13(b){
  return compare_24(this.value_0, b.value_0);
}
;
_.doubleValue = function doubleValue_3(){
  return toDouble_0(this.value_0);
}
;
_.equals_0 = function equals_17(o){
  return instanceOf(o, 61) && eq(castTo(o, 61).value_0, this.value_0);
}
;
_.floatValue = function floatValue_2(){
  return toDouble_0(this.value_0);
}
;
_.hashCode_0 = function hashCode_15(){
  return jl.hashCode_16(this.value_0);
}
;
_.intValue = function intValue_3(){
  return toInt_0(this.value_0);
}
;
_.longValue = function longValue_3(){
  return this.value_0;
}
;
_.shortValue = function shortValue_3(){
  return narrow_short(toInt_0(this.value_0));
}
;
_.toString_0 = function toString_24(){
  return jl.toString_25(this.value_0);
}
;
_.value_0 = 0;
var BYTES_3 = 0;
var MAX_VALUE_5 = {l:4194303, m:4194303, h:524287};
var MIN_VALUE_5 = {l:0, m:0, h:524288};
var SIZE_4 = 64;
var TYPE_5;
cggl.Ljava_lang_Long_2_classLit = createForClass('java.lang', 'Long', 61, cggl.Ljava_lang_Number_2_classLit);
jl.$clinit_Long$BoxedValues = function $clinit_Long$BoxedValues(){
  jl.$clinit_Long$BoxedValues = emptyMethod;
  jl.$clinit_Object();
  jl.boxedValues_2 = initUnidimensionalArray(cggl.Ljava_lang_Long_2_classLit, {4:1, 1:1, 8:1}, 61, 256, 0, 1);
}
;
defineClass(375, 1, {1:1});
cggl.Ljava_lang_Long$BoxedValues_2_classLit = createForClass('java.lang', 'Long/BoxedValues', 375, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Math = function $clinit_Math(){
  jl.$clinit_Math = emptyMethod;
  jl.$clinit_Object();
  jl.PI_OVER_180 = 3.141592653589793 / 180;
  jl.PI_UNDER_180 = 180 / 3.141592653589793;
}
;
jl.log10 = function log10(x_0){
  jl.$clinit_Math();
  return $wnd.Math.log(x_0) * (jl.$clinit_Math$NativeMath() , $wnd.Math.LOG10E);
}
;
jl.round_0 = function round_0(x_0){
  jl.$clinit_Math();
  return fromDouble_0($wnd.Math.round(x_0));
}
;
defineClass(389, 1, {1:1});
jl.E_0 = 2.718281828459045;
jl.PI_0 = 3.141592653589793;
jl.PI_OVER_180 = 0;
jl.PI_UNDER_180 = 0;
cggl.Ljava_lang_Math_2_classLit = createForClass('java.lang', 'Math', 389, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Math$NativeMath = function $clinit_Math$NativeMath(){
  jl.$clinit_Math$NativeMath = emptyMethod;
  jl.$clinit_Object();
}
;
jl.$clinit_NegativeArraySizeException = function $clinit_NegativeArraySizeException(){
  jl.$clinit_NegativeArraySizeException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.NegativeArraySizeException = function NegativeArraySizeException(message){
  jl.$clinit_NegativeArraySizeException();
  jl.RuntimeException_1.call(this, message);
  this.$init_159();
}
;
defineClass(282, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.NegativeArraySizeException);
_.$init_159 = function $init_159(){
}
;
cggl.Ljava_lang_NegativeArraySizeException_2_classLit = createForClass('java.lang', 'NegativeArraySizeException', 282, cggl.Ljava_lang_RuntimeException_2_classLit);
jl.$clinit_Number$__Decode = function $clinit_Number$__Decode(){
  jl.$clinit_Number$__Decode = emptyMethod;
  jl.$clinit_Object();
}
;
jl.Number$__Decode = function Number$__Decode(radix, payload){
  jl.$clinit_Number$__Decode();
  Object_0.call(this);
  this.$init_161();
  this.radix = radix;
  this.payload = payload;
}
;
defineClass(212, 1, {1:1}, jl.Number$__Decode);
_.$init_161 = function $init_161(){
}
;
_.radix = 0;
cggl.Ljava_lang_Number$_1_1Decode_2_classLit = createForClass('java.lang', 'Number/__Decode', 212, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_Number$__ParseLong = function $clinit_Number$__ParseLong(){
  jl.$clinit_Number$__ParseLong = emptyMethod;
  var i;
  jl.$clinit_Object();
  jl.maxDigitsForRadix = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [-1, -1, 30, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]);
  jl.maxDigitsRadixPower = initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, 37, 15, 1);
  jl.maxLengthForRadix = stampJavaTypeInfo(getClassLiteralForArray(cggl.I_classLit, 1), {6:1, 4:1, 1:1}, 5, 15, [-1, -1, 63, 40, 32, 28, 25, 23, 21, 20, 19, 19, 18, 18, 17, 17, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13]);
  jl.maxValueForRadix = initUnidimensionalArray(cggl.J_classLit, {4:1, 1:1}, 5, 37, 14, 1);
  {
    for (i = 2; i <= 36; i++) {
      jl.maxDigitsRadixPower[i] = round_int($wnd.Math.pow(i, jl.maxDigitsForRadix[i]));
      jl.maxValueForRadix[i] = div_0({l:4194303, m:4194303, h:524287}, fromInt_0(jl.maxDigitsRadixPower[i]));
    }
  }
}
;
defineClass(369, 1, {1:1});
cggl.Ljava_lang_Number$_1_1ParseLong_2_classLit = createForClass('java.lang', 'Number/__ParseLong', 369, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_NumberFormatException = function $clinit_NumberFormatException(){
  jl.$clinit_NumberFormatException = emptyMethod;
  jl.$clinit_IllegalArgumentException();
}
;
jl.NumberFormatException = function NumberFormatException(message){
  jl.IllegalArgumentException_0.call(this, message);
  this.$init_162();
}
;
jl.forInputString = function forInputString(s){
  jl.$clinit_NumberFormatException();
  return new jl.NumberFormatException('For input string: "' + s + '"');
}
;
jl.forNullInputString = function forNullInputString(){
  jl.$clinit_NumberFormatException();
  return new jl.NumberFormatException('null');
}
;
jl.forRadix = function forRadix(radix){
  jl.$clinit_NumberFormatException();
  return new jl.NumberFormatException('radix ' + radix + ' out of range');
}
;
defineClass(115, 24, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.NumberFormatException);
_.$init_162 = function $init_162(){
}
;
cggl.Ljava_lang_NumberFormatException_2_classLit = createForClass('java.lang', 'NumberFormatException', 115, cggl.Ljava_lang_IllegalArgumentException_2_classLit);
jl.$clinit_Runnable = function $clinit_Runnable(){
  jl.$clinit_Runnable = emptyMethod;
}
;
cggl.Ljava_lang_Runnable_2_classLit = createForInterface('java.lang', 'Runnable');
jl.$clinit_Short = function $clinit_Short(){
  jl.$clinit_Short = emptyMethod;
  jl.$clinit_Number();
  MIN_VALUE_6 = narrow_short(32768);
  MAX_VALUE_6 = narrow_short(32767);
  BYTES_4 = narrow_int(16 / 8);
  TYPE_6 = cggl.S_classLit;
}
;
jl.Short = function Short(value_0){
  jl.Number_0.call(this);
  this.$init_163();
  this.value_0 = value_0;
}
;
function compare_25(x_0, y_0){
  jl.$clinit_Short();
  return x_0 - y_0;
}

jl.hashCode_18 = function hashCode_18(s){
  return s;
}
;
jl.toString_27 = function toString_27(b){
  return jl.valueOf_15(b);
}
;
jl.valueOf_11 = function valueOf_11(s){
  var rebase, result;
  if (s > -129 && s < 128) {
    rebase = s + 128;
    result = (jl.$clinit_Short$BoxedValues() , jl.boxedValues_3)[rebase];
    if (isNull(result)) {
      result = (jl.$clinit_Short$BoxedValues() , jl.boxedValues_3)[rebase] = new jl.Short(s);
    }
    return result;
  }
  return new jl.Short(s);
}
;
defineClass(62, 59, {4:1, 20:1, 1:1, 62:1}, jl.Short);
_.$init_163 = function $init_163(){
}
;
_.compareTo_1 = function compareTo_15(b){
  return this.compareTo_8(castTo(b, 62));
}
;
_.byteValue = function byteValue_4(){
  return narrow_byte(this.value_0);
}
;
_.compareTo_8 = function compareTo_16(b){
  return compare_25(this.value_0, b.value_0);
}
;
_.doubleValue = function doubleValue_4(){
  return this.value_0;
}
;
_.equals_0 = function equals_18(o){
  return instanceOf(o, 62) && castTo(o, 62).value_0 == this.value_0;
}
;
_.floatValue = function floatValue_3(){
  return this.value_0;
}
;
_.hashCode_0 = function hashCode_17(){
  return jl.hashCode_18(this.value_0);
}
;
_.intValue = function intValue_4(){
  return this.value_0;
}
;
_.longValue = function longValue_4(){
  return fromInt_0(this.value_0);
}
;
_.shortValue = function shortValue_4(){
  return this.value_0;
}
;
_.toString_0 = function toString_26(){
  return jl.toString_27(this.value_0);
}
;
_.value_0 = 0;
var BYTES_4 = 0;
var MAX_VALUE_6 = 0;
var MIN_VALUE_6 = 0;
var SIZE_5 = 16;
var TYPE_6;
cggl.Ljava_lang_Short_2_classLit = createForClass('java.lang', 'Short', 62, cggl.Ljava_lang_Number_2_classLit);
jl.$clinit_Short$BoxedValues = function $clinit_Short$BoxedValues(){
  jl.$clinit_Short$BoxedValues = emptyMethod;
  jl.$clinit_Object();
  jl.boxedValues_3 = initUnidimensionalArray(cggl.Ljava_lang_Short_2_classLit, {4:1, 1:1, 8:1}, 62, 256, 0, 1);
}
;
defineClass(376, 1, {1:1});
cggl.Ljava_lang_Short$BoxedValues_2_classLit = createForClass('java.lang', 'Short/BoxedValues', 376, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_StackTraceElement = function $clinit_StackTraceElement(){
  jl.$clinit_StackTraceElement = emptyMethod;
  jl.$clinit_Object();
}
;
jl.StackTraceElement = function StackTraceElement(className, methodName, fileName, lineNumber){
  jl.$clinit_StackTraceElement();
  Object_0.call(this);
  this.$init_164();
  this.className_0 = className;
  this.methodName = methodName;
  this.fileName = fileName;
  this.lineNumber = lineNumber;
}
;
defineClass(42, 1, {4:1, 1:1, 42:1}, jl.StackTraceElement);
_.$init_164 = function $init_164(){
}
;
_.equals_0 = function equals_19(other){
  var st;
  if (instanceOf(other, 42)) {
    st = castTo(other, 42);
    return this.lineNumber == st.lineNumber && ju.equals_32(this.methodName, st.methodName) && ju.equals_32(this.className_0, st.className_0) && ju.equals_32(this.fileName, st.fileName);
  }
  return false;
}
;
_.getMethodName = function getMethodName(){
  return this.methodName;
}
;
_.hashCode_0 = function hashCode_19(){
  return ju.hash_0(stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_lang_Object_2_classLit, 1), {4:1, 1:1, 8:1}, 1, 5, [jl.valueOf_9(this.lineNumber), this.className_0, this.methodName, this.fileName]));
}
;
_.toString_0 = function toString_28(){
  return this.className_0 + '.' + this.methodName + '(' + (jsNotEquals(this.fileName, null)?this.fileName:'Unknown Source') + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';
}
;
_.lineNumber = 0;
cggl.Ljava_lang_StackTraceElement_2_classLit = createForClass('java.lang', 'StackTraceElement', 42, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_String$NativeFunction = function $clinit_String$NativeFunction(){
  jl.$clinit_String$NativeFunction = emptyMethod;
  jl.$clinit_Object();
}
;
jl.$clinit_String$NativeString = function $clinit_String$NativeString(){
  jl.$clinit_String$NativeString = emptyMethod;
  jl.$clinit_Object();
}
;
jl.$clinit_StringBuffer = function $clinit_StringBuffer(){
  jl.$clinit_StringBuffer = emptyMethod;
  jl.$clinit_AbstractStringBuilder();
}
;
jl.StringBuffer = function StringBuffer(){
  jl.$clinit_StringBuffer();
  jl.AbstractStringBuilder.call(this, '');
  this.$init_166();
}
;
defineClass(135, 86, {84:1, 1:1}, jl.StringBuffer);
_.$init_166 = function $init_166(){
}
;
_.append_0 = function append_0(x_0){
  this.string += '' + x_0;
  return this;
}
;
cggl.Ljava_lang_StringBuffer_2_classLit = createForClass('java.lang', 'StringBuffer', 135, cggl.Ljava_lang_AbstractStringBuilder_2_classLit);
jl.$clinit_StringBuilder = function $clinit_StringBuilder(){
  jl.$clinit_StringBuilder = emptyMethod;
  jl.$clinit_AbstractStringBuilder();
}
;
jl.StringBuilder = function StringBuilder(){
  jl.$clinit_StringBuilder();
  jl.AbstractStringBuilder.call(this, '');
  this.$init_167();
}
;
jl.StringBuilder_0 = function StringBuilder_0(ignoredCapacity){
  jl.$clinit_StringBuilder();
  jl.AbstractStringBuilder.call(this, '');
  this.$init_167();
}
;
jl.StringBuilder_1 = function StringBuilder_1(s){
  jl.$clinit_StringBuilder();
  jl.AbstractStringBuilder.call(this, castToString(ji2.checkNotNull_0(s)));
  this.$init_167();
}
;
defineClass(40, 86, {84:1, 1:1}, jl.StringBuilder, jl.StringBuilder_0, jl.StringBuilder_1);
_.$init_167 = function $init_167(){
}
;
_.append_1 = function append_1(x_0){
  this.string += charToString(x_0);
  return this;
}
;
_.append_2 = function append_2(x_0){
  this.string += x_0;
  return this;
}
;
_.append_3 = function append_3(x_0){
  this.string += '' + x_0;
  return this;
}
;
_.append_4 = function append_4(x_0){
  this.string += '' + x_0;
  return this;
}
;
_.append_5 = function append_5(x_0){
  this.string += '' + x_0;
  return this;
}
;
_.delete_0 = function delete_0(start_0, end){
  this.replace0(start_0, end, '');
  return this;
}
;
_.deleteCharAt = function deleteCharAt(start_0){
  this.replace0(start_0, start_0 + 1, '');
  return this;
}
;
_.insert = function insert(index_0, x_0){
  return this.insert_1(index_0, jl.valueOf_12(x_0));
}
;
_.insert_0 = function insert_0(index_0, chars){
  return this.insert_1(index_0, valueOf_17(chars));
}
;
_.insert_1 = function insert_1(index_0, x_0){
  this.replace0(index_0, index_0, x_0);
  return this;
}
;
cggl.Ljava_lang_StringBuilder_2_classLit = createForClass('java.lang', 'StringBuilder', 40, cggl.Ljava_lang_AbstractStringBuilder_2_classLit);
jl.$clinit_System = function $clinit_System(){
  jl.$clinit_System = emptyMethod;
  jl.$clinit_Object();
  jl.err = new ji.PrintStream(null);
  jl.out_0 = new ji.PrintStream(null);
}
;
jl.arrayTypeMatch = function arrayTypeMatch(srcComp, destComp){
  if (srcComp.isPrimitive()) {
    return jl.equals_Ljava_lang_Object__Z__devirtual$(srcComp, destComp);
  }
   else {
    return !destComp.isPrimitive();
  }
}
;
jl.arraycopy = function arraycopy(src_0, srcOfs, dest, destOfs, len){
  jl.$clinit_System();
  var destArray, destComp, destEnd, destType, destlen, srcArray, srcComp, srcType, srclen;
  ji2.checkNotNull_1(src_0, 'src');
  ji2.checkNotNull_1(dest, 'dest');
  srcType = jl.getClass__Ljava_lang_Class___devirtual$(src_0);
  destType = jl.getClass__Ljava_lang_Class___devirtual$(dest);
  ji2.checkArrayType_0(srcType.isArray_0(), 'srcType is not an array');
  ji2.checkArrayType_0(destType.isArray_0(), 'destType is not an array');
  srcComp = srcType.getComponentType();
  destComp = destType.getComponentType();
  ji2.checkArrayType_0(jl.arrayTypeMatch(srcComp, destComp), "Array types don't match");
  srclen = ji2.getLength_0(src_0);
  destlen = ji2.getLength_0(dest);
  if (srcOfs < 0 || destOfs < 0 || len < 0 || srcOfs + len > srclen || destOfs + len > destlen) {
    throw toJs(new jl.IndexOutOfBoundsException);
  }
  if (ji2.isTypeChecked() && !srcComp.isPrimitive() && !jl.equals_Ljava_lang_Object__Z__devirtual$(srcType, destType)) {
    srcArray = castToArray(src_0);
    destArray = castToArray(dest);
    if (maskUndefined(src_0) === maskUndefined(dest) && srcOfs < destOfs) {
      srcOfs += len;
      for (destEnd = destOfs + len; destEnd-- > destOfs;) {
        setCheck(destArray, destEnd, srcArray[--srcOfs]);
      }
    }
     else {
      for (destEnd = destOfs + len; destOfs < destEnd;) {
        setCheck(destArray, destOfs++, srcArray[srcOfs++]);
      }
    }
  }
   else if (len > 0) {
    ji2.copy_1(src_0, srcOfs, dest, destOfs, len);
  }
}
;
defineClass(395, 1, {1:1});
cggl.Ljava_lang_System_2_classLit = createForClass('java.lang', 'System', 395, cggl.Ljava_lang_Object_2_classLit);
jl.$clinit_UnsupportedOperationException = function $clinit_UnsupportedOperationException(){
  jl.$clinit_UnsupportedOperationException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
jl.UnsupportedOperationException = function UnsupportedOperationException(){
  jl.$clinit_UnsupportedOperationException();
  jl.RuntimeException.call(this);
  this.$init_169();
}
;
jl.UnsupportedOperationException_0 = function UnsupportedOperationException_0(message){
  jl.$clinit_UnsupportedOperationException();
  jl.RuntimeException_1.call(this, message);
  this.$init_169();
}
;
defineClass(30, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, jl.UnsupportedOperationException, jl.UnsupportedOperationException_0);
_.$init_169 = function $init_169(){
}
;
cggl.Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('java.lang', 'UnsupportedOperationException', 30, cggl.Ljava_lang_RuntimeException_2_classLit);
jl.$clinit_Void = function $clinit_Void(){
  jl.$clinit_Void = emptyMethod;
}
;
defineClass(166, 1, {1:1, 166:1});
cggl.Ljava_lang_Void_2_classLit = createForClass('java.lang', 'Void', 166, cggl.Ljava_lang_Object_2_classLit);
jnc.$clinit_Charset = function $clinit_Charset(){
  jnc.$clinit_Charset = emptyMethod;
  jl.$clinit_Object();
}
;
jnc.Charset = function Charset(name_0, aliasesIgnored){
  jnc.$clinit_Charset();
  Object_0.call(this);
  this.$init_170();
  this.name_0 = name_0;
}
;
jnc.forName = function forName(charsetName){
  jnc.$clinit_Charset();
  ji2.checkArgument(jsNotEquals(charsetName, null), 'Null charset name');
  charsetName = jl.toUpperCase__Ljava_lang_String___devirtual$(charsetName);
  if (jl.equals_Ljava_lang_Object__Z__devirtual$_2((ji2.$clinit_EmulatedCharset() , ji2.ISO_8859_1).name_1(), charsetName)) {
    return ji2.$clinit_EmulatedCharset() , ji2.ISO_8859_1;
  }
   else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2((ji2.$clinit_EmulatedCharset() , ji2.ISO_LATIN_1).name_1(), charsetName)) {
    return ji2.$clinit_EmulatedCharset() , ji2.ISO_LATIN_1;
  }
   else if (jl.equals_Ljava_lang_Object__Z__devirtual$_2((ji2.$clinit_EmulatedCharset() , ji2.UTF_8).name_1(), charsetName)) {
    return ji2.$clinit_EmulatedCharset() , ji2.UTF_8;
  }
  if ((new RegExp('^[A-Za-z0-9][\\w-:\\.\\+]*$')).test(charsetName)) {
    throw toJs(new jnc.UnsupportedCharsetException(charsetName));
  }
   else {
    throw toJs(new jnc.IllegalCharsetNameException(charsetName));
  }
}
;
defineClass(51, 1, {20:1, 1:1, 51:1});
_.$init_170 = function $init_170(){
}
;
_.compareTo_1 = function compareTo_17(that){
  return this.compareTo_9(castTo(that, 51));
}
;
_.compareTo_9 = function compareTo_18(that){
  return jl.compareToIgnoreCase_Ljava_lang_String__I__devirtual$(this.name_0, that.name_0);
}
;
_.equals_0 = function equals_21(o){
  var that;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 51)) {
    return false;
  }
  that = castTo(o, 51);
  return jl.equals_Ljava_lang_Object__Z__devirtual$_2(this.name_0, that.name_0);
}
;
_.hashCode_0 = function hashCode_20(){
  return jl.hashCode__I__devirtual$_2(this.name_0);
}
;
_.name_1 = function name_2(){
  return this.name_0;
}
;
_.toString_0 = function toString_29(){
  return this.name_0;
}
;
cggl.Ljava_nio_charset_Charset_2_classLit = createForClass('java.nio.charset', 'Charset', 51, cggl.Ljava_lang_Object_2_classLit);
jnc.$clinit_Charset$AvailableCharsets = function $clinit_Charset$AvailableCharsets(){
  jnc.$clinit_Charset$AvailableCharsets = emptyMethod;
}
;
defineClass(348, 1, {1:1});
cggl.Ljava_nio_charset_Charset$AvailableCharsets_2_classLit = createForClass('java.nio.charset', 'Charset/AvailableCharsets', 348, cggl.Ljava_lang_Object_2_classLit);
jnc.$clinit_IllegalCharsetNameException = function $clinit_IllegalCharsetNameException(){
  jnc.$clinit_IllegalCharsetNameException = emptyMethod;
  jl.$clinit_IllegalArgumentException();
}
;
jnc.IllegalCharsetNameException = function IllegalCharsetNameException(charsetName){
  jnc.$clinit_IllegalCharsetNameException();
  jl.IllegalArgumentException_0.call(this, valueOf_17(charsetName));
  this.$init_171();
  this.charsetName = charsetName;
}
;
defineClass(183, 24, {4:1, 11:1, 1:1, 16:1, 13:1}, jnc.IllegalCharsetNameException);
_.$init_171 = function $init_171(){
}
;
cggl.Ljava_nio_charset_IllegalCharsetNameException_2_classLit = createForClass('java.nio.charset', 'IllegalCharsetNameException', 183, cggl.Ljava_lang_IllegalArgumentException_2_classLit);
jnc.$clinit_UnsupportedCharsetException = function $clinit_UnsupportedCharsetException(){
  jnc.$clinit_UnsupportedCharsetException = emptyMethod;
  jl.$clinit_IllegalArgumentException();
}
;
jnc.UnsupportedCharsetException = function UnsupportedCharsetException(charsetName){
  jnc.$clinit_UnsupportedCharsetException();
  jl.IllegalArgumentException_0.call(this, valueOf_17(charsetName));
  this.$init_172();
  this.charsetName = charsetName;
}
;
defineClass(107, 24, {4:1, 11:1, 1:1, 16:1, 13:1, 107:1}, jnc.UnsupportedCharsetException);
_.$init_172 = function $init_172(){
}
;
cggl.Ljava_nio_charset_UnsupportedCharsetException_2_classLit = createForClass('java.nio.charset', 'UnsupportedCharsetException', 107, cggl.Ljava_lang_IllegalArgumentException_2_classLit);
jt.$clinit_NumberFormat_0 = function $clinit_NumberFormat_0(){
  jt.$clinit_NumberFormat_0 = emptyMethod;
  jl.$clinit_Object();
}
;
jt.NumberFormat_1 = function NumberFormat_1(){
  jt.$clinit_NumberFormat_0();
  Object_0.call(this);
  this.$init_173();
}
;
defineClass(265, 1, {1:1});
_.$init_173 = function $init_173(){
}
;
cggl.Ljava_text_NumberFormat_2_classLit = createForClass('java.text', 'NumberFormat', 265, cggl.Ljava_lang_Object_2_classLit);
jt.$clinit_DecimalFormat = function $clinit_DecimalFormat(){
  jt.$clinit_DecimalFormat = emptyMethod;
  jt.$clinit_NumberFormat_0();
}
;
jt.DecimalFormat = function DecimalFormat(pattern){
  jt.$clinit_DecimalFormat();
  jt.NumberFormat_1.call(this);
  this.$init_174();
  this.formatter = cggic.getFormat(pattern);
}
;
jt.DecimalFormat_0 = function DecimalFormat_0(pattern, symbols){
  jt.$clinit_DecimalFormat();
  jt.DecimalFormat.call(this, pattern);
}
;
defineClass(127, 265, {1:1}, jt.DecimalFormat, jt.DecimalFormat_0);
_.$init_174 = function $init_174(){
}
;
_.format = function format_1(number){
  return this.formatter.format(number);
}
;
cggl.Ljava_text_DecimalFormat_2_classLit = createForClass('java.text', 'DecimalFormat', 127, cggl.Ljava_text_NumberFormat_2_classLit);
jt.$clinit_DecimalFormatSymbols = function $clinit_DecimalFormatSymbols(){
  jt.$clinit_DecimalFormatSymbols = emptyMethod;
  jl.$clinit_Object();
}
;
jt.DecimalFormatSymbols = function DecimalFormatSymbols(locale){
  jt.$clinit_DecimalFormatSymbols();
  Object_0.call(this);
  this.$init_175();
}
;
defineClass(281, 1, {1:1}, jt.DecimalFormatSymbols);
_.$init_175 = function $init_175(){
}
;
cggl.Ljava_text_DecimalFormatSymbols_2_classLit = createForClass('java.text', 'DecimalFormatSymbols', 281, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Map = function $clinit_Map(){
  ju.$clinit_Map = emptyMethod;
}
;
ju.$getOrDefault = function $getOrDefault(this$static, key, defaultValue){
  var currentValue;
  currentValue = this$static.get(key);
  return jsEquals(currentValue, null) && !this$static.containsKey(key)?defaultValue:currentValue;
}
;
ju.$putIfAbsent = function $putIfAbsent(this$static, key, value_0){
  var currentValue;
  currentValue = this$static.get(key);
  return jsNotEquals(currentValue, null)?currentValue:this$static.put(key, value_0);
}
;
ju.$replace_1 = function $replace_1(this$static, key, value_0){
  return this$static.containsKey(key)?this$static.put(key, value_0):null;
}
;
cggl.Ljava_util_Map_2_classLit = createForInterface('java.util', 'Map');
ju.$clinit_AbstractMap = function $clinit_AbstractMap(){
  ju.$clinit_AbstractMap = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Map();
}
;
ju.AbstractMap = function AbstractMap(){
  ju.$clinit_AbstractMap();
  Object_0.call(this);
  this.$init_176();
}
;
ju.getEntryValueOrNull = function getEntryValueOrNull(entry){
  ju.$clinit_AbstractMap();
  return isNull(entry)?null:entry.getValue_0();
}
;
defineClass(101, 1, {1:1, 46:1});
_.$init_176 = function $init_176(){
}
;
_.getOrDefault = function getOrDefault(key, defaultValue){
  return ju.$getOrDefault(this, key, defaultValue);
}
;
_.putIfAbsent = function putIfAbsent(key, value_0){
  return ju.$putIfAbsent(this, key, value_0);
}
;
_.replace = function replace_0(key, value_0){
  return ju.$replace_1(this, key, value_0);
}
;
_.clear = function clear_5(){
  this.entrySet().clear();
}
;
_.containsEntry = function containsEntry(entry){
  var key, ourValue, value_0;
  key = entry.getKey();
  value_0 = entry.getValue_0();
  ourValue = this.get(key);
  if (!ju.equals_31(value_0, ourValue)) {
    return false;
  }
  if (jsEquals(ourValue, null) && !this.containsKey(key)) {
    return false;
  }
  return true;
}
;
_.containsKey = function containsKey(key){
  return isNotNull(this.implFindEntry(key, false));
}
;
_.containsValue = function containsValue(value_0){
  var entry, entry$iterator, v;
  for (entry$iterator = this.entrySet().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_3(), 23);
    v = entry.getValue_0();
    if (ju.equals_31(value_0, v)) {
      return true;
    }
  }
  return false;
}
;
_.equals_0 = function equals_22(obj){
  var entry, entry$iterator, otherMap;
  if (obj === this) {
    return true;
  }
  if (!instanceOf(obj, 46)) {
    return false;
  }
  otherMap = castTo(obj, 46);
  if (this.size() != otherMap.size()) {
    return false;
  }
  for (entry$iterator = otherMap.entrySet().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_3(), 23);
    if (!this.containsEntry(entry)) {
      return false;
    }
  }
  return true;
}
;
_.get = function get_5(key){
  return ju.getEntryValueOrNull(this.implFindEntry(key, false));
}
;
_.hashCode_0 = function hashCode_21(){
  return ju.hashCode_26(this.entrySet());
}
;
_.implFindEntry = function implFindEntry(key, remove){
  var entry, iter, k;
  for (iter = this.entrySet().iterator(); iter.hasNext_0();) {
    entry = castTo(iter.next_3(), 23);
    k = entry.getKey();
    if (ju.equals_31(key, k)) {
      if (remove) {
        entry = new ju.AbstractMap$SimpleEntry(entry.getKey(), entry.getValue_0());
        iter.remove_1();
      }
      return entry;
    }
  }
  return null;
}
;
_.isEmpty = function isEmpty_3(){
  return this.size() == 0;
}
;
_.keySet = function keySet(){
  return new ju.AbstractMap$1(this);
}
;
_.put = function put(key, value_0){
  throw toJs(new jl.UnsupportedOperationException_0('Put not supported on this map'));
}
;
_.putAll = function putAll(map_0){
  var e, e$iterator;
  ji2.checkNotNull_0(map_0);
  for (e$iterator = map_0.entrySet().iterator(); e$iterator.hasNext_0();) {
    e = castTo(e$iterator.next_3(), 23);
    this.put(e.getKey(), e.getValue_0());
  }
}
;
_.remove = function remove_6(key){
  return ju.getEntryValueOrNull(this.implFindEntry(key, true));
}
;
_.size = function size_4(){
  return this.entrySet().size();
}
;
_.toString_0 = function toString_30(){
  var entry, entry$iterator, joiner;
  joiner = new ju.StringJoiner_0(', ', '{', '}');
  for (entry$iterator = this.entrySet().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_3(), 23);
    joiner.add_4(this.toString_3(entry));
  }
  return joiner.toString_0();
}
;
_.toString_2 = function toString_31(o){
  return o === this?'(this Map)':valueOf_17(o);
}
;
_.toString_3 = function toString_32(entry){
  return this.toString_2(entry.getKey()) + '=' + this.toString_2(entry.getValue_0());
}
;
_.values = function values_2(){
  return new ju.AbstractMap$2(this);
}
;
cggl.Ljava_util_AbstractMap_2_classLit = createForClass('java.util', 'AbstractMap', 101, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_AbstractHashMap = function $clinit_AbstractHashMap(){
  ju.$clinit_AbstractHashMap = emptyMethod;
  ju.$clinit_AbstractMap();
}
;
ju.AbstractHashMap = function AbstractHashMap(){
  ju.$clinit_AbstractHashMap();
  ju.AbstractMap.call(this);
  this.$init_177();
  this.reset_0();
}
;
ju.AbstractHashMap_0 = function AbstractHashMap_0(ignored){
  ju.$clinit_AbstractHashMap();
  ju.AbstractHashMap_1.call(this, ignored, 0);
}
;
ju.AbstractHashMap_1 = function AbstractHashMap_1(ignored, alsoIgnored){
  ju.AbstractMap.call(this);
  this.$init_177();
  ji2.checkArgument(ignored >= 0, 'Negative initial capacity');
  ji2.checkArgument(alsoIgnored >= 0, 'Non-positive load factor');
  this.reset_0();
}
;
defineClass(129, 101, {1:1, 46:1});
_.$init_177 = function $init_177(){
}
;
_.clear = function clear_6(){
  this.reset_0();
}
;
_.containsKey = function containsKey_0(key){
  return instanceOfString(key)?this.hasStringValue(ji2.uncheckedCast(key)):this.hasHashValue(key);
}
;
_.containsValue = function containsValue_0(value_0){
  return this.containsValue_0(value_0, this.stringMap) || this.containsValue_0(value_0, this.hashCodeMap);
}
;
_.containsValue_0 = function containsValue_1(value_0, entries){
  var entry, entry$iterator;
  for (entry$iterator = entries.iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_3(), 23);
    if (this.equals_1(value_0, entry.getValue_0())) {
      return true;
    }
  }
  return false;
}
;
_.entrySet = function entrySet(){
  return new ju.AbstractHashMap$EntrySet(this);
}
;
_.get = function get_6(key){
  return instanceOfString(key)?this.getStringValue(ji2.uncheckedCast(key)):this.getHashValue(key);
}
;
_.getHashValue = function getHashValue(key){
  return ju.getEntryValueOrNull(this.hashCodeMap.getEntry_0(key));
}
;
_.getStringValue = function getStringValue(key){
  return jsEquals(key, null)?this.getHashValue(null):this.stringMap.get_1(key);
}
;
_.hasHashValue = function hasHashValue(key){
  return isNotNull(this.hashCodeMap.getEntry_0(key));
}
;
_.hasStringValue = function hasStringValue(key){
  return jsEquals(key, null)?this.hasHashValue(null):this.stringMap.contains_0(key);
}
;
_.put = function put_0(key, value_0){
  return instanceOfString(key)?this.putStringValue(ji2.uncheckedCast(key), value_0):this.putHashValue(key, value_0);
}
;
_.putHashValue = function putHashValue(key, value_0){
  return this.hashCodeMap.put_0(key, value_0);
}
;
_.putStringValue = function putStringValue(key, value_0){
  return jsEquals(key, null)?this.putHashValue(null, value_0):this.stringMap.put_1(key, value_0);
}
;
_.remove = function remove_7(key){
  return instanceOfString(key)?this.removeStringValue(ji2.uncheckedCast(key)):this.removeHashValue(key);
}
;
_.removeHashValue = function removeHashValue(key){
  return this.hashCodeMap.remove_2(key);
}
;
_.removeStringValue = function removeStringValue(key){
  return jsEquals(key, null)?this.removeHashValue(null):this.stringMap.remove_3(key);
}
;
_.reset_0 = function reset_0(){
  this.hashCodeMap = new ju.InternalHashCodeMap(this);
  this.stringMap = new ju.InternalStringMap(this);
  ju.structureChanged(this);
}
;
_.size = function size_5(){
  return this.hashCodeMap.size_1() + this.stringMap.size_1();
}
;
cggl.Ljava_util_AbstractHashMap_2_classLit = createForClass('java.util', 'AbstractHashMap', 129, cggl.Ljava_util_AbstractMap_2_classLit);
ju.$clinit_Set = function $clinit_Set(){
  ju.$clinit_Set = emptyMethod;
}
;
ju.$spliterator_2 = function $spliterator_2(this$static){
  return ju.spliterator_10(this$static, 1);
}
;
cggl.Ljava_util_Set_2_classLit = createForInterface('java.util', 'Set');
ju.$clinit_AbstractSet = function $clinit_AbstractSet(){
  ju.$clinit_AbstractSet = emptyMethod;
  ju.$clinit_AbstractCollection();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_Set();
}
;
ju.AbstractSet = function AbstractSet(){
  ju.$clinit_AbstractSet();
  ju.AbstractCollection.call(this);
  this.$init_178();
}
;
defineClass(64, 119, {1:1, 22:1, 38:1});
_.$init_178 = function $init_178(){
}
;
_.spliterator_0 = function spliterator_3(){
  return ju.$spliterator_2(this);
}
;
_.equals_0 = function equals_23(o){
  var other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 38)) {
    return false;
  }
  other = castTo(o, 38);
  if (other.size() != this.size()) {
    return false;
  }
  return this.containsAll(other);
}
;
_.hashCode_0 = function hashCode_22(){
  return ju.hashCode_26(this);
}
;
_.removeAll = function removeAll_0(c){
  var iter, o, o$iterator, size_0;
  ji2.checkNotNull_0(c);
  size_0 = this.size();
  if (size_0 < c.size()) {
    for (iter = this.iterator(); iter.hasNext_0();) {
      o = iter.next_3();
      if (c.contains(o)) {
        iter.remove_1();
      }
    }
  }
   else {
    for (o$iterator = c.iterator(); o$iterator.hasNext_0();) {
      o = o$iterator.next_3();
      this.remove(o);
    }
  }
  return size_0 != this.size();
}
;
cggl.Ljava_util_AbstractSet_2_classLit = createForClass('java.util', 'AbstractSet', 64, cggl.Ljava_util_AbstractCollection_2_classLit);
ju.$clinit_AbstractHashMap$EntrySet = function $clinit_AbstractHashMap$EntrySet(){
  ju.$clinit_AbstractHashMap$EntrySet = emptyMethod;
  ju.$clinit_AbstractSet();
}
;
ju.AbstractHashMap$EntrySet = function AbstractHashMap$EntrySet(this$0){
  ju.$clinit_AbstractHashMap$EntrySet();
  this.this$01 = this$0;
  ju.AbstractSet.call(this);
  this.$init_179();
}
;
defineClass(270, 64, {1:1, 22:1, 38:1}, ju.AbstractHashMap$EntrySet);
_.$init_179 = function $init_179(){
}
;
_.clear = function clear_7(){
  this.this$01.clear();
}
;
_.contains = function contains_5(o){
  if (instanceOf(o, 23)) {
    return this.this$01.containsEntry(castTo(o, 23));
  }
  return false;
}
;
_.iterator = function iterator_4(){
  return new ju.AbstractHashMap$EntrySetIterator(this.this$01);
}
;
_.remove = function remove_8(entry){
  var key;
  if (this.contains(entry)) {
    key = castTo(entry, 23).getKey();
    this.this$01.remove(key);
    return true;
  }
  return false;
}
;
_.size = function size_6(){
  return this.this$01.size();
}
;
cggl.Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySet', 270, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_AbstractHashMap$EntrySetIterator = function $clinit_AbstractHashMap$EntrySetIterator(){
  ju.$clinit_AbstractHashMap$EntrySetIterator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.AbstractHashMap$EntrySetIterator = function AbstractHashMap$EntrySetIterator(this$0){
  ju.$clinit_AbstractHashMap$EntrySetIterator();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_180();
  ju.recordLastKnownStructure(this$0, this);
}
;
defineClass(271, 1, {1:1, 27:1}, ju.AbstractHashMap$EntrySetIterator);
_.$init_180 = function $init_180(){
  this.stringMapEntries = this.this$01.stringMap.iterator();
  this.current = this.stringMapEntries;
  this.hasNext = this.computeHasNext();
}
;
_.forEachRemaining_0 = function forEachRemaining_2(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.next_3 = function next_3(){
  return this.next_4();
}
;
_.computeHasNext = function computeHasNext(){
  if (this.current.hasNext_0()) {
    return true;
  }
  if (jsNotEquals(this.current, this.stringMapEntries)) {
    return false;
  }
  this.current = this.this$01.hashCodeMap.iterator();
  return this.current.hasNext_0();
}
;
_.hasNext_0 = function hasNext_0(){
  return this.hasNext;
}
;
_.next_4 = function next_4(){
  var rv;
  ju.checkStructuralChange(this.this$01, this);
  ji2.checkElement(this.hasNext_0());
  this.last = this.current;
  rv = castTo(this.current.next_3(), 23);
  this.hasNext = this.computeHasNext();
  return rv;
}
;
_.remove_1 = function remove_9(){
  ji2.checkState(isNotNull(this.last));
  ju.checkStructuralChange(this.this$01, this);
  this.last.remove_1();
  this.last = null;
  this.hasNext = this.computeHasNext();
  ju.recordLastKnownStructure(this.this$01, this);
}
;
_.hasNext = false;
cggl.Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySetIterator', 271, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_AbstractList$IteratorImpl = function $clinit_AbstractList$IteratorImpl(){
  ju.$clinit_AbstractList$IteratorImpl = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.AbstractList$IteratorImpl = function AbstractList$IteratorImpl(this$0){
  ju.$clinit_AbstractList$IteratorImpl();
  this.this$01_0 = this$0;
  Object_0.call(this);
  this.$init_181();
}
;
defineClass(120, 1, {1:1, 27:1}, ju.AbstractList$IteratorImpl);
_.$init_181 = function $init_181(){
  this.i = 0;
  this.last = -1;
}
;
_.forEachRemaining_0 = function forEachRemaining_3(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.hasNext_0 = function hasNext_1(){
  return this.i < this.this$01_0.size();
}
;
_.next_3 = function next_5(){
  ji2.checkElement(this.hasNext_0());
  return this.this$01_0.getAtIndex(this.last = this.i++);
}
;
_.remove_1 = function remove_10(){
  ji2.checkState(this.last != -1);
  this.this$01_0.removeAtIndex(this.last);
  this.i = this.last;
  this.last = -1;
}
;
_.i = 0;
_.last = 0;
cggl.Ljava_util_AbstractList$IteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/IteratorImpl', 120, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_ListIterator = function $clinit_ListIterator(){
  ju.$clinit_ListIterator = emptyMethod;
}
;
cggl.Ljava_util_ListIterator_2_classLit = createForInterface('java.util', 'ListIterator');
ju.$clinit_AbstractList$ListIteratorImpl = function $clinit_AbstractList$ListIteratorImpl(){
  ju.$clinit_AbstractList$ListIteratorImpl = emptyMethod;
  ju.$clinit_AbstractList$IteratorImpl();
  ju.$clinit_Iterator();
}
;
ju.AbstractList$ListIteratorImpl = function AbstractList$ListIteratorImpl(this$0, start_0){
  ju.$clinit_AbstractList$ListIteratorImpl();
  this.this$01 = this$0;
  ju.AbstractList$IteratorImpl.call(this, this$0);
  this.$init_182();
  ji2.checkPositionIndex(start_0, this$0.size());
  this.i = start_0;
}
;
defineClass(229, 120, {1:1, 27:1}, ju.AbstractList$ListIteratorImpl);
_.$init_182 = function $init_182(){
}
;
_.remove_1 = function remove_11(){
  getClassPrototype(120).remove_1.call(this);
}
;
cggl.Ljava_util_AbstractList$ListIteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/ListIteratorImpl', 229, cggl.Ljava_util_AbstractList$IteratorImpl_2_classLit);
ju.$clinit_AbstractList$SubList = function $clinit_AbstractList$SubList(){
  ju.$clinit_AbstractList$SubList = emptyMethod;
  ju.$clinit_AbstractList();
}
;
ju.AbstractList$SubList = function AbstractList$SubList(wrapped, fromIndex, toIndex){
  ju.$clinit_AbstractList$SubList();
  ju.AbstractList.call(this);
  this.$init_183();
  ji2.checkCriticalPositionIndexes(fromIndex, toIndex, wrapped.size());
  this.wrapped = wrapped;
  this.fromIndex = fromIndex;
  this.size_0 = toIndex - fromIndex;
}
;
defineClass(230, 100, {1:1, 22:1, 44:1}, ju.AbstractList$SubList);
_.$init_183 = function $init_183(){
}
;
_.addAtIndex = function add_11(index_0, element){
  ji2.checkPositionIndex(index_0, this.size_0);
  this.wrapped.addAtIndex(this.fromIndex + index_0, element);
  this.size_0++;
}
;
_.getAtIndex = function get_7(index_0){
  ji2.checkElementIndex(index_0, this.size_0);
  return this.wrapped.getAtIndex(this.fromIndex + index_0);
}
;
_.removeAtIndex = function remove_12(index_0){
  var result;
  ji2.checkElementIndex(index_0, this.size_0);
  result = this.wrapped.removeAtIndex(this.fromIndex + index_0);
  this.size_0--;
  return result;
}
;
_.setAtIndex = function set_6(index_0, element){
  ji2.checkElementIndex(index_0, this.size_0);
  return this.wrapped.setAtIndex(this.fromIndex + index_0, element);
}
;
_.size = function size_7(){
  return this.size_0;
}
;
_.fromIndex = 0;
_.size_0 = 0;
cggl.Ljava_util_AbstractList$SubList_2_classLit = createForClass('java.util', 'AbstractList/SubList', 230, cggl.Ljava_util_AbstractList_2_classLit);
ju.$clinit_AbstractMap$1 = function $clinit_AbstractMap$1(){
  ju.$clinit_AbstractMap$1 = emptyMethod;
  ju.$clinit_AbstractSet();
}
;
ju.AbstractMap$1 = function AbstractMap$1(this$0){
  ju.$clinit_AbstractMap$1();
  this.this$01 = this$0;
  ju.AbstractSet.call(this);
  this.$init_184();
}
;
defineClass(245, 64, {1:1, 22:1, 38:1}, ju.AbstractMap$1);
_.$init_184 = function $init_184(){
}
;
_.clear = function clear_8(){
  this.this$01.clear();
}
;
_.contains = function contains_6(key){
  return this.this$01.containsKey(key);
}
;
_.iterator = function iterator_5(){
  var outerIter;
  outerIter = this.this$01.entrySet().iterator();
  return new ju.AbstractMap$1$1(this, outerIter);
}
;
_.remove = function remove_13(key){
  if (this.this$01.containsKey(key)) {
    this.this$01.remove(key);
    return true;
  }
  return false;
}
;
_.size = function size_8(){
  return this.this$01.size();
}
;
cggl.Ljava_util_AbstractMap$1_2_classLit = createForClass('java.util', 'AbstractMap/1', 245, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_AbstractMap$1$1 = function $clinit_AbstractMap$1$1(){
  ju.$clinit_AbstractMap$1$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.AbstractMap$1$1 = function AbstractMap$1$1(this$1, val$outerIter){
  ju.$clinit_AbstractMap$1$1();
  this.this$11 = this$1;
  this.val$outerIter2 = val$outerIter;
  Object_0.call(this);
  this.$init_185();
}
;
defineClass(246, 1, {1:1, 27:1}, ju.AbstractMap$1$1);
_.$init_185 = function $init_185(){
}
;
_.forEachRemaining_0 = function forEachRemaining_4(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.hasNext_0 = function hasNext_2(){
  return this.val$outerIter2.hasNext_0();
}
;
_.next_3 = function next_6(){
  var entry;
  entry = castTo(this.val$outerIter2.next_3(), 23);
  return entry.getKey();
}
;
_.remove_1 = function remove_14(){
  this.val$outerIter2.remove_1();
}
;
cggl.Ljava_util_AbstractMap$1$1_2_classLit = createForClass('java.util', 'AbstractMap/1/1', 246, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_AbstractMap$2 = function $clinit_AbstractMap$2(){
  ju.$clinit_AbstractMap$2 = emptyMethod;
  ju.$clinit_AbstractCollection();
}
;
ju.AbstractMap$2 = function AbstractMap$2(this$0){
  ju.$clinit_AbstractMap$2();
  this.this$01 = this$0;
  ju.AbstractCollection.call(this);
  this.$init_186();
}
;
defineClass(247, 119, {1:1, 22:1}, ju.AbstractMap$2);
_.$init_186 = function $init_186(){
}
;
_.clear = function clear_9(){
  this.this$01.clear();
}
;
_.contains = function contains_7(value_0){
  return this.this$01.containsValue(value_0);
}
;
_.iterator = function iterator_6(){
  var outerIter;
  outerIter = this.this$01.entrySet().iterator();
  return new ju.AbstractMap$2$1(this, outerIter);
}
;
_.size = function size_9(){
  return this.this$01.size();
}
;
cggl.Ljava_util_AbstractMap$2_2_classLit = createForClass('java.util', 'AbstractMap/2', 247, cggl.Ljava_util_AbstractCollection_2_classLit);
ju.$clinit_AbstractMap$2$1 = function $clinit_AbstractMap$2$1(){
  ju.$clinit_AbstractMap$2$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.AbstractMap$2$1 = function AbstractMap$2$1(this$1, val$outerIter){
  ju.$clinit_AbstractMap$2$1();
  this.this$11 = this$1;
  this.val$outerIter2 = val$outerIter;
  Object_0.call(this);
  this.$init_187();
}
;
defineClass(248, 1, {1:1, 27:1}, ju.AbstractMap$2$1);
_.$init_187 = function $init_187(){
}
;
_.forEachRemaining_0 = function forEachRemaining_5(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.hasNext_0 = function hasNext_3(){
  return this.val$outerIter2.hasNext_0();
}
;
_.next_3 = function next_7(){
  var entry;
  entry = castTo(this.val$outerIter2.next_3(), 23);
  return entry.getValue_0();
}
;
_.remove_1 = function remove_15(){
  this.val$outerIter2.remove_1();
}
;
cggl.Ljava_util_AbstractMap$2$1_2_classLit = createForClass('java.util', 'AbstractMap/2/1', 248, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Map$Entry = function $clinit_Map$Entry(){
  ju.$clinit_Map$Entry = emptyMethod;
}
;
cggl.Ljava_util_Map$Entry_2_classLit = createForInterface('java.util', 'Map/Entry');
ju.$clinit_AbstractMap$AbstractEntry = function $clinit_AbstractMap$AbstractEntry(){
  ju.$clinit_AbstractMap$AbstractEntry = emptyMethod;
  jl.$clinit_Object();
}
;
ju.AbstractMap$AbstractEntry = function AbstractMap$AbstractEntry(key, value_0){
  ju.$clinit_AbstractMap$AbstractEntry();
  Object_0.call(this);
  this.$init_188();
  this.key = key;
  this.value_0 = value_0;
}
;
defineClass(244, 1, {1:1, 23:1});
_.$init_188 = function $init_188(){
}
;
_.equals_0 = function equals_24(other){
  var entry;
  if (!instanceOf(other, 23)) {
    return false;
  }
  entry = castTo(other, 23);
  return ju.equals_31(this.key, entry.getKey()) && ju.equals_31(this.value_0, entry.getValue_0());
}
;
_.getKey = function getKey(){
  return this.key;
}
;
_.getValue_0 = function getValue_0(){
  return this.value_0;
}
;
_.hashCode_0 = function hashCode_23(){
  return ju.hashCode_30(this.key) ^ ju.hashCode_30(this.value_0);
}
;
_.setValue = function setValue(value_0){
  var oldValue;
  oldValue = this.value_0;
  this.value_0 = value_0;
  return oldValue;
}
;
_.toString_0 = function toString_33(){
  return this.key + '=' + this.value_0;
}
;
cggl.Ljava_util_AbstractMap$AbstractEntry_2_classLit = createForClass('java.util', 'AbstractMap/AbstractEntry', 244, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_AbstractMap$SimpleEntry = function $clinit_AbstractMap$SimpleEntry(){
  ju.$clinit_AbstractMap$SimpleEntry = emptyMethod;
  ju.$clinit_AbstractMap$AbstractEntry();
}
;
ju.AbstractMap$SimpleEntry = function AbstractMap$SimpleEntry(key, value_0){
  ju.$clinit_AbstractMap$SimpleEntry();
  ju.AbstractMap$AbstractEntry.call(this, key, value_0);
  this.$init_189();
}
;
defineClass(123, 244, {1:1, 23:1}, ju.AbstractMap$SimpleEntry);
_.$init_189 = function $init_189(){
}
;
cggl.Ljava_util_AbstractMap$SimpleEntry_2_classLit = createForClass('java.util', 'AbstractMap/SimpleEntry', 123, cggl.Ljava_util_AbstractMap$AbstractEntry_2_classLit);
ju.$clinit_AbstractMap$SimpleImmutableEntry = function $clinit_AbstractMap$SimpleImmutableEntry(){
  ju.$clinit_AbstractMap$SimpleImmutableEntry = emptyMethod;
}
;
defineClass(431, 244, {1:1, 23:1});
cggl.Ljava_util_AbstractMap$SimpleImmutableEntry_2_classLit = createForClass('java.util', 'AbstractMap/SimpleImmutableEntry', 431, cggl.Ljava_util_AbstractMap$AbstractEntry_2_classLit);
ju.$clinit_AbstractMapEntry = function $clinit_AbstractMapEntry(){
  ju.$clinit_AbstractMapEntry = emptyMethod;
  jl.$clinit_Object();
}
;
ju.AbstractMapEntry = function AbstractMapEntry(){
  ju.$clinit_AbstractMapEntry();
  Object_0.call(this);
  this.$init_190();
}
;
defineClass(286, 1, {1:1, 23:1});
_.$init_190 = function $init_190(){
}
;
_.equals_0 = function equals_25(other){
  var entry;
  if (!instanceOf(other, 23)) {
    return false;
  }
  entry = castTo(other, 23);
  return ju.equals_31(this.getKey(), entry.getKey()) && ju.equals_31(this.getValue_0(), entry.getValue_0());
}
;
_.hashCode_0 = function hashCode_24(){
  return ju.hashCode_30(this.getKey()) ^ ju.hashCode_30(this.getValue_0());
}
;
_.toString_0 = function toString_34(){
  return this.getKey() + '=' + this.getValue_0();
}
;
cggl.Ljava_util_AbstractMapEntry_2_classLit = createForClass('java.util', 'AbstractMapEntry', 286, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_SortedMap = function $clinit_SortedMap(){
  ju.$clinit_SortedMap = emptyMethod;
}
;
cggl.Ljava_util_SortedMap_2_classLit = createForInterface('java.util', 'SortedMap');
ju.$clinit_NavigableMap = function $clinit_NavigableMap(){
  ju.$clinit_NavigableMap = emptyMethod;
}
;
cggl.Ljava_util_NavigableMap_2_classLit = createForInterface('java.util', 'NavigableMap');
ju.$clinit_AbstractNavigableMap = function $clinit_AbstractNavigableMap(){
  ju.$clinit_AbstractNavigableMap = emptyMethod;
  ju.$clinit_AbstractMap();
  ju.$clinit_Map();
}
;
ju.AbstractNavigableMap = function AbstractNavigableMap(){
  ju.$clinit_AbstractNavigableMap();
  ju.AbstractMap.call(this);
  this.$init_191();
}
;
defineClass(255, 101, {1:1, 46:1});
_.$init_191 = function $init_191(){
}
;
_.containsEntry = function containsEntry_0(entry){
  var key, lookupEntry;
  key = entry.getKey();
  lookupEntry = this.getEntry(key);
  return isNotNull(lookupEntry) && ju.equals_31(lookupEntry.getValue_0(), entry.getValue_0());
}
;
_.containsKey = function containsKey_1(k){
  var key;
  key = k;
  return isNotNull(this.getEntry(key));
}
;
_.entrySet = function entrySet_0(){
  return new ju.AbstractNavigableMap$EntrySet(this);
}
;
_.get = function get_8(k){
  var key;
  key = k;
  return ju.getEntryValueOrNull(this.getEntry(key));
}
;
_.keySet = function keySet_0(){
  return this.navigableKeySet();
}
;
_.navigableKeySet = function navigableKeySet(){
  return new ju.AbstractNavigableMap$NavigableKeySet(this);
}
;
cggl.Ljava_util_AbstractNavigableMap_2_classLit = createForClass('java.util', 'AbstractNavigableMap', 255, cggl.Ljava_util_AbstractMap_2_classLit);
ju.$clinit_AbstractNavigableMap$DescendingMap = function $clinit_AbstractNavigableMap$DescendingMap(){
  ju.$clinit_AbstractNavigableMap$DescendingMap = emptyMethod;
}
;
defineClass(441, 255, {1:1, 46:1});
cggl.Ljava_util_AbstractNavigableMap$DescendingMap_2_classLit = createForClass('java.util', 'AbstractNavigableMap/DescendingMap', 441, cggl.Ljava_util_AbstractNavigableMap_2_classLit);
ju.$clinit_AbstractNavigableMap$EntrySet = function $clinit_AbstractNavigableMap$EntrySet(){
  ju.$clinit_AbstractNavigableMap$EntrySet = emptyMethod;
  ju.$clinit_AbstractSet();
}
;
ju.AbstractNavigableMap$EntrySet = function AbstractNavigableMap$EntrySet(this$0){
  ju.$clinit_AbstractNavigableMap$EntrySet();
  this.this$01_0 = this$0;
  ju.AbstractSet.call(this);
  this.$init_192();
}
;
defineClass(155, 64, {1:1, 22:1, 38:1}, ju.AbstractNavigableMap$EntrySet);
_.$init_192 = function $init_192(){
}
;
_.contains = function contains_8(o){
  return instanceOf(o, 23) && this.this$01_0.containsEntry(castTo(o, 23));
}
;
_.iterator = function iterator_7(){
  return this.this$01_0.entryIterator();
}
;
_.remove = function remove_16(o){
  var entry;
  if (instanceOf(o, 23)) {
    entry = castTo(o, 23);
    return this.this$01_0.removeEntry(entry);
  }
  return false;
}
;
_.size = function size_10(){
  return this.this$01_0.size();
}
;
cggl.Ljava_util_AbstractNavigableMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/EntrySet', 155, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_SortedSet = function $clinit_SortedSet(){
  ju.$clinit_SortedSet = emptyMethod;
}
;
ju.$spliterator_3 = function $spliterator_3(this$static){
  return new ju.SortedSet$1(this$static, this$static, 1 | 16 | 4);
}
;
cggl.Ljava_util_SortedSet_2_classLit = createForInterface('java.util', 'SortedSet');
ju.$clinit_NavigableSet = function $clinit_NavigableSet(){
  ju.$clinit_NavigableSet = emptyMethod;
}
;
cggl.Ljava_util_NavigableSet_2_classLit = createForInterface('java.util', 'NavigableSet');
ju.$clinit_AbstractNavigableMap$NavigableKeySet = function $clinit_AbstractNavigableMap$NavigableKeySet(){
  ju.$clinit_AbstractNavigableMap$NavigableKeySet = emptyMethod;
  ju.$clinit_AbstractSet();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_Set();
  ju.$clinit_SortedSet();
}
;
ju.AbstractNavigableMap$NavigableKeySet = function AbstractNavigableMap$NavigableKeySet(map_0){
  ju.$clinit_AbstractNavigableMap$NavigableKeySet();
  ju.AbstractSet.call(this);
  this.$init_193();
  this.map_0 = map_0;
}
;
defineClass(260, 64, {1:1, 22:1, 38:1}, ju.AbstractNavigableMap$NavigableKeySet);
_.$init_193 = function $init_193(){
}
;
_.spliterator_0 = function spliterator_4(){
  return ju.$spliterator_3(this);
}
;
_.clear = function clear_10(){
  this.map_0.clear();
}
;
_.contains = function contains_9(o){
  return this.map_0.containsKey(o);
}
;
_.iterator = function iterator_8(){
  var entryIterator;
  entryIterator = this.map_0.entrySet().iterator();
  return new ju.AbstractNavigableMap$NavigableKeySet$1(this, entryIterator);
}
;
_.remove = function remove_17(o){
  if (this.map_0.containsKey(o)) {
    this.map_0.remove(o);
    return true;
  }
  return false;
}
;
_.size = function size_11(){
  return this.map_0.size();
}
;
cggl.Ljava_util_AbstractNavigableMap$NavigableKeySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet', 260, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_AbstractNavigableMap$NavigableKeySet$1 = function $clinit_AbstractNavigableMap$NavigableKeySet$1(){
  ju.$clinit_AbstractNavigableMap$NavigableKeySet$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.AbstractNavigableMap$NavigableKeySet$1 = function AbstractNavigableMap$NavigableKeySet$1(this$1, val$entryIterator){
  ju.$clinit_AbstractNavigableMap$NavigableKeySet$1();
  this.this$11 = this$1;
  this.val$entryIterator2 = val$entryIterator;
  Object_0.call(this);
  this.$init_194();
}
;
defineClass(261, 1, {1:1, 27:1}, ju.AbstractNavigableMap$NavigableKeySet$1);
_.$init_194 = function $init_194(){
}
;
_.forEachRemaining_0 = function forEachRemaining_6(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.hasNext_0 = function hasNext_4(){
  return this.val$entryIterator2.hasNext_0();
}
;
_.next_3 = function next_8(){
  var entry;
  entry = castTo(this.val$entryIterator2.next_3(), 23);
  return entry.getKey();
}
;
_.remove_1 = function remove_18(){
  this.val$entryIterator2.remove_1();
}
;
cggl.Ljava_util_AbstractNavigableMap$NavigableKeySet$1_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet/1', 261, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Queue = function $clinit_Queue(){
  ju.$clinit_Queue = emptyMethod;
}
;
cggl.Ljava_util_Queue_2_classLit = createForInterface('java.util', 'Queue');
ju.$clinit_AbstractQueue = function $clinit_AbstractQueue(){
  ju.$clinit_AbstractQueue = emptyMethod;
}
;
defineClass(419, 119, {1:1, 22:1});
cggl.Ljava_util_AbstractQueue_2_classLit = createForClass('java.util', 'AbstractQueue', 419, cggl.Ljava_util_AbstractCollection_2_classLit);
ju.$clinit_ArrayList$1 = function $clinit_ArrayList$1(){
  ju.$clinit_ArrayList$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.ArrayList$1 = function ArrayList$1(this$0){
  ju.$clinit_ArrayList$1();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_195();
}
;
defineClass(228, 1, {1:1, 27:1}, ju.ArrayList$1);
_.$init_195 = function $init_195(){
  this.i = 0;
  this.last = -1;
}
;
_.forEachRemaining_0 = function forEachRemaining_7(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.hasNext_0 = function hasNext_5(){
  return this.i < this.this$01.array.length;
}
;
_.next_3 = function next_9(){
  ji2.checkElement(this.hasNext_0());
  this.last = this.i++;
  return this.this$01.array[this.last];
}
;
_.remove_1 = function remove_19(){
  ji2.checkState(this.last != -1);
  this.this$01.removeAtIndex(this.i = this.last);
  this.last = -1;
}
;
_.i = 0;
_.last = 0;
cggl.Ljava_util_ArrayList$1_2_classLit = createForClass('java.util', 'ArrayList/1', 228, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Arrays = function $clinit_Arrays(){
  ju.$clinit_Arrays = emptyMethod;
  jl.$clinit_Object();
}
;
ju.copyObjectArray = function copyObjectArray(original, from, to){
  var copy;
  copy = ji2.clone(original, from, to);
  ji2.setLength_0(copy, to - from);
  return copy;
}
;
ju.copyOf_0 = function copyOf_0(original, newLength){
  ju.$clinit_Arrays();
  ji2.checkArraySize(newLength);
  return castTo(ju.copyPrimitiveArray(original, initUnidimensionalArray(cggl.I_classLit, {6:1, 4:1, 1:1}, 5, newLength, 15, 1), 0, newLength), 6);
}
;
ju.copyOf_1 = function copyOf_1(original, newLength){
  ju.$clinit_Arrays();
  ji2.checkArraySize(newLength);
  return ju.copyObjectArray(original, 0, newLength);
}
;
ju.copyPrimitiveArray = function copyPrimitiveArray(original, copy, from, to){
  var copyLen, len;
  len = ji2.getLength_0(original);
  copyLen = $wnd.Math.min(to, len) - from;
  ji2.copy_1(original, from, copy, 0, copyLen);
  return copy;
}
;
ju.fill = function fill(a, val){
  ju.$clinit_Arrays();
  ju.fill0(a, 0, a.length, val);
}
;
ju.fill_0 = function fill_0(a, val){
  ju.$clinit_Arrays();
  ju.fill0_0(a, 0, a.length, val);
}
;
ju.fill_1 = function fill_1(a, val){
  ju.$clinit_Arrays();
  ju.fill0_1(a, 0, a.length, val);
}
;
ju.fill_2 = function fill_2(a, val){
  ju.$clinit_Arrays();
  ju.fill0_2(a, 0, a.length, val);
}
;
ju.fill0 = function fill0(a, fromIndex, toIndex, val){
  var i;
  for (i = fromIndex; i < toIndex; ++i) {
    a[i] = val;
  }
}
;
ju.fill0_0 = function fill0_0(a, fromIndex, toIndex, val){
  var i;
  for (i = fromIndex; i < toIndex; ++i) {
    a[i] = val;
  }
}
;
ju.fill0_1 = function fill0_1(a, fromIndex, toIndex, val){
  var i;
  for (i = fromIndex; i < toIndex; ++i) {
    a[i] = val;
  }
}
;
ju.fill0_2 = function fill0_2(a, fromIndex, toIndex, val){
  var i;
  for (i = fromIndex; i < toIndex; ++i) {
    a[i] = val;
  }
}
;
ju.getDoubleComparator = function getDoubleComparator(){
  return ji2.uncheckedCast(castToFunction(makeLambdaFunction(ju.Arrays$0methodref$compare$Type.prototype.compare_5, ju.Arrays$0methodref$compare$Type, [])));
}
;
ju.getIntComparator = function getIntComparator(){
  return ji2.uncheckedCast(castToFunction(makeLambdaFunction(ju.Arrays$lambda$0$Type.prototype.compare_5, ju.Arrays$lambda$0$Type, [])));
}
;
ju.getLongComparator = function getLongComparator(){
  return ji2.uncheckedCast(castToFunction(makeLambdaFunction(ju.Arrays$1methodref$compare$Type.prototype.compare_6, ju.Arrays$1methodref$compare$Type, [])));
}
;
ju.hashCode_25 = function hashCode_25(a){
  ju.$clinit_Arrays();
  var e, e$array, e$index, e$max, hashCode;
  if (jsEquals(a, null)) {
    return 0;
  }
  hashCode = 1;
  for (e$array = a , e$index = 0 , e$max = e$array.length; e$index < e$max; ++e$index) {
    e = e$array[e$index];
    hashCode = 31 * hashCode + ju.hashCode_30(e);
    hashCode = ji2.ensureInt(hashCode);
  }
  return hashCode;
}
;
ju.insertionSort = function insertionSort(array, low, high, comp){
  var i, j, t;
  for (i = low + 1; i < high; ++i) {
    for (j = i; j > low && comp.compare_0(array[j - 1], array[j]) > 0; --j) {
      t = array[j];
      setCheck(array, j, array[j - 1]);
      setCheck(array, j - 1, t);
    }
  }
}
;
ju.lambda$0 = function lambda$0(a_0, b_1){
  ju.$clinit_Arrays();
  return a_0 - b_1;
}
;
ju.merge = function merge(src_0, srcLow, srcMid, srcHigh, dest, destLow, destHigh, comp){
  var topIdx;
  topIdx = srcMid;
  while (destLow < destHigh) {
    if (topIdx >= srcHigh || srcLow < srcMid && comp.compare_0(src_0[srcLow], src_0[topIdx]) <= 0) {
      setCheck(dest, destLow++, src_0[srcLow++]);
    }
     else {
      setCheck(dest, destLow++, src_0[topIdx++]);
    }
  }
}
;
ju.mergeSort = function mergeSort(x_0, fromIndex, toIndex, comp){
  var temp;
  comp = ju.nullToNaturalOrder(comp);
  temp = ji2.unsafeClone(x_0, fromIndex, toIndex);
  ju.mergeSort_0(temp, x_0, fromIndex, toIndex, -fromIndex, castTo(comp, 26));
}
;
ju.mergeSort_0 = function mergeSort_0(temp, array, low, high, ofs, comp){
  var length_0, tempHigh, tempLow, tempMid;
  length_0 = high - low;
  if (length_0 < 7) {
    ju.insertionSort(array, low, high, comp);
    return;
  }
  tempLow = low + ofs;
  tempHigh = high + ofs;
  tempMid = tempLow + (tempHigh - tempLow >> 1);
  ju.mergeSort_0(array, temp, tempLow, tempMid, -ofs, comp);
  ju.mergeSort_0(array, temp, tempMid, tempHigh, -ofs, comp);
  if (comp.compare_0(temp[tempMid - 1], temp[tempMid]) <= 0) {
    while (low < high) {
      setCheck(array, low++, temp[tempLow++]);
    }
    return;
  }
  ju.merge(temp, tempLow, tempMid, tempHigh, array, low, high, comp);
}
;
ju.nativeIntegerSort = function nativeIntegerSort(array){
  ji2.asNativeArray(array).sort(ju.getIntComparator());
}
;
ju.sort_2 = function sort_2(array){
  ju.$clinit_Arrays();
  ji2.asNativeArray(array).sort(ju.getDoubleComparator());
}
;
ju.sort_3 = function sort_3(array){
  ju.$clinit_Arrays();
  ju.nativeIntegerSort(array);
}
;
ju.sort_4 = function sort_4(array){
  ju.$clinit_Arrays();
  ji2.asNativeArray(array).sort(ju.getLongComparator());
}
;
ju.sort_5 = function sort_5(array){
  ju.$clinit_Arrays();
  ju.sort_7(array, null);
}
;
ju.sort_6 = function sort_6(x_0, fromIndex, toIndex, c){
  ju.$clinit_Arrays();
  ji2.checkCriticalArrayBounds(fromIndex, toIndex, x_0.length);
  ju.mergeSort(x_0, fromIndex, toIndex, c);
}
;
ju.sort_7 = function sort_7(x_0, c){
  ju.$clinit_Arrays();
  ju.mergeSort(x_0, 0, x_0.length, c);
}
;
defineClass(415, 1, {1:1});
cggl.Ljava_util_Arrays_2_classLit = createForClass('java.util', 'Arrays', 415, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Arrays$0methodref$compare$Type = function $clinit_Arrays$0methodref$compare$Type(){
  ju.$clinit_Arrays$0methodref$compare$Type = emptyMethod;
}
;
ju.$getClass_4 = function $getClass_4(this$static){
  return cggl.Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}
;
ju.Arrays$0methodref$compare$Type = function Arrays$0methodref$compare$Type(){
  ju.$clinit_Arrays$0methodref$compare$Type();
}
;
defineClass(582, $wnd.Function, {1:1, 578:1}, ju.Arrays$0methodref$compare$Type);
_.compare_5 = function compare_28(d1, d2){
  return compare_21(d1, d2);
}
;
ju.$clinit_Arrays$1methodref$compare$Type = function $clinit_Arrays$1methodref$compare$Type(){
  ju.$clinit_Arrays$1methodref$compare$Type = emptyMethod;
}
;
ju.$getClass_5 = function $getClass_5(this$static){
  return cggl.Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}
;
ju.Arrays$1methodref$compare$Type = function Arrays$1methodref$compare$Type(){
  ju.$clinit_Arrays$1methodref$compare$Type();
}
;
defineClass(583, $wnd.Function, {1:1, 584:1}, ju.Arrays$1methodref$compare$Type);
_.compare_6 = function compare_29(d1, d2){
  return compare_24(d1, d2);
}
;
ju.$clinit_Arrays$ArrayList = function $clinit_Arrays$ArrayList(){
  ju.$clinit_Arrays$ArrayList = emptyMethod;
}
;
defineClass(416, 100, {4:1, 1:1, 22:1, 44:1, 82:1});
cggl.Ljava_util_Arrays$ArrayList_2_classLit = createForClass('java.util', 'Arrays/ArrayList', 416, cggl.Ljava_util_AbstractList_2_classLit);
ju.$clinit_Arrays$lambda$0$Type = function $clinit_Arrays$lambda$0$Type(){
  ju.$clinit_Arrays$lambda$0$Type = emptyMethod;
}
;
ju.$getClass_6 = function $getClass_6(this$static){
  return cggl.Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}
;
ju.Arrays$lambda$0$Type = function Arrays$lambda$0$Type(){
  ju.$clinit_Arrays$lambda$0$Type();
}
;
defineClass(581, $wnd.Function, {1:1, 578:1}, ju.Arrays$lambda$0$Type);
_.compare_5 = function compare_30(d1, d2){
  return ju.lambda$0(d1, d2);
}
;
ju.$clinit_Collections = function $clinit_Collections(){
  ju.$clinit_Collections = emptyMethod;
  jl.$clinit_Object();
  ju.EMPTY_LIST = new ju.Collections$EmptyList;
  ju.EMPTY_MAP = new ju.Collections$EmptyMap;
  ju.EMPTY_SET = new ju.Collections$EmptySet;
}
;
ju.emptyIterator = function emptyIterator(){
  ju.$clinit_Collections();
  return castTo((ju.$clinit_Collections$EmptyListIterator() , ju.INSTANCE_0), 27);
}
;
ju.emptyListIterator = function emptyListIterator(){
  ju.$clinit_Collections();
  return castTo((ju.$clinit_Collections$EmptyListIterator() , ju.INSTANCE_0), 577);
}
;
ju.emptySet = function emptySet(){
  ju.$clinit_Collections();
  return castTo(ju.EMPTY_SET, 38);
}
;
ju.hashCode_26 = function hashCode_26(collection){
  ju.$clinit_Collections();
  var e, e$iterator, hashCode;
  hashCode = 0;
  for (e$iterator = collection.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_3();
    hashCode = hashCode + ju.hashCode_30(e);
    hashCode = ji2.ensureInt(hashCode);
  }
  return hashCode;
}
;
ju.hashCode_27 = function hashCode_27(list){
  ju.$clinit_Collections();
  var e, e$iterator, hashCode;
  hashCode = 1;
  for (e$iterator = list.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_3();
    hashCode = 31 * hashCode + ju.hashCode_30(e);
    hashCode = ji2.ensureInt(hashCode);
  }
  return hashCode;
}
;
ju.singleton = function singleton(o){
  ju.$clinit_Collections();
  var set_0;
  set_0 = new ju.HashSet(1);
  set_0.add(o);
  return ju.unmodifiableSet(set_0);
}
;
ju.sort_8 = function sort_8(target, c){
  ju.$clinit_Collections();
  target.sort_0(c);
}
;
ju.unmodifiableList = function unmodifiableList(list){
  ju.$clinit_Collections();
  return instanceOf(list, 82)?new ju.Collections$UnmodifiableRandomAccessList(list):new ju.Collections$UnmodifiableList(list);
}
;
ju.unmodifiableSet = function unmodifiableSet(set_0){
  return new ju.Collections$UnmodifiableSet(set_0);
}
;
defineClass(418, 1, {1:1});
cggl.Ljava_util_Collections_2_classLit = createForClass('java.util', 'Collections', 418, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Enumeration = function $clinit_Enumeration(){
  ju.$clinit_Enumeration = emptyMethod;
}
;
cggl.Ljava_util_Enumeration_2_classLit = createForInterface('java.util', 'Enumeration');
ju.$clinit_Collections$1 = function $clinit_Collections$1(){
  ju.$clinit_Collections$1 = emptyMethod;
}
;
defineClass(430, 1, {1:1});
cggl.Ljava_util_Collections$1_2_classLit = createForClass('java.util', 'Collections/1', 430, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$EmptyList = function $clinit_Collections$EmptyList(){
  ju.$clinit_Collections$EmptyList = emptyMethod;
  ju.$clinit_AbstractList();
}
;
ju.Collections$EmptyList = function Collections$EmptyList(){
  ju.$clinit_Collections$EmptyList();
  ju.AbstractList.call(this);
  this.$init_196();
}
;
defineClass(237, 100, {4:1, 1:1, 22:1, 44:1, 82:1}, ju.Collections$EmptyList);
_.$init_196 = function $init_196(){
}
;
_.contains = function contains_10(object){
  return false;
}
;
_.getAtIndex = function get_9(location_0){
  ji2.checkElementIndex(location_0, 0);
  return null;
}
;
_.iterator = function iterator_9(){
  return ju.emptyIterator();
}
;
_.listIterator = function listIterator_1(){
  return ju.emptyListIterator();
}
;
_.size = function size_12(){
  return 0;
}
;
cggl.Ljava_util_Collections$EmptyList_2_classLit = createForClass('java.util', 'Collections/EmptyList', 237, cggl.Ljava_util_AbstractList_2_classLit);
ju.$clinit_Collections$EmptyListIterator = function $clinit_Collections$EmptyListIterator(){
  ju.$clinit_Collections$EmptyListIterator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
  ju.INSTANCE_0 = new ju.Collections$EmptyListIterator;
}
;
ju.Collections$EmptyListIterator = function Collections$EmptyListIterator(){
  Object_0.call(this);
  this.$init_197();
}
;
defineClass(238, 1, {1:1, 27:1, 577:1}, ju.Collections$EmptyListIterator);
_.$init_197 = function $init_197(){
}
;
_.forEachRemaining_0 = function forEachRemaining_8(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.hasNext_0 = function hasNext_6(){
  return false;
}
;
_.next_3 = function next_10(){
  throw toJs(new ju.NoSuchElementException);
}
;
_.remove_1 = function remove_20(){
  throw toJs(new jl.IllegalStateException);
}
;
cggl.Ljava_util_Collections$EmptyListIterator_2_classLit = createForClass('java.util', 'Collections/EmptyListIterator', 238, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$EmptyMap = function $clinit_Collections$EmptyMap(){
  ju.$clinit_Collections$EmptyMap = emptyMethod;
  ju.$clinit_AbstractMap();
}
;
ju.Collections$EmptyMap = function Collections$EmptyMap(){
  ju.$clinit_Collections$EmptyMap();
  ju.AbstractMap.call(this);
  this.$init_198();
}
;
defineClass(240, 101, {4:1, 1:1, 46:1}, ju.Collections$EmptyMap);
_.$init_198 = function $init_198(){
}
;
_.containsKey = function containsKey_2(key){
  return false;
}
;
_.containsValue = function containsValue_2(value_0){
  return false;
}
;
_.entrySet = function entrySet_1(){
  return ju.$clinit_Collections() , ju.EMPTY_SET;
}
;
_.get = function get_10(key){
  return null;
}
;
_.keySet = function keySet_1(){
  return ju.$clinit_Collections() , ju.EMPTY_SET;
}
;
_.size = function size_13(){
  return 0;
}
;
_.values = function values_3(){
  return ju.$clinit_Collections() , ju.EMPTY_LIST;
}
;
cggl.Ljava_util_Collections$EmptyMap_2_classLit = createForClass('java.util', 'Collections/EmptyMap', 240, cggl.Ljava_util_AbstractMap_2_classLit);
ju.$clinit_Collections$EmptySet = function $clinit_Collections$EmptySet(){
  ju.$clinit_Collections$EmptySet = emptyMethod;
  ju.$clinit_AbstractSet();
}
;
ju.Collections$EmptySet = function Collections$EmptySet(){
  ju.$clinit_Collections$EmptySet();
  ju.AbstractSet.call(this);
  this.$init_199();
}
;
defineClass(239, 64, {4:1, 1:1, 22:1, 38:1}, ju.Collections$EmptySet);
_.$init_199 = function $init_199(){
}
;
_.contains = function contains_11(object){
  return false;
}
;
_.iterator = function iterator_10(){
  return ju.emptyIterator();
}
;
_.size = function size_14(){
  return 0;
}
;
cggl.Ljava_util_Collections$EmptySet_2_classLit = createForClass('java.util', 'Collections/EmptySet', 239, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_Collections$LifoQueue = function $clinit_Collections$LifoQueue(){
  ju.$clinit_Collections$LifoQueue = emptyMethod;
}
;
defineClass(420, 419, {4:1, 1:1, 22:1});
cggl.Ljava_util_Collections$LifoQueue_2_classLit = createForClass('java.util', 'Collections/LifoQueue', 420, cggl.Ljava_util_AbstractQueue_2_classLit);
ju.$clinit_Collections$RandomHolder = function $clinit_Collections$RandomHolder(){
  ju.$clinit_Collections$RandomHolder = emptyMethod;
}
;
defineClass(428, 1, {1:1});
cggl.Ljava_util_Collections$RandomHolder_2_classLit = createForClass('java.util', 'Collections/RandomHolder', 428, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$SetFromMap = function $clinit_Collections$SetFromMap(){
  ju.$clinit_Collections$SetFromMap = emptyMethod;
}
;
defineClass(421, 64, {4:1, 1:1, 22:1, 38:1});
cggl.Ljava_util_Collections$SetFromMap_2_classLit = createForClass('java.util', 'Collections/SetFromMap', 421, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_Collections$SingletonList = function $clinit_Collections$SingletonList(){
  ju.$clinit_Collections$SingletonList = emptyMethod;
}
;
defineClass(422, 100, {4:1, 1:1, 22:1, 44:1});
cggl.Ljava_util_Collections$SingletonList_2_classLit = createForClass('java.util', 'Collections/SingletonList', 422, cggl.Ljava_util_AbstractList_2_classLit);
ju.$clinit_Collections$UnmodifiableCollection = function $clinit_Collections$UnmodifiableCollection(){
  ju.$clinit_Collections$UnmodifiableCollection = emptyMethod;
  jl.$clinit_Object();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
}
;
ju.Collections$UnmodifiableCollection = function Collections$UnmodifiableCollection(coll){
  ju.$clinit_Collections$UnmodifiableCollection();
  Object_0.call(this);
  this.$init_200();
  this.coll = coll;
}
;
defineClass(151, 1, {1:1, 22:1});
_.$init_200 = function $init_200(){
}
;
_.forEach = function forEach_2(action){
  jl.$forEach(this, action);
}
;
_.spliterator_0 = function spliterator_5(){
  return ju.$spliterator_0(this);
}
;
_.stream = function stream_0(){
  return ju.$stream(this);
}
;
_.add = function add_12(o){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.addAll = function addAll_3(c){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.clear = function clear_11(){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.contains = function contains_12(o){
  return this.coll.contains(o);
}
;
_.containsAll = function containsAll_0(c){
  return this.coll.containsAll(c);
}
;
_.isEmpty = function isEmpty_4(){
  return this.coll.isEmpty();
}
;
_.iterator = function iterator_11(){
  return new ju.Collections$UnmodifiableCollectionIterator(this.coll.iterator());
}
;
_.remove = function remove_21(o){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.removeAll = function removeAll_1(c){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.retainAll = function retainAll_0(c){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.size = function size_15(){
  return this.coll.size();
}
;
_.toArray = function toArray_5(){
  return this.coll.toArray();
}
;
_.toArray_1 = function toArray_6(a){
  return this.coll.toArray_1(a);
}
;
_.toString_0 = function toString_35(){
  return toString_12(this.coll);
}
;
cggl.Ljava_util_Collections$UnmodifiableCollection_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollection', 151, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$UnmodifiableCollectionIterator = function $clinit_Collections$UnmodifiableCollectionIterator(){
  ju.$clinit_Collections$UnmodifiableCollectionIterator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.Collections$UnmodifiableCollectionIterator = function Collections$UnmodifiableCollectionIterator(it){
  ju.$clinit_Collections$UnmodifiableCollectionIterator();
  Object_0.call(this);
  this.$init_201();
  this.it = it;
}
;
defineClass(122, 1, {1:1, 27:1}, ju.Collections$UnmodifiableCollectionIterator);
_.$init_201 = function $init_201(){
}
;
_.forEachRemaining_0 = function forEachRemaining_9(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.hasNext_0 = function hasNext_7(){
  return this.it.hasNext_0();
}
;
_.next_3 = function next_11(){
  return this.it.next_3();
}
;
_.remove_1 = function remove_22(){
  throw toJs(new jl.UnsupportedOperationException);
}
;
cggl.Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollectionIterator', 122, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$UnmodifiableList = function $clinit_Collections$UnmodifiableList(){
  ju.$clinit_Collections$UnmodifiableList = emptyMethod;
  ju.$clinit_Collections$UnmodifiableCollection();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_List();
}
;
ju.Collections$UnmodifiableList = function Collections$UnmodifiableList(list){
  ju.$clinit_Collections$UnmodifiableList();
  ju.Collections$UnmodifiableCollection.call(this, list);
  this.$init_202();
  this.list = list;
}
;
defineClass(121, 151, {1:1, 22:1, 44:1}, ju.Collections$UnmodifiableList);
_.$init_202 = function $init_202(){
}
;
_.sort_0 = function sort_9(c){
  ju.$sort(this, c);
}
;
_.spliterator_0 = function spliterator_6(){
  return ju.$spliterator_1(this);
}
;
_.addAtIndex = function add_13(index_0, element){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.addAllAtIndex = function addAll_4(index_0, c){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.equals_0 = function equals_26(o){
  return jl.equals_Ljava_lang_Object__Z__devirtual$(this.list, o);
}
;
_.getAtIndex = function get_11(index_0){
  return this.list.getAtIndex(index_0);
}
;
_.hashCode_0 = function hashCode_28(){
  return jl.hashCode__I__devirtual$(this.list);
}
;
_.indexOf = function indexOf_4(o){
  return this.list.indexOf(o);
}
;
_.isEmpty = function isEmpty_5(){
  return this.list.isEmpty();
}
;
_.lastIndexOf = function lastIndexOf_4(o){
  return this.list.lastIndexOf(o);
}
;
_.listIterator = function listIterator_2(){
  return this.listIterator_0(0);
}
;
_.listIterator_0 = function listIterator_3(from){
  return new ju.Collections$UnmodifiableListIterator(this.list.listIterator_0(from));
}
;
_.removeAtIndex = function remove_23(index_0){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.setAtIndex = function set_7(index_0, element){
  throw toJs(new jl.UnsupportedOperationException);
}
;
_.subList = function subList_0(fromIndex, toIndex){
  return new ju.Collections$UnmodifiableList(this.list.subList(fromIndex, toIndex));
}
;
cggl.Ljava_util_Collections$UnmodifiableList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableList', 121, cggl.Ljava_util_Collections$UnmodifiableCollection_2_classLit);
ju.$clinit_Collections$UnmodifiableListIterator = function $clinit_Collections$UnmodifiableListIterator(){
  ju.$clinit_Collections$UnmodifiableListIterator = emptyMethod;
  ju.$clinit_Collections$UnmodifiableCollectionIterator();
  ju.$clinit_Iterator();
}
;
ju.Collections$UnmodifiableListIterator = function Collections$UnmodifiableListIterator(lit){
  ju.$clinit_Collections$UnmodifiableListIterator();
  ju.Collections$UnmodifiableCollectionIterator.call(this, lit);
  this.$init_203();
  this.lit = lit;
}
;
defineClass(243, 122, {1:1, 27:1}, ju.Collections$UnmodifiableListIterator);
_.$init_203 = function $init_203(){
}
;
_.remove_1 = function remove_24(){
  getClassPrototype(122).remove_1.call(this);
}
;
cggl.Ljava_util_Collections$UnmodifiableListIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableListIterator', 243, cggl.Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit);
ju.$clinit_Collections$UnmodifiableMap = function $clinit_Collections$UnmodifiableMap(){
  ju.$clinit_Collections$UnmodifiableMap = emptyMethod;
}
;
defineClass(423, 1, {1:1, 46:1});
cggl.Ljava_util_Collections$UnmodifiableMap_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap', 423, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$UnmodifiableSet = function $clinit_Collections$UnmodifiableSet(){
  ju.$clinit_Collections$UnmodifiableSet = emptyMethod;
  ju.$clinit_Collections$UnmodifiableCollection();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_Set();
}
;
ju.Collections$UnmodifiableSet = function Collections$UnmodifiableSet(set_0){
  ju.$clinit_Collections$UnmodifiableSet();
  ju.Collections$UnmodifiableCollection.call(this, set_0);
  this.$init_204();
}
;
defineClass(241, 151, {1:1, 22:1, 38:1}, ju.Collections$UnmodifiableSet);
_.$init_204 = function $init_204(){
}
;
_.spliterator_0 = function spliterator_7(){
  return ju.$spliterator_2(this);
}
;
_.equals_0 = function equals_27(o){
  return jl.equals_Ljava_lang_Object__Z__devirtual$(this.coll, o);
}
;
_.hashCode_0 = function hashCode_29(){
  return jl.hashCode__I__devirtual$(this.coll);
}
;
cggl.Ljava_util_Collections$UnmodifiableSet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableSet', 241, cggl.Ljava_util_Collections$UnmodifiableCollection_2_classLit);
ju.$clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet = function $clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet(){
  ju.$clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet = emptyMethod;
}
;
defineClass(424, 241, {1:1, 22:1, 38:1});
cggl.Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet', 424, cggl.Ljava_util_Collections$UnmodifiableSet_2_classLit);
ju.$clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet$1 = function $clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet$1(){
  ju.$clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet$1 = emptyMethod;
}
;
defineClass(429, 1, {1:1, 27:1});
cggl.Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$1_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/1', 429, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry = function $clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(){
  ju.$clinit_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry = emptyMethod;
}
;
defineClass(425, 1, {1:1, 23:1});
cggl.Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry', 425, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Collections$UnmodifiableRandomAccessList = function $clinit_Collections$UnmodifiableRandomAccessList(){
  ju.$clinit_Collections$UnmodifiableRandomAccessList = emptyMethod;
  ju.$clinit_Collections$UnmodifiableList();
}
;
ju.Collections$UnmodifiableRandomAccessList = function Collections$UnmodifiableRandomAccessList(list){
  ju.$clinit_Collections$UnmodifiableRandomAccessList();
  ju.Collections$UnmodifiableList.call(this, list);
  this.$init_205();
}
;
defineClass(242, 121, {1:1, 22:1, 44:1, 82:1}, ju.Collections$UnmodifiableRandomAccessList);
_.$init_205 = function $init_205(){
}
;
cggl.Ljava_util_Collections$UnmodifiableRandomAccessList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableRandomAccessList', 242, cggl.Ljava_util_Collections$UnmodifiableList_2_classLit);
ju.$clinit_Collections$UnmodifiableSortedMap = function $clinit_Collections$UnmodifiableSortedMap(){
  ju.$clinit_Collections$UnmodifiableSortedMap = emptyMethod;
}
;
defineClass(426, 423, {1:1, 46:1});
cggl.Ljava_util_Collections$UnmodifiableSortedMap_2_classLit = createForClass('java.util', 'Collections/UnmodifiableSortedMap', 426, cggl.Ljava_util_Collections$UnmodifiableMap_2_classLit);
ju.$clinit_Collections$UnmodifiableSortedSet = function $clinit_Collections$UnmodifiableSortedSet(){
  ju.$clinit_Collections$UnmodifiableSortedSet = emptyMethod;
}
;
defineClass(427, 241, {1:1, 22:1, 38:1});
cggl.Ljava_util_Collections$UnmodifiableSortedSet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableSortedSet', 427, cggl.Ljava_util_Collections$UnmodifiableSet_2_classLit);
ju.$clinit_Comparator$lambda$0$Type = function $clinit_Comparator$lambda$0$Type(){
  ju.$clinit_Comparator$lambda$0$Type = emptyMethod;
}
;
defineClass(343, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Comparator$lambda$0$Type_2_classLit = createForClass('java.util', 'Comparator/lambda$0$Type', 343, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparator$lambda$1$Type = function $clinit_Comparator$lambda$1$Type(){
  ju.$clinit_Comparator$lambda$1$Type = emptyMethod;
}
;
defineClass(344, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Comparator$lambda$1$Type_2_classLit = createForClass('java.util', 'Comparator/lambda$1$Type', 344, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparator$lambda$2$Type = function $clinit_Comparator$lambda$2$Type(){
  ju.$clinit_Comparator$lambda$2$Type = emptyMethod;
}
;
defineClass(345, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Comparator$lambda$2$Type_2_classLit = createForClass('java.util', 'Comparator/lambda$2$Type', 345, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparator$lambda$3$Type = function $clinit_Comparator$lambda$3$Type(){
  ju.$clinit_Comparator$lambda$3$Type = emptyMethod;
}
;
defineClass(346, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Comparator$lambda$3$Type_2_classLit = createForClass('java.util', 'Comparator/lambda$3$Type', 346, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparator$lambda$4$Type = function $clinit_Comparator$lambda$4$Type(){
  ju.$clinit_Comparator$lambda$4$Type = emptyMethod;
}
;
defineClass(347, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Comparator$lambda$4$Type_2_classLit = createForClass('java.util', 'Comparator/lambda$4$Type', 347, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparators = function $clinit_Comparators(){
  ju.$clinit_Comparators = emptyMethod;
  jl.$clinit_Object();
  ju.INTERNAL_NATURAL_ORDER = new ju.Comparators$NaturalOrderComparator;
  ju.NATURAL_ORDER = new ju.Comparators$NaturalOrderComparator;
  ju.REVERSE_NATURAL_ORDER = new ju.Comparators$ReverseNaturalOrderComparator;
}
;
ju.nullToNaturalOrder = function nullToNaturalOrder(cmp){
  ju.$clinit_Comparators();
  return isNull(cmp)?castTo(ju.INTERNAL_NATURAL_ORDER, 26):cmp;
}
;
defineClass(444, 1, {1:1});
cggl.Ljava_util_Comparators_2_classLit = createForClass('java.util', 'Comparators', 444, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparators$NaturalOrderComparator = function $clinit_Comparators$NaturalOrderComparator(){
  ju.$clinit_Comparators$NaturalOrderComparator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
ju.Comparators$NaturalOrderComparator = function Comparators$NaturalOrderComparator(){
  ju.$clinit_Comparators$NaturalOrderComparator();
  Object_0.call(this);
  this.$init_206();
}
;
defineClass(158, 1, {4:1, 1:1, 26:1}, ju.Comparators$NaturalOrderComparator);
_.$init_206 = function $init_206(){
}
;
_.compare_0 = function compare_32(a, b){
  return this.compare_7(castTo(a, 20), castTo(b, 20));
}
;
_.equals_0 = function equals_28(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_7 = function compare_31(a, b){
  return jl.compareTo_Ljava_lang_Object__I__devirtual$_0(castTo(ji2.checkNotNull_0(a), 20), ji2.checkNotNull_0(b));
}
;
cggl.Ljava_util_Comparators$NaturalOrderComparator_2_classLit = createForClass('java.util', 'Comparators/NaturalOrderComparator', 158, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparators$NullComparator = function $clinit_Comparators$NullComparator(){
  ju.$clinit_Comparators$NullComparator = emptyMethod;
}
;
defineClass(446, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Comparators$NullComparator_2_classLit = createForClass('java.util', 'Comparators/NullComparator', 446, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparators$ReverseNaturalOrderComparator = function $clinit_Comparators$ReverseNaturalOrderComparator(){
  ju.$clinit_Comparators$ReverseNaturalOrderComparator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Comparator();
}
;
ju.Comparators$ReverseNaturalOrderComparator = function Comparators$ReverseNaturalOrderComparator(){
  ju.$clinit_Comparators$ReverseNaturalOrderComparator();
  Object_0.call(this);
  this.$init_207();
}
;
defineClass(267, 1, {4:1, 1:1, 26:1}, ju.Comparators$ReverseNaturalOrderComparator);
_.$init_207 = function $init_207(){
}
;
_.compare_0 = function compare_34(a, b){
  return this.compare_7(castTo(a, 20), castTo(b, 20));
}
;
_.equals_0 = function equals_29(other){
  return getClassPrototype(1).equals_0.call(this, other);
}
;
_.compare_7 = function compare_33(a, b){
  return jl.compareTo_Ljava_lang_Object__I__devirtual$_0(castTo(ji2.checkNotNull_0(b), 20), ji2.checkNotNull_0(a));
}
;
cggl.Ljava_util_Comparators$ReverseNaturalOrderComparator_2_classLit = createForClass('java.util', 'Comparators/ReverseNaturalOrderComparator', 267, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Comparators$ReversedComparator = function $clinit_Comparators$ReversedComparator(){
  ju.$clinit_Comparators$ReversedComparator = emptyMethod;
}
;
defineClass(445, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Comparators$ReversedComparator_2_classLit = createForClass('java.util', 'Comparators/ReversedComparator', 445, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_ConcurrentModificationDetector = function $clinit_ConcurrentModificationDetector(){
  ju.$clinit_ConcurrentModificationDetector = emptyMethod;
  jl.$clinit_Object();
  ju.API_CHECK = ji2.isApiChecked();
}
;
ju.checkStructuralChange = function checkStructuralChange(host, iterator){
  ju.$clinit_ConcurrentModificationDetector();
  if (!ju.API_CHECK) {
    return;
  }
  if (castToUnknownNative(iterator).$modCount != castToUnknownNative(host).$modCount) {
    throw toJs(new ju.ConcurrentModificationException);
  }
}
;
ju.recordLastKnownStructure = function recordLastKnownStructure(host, iterator){
  ju.$clinit_ConcurrentModificationDetector();
  if (!ju.API_CHECK) {
    return;
  }
  castToUnknownNative(iterator).$modCount = castToUnknownNative(host).$modCount;
}
;
ju.structureChanged = function structureChanged(host){
  ju.$clinit_ConcurrentModificationDetector();
  var modCount, modCountable;
  if (!ju.API_CHECK) {
    return;
  }
  modCountable = castToUnknownNative(host);
  modCount = modCountable.$modCount | 0;
  modCountable.$modCount = modCount + 1;
}
;
defineClass(483, 1, {1:1});
ju.API_CHECK = false;
cggl.Ljava_util_ConcurrentModificationDetector_2_classLit = createForClass('java.util', 'ConcurrentModificationDetector', 483, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_ConcurrentModificationDetector$ModCountable = function $clinit_ConcurrentModificationDetector$ModCountable(){
  ju.$clinit_ConcurrentModificationDetector$ModCountable = emptyMethod;
}
;
ju.$clinit_ConcurrentModificationException = function $clinit_ConcurrentModificationException(){
  ju.$clinit_ConcurrentModificationException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
ju.ConcurrentModificationException = function ConcurrentModificationException(){
  ju.$clinit_ConcurrentModificationException();
  jl.RuntimeException.call(this);
  this.$init_208();
}
;
defineClass(300, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, ju.ConcurrentModificationException);
_.$init_208 = function $init_208(){
}
;
cggl.Ljava_util_ConcurrentModificationException_2_classLit = createForClass('java.util', 'ConcurrentModificationException', 300, cggl.Ljava_lang_RuntimeException_2_classLit);
ju.$clinit_HashMap = function $clinit_HashMap(){
  ju.$clinit_HashMap = emptyMethod;
  ju.$clinit_AbstractHashMap();
}
;
ju.HashMap = function HashMap(){
  ju.$clinit_HashMap();
  ju.AbstractHashMap.call(this);
  this.$init_209();
}
;
ju.HashMap_0 = function HashMap_0(ignored){
  ju.$clinit_HashMap();
  ju.AbstractHashMap_0.call(this, ignored);
  this.$init_209();
}
;
defineClass(159, 129, {4:1, 1:1, 46:1}, ju.HashMap, ju.HashMap_0);
_.$init_209 = function $init_209(){
}
;
_.equals_1 = function equals_30(value1, value2){
  return ju.equals_31(value1, value2);
}
;
_.getHashCode = function getHashCode(key){
  var hashCode;
  hashCode = jl.hashCode__I__devirtual$(key);
  return ji2.ensureInt(hashCode);
}
;
cggl.Ljava_util_HashMap_2_classLit = createForClass('java.util', 'HashMap', 159, cggl.Ljava_util_AbstractHashMap_2_classLit);
ju.$clinit_HashSet = function $clinit_HashSet(){
  ju.$clinit_HashSet = emptyMethod;
  ju.$clinit_AbstractSet();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_Set();
}
;
ju.HashSet = function HashSet(initialCapacity){
  ju.$clinit_HashSet();
  ju.AbstractSet.call(this);
  this.$init_210();
  this.map_0 = new ju.HashMap_0(initialCapacity);
}
;
defineClass(263, 64, {4:1, 1:1, 22:1, 38:1}, ju.HashSet);
_.$init_210 = function $init_210(){
}
;
_.add = function add_14(o){
  var old;
  old = this.map_0.put(o, this);
  return jsEquals(old, null);
}
;
_.clear = function clear_12(){
  this.map_0.clear();
}
;
_.contains = function contains_13(o){
  return this.map_0.containsKey(o);
}
;
_.isEmpty = function isEmpty_6(){
  return this.map_0.isEmpty();
}
;
_.iterator = function iterator_12(){
  return this.map_0.keySet().iterator();
}
;
_.remove = function remove_25(o){
  return jsNotEquals(this.map_0.remove(o), null);
}
;
_.size = function size_16(){
  return this.map_0.size();
}
;
cggl.Ljava_util_HashSet_2_classLit = createForClass('java.util', 'HashSet', 263, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_InternalHashCodeMap = function $clinit_InternalHashCodeMap(){
  ju.$clinit_InternalHashCodeMap = emptyMethod;
  jl.$clinit_Object();
  jl.$clinit_Iterable();
}
;
ju.InternalHashCodeMap = function InternalHashCodeMap(host){
  ju.$clinit_InternalHashCodeMap();
  Object_0.call(this);
  this.$init_211();
  this.host = host;
}
;
defineClass(289, 1, {1:1}, ju.InternalHashCodeMap);
_.$init_211 = function $init_211(){
  this.backingMap = ju.newJsMap();
}
;
_.forEach = function forEach_3(action){
  jl.$forEach(this, action);
}
;
_.spliterator_0 = function spliterator_8(){
  return jl.$spliterator(this);
}
;
_.findEntryInChain = function findEntryInChain(key, chain){
  var entry, entry$array, entry$index, entry$max;
  for (entry$array = chain , entry$index = 0 , entry$max = entry$array.length; entry$index < entry$max; ++entry$index) {
    entry = entry$array[entry$index];
    if (this.host.equals_1(key, entry.getKey())) {
      return entry;
    }
  }
  return null;
}
;
_.getChainOrEmpty = function getChainOrEmpty(hashCode){
  var chain;
  chain = ji2.uncheckedCast(this.backingMap.get(hashCode));
  return jsEquals(chain, null)?this.newEntryChain():chain;
}
;
_.getEntry_0 = function getEntry(key){
  return this.findEntryInChain(key, this.getChainOrEmpty(this.hash(key)));
}
;
_.hash = function hash(key){
  return jsEquals(key, null)?0:this.host.getHashCode(key);
}
;
_.iterator = function iterator_13(){
  return new ju.InternalHashCodeMap$1(this);
}
;
_.newEntryChain = function newEntryChain(){
  ju.$clinit_InternalHashCodeMap();
  return ji2.uncheckedCast(new Array);
}
;
_.put_0 = function put_1(key, value_0){
  var chain, entry, hashCode;
  hashCode = this.hash(key);
  chain = this.getChainOrEmpty(hashCode);
  if (chain.length == 0) {
    this.backingMap.set(hashCode, chain);
  }
   else {
    entry = this.findEntryInChain(key, chain);
    if (isNotNull(entry)) {
      return entry.setValue(value_0);
    }
  }
  setCheck(chain, chain.length, new ju.AbstractMap$SimpleEntry(key, value_0));
  this.size_0++;
  ju.structureChanged(this.host);
  return null;
}
;
_.remove_2 = function remove_26(key){
  var chain, entry, hashCode, i;
  hashCode = this.hash(key);
  chain = this.getChainOrEmpty(hashCode);
  for (i = 0; i < chain.length; i++) {
    entry = chain[i];
    if (this.host.equals_1(key, entry.getKey())) {
      if (chain.length == 1) {
        ji2.setLength_0(chain, 0);
        ju.$delete(this.backingMap, hashCode);
      }
       else {
        ji2.removeFrom(chain, i, 1);
      }
      this.size_0--;
      ju.structureChanged(this.host);
      return entry.getValue_0();
    }
  }
  return null;
}
;
_.size_1 = function size_17(){
  return this.size_0;
}
;
_.size_0 = 0;
cggl.Ljava_util_InternalHashCodeMap_2_classLit = createForClass('java.util', 'InternalHashCodeMap', 289, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_InternalHashCodeMap$1 = function $clinit_InternalHashCodeMap$1(){
  ju.$clinit_InternalHashCodeMap$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.InternalHashCodeMap$1 = function InternalHashCodeMap$1(this$0){
  ju.$clinit_InternalHashCodeMap$1();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_212();
}
;
defineClass(290, 1, {1:1, 27:1}, ju.InternalHashCodeMap$1);
_.$init_212 = function $init_212(){
  this.chains = this.this$01.backingMap.entries();
  this.itemIndex = 0;
  this.chain = this.this$01.newEntryChain();
  this.lastEntry = null;
}
;
_.forEachRemaining_0 = function forEachRemaining_10(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.next_3 = function next_12(){
  return this.next_4();
}
;
_.hasNext_0 = function hasNext_8(){
  var current;
  if (this.itemIndex < this.chain.length) {
    return true;
  }
  current = this.chains.next();
  if (!current.done) {
    this.chain = ji2.uncheckedCast(ju.$getValue(current));
    this.itemIndex = 0;
    return true;
  }
  return false;
}
;
_.next_4 = function next_13(){
  this.lastEntry = this.chain[this.itemIndex++];
  return this.lastEntry;
}
;
_.remove_1 = function remove_27(){
  this.this$01.remove_2(this.lastEntry.getKey());
  if (this.itemIndex != 0) {
    this.itemIndex--;
  }
}
;
_.itemIndex = 0;
cggl.Ljava_util_InternalHashCodeMap$1_2_classLit = createForClass('java.util', 'InternalHashCodeMap/1', 290, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_InternalJsMap = function $clinit_InternalJsMap(){
  ju.$clinit_InternalJsMap = emptyMethod;
}
;
ju.$delete = function $delete(this$static, key){
  ju.$clinit_InternalJsMap();
  var fn;
  fn = ji2.getProperty(this$static, 'delete');
  fn.call(this$static, key);
}
;
ju.$delete_0 = function $delete_0(this$static, key){
  ju.$clinit_InternalJsMap();
  var fn;
  fn = ji2.getProperty(this$static, 'delete');
  fn.call(this$static, key);
}
;
ju.$clinit_InternalJsMap$DeleteFunction = function $clinit_InternalJsMap$DeleteFunction(){
  ju.$clinit_InternalJsMap$DeleteFunction = emptyMethod;
}
;
ju.$clinit_InternalJsMap$Iterator = function $clinit_InternalJsMap$Iterator(){
  ju.$clinit_InternalJsMap$Iterator = emptyMethod;
}
;
ju.$clinit_InternalJsMap$IteratorEntry = function $clinit_InternalJsMap$IteratorEntry(){
  ju.$clinit_InternalJsMap$IteratorEntry = emptyMethod;
}
;
ju.$getKey = function $getKey(this$static){
  ju.$clinit_InternalJsMap$IteratorEntry();
  return ji2.uncheckedCast(this$static.value[0]);
}
;
ju.$getValue = function $getValue(this$static){
  ju.$clinit_InternalJsMap$IteratorEntry();
  return ji2.uncheckedCast(this$static.value[1]);
}
;
ju.$clinit_InternalJsMapFactory = function $clinit_InternalJsMapFactory(){
  ju.$clinit_InternalJsMapFactory = emptyMethod;
  jl.$clinit_Object();
  ju.jsMapCtor = ju.getJsMapConstructor();
}
;
ju.canHandleObjectCreateAndProto = function canHandleObjectCreateAndProto(){
  if (!Object.create || !Object.getOwnPropertyNames) {
    return false;
  }
  var protoField = '__proto__';
  var map_0 = Object.create(null);
  if (map_0[protoField] !== undefined) {
    return false;
  }
  var keys_0 = Object.getOwnPropertyNames(map_0);
  if (keys_0.length != 0) {
    return false;
  }
  map_0[protoField] = 42;
  if (map_0[protoField] !== 42) {
    return false;
  }
  if (Object.getOwnPropertyNames(map_0).length == 0) {
    return false;
  }
  return true;
}
;
ju.getJsMapConstructor = function getJsMapConstructor(){
  function isCorrectIterationProtocol(){
    try {
      return (new Map).entries().next().done;
    }
     catch (e) {
      return false;
    }
  }

  if (typeof Map === 'function' && (Map.prototype.entries && isCorrectIterationProtocol())) {
    return Map;
  }
   else {
    return ju.getJsMapPolyFill();
  }
}
;
ju.getJsMapPolyFill = function getJsMapPolyFill(){
  function Stringmap(){
    this.obj = this.createObject();
  }

  ;
  Stringmap.prototype.createObject = function(key){
    return Object.create(null);
  }
  ;
  Stringmap.prototype.get = function(key){
    return this.obj[key];
  }
  ;
  Stringmap.prototype.set = function(key, value_0){
    this.obj[key] = value_0;
  }
  ;
  Stringmap.prototype['delete'] = function(key){
    delete this.obj[key];
  }
  ;
  Stringmap.prototype.keys = function(){
    return Object.getOwnPropertyNames(this.obj);
  }
  ;
  Stringmap.prototype.entries = function(){
    var keys_0 = this.keys();
    var map_0 = this;
    var nextIndex = 0;
    return {next:function(){
      if (nextIndex >= keys_0.length)
        return {done:true};
      var key = keys_0[nextIndex++];
      return {value:[key, map_0.get(key)], done:false};
    }
    };
  }
  ;
  if (!ju.canHandleObjectCreateAndProto()) {
    Stringmap.prototype.createObject = function(){
      return {};
    }
    ;
    Stringmap.prototype.get = function(key){
      return this.obj[':' + key];
    }
    ;
    Stringmap.prototype.set = function(key, value_0){
      this.obj[':' + key] = value_0;
    }
    ;
    Stringmap.prototype['delete'] = function(key){
      delete this.obj[':' + key];
    }
    ;
    Stringmap.prototype.keys = function(){
      var result = [];
      for (var key in this.obj) {
        if (key.charCodeAt(0) == 58) {
          result.push(key.substring(1));
        }
      }
      return result;
    }
    ;
  }
  return Stringmap;
}
;
ju.newJsMap = function newJsMap(){
  ju.$clinit_InternalJsMapFactory();
  return new ju.jsMapCtor;
}
;
defineClass(572, 1, {1:1});
cggl.Ljava_util_InternalJsMapFactory_2_classLit = createForClass('java.util', 'InternalJsMapFactory', 572, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_InternalStringMap = function $clinit_InternalStringMap(){
  ju.$clinit_InternalStringMap = emptyMethod;
  jl.$clinit_Object();
  jl.$clinit_Iterable();
}
;
ju.InternalStringMap = function InternalStringMap(host){
  ju.$clinit_InternalStringMap();
  Object_0.call(this);
  this.$init_213();
  this.host = host;
}
;
ju.toNullIfUndefined = function toNullIfUndefined(value_0){
  return ji2.isUndefined(value_0)?null:value_0;
}
;
defineClass(284, 1, {1:1}, ju.InternalStringMap);
_.$init_213 = function $init_213(){
  this.backingMap = ju.newJsMap();
}
;
_.forEach = function forEach_4(action){
  jl.$forEach(this, action);
}
;
_.spliterator_0 = function spliterator_9(){
  return jl.$spliterator(this);
}
;
_.contains_0 = function contains_14(key){
  return !ji2.isUndefined(this.backingMap.get(key));
}
;
_.get_1 = function get_12(key){
  return this.backingMap.get(key);
}
;
_.iterator = function iterator_14(){
  return new ju.InternalStringMap$1(this);
}
;
_.newMapEntry = function newMapEntry(entry, lastValueMod){
  ju.$clinit_InternalStringMap();
  return new ju.InternalStringMap$2(this, entry, lastValueMod);
}
;
_.put_1 = function put_2(key, value_0){
  var oldValue;
  oldValue = this.backingMap.get(key);
  this.backingMap.set(key, ju.toNullIfUndefined(value_0));
  if (ji2.isUndefined(oldValue)) {
    this.size_0++;
    ju.structureChanged(this.host);
  }
   else {
    this.valueMod++;
  }
  return oldValue;
}
;
_.remove_3 = function remove_28(key){
  var value_0;
  value_0 = this.backingMap.get(key);
  if (!ji2.isUndefined(value_0)) {
    ju.$delete_0(this.backingMap, key);
    this.size_0--;
    ju.structureChanged(this.host);
  }
   else {
    this.valueMod++;
  }
  return value_0;
}
;
_.size_1 = function size_18(){
  return this.size_0;
}
;
_.size_0 = 0;
_.valueMod = 0;
cggl.Ljava_util_InternalStringMap_2_classLit = createForClass('java.util', 'InternalStringMap', 284, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_InternalStringMap$1 = function $clinit_InternalStringMap$1(){
  ju.$clinit_InternalStringMap$1 = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.InternalStringMap$1 = function InternalStringMap$1(this$0){
  ju.$clinit_InternalStringMap$1();
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_214();
}
;
defineClass(285, 1, {1:1, 27:1}, ju.InternalStringMap$1);
_.$init_214 = function $init_214(){
  this.entries_0 = this.this$01.backingMap.entries();
  this.current = this.entries_0.next();
}
;
_.forEachRemaining_0 = function forEachRemaining_11(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.next_3 = function next_14(){
  return this.next_4();
}
;
_.hasNext_0 = function hasNext_9(){
  return !this.current.done;
}
;
_.next_4 = function next_15(){
  this.last = this.current;
  this.current = this.entries_0.next();
  return this.this$01.newMapEntry(this.last, this.this$01.valueMod);
}
;
_.remove_1 = function remove_29(){
  this.this$01.remove_3(ju.$getKey(this.last));
}
;
cggl.Ljava_util_InternalStringMap$1_2_classLit = createForClass('java.util', 'InternalStringMap/1', 285, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_InternalStringMap$2 = function $clinit_InternalStringMap$2(){
  ju.$clinit_InternalStringMap$2 = emptyMethod;
  ju.$clinit_AbstractMapEntry();
}
;
ju.InternalStringMap$2 = function InternalStringMap$2(this$0, val$entry, val$lastValueMod){
  ju.$clinit_InternalStringMap$2();
  this.this$01 = this$0;
  this.val$entry2 = val$entry;
  this.val$lastValueMod3 = val$lastValueMod;
  ju.AbstractMapEntry.call(this);
  this.$init_215();
}
;
defineClass(287, 286, {1:1, 23:1}, ju.InternalStringMap$2);
_.$init_215 = function $init_215(){
}
;
_.getKey = function getKey_0(){
  return ju.$getKey(this.val$entry2);
}
;
_.getValue_0 = function getValue_1(){
  if (this.this$01.valueMod != this.val$lastValueMod3) {
    return this.this$01.get_1(ju.$getKey(this.val$entry2));
  }
  return ju.$getValue(this.val$entry2);
}
;
_.setValue = function setValue_0(object){
  return this.this$01.put_1(ju.$getKey(this.val$entry2), object);
}
;
_.val$lastValueMod3 = 0;
cggl.Ljava_util_InternalStringMap$2_2_classLit = createForClass('java.util', 'InternalStringMap/2', 287, cggl.Ljava_util_AbstractMapEntry_2_classLit);
ju.$clinit_Locale = function $clinit_Locale(){
  ju.$clinit_Locale = emptyMethod;
  jl.$clinit_Object();
  ju.ROOT = new ju.Locale$1;
  ju.ENGLISH = new ju.Locale$2;
  ju.US = new ju.Locale$3;
  ju.defaultLocale = new ju.Locale$4;
}
;
ju.Locale = function Locale(){
  ju.$clinit_Locale();
  Object_0.call(this);
  this.$init_216();
}
;
ju.getDefault_0 = function getDefault_0(){
  ju.$clinit_Locale();
  return ju.defaultLocale;
}
;
defineClass(87, 1, {1:1});
_.$init_216 = function $init_216(){
}
;
cggl.Ljava_util_Locale_2_classLit = createForClass('java.util', 'Locale', 87, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Locale$1 = function $clinit_Locale$1(){
  ju.$clinit_Locale$1 = emptyMethod;
  ju.$clinit_Locale();
}
;
ju.Locale$1 = function Locale$1(){
  ju.$clinit_Locale$1();
  ju.Locale.call(this);
  this.$init_217();
}
;
defineClass(184, 87, {1:1}, ju.Locale$1);
_.$init_217 = function $init_217(){
}
;
_.toString_0 = function toString_36(){
  return '';
}
;
cggl.Ljava_util_Locale$1_2_classLit = createForClass('java.util', 'Locale/1', 184, cggl.Ljava_util_Locale_2_classLit);
ju.$clinit_Locale$2 = function $clinit_Locale$2(){
  ju.$clinit_Locale$2 = emptyMethod;
  ju.$clinit_Locale();
}
;
ju.Locale$2 = function Locale$2(){
  ju.$clinit_Locale$2();
  ju.Locale.call(this);
  this.$init_218();
}
;
defineClass(185, 87, {1:1}, ju.Locale$2);
_.$init_218 = function $init_218(){
}
;
_.toString_0 = function toString_37(){
  return 'en';
}
;
cggl.Ljava_util_Locale$2_2_classLit = createForClass('java.util', 'Locale/2', 185, cggl.Ljava_util_Locale_2_classLit);
ju.$clinit_Locale$3 = function $clinit_Locale$3(){
  ju.$clinit_Locale$3 = emptyMethod;
  ju.$clinit_Locale();
}
;
ju.Locale$3 = function Locale$3(){
  ju.$clinit_Locale$3();
  ju.Locale.call(this);
  this.$init_219();
}
;
defineClass(186, 87, {1:1}, ju.Locale$3);
_.$init_219 = function $init_219(){
}
;
_.toString_0 = function toString_38(){
  return 'en_US';
}
;
cggl.Ljava_util_Locale$3_2_classLit = createForClass('java.util', 'Locale/3', 186, cggl.Ljava_util_Locale_2_classLit);
ju.$clinit_Locale$4 = function $clinit_Locale$4(){
  ju.$clinit_Locale$4 = emptyMethod;
  ju.$clinit_Locale();
}
;
ju.Locale$4 = function Locale$4(){
  ju.$clinit_Locale$4();
  ju.Locale.call(this);
  this.$init_220();
}
;
defineClass(187, 87, {1:1}, ju.Locale$4);
_.$init_220 = function $init_220(){
}
;
_.toString_0 = function toString_39(){
  return 'unknown';
}
;
cggl.Ljava_util_Locale$4_2_classLit = createForClass('java.util', 'Locale/4', 187, cggl.Ljava_util_Locale_2_classLit);
ju.$clinit_Map$Entry$lambda$0$Type = function $clinit_Map$Entry$lambda$0$Type(){
  ju.$clinit_Map$Entry$lambda$0$Type = emptyMethod;
}
;
defineClass(432, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Map$Entry$lambda$0$Type_2_classLit = createForClass('java.util', 'Map/Entry/lambda$0$Type', 432, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Map$Entry$lambda$1$Type = function $clinit_Map$Entry$lambda$1$Type(){
  ju.$clinit_Map$Entry$lambda$1$Type = emptyMethod;
}
;
defineClass(433, 1, {4:1, 1:1, 26:1});
cggl.Ljava_util_Map$Entry$lambda$1$Type_2_classLit = createForClass('java.util', 'Map/Entry/lambda$1$Type', 433, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_NoSuchElementException = function $clinit_NoSuchElementException(){
  ju.$clinit_NoSuchElementException = emptyMethod;
  jl.$clinit_RuntimeException();
}
;
ju.NoSuchElementException = function NoSuchElementException(){
  ju.$clinit_NoSuchElementException();
  jl.RuntimeException.call(this);
  this.$init_221();
}
;
defineClass(164, 16, {4:1, 11:1, 1:1, 16:1, 13:1}, ju.NoSuchElementException);
_.$init_221 = function $init_221(){
}
;
cggl.Ljava_util_NoSuchElementException_2_classLit = createForClass('java.util', 'NoSuchElementException', 164, cggl.Ljava_lang_RuntimeException_2_classLit);
ju.$clinit_Objects = function $clinit_Objects(){
  ju.$clinit_Objects = emptyMethod;
  jl.$clinit_Object();
}
;
ju.equals_31 = function equals_31(a, b){
  ju.$clinit_Objects();
  return maskUndefined(a) === maskUndefined(b) || jsNotEquals(a, null) && jl.equals_Ljava_lang_Object__Z__devirtual$(a, b);
}
;
ju.equals_32 = function equals_32(a, b){
  ju.$clinit_Objects();
  return jsEquals(a, b);
}
;
ju.hash_0 = function hash_0(values){
  ju.$clinit_Objects();
  return ju.hashCode_25(values);
}
;
ju.hashCode_30 = function hashCode_30(o){
  ju.$clinit_Objects();
  return jsNotEquals(o, null)?jl.hashCode__I__devirtual$(o):0;
}
;
defineClass(443, 1, {1:1});
cggl.Ljava_util_Objects_2_classLit = createForClass('java.util', 'Objects', 443, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_PrimitiveIterator$OfDouble = function $clinit_PrimitiveIterator$OfDouble(){
  ju.$clinit_PrimitiveIterator$OfDouble = emptyMethod;
}
;
cggl.Ljava_util_PrimitiveIterator$OfDouble_2_classLit = createForInterface('java.util', 'PrimitiveIterator/OfDouble');
juf.$clinit_DoubleConsumer = function $clinit_DoubleConsumer(){
  juf.$clinit_DoubleConsumer = emptyMethod;
}
;
cggl.Ljava_util_function_DoubleConsumer_2_classLit = createForInterface('java.util.function', 'DoubleConsumer');
ju.$clinit_PrimitiveIterator$OfDouble$0methodref$accept$Type = function $clinit_PrimitiveIterator$OfDouble$0methodref$accept$Type(){
  ju.$clinit_PrimitiveIterator$OfDouble$0methodref$accept$Type = emptyMethod;
}
;
defineClass(308, 1, {1:1});
cggl.Ljava_util_PrimitiveIterator$OfDouble$0methodref$accept$Type_2_classLit = createForClass('java.util', 'PrimitiveIterator/OfDouble/0methodref$accept$Type', 308, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_IntConsumer = function $clinit_IntConsumer(){
  juf.$clinit_IntConsumer = emptyMethod;
}
;
cggl.Ljava_util_function_IntConsumer_2_classLit = createForInterface('java.util.function', 'IntConsumer');
ju.$clinit_PrimitiveIterator$OfInt$1methodref$accept$Type = function $clinit_PrimitiveIterator$OfInt$1methodref$accept$Type(){
  ju.$clinit_PrimitiveIterator$OfInt$1methodref$accept$Type = emptyMethod;
}
;
ju.PrimitiveIterator$OfInt$1methodref$accept$Type = function PrimitiveIterator$OfInt$1methodref$accept$Type($$outer_0){
  ju.$clinit_PrimitiveIterator$OfInt$1methodref$accept$Type();
  this.$$outer_0 = $$outer_0;
}
;
defineClass(175, 1, {1:1, 17:1}, ju.PrimitiveIterator$OfInt$1methodref$accept$Type);
_.accept = function accept(arg0){
  this.$$outer_0.accept_0(jl.valueOf_9(arg0));
}
;
cggl.Ljava_util_PrimitiveIterator$OfInt$1methodref$accept$Type_2_classLit = createForClass('java.util', 'PrimitiveIterator/OfInt/1methodref$accept$Type', 175, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_PrimitiveIterator$OfLong = function $clinit_PrimitiveIterator$OfLong(){
  ju.$clinit_PrimitiveIterator$OfLong = emptyMethod;
}
;
cggl.Ljava_util_PrimitiveIterator$OfLong_2_classLit = createForInterface('java.util', 'PrimitiveIterator/OfLong');
juf.$clinit_LongConsumer = function $clinit_LongConsumer(){
  juf.$clinit_LongConsumer = emptyMethod;
}
;
cggl.Ljava_util_function_LongConsumer_2_classLit = createForInterface('java.util.function', 'LongConsumer');
ju.$clinit_PrimitiveIterator$OfLong$2methodref$accept$Type = function $clinit_PrimitiveIterator$OfLong$2methodref$accept$Type(){
  ju.$clinit_PrimitiveIterator$OfLong$2methodref$accept$Type = emptyMethod;
}
;
defineClass(309, 1, {1:1});
cggl.Ljava_util_PrimitiveIterator$OfLong$2methodref$accept$Type_2_classLit = createForClass('java.util', 'PrimitiveIterator/OfLong/2methodref$accept$Type', 309, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Random = function $clinit_Random(){
  ju.$clinit_Random = emptyMethod;
  var i, i0, twoToTheXMinus24Tmp, twoToTheXMinus48Tmp;
  jl.$clinit_Object();
  ju.twoToTheXMinus24 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 25, 15, 1);
  ju.twoToTheXMinus48 = initUnidimensionalArray(cggl.D_classLit, {14:1, 4:1, 1:1}, 5, 33, 15, 1);
  {
    twoToTheXMinus48Tmp = 1.52587890625E-5;
    for (i0 = 32; i0 >= 0; i0--) {
      ju.twoToTheXMinus48[i0] = twoToTheXMinus48Tmp;
      twoToTheXMinus48Tmp *= 0.5;
    }
    twoToTheXMinus24Tmp = 1;
    for (i = 24; i >= 0; i--) {
      ju.twoToTheXMinus24[i] = twoToTheXMinus24Tmp;
      twoToTheXMinus24Tmp *= 0.5;
    }
  }
}
;
ju.Random = function Random(){
  ju.$clinit_Random();
  var hi, lo, seed;
  Object_0.call(this);
  this.$init_222();
  seed = ju.uniqueSeed++ + Date.now();
  hi = round_int($wnd.Math.floor(seed * 5.9604644775390625E-8)) & 16777215;
  lo = round_int(seed - hi * 16777216);
  this.setSeed(hi, lo);
}
;
ju.Random_0 = function Random_0(seed){
  ju.$clinit_Random();
  Object_0.call(this);
  this.$init_222();
  this.setSeed_0(seed);
}
;
defineClass(150, 1, {1:1}, ju.Random, ju.Random_0);
_.$init_222 = function $init_222(){
  this.haveNextNextGaussian = false;
}
;
_.nextInt = function nextInt_0(){
  return round_int(this.nextInternal(32));
}
;
_.nextInt_0 = function nextInt_1(n){
  var bits, val;
  ji2.checkCriticalArgument_0(n > 0);
  if ((n & -n) == n) {
    return round_int(n * this.nextInternal(31) * 4.6566128730773926E-10);
  }
  do {
    bits = this.nextInternal(31);
    val = bits % n;
  }
   while (bits - val + (n - 1) < 0);
  return round_int(val);
}
;
_.nextInternal = function nextInternal(bits){
  var carry, dval, h, hi, l, lo;
  hi = this.seedhi * 15525485 + this.seedlo * 1502;
  lo = this.seedlo * 15525485 + 11;
  carry = $wnd.Math.floor(lo * 5.9604644775390625E-8);
  hi += carry;
  lo -= carry * 16777216;
  hi %= 16777216;
  this.seedhi = hi;
  this.seedlo = lo;
  if (bits <= 24) {
    return $wnd.Math.floor(this.seedhi * ju.twoToTheXMinus24[bits]);
  }
   else {
    h = this.seedhi * (1 << bits - 24);
    l = $wnd.Math.floor(this.seedlo * ju.twoToTheXMinus48[bits]);
    dval = h + l;
    if (dval >= 2147483648) {
      dval -= 4294967296;
    }
    return dval;
  }
}
;
_.setSeed = function setSeed(seedhi, seedlo){
  this.seedhi = seedhi ^ 1502;
  this.seedlo = seedlo ^ 15525485;
  this.haveNextNextGaussian = false;
}
;
_.setSeed_0 = function setSeed_0(seed){
  this.setSeed(toInt_0(and_0(shr_0(seed, 24), 16777215)), toInt_0(and_0(seed, 16777215)));
}
;
_.haveNextNextGaussian = false;
_.seedhi = 0;
_.seedlo = 0;
ju.multiplierHi = 1502;
ju.multiplierLo = 15525485;
ju.twoToThe24 = 16777216;
ju.twoToThe31 = 2147483648;
ju.twoToThe32 = 4294967296;
ju.twoToTheMinus24 = 5.9604644775390625E-8;
ju.twoToTheMinus26 = 1.4901161193847656E-8;
ju.twoToTheMinus31 = 4.6566128730773926E-10;
ju.twoToTheMinus53 = 1.1102230246251565E-16;
ju.uniqueSeed = 0;
cggl.Ljava_util_Random_2_classLit = createForClass('java.util', 'Random', 150, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterator = function $clinit_Spliterator(){
  ju.$clinit_Spliterator = emptyMethod;
}
;
ju.$forEachRemaining_3 = function $forEachRemaining_3(this$static, consumer){
  while (this$static.tryAdvance(consumer)) {
  }
}
;
ju.CONCURRENT = 4096;
ju.DISTINCT = 1;
ju.IMMUTABLE = 1024;
ju.NONNULL = 256;
ju.ORDERED = 16;
ju.SIZED = 64;
ju.SORTED = 4;
ju.SUBSIZED = 16384;
cggl.Ljava_util_Spliterator_2_classLit = createForInterface('java.util', 'Spliterator');
ju.$clinit_Spliterators$IteratorSpliterator = function $clinit_Spliterators$IteratorSpliterator(){
  ju.$clinit_Spliterators$IteratorSpliterator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Spliterator();
}
;
ju.Spliterators$IteratorSpliterator = function Spliterators$IteratorSpliterator(collection, characteristics){
  ju.$clinit_Spliterators$IteratorSpliterator();
  Object_0.call(this);
  this.$init_223();
  this.collection = castTo(ji2.checkNotNull_0(collection), 22);
  this.characteristics = ju.sizeKnownIteratorSpliteratorCharacteristics(characteristics);
}
;
ju.Spliterators$IteratorSpliterator_0 = function Spliterators$IteratorSpliterator_0(it, characteristics){
  ju.$clinit_Spliterators$IteratorSpliterator();
  Object_0.call(this);
  this.$init_223();
  this.it = castTo(ji2.checkNotNull_0(it), 27);
  this.characteristics = ju.sizeUnknownSpliteratorCharacteristics(characteristics);
  this.estimateSize = {l:4194303, m:4194303, h:524287};
}
;
defineClass(108, 1, {1:1, 15:1}, ju.Spliterators$IteratorSpliterator, ju.Spliterators$IteratorSpliterator_0);
_.$init_223 = function $init_223(){
}
;
_.characteristics_0 = function characteristics_0(){
  return this.characteristics;
}
;
_.estimateSize_0 = function estimateSize(){
  this.initIterator();
  return this.estimateSize;
}
;
_.forEachRemaining_0 = function forEachRemaining_12(consumer){
  this.initIterator();
  this.it.forEachRemaining_0(consumer);
}
;
_.initIterator = function initIterator(){
  if (isNull(this.it)) {
    this.it = this.collection.iterator();
    this.estimateSize = fromInt_0(this.collection.size());
  }
}
;
_.tryAdvance = function tryAdvance(consumer){
  ji2.checkNotNull_0(consumer);
  this.initIterator();
  if (this.it.hasNext_0()) {
    consumer.accept_0(this.it.next_3());
    return true;
  }
  return false;
}
;
_.characteristics = 0;
_.estimateSize = 0;
cggl.Ljava_util_Spliterators$IteratorSpliterator_2_classLit = createForClass('java.util', 'Spliterators/IteratorSpliterator', 108, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_SortedSet$1 = function $clinit_SortedSet$1(){
  ju.$clinit_SortedSet$1 = emptyMethod;
  ju.$clinit_Spliterators$IteratorSpliterator();
}
;
ju.SortedSet$1 = function SortedSet$1(this$0, $anonymous0, $anonymous1){
  ju.$clinit_SortedSet$1();
  this.this$01 = this$0;
  ju.Spliterators$IteratorSpliterator.call(this, $anonymous0, $anonymous1);
  this.$init_224();
}
;
defineClass(231, 108, {1:1, 15:1}, ju.SortedSet$1);
_.$init_224 = function $init_224(){
}
;
cggl.Ljava_util_SortedSet$1_2_classLit = createForClass('java.util', 'SortedSet/1', 231, cggl.Ljava_util_Spliterators$IteratorSpliterator_2_classLit);
ju.$clinit_Spliterator$OfPrimitive = function $clinit_Spliterator$OfPrimitive(){
  ju.$clinit_Spliterator$OfPrimitive = emptyMethod;
}
;
ju.$forEachRemaining_5 = function $forEachRemaining_5(this$static, consumer){
  while (this$static.tryAdvance_0(consumer)) {
  }
}
;
cggl.Ljava_util_Spliterator$OfPrimitive_2_classLit = createForInterface('java.util', 'Spliterator/OfPrimitive');
ju.$clinit_Spliterator$OfDouble = function $clinit_Spliterator$OfDouble(){
  ju.$clinit_Spliterator$OfDouble = emptyMethod;
}
;
cggl.Ljava_util_Spliterator$OfDouble_2_classLit = createForInterface('java.util', 'Spliterator/OfDouble');
ju.$clinit_Spliterator$OfDouble$0methodref$accept$Type = function $clinit_Spliterator$OfDouble$0methodref$accept$Type(){
  ju.$clinit_Spliterator$OfDouble$0methodref$accept$Type = emptyMethod;
}
;
defineClass(338, 1, {1:1});
cggl.Ljava_util_Spliterator$OfDouble$0methodref$accept$Type_2_classLit = createForClass('java.util', 'Spliterator/OfDouble/0methodref$accept$Type', 338, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterator$OfDouble$1methodref$accept$Type = function $clinit_Spliterator$OfDouble$1methodref$accept$Type(){
  ju.$clinit_Spliterator$OfDouble$1methodref$accept$Type = emptyMethod;
}
;
defineClass(339, 1, {1:1});
cggl.Ljava_util_Spliterator$OfDouble$1methodref$accept$Type_2_classLit = createForClass('java.util', 'Spliterator/OfDouble/1methodref$accept$Type', 339, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterator$OfInt = function $clinit_Spliterator$OfInt(){
  ju.$clinit_Spliterator$OfInt = emptyMethod;
}
;
ju.$forEachRemaining_4 = function $forEachRemaining_4(this$static, consumer){
  if (instanceOf(consumer, 17)) {
    this$static.forEachRemaining(castTo(consumer, 17));
  }
   else {
    this$static.forEachRemaining(castTo(new ju.Spliterator$OfInt$3methodref$accept$Type(consumer), 17));
  }
}
;
ju.$tryAdvance = function $tryAdvance(this$static, consumer){
  if (instanceOf(consumer, 17)) {
    return this$static.tryAdvance_0(castTo(consumer, 17));
  }
   else {
    return this$static.tryAdvance_0(castTo(new ju.Spliterator$OfInt$2methodref$accept$Type(consumer), 17));
  }
}
;
cggl.Ljava_util_Spliterator$OfInt_2_classLit = createForInterface('java.util', 'Spliterator/OfInt');
ju.$clinit_Spliterator$OfInt$2methodref$accept$Type = function $clinit_Spliterator$OfInt$2methodref$accept$Type(){
  ju.$clinit_Spliterator$OfInt$2methodref$accept$Type = emptyMethod;
}
;
ju.Spliterator$OfInt$2methodref$accept$Type = function Spliterator$OfInt$2methodref$accept$Type($$outer_0){
  ju.$clinit_Spliterator$OfInt$2methodref$accept$Type();
  this.$$outer_0 = $$outer_0;
}
;
defineClass(181, 1, {1:1, 17:1}, ju.Spliterator$OfInt$2methodref$accept$Type);
_.accept = function accept_0(arg0){
  this.$$outer_0.accept_0(jl.valueOf_9(arg0));
}
;
cggl.Ljava_util_Spliterator$OfInt$2methodref$accept$Type_2_classLit = createForClass('java.util', 'Spliterator/OfInt/2methodref$accept$Type', 181, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterator$OfInt$3methodref$accept$Type = function $clinit_Spliterator$OfInt$3methodref$accept$Type(){
  ju.$clinit_Spliterator$OfInt$3methodref$accept$Type = emptyMethod;
}
;
ju.Spliterator$OfInt$3methodref$accept$Type = function Spliterator$OfInt$3methodref$accept$Type($$outer_0){
  ju.$clinit_Spliterator$OfInt$3methodref$accept$Type();
  this.$$outer_0 = $$outer_0;
}
;
defineClass(182, 1, {1:1, 17:1}, ju.Spliterator$OfInt$3methodref$accept$Type);
_.accept = function accept_1(arg0){
  this.$$outer_0.accept_0(jl.valueOf_9(arg0));
}
;
cggl.Ljava_util_Spliterator$OfInt$3methodref$accept$Type_2_classLit = createForClass('java.util', 'Spliterator/OfInt/3methodref$accept$Type', 182, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterator$OfLong = function $clinit_Spliterator$OfLong(){
  ju.$clinit_Spliterator$OfLong = emptyMethod;
}
;
cggl.Ljava_util_Spliterator$OfLong_2_classLit = createForInterface('java.util', 'Spliterator/OfLong');
ju.$clinit_Spliterator$OfLong$4methodref$accept$Type = function $clinit_Spliterator$OfLong$4methodref$accept$Type(){
  ju.$clinit_Spliterator$OfLong$4methodref$accept$Type = emptyMethod;
}
;
defineClass(340, 1, {1:1});
cggl.Ljava_util_Spliterator$OfLong$4methodref$accept$Type_2_classLit = createForClass('java.util', 'Spliterator/OfLong/4methodref$accept$Type', 340, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterator$OfLong$5methodref$accept$Type = function $clinit_Spliterator$OfLong$5methodref$accept$Type(){
  ju.$clinit_Spliterator$OfLong$5methodref$accept$Type = emptyMethod;
}
;
defineClass(341, 1, {1:1});
cggl.Ljava_util_Spliterator$OfLong$5methodref$accept$Type_2_classLit = createForClass('java.util', 'Spliterator/OfLong/5methodref$accept$Type', 341, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators = function $clinit_Spliterators(){
  ju.$clinit_Spliterators = emptyMethod;
  jl.$clinit_Object();
}
;
ju.iterator_15 = function iterator_15(spliterator){
  ju.$clinit_Spliterators();
  return new ju.Spliterators$IntConsumerIterator(spliterator);
}
;
ju.iterator_16 = function iterator_16(spliterator){
  ju.$clinit_Spliterators();
  return new ju.Spliterators$ConsumerIterator(spliterator);
}
;
ju.sizeKnownIteratorSpliteratorCharacteristics = function sizeKnownIteratorSpliteratorCharacteristics(characteristics){
  ju.$clinit_Spliterators();
  return (characteristics & 4096) == 0?ju.sizeKnownSpliteratorCharacteristics(characteristics):characteristics;
}
;
ju.sizeKnownSpliteratorCharacteristics = function sizeKnownSpliteratorCharacteristics(characteristics){
  return characteristics | 64 | 16384;
}
;
ju.sizeUnknownSpliteratorCharacteristics = function sizeUnknownSpliteratorCharacteristics(characteristics){
  ju.$clinit_Spliterators();
  return characteristics & ~(64 | 16384);
}
;
ju.spliterator_10 = function spliterator_10(c, characteristics){
  ju.$clinit_Spliterators();
  return new ju.Spliterators$IteratorSpliterator(c, characteristics);
}
;
ju.spliterator_11 = function spliterator_11(it, size_0, characteristics){
  ju.$clinit_Spliterators();
  return new ju.Spliterators$IntIteratorSpliterator(it, size_0, characteristics);
}
;
ju.spliteratorUnknownSize = function spliteratorUnknownSize(it, characteristics){
  ju.$clinit_Spliterators();
  return new ju.Spliterators$IteratorSpliterator_0(it, characteristics);
}
;
defineClass(321, 1, {1:1});
cggl.Ljava_util_Spliterators_2_classLit = createForClass('java.util', 'Spliterators', 321, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$BaseSpliterator = function $clinit_Spliterators$BaseSpliterator(){
  ju.$clinit_Spliterators$BaseSpliterator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Spliterator();
}
;
ju.Spliterators$BaseSpliterator = function Spliterators$BaseSpliterator(size_0, characteristics){
  ju.$clinit_Spliterators$BaseSpliterator();
  Object_0.call(this);
  this.$init_225();
  this.sizeEstimate = size_0;
  this.characteristics = (characteristics & 64) != 0?characteristics | 16384:characteristics;
}
;
defineClass(133, 1, {1:1, 15:1});
_.$init_225 = function $init_225(){
}
;
_.forEachRemaining_0 = function forEachRemaining_13(consumer){
  ju.$forEachRemaining_3(this, consumer);
}
;
_.characteristics_0 = function characteristics_1(){
  return this.characteristics;
}
;
_.estimateSize_0 = function estimateSize_0(){
  return this.sizeEstimate;
}
;
_.characteristics = 0;
_.sizeEstimate = 0;
cggl.Ljava_util_Spliterators$BaseSpliterator_2_classLit = createForClass('java.util', 'Spliterators/BaseSpliterator', 133, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$AbstractDoubleSpliterator = function $clinit_Spliterators$AbstractDoubleSpliterator(){
  ju.$clinit_Spliterators$AbstractDoubleSpliterator = emptyMethod;
}
;
defineClass(322, 133, {1:1, 15:1});
cggl.Ljava_util_Spliterators$AbstractDoubleSpliterator_2_classLit = createForClass('java.util', 'Spliterators/AbstractDoubleSpliterator', 322, cggl.Ljava_util_Spliterators$BaseSpliterator_2_classLit);
ju.$clinit_Spliterators$AbstractIntSpliterator = function $clinit_Spliterators$AbstractIntSpliterator(){
  ju.$clinit_Spliterators$AbstractIntSpliterator = emptyMethod;
  ju.$clinit_Spliterators$BaseSpliterator();
  ju.$clinit_Spliterator();
  ju.$clinit_Spliterator$OfPrimitive();
  ju.$clinit_Spliterator$OfInt();
}
;
ju.Spliterators$AbstractIntSpliterator = function Spliterators$AbstractIntSpliterator(size_0, characteristics){
  ju.$clinit_Spliterators$AbstractIntSpliterator();
  ju.Spliterators$BaseSpliterator.call(this, size_0, characteristics);
  this.$init_226();
}
;
defineClass(134, 133, {1:1, 15:1, 34:1});
_.$init_226 = function $init_226(){
}
;
_.forEachRemaining = function forEachRemaining_14(consumer){
  ju.$forEachRemaining_5(this, consumer);
}
;
_.forEachRemaining_0 = function forEachRemaining_15(consumer){
  ju.$forEachRemaining_4(this, consumer);
}
;
_.tryAdvance = function tryAdvance_0(consumer){
  return ju.$tryAdvance(this, consumer);
}
;
cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit = createForClass('java.util', 'Spliterators/AbstractIntSpliterator', 134, cggl.Ljava_util_Spliterators$BaseSpliterator_2_classLit);
ju.$clinit_Spliterators$AbstractLongSpliterator = function $clinit_Spliterators$AbstractLongSpliterator(){
  ju.$clinit_Spliterators$AbstractLongSpliterator = emptyMethod;
}
;
defineClass(323, 133, {1:1, 15:1});
cggl.Ljava_util_Spliterators$AbstractLongSpliterator_2_classLit = createForClass('java.util', 'Spliterators/AbstractLongSpliterator', 323, cggl.Ljava_util_Spliterators$BaseSpliterator_2_classLit);
ju.$clinit_Spliterators$AbstractSpliterator = function $clinit_Spliterators$AbstractSpliterator(){
  ju.$clinit_Spliterators$AbstractSpliterator = emptyMethod;
  ju.$clinit_Spliterators$BaseSpliterator();
  ju.$clinit_Spliterator();
}
;
ju.Spliterators$AbstractSpliterator = function Spliterators$AbstractSpliterator(size_0, characteristics){
  ju.$clinit_Spliterators$AbstractSpliterator();
  ju.Spliterators$BaseSpliterator.call(this, size_0, characteristics);
  this.$init_227();
}
;
defineClass(180, 133, {1:1, 15:1});
_.$init_227 = function $init_227(){
}
;
cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit = createForClass('java.util', 'Spliterators/AbstractSpliterator', 180, cggl.Ljava_util_Spliterators$BaseSpliterator_2_classLit);
ju.$clinit_Spliterators$BaseArraySpliterator = function $clinit_Spliterators$BaseArraySpliterator(){
  ju.$clinit_Spliterators$BaseArraySpliterator = emptyMethod;
}
;
defineClass(333, 1, {1:1, 15:1});
cggl.Ljava_util_Spliterators$BaseArraySpliterator_2_classLit = createForClass('java.util', 'Spliterators/BaseArraySpliterator', 333, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$ArraySpliterator = function $clinit_Spliterators$ArraySpliterator(){
  ju.$clinit_Spliterators$ArraySpliterator = emptyMethod;
}
;
defineClass(334, 333, {1:1, 15:1});
cggl.Ljava_util_Spliterators$ArraySpliterator_2_classLit = createForClass('java.util', 'Spliterators/ArraySpliterator', 334, cggl.Ljava_util_Spliterators$BaseArraySpliterator_2_classLit);
juf.$clinit_Consumer = function $clinit_Consumer(){
  juf.$clinit_Consumer = emptyMethod;
}
;
cggl.Ljava_util_function_Consumer_2_classLit = createForInterface('java.util.function', 'Consumer');
ju.$clinit_Spliterators$ConsumerIterator = function $clinit_Spliterators$ConsumerIterator(){
  ju.$clinit_Spliterators$ConsumerIterator = emptyMethod;
  jl.$clinit_Object();
  juf.$clinit_Consumer();
  ju.$clinit_Iterator();
}
;
ju.Spliterators$ConsumerIterator = function Spliterators$ConsumerIterator(spliterator){
  ju.$clinit_Spliterators$ConsumerIterator();
  Object_0.call(this);
  this.$init_228();
  this.spliterator = castTo(ji2.checkNotNull_0(spliterator), 15);
}
;
defineClass(178, 1, {1:1, 27:1}, ju.Spliterators$ConsumerIterator);
_.$init_228 = function $init_228(){
  this.hasElement = false;
}
;
_.forEachRemaining_0 = function forEachRemaining_16(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.remove_1 = function remove_30(){
  ju.$remove(this);
}
;
_.accept_0 = function accept_2(element){
  this.nextElement = element;
}
;
_.hasNext_0 = function hasNext_10(){
  if (!this.hasElement) {
    this.hasElement = this.spliterator.tryAdvance(this);
  }
  return this.hasElement;
}
;
_.next_3 = function next_16(){
  var element;
  ji2.checkCriticalElement(this.hasNext_0());
  this.hasElement = false;
  element = this.nextElement;
  this.nextElement = null;
  return element;
}
;
_.hasElement = false;
cggl.Ljava_util_Spliterators$ConsumerIterator_2_classLit = createForClass('java.util', 'Spliterators/ConsumerIterator', 178, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$DoubleArraySpliterator = function $clinit_Spliterators$DoubleArraySpliterator(){
  ju.$clinit_Spliterators$DoubleArraySpliterator = emptyMethod;
}
;
defineClass(335, 333, {1:1, 15:1});
cggl.Ljava_util_Spliterators$DoubleArraySpliterator_2_classLit = createForClass('java.util', 'Spliterators/DoubleArraySpliterator', 335, cggl.Ljava_util_Spliterators$BaseArraySpliterator_2_classLit);
ju.$clinit_Spliterators$DoubleConsumerIterator = function $clinit_Spliterators$DoubleConsumerIterator(){
  ju.$clinit_Spliterators$DoubleConsumerIterator = emptyMethod;
}
;
defineClass(329, 1, {1:1, 27:1});
cggl.Ljava_util_Spliterators$DoubleConsumerIterator_2_classLit = createForClass('java.util', 'Spliterators/DoubleConsumerIterator', 329, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$DoubleIteratorSpliterator = function $clinit_Spliterators$DoubleIteratorSpliterator(){
  ju.$clinit_Spliterators$DoubleIteratorSpliterator = emptyMethod;
}
;
defineClass(331, 322, {1:1, 15:1});
cggl.Ljava_util_Spliterators$DoubleIteratorSpliterator_2_classLit = createForClass('java.util', 'Spliterators/DoubleIteratorSpliterator', 331, cggl.Ljava_util_Spliterators$AbstractDoubleSpliterator_2_classLit);
ju.$clinit_Spliterators$EmptySpliterator = function $clinit_Spliterators$EmptySpliterator(){
  ju.$clinit_Spliterators$EmptySpliterator = emptyMethod;
}
;
defineClass(324, 1, {1:1, 15:1});
cggl.Ljava_util_Spliterators$EmptySpliterator_2_classLit = createForClass('java.util', 'Spliterators/EmptySpliterator', 324, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$EmptySpliterator$OfDouble = function $clinit_Spliterators$EmptySpliterator$OfDouble(){
  ju.$clinit_Spliterators$EmptySpliterator$OfDouble = emptyMethod;
}
;
defineClass(326, 324, {1:1, 15:1});
cggl.Ljava_util_Spliterators$EmptySpliterator$OfDouble_2_classLit = createForClass('java.util', 'Spliterators/EmptySpliterator/OfDouble', 326, cggl.Ljava_util_Spliterators$EmptySpliterator_2_classLit);
ju.$clinit_Spliterators$EmptySpliterator$OfInt = function $clinit_Spliterators$EmptySpliterator$OfInt(){
  ju.$clinit_Spliterators$EmptySpliterator$OfInt = emptyMethod;
}
;
defineClass(327, 324, {1:1, 15:1, 34:1});
cggl.Ljava_util_Spliterators$EmptySpliterator$OfInt_2_classLit = createForClass('java.util', 'Spliterators/EmptySpliterator/OfInt', 327, cggl.Ljava_util_Spliterators$EmptySpliterator_2_classLit);
ju.$clinit_Spliterators$EmptySpliterator$OfLong = function $clinit_Spliterators$EmptySpliterator$OfLong(){
  ju.$clinit_Spliterators$EmptySpliterator$OfLong = emptyMethod;
}
;
defineClass(328, 324, {1:1, 15:1});
cggl.Ljava_util_Spliterators$EmptySpliterator$OfLong_2_classLit = createForClass('java.util', 'Spliterators/EmptySpliterator/OfLong', 328, cggl.Ljava_util_Spliterators$EmptySpliterator_2_classLit);
ju.$clinit_Spliterators$EmptySpliterator$OfRef = function $clinit_Spliterators$EmptySpliterator$OfRef(){
  ju.$clinit_Spliterators$EmptySpliterator$OfRef = emptyMethod;
}
;
defineClass(325, 324, {1:1, 15:1});
cggl.Ljava_util_Spliterators$EmptySpliterator$OfRef_2_classLit = createForClass('java.util', 'Spliterators/EmptySpliterator/OfRef', 325, cggl.Ljava_util_Spliterators$EmptySpliterator_2_classLit);
ju.$clinit_Spliterators$IntArraySpliterator = function $clinit_Spliterators$IntArraySpliterator(){
  ju.$clinit_Spliterators$IntArraySpliterator = emptyMethod;
}
;
defineClass(336, 333, {1:1, 15:1, 34:1});
cggl.Ljava_util_Spliterators$IntArraySpliterator_2_classLit = createForClass('java.util', 'Spliterators/IntArraySpliterator', 336, cggl.Ljava_util_Spliterators$BaseArraySpliterator_2_classLit);
ju.$clinit_Spliterators$IntConsumerIterator = function $clinit_Spliterators$IntConsumerIterator(){
  ju.$clinit_Spliterators$IntConsumerIterator = emptyMethod;
  jl.$clinit_Object();
  juf.$clinit_IntConsumer();
  ju.$clinit_Iterator();
  ju.$clinit_PrimitiveIterator$OfInt();
}
;
ju.Spliterators$IntConsumerIterator = function Spliterators$IntConsumerIterator(spliterator){
  ju.$clinit_Spliterators$IntConsumerIterator();
  Object_0.call(this);
  this.$init_229();
  this.spliterator = castTo(ji2.checkNotNull_0(spliterator), 34);
}
;
defineClass(179, 1, {1:1, 27:1, 176:1, 17:1}, ju.Spliterators$IntConsumerIterator);
_.$init_229 = function $init_229(){
  this.hasElement = false;
}
;
_.forEachRemaining = function forEachRemaining_17(arg0){
  this.forEachRemaining_1(castTo(arg0, 17));
}
;
_.forEachRemaining_0 = function forEachRemaining_18(consumer){
  ju.$forEachRemaining_1(this, consumer);
}
;
_.forEachRemaining_1 = function forEachRemaining_19(consumer){
  ju.$forEachRemaining_2(this, consumer);
}
;
_.next_2 = function next_17(){
  return ju.$next(this);
}
;
_.next_3 = function next_18(){
  return this.next_2();
}
;
_.remove_1 = function remove_31(){
  ju.$remove(this);
}
;
_.accept = function accept_3(i){
  this.nextElement = i;
}
;
_.hasNext_0 = function hasNext_11(){
  if (!this.hasElement) {
    this.hasElement = this.spliterator.tryAdvance_0(this);
  }
  return this.hasElement;
}
;
_.nextInt = function nextInt_2(){
  ji2.checkCriticalElement(this.hasNext_0());
  this.hasElement = false;
  return this.nextElement;
}
;
_.hasElement = false;
_.nextElement = 0;
cggl.Ljava_util_Spliterators$IntConsumerIterator_2_classLit = createForClass('java.util', 'Spliterators/IntConsumerIterator', 179, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$IntIteratorSpliterator = function $clinit_Spliterators$IntIteratorSpliterator(){
  ju.$clinit_Spliterators$IntIteratorSpliterator = emptyMethod;
  ju.$clinit_Spliterators$AbstractIntSpliterator();
}
;
ju.Spliterators$IntIteratorSpliterator = function Spliterators$IntIteratorSpliterator(it, size_0, characteristics){
  ju.$clinit_Spliterators$IntIteratorSpliterator();
  ju.Spliterators$AbstractIntSpliterator.call(this, size_0, ju.sizeKnownIteratorSpliteratorCharacteristics(characteristics));
  this.$init_230();
  this.it = castTo(ji2.checkNotNull_0(it), 176);
}
;
defineClass(177, 134, {1:1, 15:1, 34:1}, ju.Spliterators$IntIteratorSpliterator);
_.$init_230 = function $init_230(){
}
;
_.forEachRemaining = function forEachRemaining_20(consumer){
  this.forEachRemaining_1(castTo(consumer, 17));
}
;
_.tryAdvance_0 = function tryAdvance_1(consumer){
  return this.tryAdvance_1(castTo(consumer, 17));
}
;
_.forEachRemaining_1 = function forEachRemaining_21(consumer){
  this.it.forEachRemaining_1(consumer);
}
;
_.tryAdvance_1 = function tryAdvance_2(consumer){
  ji2.checkNotNull_0(consumer);
  if (this.it.hasNext_0()) {
    consumer.accept(this.it.nextInt());
    return true;
  }
  return false;
}
;
cggl.Ljava_util_Spliterators$IntIteratorSpliterator_2_classLit = createForClass('java.util', 'Spliterators/IntIteratorSpliterator', 177, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
ju.$clinit_Spliterators$LongArraySpliterator = function $clinit_Spliterators$LongArraySpliterator(){
  ju.$clinit_Spliterators$LongArraySpliterator = emptyMethod;
}
;
defineClass(337, 333, {1:1, 15:1});
cggl.Ljava_util_Spliterators$LongArraySpliterator_2_classLit = createForClass('java.util', 'Spliterators/LongArraySpliterator', 337, cggl.Ljava_util_Spliterators$BaseArraySpliterator_2_classLit);
ju.$clinit_Spliterators$LongConsumerIterator = function $clinit_Spliterators$LongConsumerIterator(){
  ju.$clinit_Spliterators$LongConsumerIterator = emptyMethod;
}
;
defineClass(330, 1, {1:1, 27:1});
cggl.Ljava_util_Spliterators$LongConsumerIterator_2_classLit = createForClass('java.util', 'Spliterators/LongConsumerIterator', 330, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_Spliterators$LongIteratorSpliterator = function $clinit_Spliterators$LongIteratorSpliterator(){
  ju.$clinit_Spliterators$LongIteratorSpliterator = emptyMethod;
}
;
defineClass(332, 323, {1:1, 15:1});
cggl.Ljava_util_Spliterators$LongIteratorSpliterator_2_classLit = createForClass('java.util', 'Spliterators/LongIteratorSpliterator', 332, cggl.Ljava_util_Spliterators$AbstractLongSpliterator_2_classLit);
ju.$clinit_StringJoiner = function $clinit_StringJoiner(){
  ju.$clinit_StringJoiner = emptyMethod;
  jl.$clinit_Object();
}
;
ju.StringJoiner = function StringJoiner(delimiter){
  ju.$clinit_StringJoiner();
  ju.StringJoiner_0.call(this, delimiter, '', '');
}
;
ju.StringJoiner_0 = function StringJoiner_0(delimiter, prefix, suffix){
  ju.$clinit_StringJoiner();
  Object_0.call(this);
  this.$init_231();
  this.delimiter = toString_12(delimiter);
  this.prefix = toString_12(prefix);
  this.suffix = toString_12(suffix);
  this.emptyValue = this.prefix + ('' + this.suffix);
}
;
defineClass(73, 1, {1:1}, ju.StringJoiner, ju.StringJoiner_0);
_.$init_231 = function $init_231(){
}
;
_.add_4 = function add_15(newElement){
  this.initBuilderOrAddDelimiter();
  this.builder.append_3(newElement);
  return this;
}
;
_.initBuilderOrAddDelimiter = function initBuilderOrAddDelimiter(){
  if (isNull(this.builder)) {
    this.builder = new jl.StringBuilder_1(this.prefix);
  }
   else {
    this.builder.append_5(this.delimiter);
  }
}
;
_.length_0 = function length_2(){
  if (isNull(this.builder)) {
    return jl.length__I__devirtual$_0(this.emptyValue);
  }
  return this.builder.length_0() + jl.length__I__devirtual$_0(this.suffix);
}
;
_.toString_0 = function toString_40(){
  if (isNull(this.builder)) {
    return this.emptyValue;
  }
   else if (jl.isEmpty__Z__devirtual$(this.suffix)) {
    return this.builder.toString_0();
  }
   else {
    return this.builder.toString_0() + ('' + this.suffix);
  }
}
;
cggl.Ljava_util_StringJoiner_2_classLit = createForClass('java.util', 'StringJoiner', 73, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_TreeMap = function $clinit_TreeMap(){
  ju.$clinit_TreeMap = emptyMethod;
  ju.$clinit_AbstractNavigableMap();
}
;
ju.TreeMap = function TreeMap(){
  ju.$clinit_TreeMap();
  ju.TreeMap_0.call(this, castTo(null, 26));
}
;
ju.TreeMap_0 = function TreeMap_0(c){
  ju.$clinit_TreeMap();
  ju.AbstractNavigableMap.call(this);
  this.$init_232();
  this.root = null;
  this.cmp = ju.nullToNaturalOrder(c);
}
;
ju.otherChild = function otherChild(child){
  return 1 - child;
}
;
defineClass(80, 255, {4:1, 1:1, 46:1}, ju.TreeMap, ju.TreeMap_0);
_.$init_232 = function $init_232(){
  this.size_0 = 0;
}
;
_.clear = function clear_13(){
  this.root = null;
  this.size_0 = 0;
}
;
_.entryIterator = function entryIterator_0(){
  return new ju.TreeMap$EntryIterator(this);
}
;
_.entrySet = function entrySet_2(){
  return new ju.TreeMap$EntrySet(this);
}
;
_.getEntry = function getEntry_0(key){
  var c, childNum, tree;
  tree = this.root;
  while (isNotNull(tree)) {
    c = this.cmp.compare_0(key, tree.getKey());
    if (c == 0) {
      return tree;
    }
    childNum = c < 0?0:1;
    tree = tree.child[childNum];
  }
  return null;
}
;
_.inOrderAdd = function inOrderAdd(list, type_0, current, fromKey, fromInclusive, toKey, toInclusive){
  ju.$clinit_TreeMap();
  var leftNode, rightNode;
  if (isNull(current)) {
    return;
  }
  leftNode = current.child[0];
  if (isNotNull(leftNode)) {
    this.inOrderAdd(list, type_0, leftNode, fromKey, fromInclusive, toKey, toInclusive);
  }
  if (this.inRange(type_0, current.getKey(), fromKey, fromInclusive, toKey, toInclusive)) {
    list.add(current);
  }
  rightNode = current.child[1];
  if (isNotNull(rightNode)) {
    this.inOrderAdd(list, type_0, rightNode, fromKey, fromInclusive, toKey, toInclusive);
  }
}
;
_.inRange = function inRange(type_0, key, fromKey, fromInclusive, toKey, toInclusive){
  if (type_0.fromKeyValid() && this.smaller(key, fromKey, !fromInclusive)) {
    return false;
  }
  if (type_0.toKeyValid() && this.larger(key, toKey, !toInclusive)) {
    return false;
  }
  return true;
}
;
_.insert_2 = function insert_2(tree, newNode, state){
  var c, childNum;
  if (isNull(tree)) {
    return newNode;
  }
   else {
    c = this.cmp.compare_0(newNode.getKey(), tree.getKey());
    if (c == 0) {
      state.value_0 = tree.setValue(newNode.getValue_0());
      state.found = true;
      return tree;
    }
    childNum = c < 0?0:1;
    setCheck(tree.child, childNum, this.insert_2(tree.child[childNum], newNode, state));
    if (this.isRed_0(tree.child[childNum])) {
      if (this.isRed_0(tree.child[ju.otherChild(childNum)])) {
        tree.isRed = true;
        tree.child[0].isRed = false;
        tree.child[1].isRed = false;
      }
       else {
        if (this.isRed_0(tree.child[childNum].child[childNum])) {
          tree = this.rotateSingle(tree, ju.otherChild(childNum));
        }
         else if (this.isRed_0(tree.child[childNum].child[ju.otherChild(childNum)])) {
          tree = this.rotateDouble(tree, ju.otherChild(childNum));
        }
      }
    }
  }
  return tree;
}
;
_.isRed_0 = function isRed_0(node){
  return isNotNull(node) && node.isRed;
}
;
_.larger = function larger(a, b, orEqual){
  var compare;
  compare = this.cmp.compare_0(a, b);
  return compare > 0 || orEqual && compare == 0;
}
;
_.put = function put_3(key, value_0){
  var node, state;
  node = new ju.TreeMap$Node(key, value_0);
  state = new ju.TreeMap$State;
  this.root = this.insert_2(this.root, node, state);
  if (!state.found) {
    ++this.size_0;
  }
  this.root.isRed = false;
  return state.value_0;
}
;
_.remove = function remove_32(k){
  var key, state;
  key = k;
  state = new ju.TreeMap$State;
  this.removeWithState(key, state);
  return state.value_0;
}
;
_.removeEntry = function removeEntry(entry){
  var state;
  state = new ju.TreeMap$State;
  state.matchValue = true;
  state.value_0 = entry.getValue_0();
  return this.removeWithState(entry.getKey(), state);
}
;
_.removeWithState = function removeWithState(key, state){
  var c, dir_0, dir2, found, grandparent, head, last, newNode, node, parent_0, sibling;
  if (isNull(this.root)) {
    return false;
  }
  found = null;
  parent_0 = null;
  head = new ju.TreeMap$Node(null, null);
  dir_0 = 1;
  setCheck(head.child, 1, this.root);
  node = head;
  while (isNotNull(node.child[dir_0])) {
    last = dir_0;
    grandparent = parent_0;
    parent_0 = node;
    node = node.child[dir_0];
    c = this.cmp.compare_0(key, node.getKey());
    dir_0 = c < 0?0:1;
    if (c == 0 && (!state.matchValue || ju.equals_31(node.getValue_0(), state.value_0))) {
      found = node;
    }
    if (!this.isRed_0(node) && !this.isRed_0(node.child[dir_0])) {
      if (this.isRed_0(node.child[ju.otherChild(dir_0)])) {
        parent_0 = setCheck(parent_0.child, last, this.rotateSingle(node, dir_0));
      }
       else if (!this.isRed_0(node.child[ju.otherChild(dir_0)])) {
        sibling = parent_0.child[ju.otherChild(last)];
        if (isNotNull(sibling)) {
          if (!this.isRed_0(sibling.child[ju.otherChild(last)]) && !this.isRed_0(sibling.child[last])) {
            parent_0.isRed = false;
            sibling.isRed = true;
            node.isRed = true;
          }
           else {
            dir2 = jsEquals(grandparent.child[1], parent_0)?1:0;
            if (this.isRed_0(sibling.child[last])) {
              setCheck(grandparent.child, dir2, this.rotateDouble(parent_0, last));
            }
             else if (this.isRed_0(sibling.child[ju.otherChild(last)])) {
              setCheck(grandparent.child, dir2, this.rotateSingle(parent_0, last));
            }
            node.isRed = grandparent.child[dir2].isRed = true;
            grandparent.child[dir2].child[0].isRed = false;
            grandparent.child[dir2].child[1].isRed = false;
          }
        }
      }
    }
  }
  if (isNotNull(found)) {
    state.found = true;
    state.value_0 = found.getValue_0();
    if (jsNotEquals(node, found)) {
      newNode = new ju.TreeMap$Node(node.getKey(), node.getValue_0());
      this.replaceNode(head, found, newNode);
      if (jsEquals(parent_0, found)) {
        parent_0 = newNode;
      }
    }
    setCheck(parent_0.child, jsEquals(parent_0.child[1], node)?1:0, node.child[isNull(node.child[0])?1:0]);
    this.size_0--;
  }
  this.root = head.child[1];
  if (isNotNull(this.root)) {
    this.root.isRed = false;
  }
  return state.found;
}
;
_.replaceNode = function replaceNode(head, node, newNode){
  var direction, parent_0;
  parent_0 = head;
  direction = jsEquals(parent_0.getKey(), null) || this.cmp.compare_0(node.getKey(), parent_0.getKey()) > 0?1:0;
  while (jsNotEquals(parent_0.child[direction], node)) {
    parent_0 = parent_0.child[direction];
    direction = this.cmp.compare_0(node.getKey(), parent_0.getKey()) > 0?1:0;
  }
  setCheck(parent_0.child, direction, newNode);
  newNode.isRed = node.isRed;
  setCheck(newNode.child, 0, node.child[0]);
  setCheck(newNode.child, 1, node.child[1]);
  setCheck(node.child, 0, null);
  setCheck(node.child, 1, null);
}
;
_.rotateDouble = function rotateDouble(tree, rotateDirection){
  var otherChildDir;
  otherChildDir = ju.otherChild(rotateDirection);
  setCheck(tree.child, otherChildDir, this.rotateSingle(tree.child[otherChildDir], otherChildDir));
  return this.rotateSingle(tree, rotateDirection);
}
;
_.rotateSingle = function rotateSingle(tree, rotateDirection){
  var otherChildDir, save;
  otherChildDir = ju.otherChild(rotateDirection);
  save = tree.child[otherChildDir];
  setCheck(tree.child, otherChildDir, save.child[rotateDirection]);
  setCheck(save.child, rotateDirection, tree);
  tree.isRed = true;
  save.isRed = false;
  return save;
}
;
_.size = function size_19(){
  return this.size_0;
}
;
_.smaller = function smaller(a, b, orEqual){
  var compare;
  compare = this.cmp.compare_0(a, b);
  return compare < 0 || orEqual && compare == 0;
}
;
_.size_0 = 0;
ju.LEFT = 0;
ju.RIGHT = 1;
cggl.Ljava_util_TreeMap_2_classLit = createForClass('java.util', 'TreeMap', 80, cggl.Ljava_util_AbstractNavigableMap_2_classLit);
ju.$clinit_TreeMap$DescendingEntryIterator = function $clinit_TreeMap$DescendingEntryIterator(){
  ju.$clinit_TreeMap$DescendingEntryIterator = emptyMethod;
}
;
defineClass(438, 1, {1:1, 27:1});
cggl.Ljava_util_TreeMap$DescendingEntryIterator_2_classLit = createForClass('java.util', 'TreeMap/DescendingEntryIterator', 438, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_TreeMap$EntryIterator = function $clinit_TreeMap$EntryIterator(){
  ju.$clinit_TreeMap$EntryIterator = emptyMethod;
  jl.$clinit_Object();
  ju.$clinit_Iterator();
}
;
ju.TreeMap$EntryIterator = function TreeMap$EntryIterator(this$0){
  ju.$clinit_TreeMap$EntryIterator();
  ju.TreeMap$EntryIterator_0.call(this, this$0, (ju.$clinit_TreeMap$SubMapType() , ju.All), null, false, null, false);
}
;
ju.TreeMap$EntryIterator_0 = function TreeMap$EntryIterator_0(this$0, type_0, fromKey, fromInclusive, toKey, toInclusive){
  var list;
  this.this$01 = this$0;
  Object_0.call(this);
  this.$init_233();
  list = new ju.ArrayList;
  this$0.inOrderAdd(list, type_0, this$0.root, fromKey, fromInclusive, toKey, toInclusive);
  this.iter = list.listIterator();
}
;
defineClass(154, 1, {1:1, 27:1}, ju.TreeMap$EntryIterator);
_.$init_233 = function $init_233(){
}
;
_.forEachRemaining_0 = function forEachRemaining_22(consumer){
  ju.$forEachRemaining(this, consumer);
}
;
_.next_3 = function next_19(){
  return this.next_4();
}
;
_.hasNext_0 = function hasNext_12(){
  return this.iter.hasNext_0();
}
;
_.next_4 = function next_20(){
  return this.last = castTo(this.iter.next_3(), 23);
}
;
_.remove_1 = function remove_33(){
  this.iter.remove_1();
  this.this$01.removeEntry(this.last);
  this.last = null;
}
;
cggl.Ljava_util_TreeMap$EntryIterator_2_classLit = createForClass('java.util', 'TreeMap/EntryIterator', 154, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_TreeMap$EntrySet = function $clinit_TreeMap$EntrySet(){
  ju.$clinit_TreeMap$EntrySet = emptyMethod;
  ju.$clinit_AbstractNavigableMap$EntrySet();
}
;
ju.TreeMap$EntrySet = function TreeMap$EntrySet(this$0){
  ju.$clinit_TreeMap$EntrySet();
  this.this$01 = this$0;
  ju.AbstractNavigableMap$EntrySet.call(this, this$0);
  this.$init_234();
}
;
defineClass(256, 155, {1:1, 22:1, 38:1}, ju.TreeMap$EntrySet);
_.$init_234 = function $init_234(){
}
;
_.clear = function clear_14(){
  this.this$01.clear();
}
;
cggl.Ljava_util_TreeMap$EntrySet_2_classLit = createForClass('java.util', 'TreeMap/EntrySet', 256, cggl.Ljava_util_AbstractNavigableMap$EntrySet_2_classLit);
ju.$clinit_TreeMap$Node = function $clinit_TreeMap$Node(){
  ju.$clinit_TreeMap$Node = emptyMethod;
  ju.$clinit_AbstractMap$SimpleEntry();
}
;
ju.TreeMap$Node = function TreeMap$Node(key, value_0){
  ju.$clinit_TreeMap$Node();
  ju.TreeMap$Node_0.call(this, key, value_0, true);
}
;
ju.TreeMap$Node_0 = function TreeMap$Node_0(key, value_0, isRed){
  ju.AbstractMap$SimpleEntry.call(this, key, value_0);
  this.$init_235();
  this.isRed = isRed;
}
;
defineClass(69, 123, {1:1, 23:1, 69:1}, ju.TreeMap$Node);
_.$init_235 = function $init_235(){
  this.child = initUnidimensionalArray(cggl.Ljava_util_TreeMap$Node_2_classLit, {4:1, 1:1, 8:1}, 69, 2, 0, 1);
}
;
_.isRed = false;
cggl.Ljava_util_TreeMap$Node_2_classLit = createForClass('java.util', 'TreeMap/Node', 69, cggl.Ljava_util_AbstractMap$SimpleEntry_2_classLit);
ju.$clinit_TreeMap$State = function $clinit_TreeMap$State(){
  ju.$clinit_TreeMap$State = emptyMethod;
  jl.$clinit_Object();
}
;
ju.TreeMap$State = function TreeMap$State(){
  ju.$clinit_TreeMap$State();
  Object_0.call(this);
  this.$init_236();
}
;
defineClass(126, 1, {1:1}, ju.TreeMap$State);
_.$init_236 = function $init_236(){
}
;
_.toString_0 = function toString_41(){
  return 'State: mv=' + this.matchValue + ' value=' + this.value_0 + ' done=' + this.done_0 + ' found=' + this.found;
}
;
_.done_0 = false;
_.found = false;
_.matchValue = false;
cggl.Ljava_util_TreeMap$State_2_classLit = createForClass('java.util', 'TreeMap/State', 126, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_TreeMap$SubMap = function $clinit_TreeMap$SubMap(){
  ju.$clinit_TreeMap$SubMap = emptyMethod;
}
;
defineClass(439, 255, {1:1, 46:1});
cggl.Ljava_util_TreeMap$SubMap_2_classLit = createForClass('java.util', 'TreeMap/SubMap', 439, cggl.Ljava_util_AbstractNavigableMap_2_classLit);
ju.$clinit_TreeMap$SubMapType = function $clinit_TreeMap$SubMapType(){
  ju.$clinit_TreeMap$SubMapType = emptyMethod;
  jl.$clinit_Enum();
  ju.All = new ju.TreeMap$SubMapType('All', 0);
  ju.Head = new ju.TreeMap$SubMapType$1('Head', 1);
  ju.Range_0 = new ju.TreeMap$SubMapType$2('Range', 2);
  ju.Tail = new ju.TreeMap$SubMapType$3('Tail', 3);
}
;
ju.TreeMap$SubMapType = function TreeMap$SubMapType(enum$name, enum$ordinal){
  ju.$clinit_TreeMap$SubMapType();
  Enum.call(this, enum$name, enum$ordinal);
  this.$init_237();
}
;
ju.valueOf_21 = function valueOf_21(name_0){
  ju.$clinit_TreeMap$SubMapType();
  return valueOf((ju.$clinit_TreeMap$SubMapType$Map() , ju.$MAP_1), name_0);
}
;
ju.values_4 = function values_4(){
  ju.$clinit_TreeMap$SubMapType();
  return stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_util_TreeMap$SubMapType_2_classLit, 1), {4:1, 1:1, 8:1}, 49, 0, [ju.All, ju.Head, ju.Range_0, ju.Tail]);
}
;
defineClass(49, 37, {4:1, 20:1, 37:1, 1:1, 49:1}, ju.TreeMap$SubMapType);
_.$init_237 = function $init_237(){
}
;
_.fromKeyValid = function fromKeyValid(){
  return false;
}
;
_.toKeyValid = function toKeyValid(){
  return false;
}
;
cggl.Ljava_util_TreeMap$SubMapType_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType', 49, cggl.Ljava_lang_Enum_2_classLit, ju.values_4, ju.valueOf_21);
ju.$clinit_TreeMap$SubMapType$1 = function $clinit_TreeMap$SubMapType$1(){
  ju.$clinit_TreeMap$SubMapType$1 = emptyMethod;
  ju.$clinit_TreeMap$SubMapType();
}
;
ju.TreeMap$SubMapType$1 = function TreeMap$SubMapType$1(enum$name, enum$ordinal){
  ju.$clinit_TreeMap$SubMapType$1();
  ju.TreeMap$SubMapType.call(this, enum$name, enum$ordinal);
  this.$init_238();
}
;
defineClass(257, 49, {4:1, 20:1, 37:1, 1:1, 49:1}, ju.TreeMap$SubMapType$1);
_.$init_238 = function $init_238(){
}
;
_.toKeyValid = function toKeyValid_0(){
  return true;
}
;
cggl.Ljava_util_TreeMap$SubMapType$1_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/1', 257, cggl.Ljava_util_TreeMap$SubMapType_2_classLit, null, null);
ju.$clinit_TreeMap$SubMapType$2 = function $clinit_TreeMap$SubMapType$2(){
  ju.$clinit_TreeMap$SubMapType$2 = emptyMethod;
  ju.$clinit_TreeMap$SubMapType();
}
;
ju.TreeMap$SubMapType$2 = function TreeMap$SubMapType$2(enum$name, enum$ordinal){
  ju.$clinit_TreeMap$SubMapType$2();
  ju.TreeMap$SubMapType.call(this, enum$name, enum$ordinal);
  this.$init_239();
}
;
defineClass(258, 49, {4:1, 20:1, 37:1, 1:1, 49:1}, ju.TreeMap$SubMapType$2);
_.$init_239 = function $init_239(){
}
;
_.fromKeyValid = function fromKeyValid_0(){
  return true;
}
;
_.toKeyValid = function toKeyValid_1(){
  return true;
}
;
cggl.Ljava_util_TreeMap$SubMapType$2_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/2', 258, cggl.Ljava_util_TreeMap$SubMapType_2_classLit, null, null);
ju.$clinit_TreeMap$SubMapType$3 = function $clinit_TreeMap$SubMapType$3(){
  ju.$clinit_TreeMap$SubMapType$3 = emptyMethod;
  ju.$clinit_TreeMap$SubMapType();
}
;
ju.TreeMap$SubMapType$3 = function TreeMap$SubMapType$3(enum$name, enum$ordinal){
  ju.$clinit_TreeMap$SubMapType$3();
  ju.TreeMap$SubMapType.call(this, enum$name, enum$ordinal);
  this.$init_240();
}
;
defineClass(259, 49, {4:1, 20:1, 37:1, 1:1, 49:1}, ju.TreeMap$SubMapType$3);
_.$init_240 = function $init_240(){
}
;
_.fromKeyValid = function fromKeyValid_1(){
  return true;
}
;
cggl.Ljava_util_TreeMap$SubMapType$3_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/3', 259, cggl.Ljava_util_TreeMap$SubMapType_2_classLit, null, null);
ju.$clinit_TreeMap$SubMapType$Map = function $clinit_TreeMap$SubMapType$Map(){
  ju.$clinit_TreeMap$SubMapType$Map = emptyMethod;
  ju.$MAP_1 = createValueOfMap(ju.values_4());
}
;
defineClass(440, 1, {1:1});
cggl.Ljava_util_TreeMap$SubMapType$Map_2_classLit = createForClass('java.util', 'TreeMap/SubMapType/Map', 440, cggl.Ljava_lang_Object_2_classLit);
ju.$clinit_TreeSet = function $clinit_TreeSet(){
  ju.$clinit_TreeSet = emptyMethod;
  ju.$clinit_AbstractSet();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_Set();
  ju.$clinit_SortedSet();
}
;
ju.TreeSet = function TreeSet(c){
  ju.$clinit_TreeSet();
  ju.AbstractSet.call(this);
  this.$init_241();
  this.map_0 = new ju.TreeMap_0(c);
}
;
defineClass(139, 64, {4:1, 1:1, 22:1, 38:1}, ju.TreeSet);
_.$init_241 = function $init_241(){
}
;
_.spliterator_0 = function spliterator_12(){
  return ju.$spliterator_3(this);
}
;
_.add = function add_16(o){
  return jsEquals(this.map_0.put(o, (jl.$clinit_Boolean() , FALSE)), null);
}
;
_.clear = function clear_15(){
  this.map_0.clear();
}
;
_.contains = function contains_15(o){
  return this.map_0.containsKey(o);
}
;
_.iterator = function iterator_17(){
  return this.map_0.keySet().iterator();
}
;
_.remove = function remove_34(o){
  return jsNotEquals(this.map_0.remove(o), null);
}
;
_.size = function size_20(){
  return this.map_0.size();
}
;
cggl.Ljava_util_TreeSet_2_classLit = createForClass('java.util', 'TreeSet', 139, cggl.Ljava_util_AbstractSet_2_classLit);
ju.$clinit_Vector = function $clinit_Vector(){
  ju.$clinit_Vector = emptyMethod;
  ju.$clinit_AbstractList();
  jl.$clinit_Iterable();
  ju.$clinit_Collection();
  ju.$clinit_List();
}
;
ju.Vector = function Vector(){
  ju.$clinit_Vector();
  ju.AbstractList.call(this);
  this.$init_242();
  this.arrayList = new ju.ArrayList;
}
;
ju.checkArrayElementIndex = function checkArrayElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw toJs(new jl.ArrayIndexOutOfBoundsException);
  }
}
;
ju.checkArrayIndexOutOfBounds = function checkArrayIndexOutOfBounds(expression, index_0){
  if (!expression) {
    throw toJs(new jl.ArrayIndexOutOfBoundsException_0(jl.valueOf_15(index_0)));
  }
}
;
defineClass(252, 100, {4:1, 1:1, 22:1, 44:1, 82:1}, ju.Vector);
_.$init_242 = function $init_242(){
}
;
_.addAtIndex = function add_17(index_0, o){
  ju.checkArrayElementIndex(index_0, this.size() + 1);
  this.arrayList.addAtIndex(index_0, o);
}
;
_.add = function add_18(o){
  return this.arrayList.add(o);
}
;
_.addAllAtIndex = function addAll_5(index_0, c){
  ju.checkArrayElementIndex(index_0, this.size() + 1);
  return this.arrayList.addAllAtIndex(index_0, c);
}
;
_.addAll = function addAll_6(c){
  return this.arrayList.addAll(c);
}
;
_.clear = function clear_16(){
  this.arrayList.clear();
}
;
_.contains = function contains_16(elem){
  return this.arrayList.contains(elem);
}
;
_.containsAll = function containsAll_1(c){
  return this.arrayList.containsAll(c);
}
;
_.forEach = function forEach_5(consumer){
  this.arrayList.forEach(consumer);
}
;
_.getAtIndex = function get_13(index_0){
  ju.checkArrayElementIndex(index_0, this.size());
  return this.arrayList.getAtIndex(index_0);
}
;
_.indexOf = function indexOf_5(elem){
  return this.arrayList.indexOf(elem);
}
;
_.indexOf_3 = function indexOf_6(elem, index_0){
  ju.checkArrayIndexOutOfBounds(index_0 >= 0, index_0);
  return this.arrayList.indexOf_0(elem, index_0);
}
;
_.isEmpty = function isEmpty_7(){
  return this.arrayList.size() == 0;
}
;
_.iterator = function iterator_18(){
  return this.arrayList.iterator();
}
;
_.lastIndexOf = function lastIndexOf_5(o){
  return this.arrayList.lastIndexOf(o);
}
;
_.lastIndexOf_3 = function lastIndexOf_6(o, index_0){
  ju.checkArrayIndexOutOfBounds(index_0 < this.size(), index_0);
  return this.arrayList.lastIndexOf_0(o, index_0);
}
;
_.removeAtIndex = function remove_35(index_0){
  ju.checkArrayElementIndex(index_0, this.size());
  return this.arrayList.removeAtIndex(index_0);
}
;
_.removeAll = function removeAll_2(c){
  return this.arrayList.removeAll(c);
}
;
_.removeRange = function removeRange_1(fromIndex, endIndex){
  this.arrayList.removeRange(fromIndex, endIndex);
}
;
_.setAtIndex = function set_8(index_0, elem){
  ju.checkArrayElementIndex(index_0, this.size());
  return this.arrayList.setAtIndex(index_0, elem);
}
;
_.size = function size_21(){
  return this.arrayList.size();
}
;
_.sort_0 = function sort_10(c){
  this.arrayList.sort_0(c);
}
;
_.subList = function subList_1(fromIndex, toIndex){
  return this.arrayList.subList(fromIndex, toIndex);
}
;
_.toArray = function toArray_7(){
  return this.arrayList.toArray();
}
;
_.toArray_1 = function toArray_8(a){
  return this.arrayList.toArray_1(a);
}
;
_.toString_0 = function toString_42(){
  return this.arrayList.toString_0();
}
;
cggl.Ljava_util_Vector_2_classLit = createForClass('java.util', 'Vector', 252, cggl.Ljava_util_AbstractList_2_classLit);
juf.$clinit_BiConsumer = function $clinit_BiConsumer(){
  juf.$clinit_BiConsumer = emptyMethod;
}
;
cggl.Ljava_util_function_BiConsumer_2_classLit = createForInterface('java.util.function', 'BiConsumer');
juf.$clinit_BiConsumer$lambda$0$Type = function $clinit_BiConsumer$lambda$0$Type(){
  juf.$clinit_BiConsumer$lambda$0$Type = emptyMethod;
}
;
defineClass(515, 1, {1:1});
cggl.Ljava_util_function_BiConsumer$lambda$0$Type_2_classLit = createForClass('java.util.function', 'BiConsumer/lambda$0$Type', 515, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_BiFunction = function $clinit_BiFunction(){
  juf.$clinit_BiFunction = emptyMethod;
}
;
cggl.Ljava_util_function_BiFunction_2_classLit = createForInterface('java.util.function', 'BiFunction');
juf.$clinit_BiFunction$lambda$0$Type = function $clinit_BiFunction$lambda$0$Type(){
  juf.$clinit_BiFunction$lambda$0$Type = emptyMethod;
}
;
defineClass(474, 1, {1:1});
cggl.Ljava_util_function_BiFunction$lambda$0$Type_2_classLit = createForClass('java.util.function', 'BiFunction/lambda$0$Type', 474, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_BinaryOperator = function $clinit_BinaryOperator(){
  juf.$clinit_BinaryOperator = emptyMethod;
}
;
cggl.Ljava_util_function_BinaryOperator_2_classLit = createForInterface('java.util.function', 'BinaryOperator');
juf.$clinit_BinaryOperator$lambda$0$Type = function $clinit_BinaryOperator$lambda$0$Type(){
  juf.$clinit_BinaryOperator$lambda$0$Type = emptyMethod;
}
;
defineClass(472, 1, {1:1});
cggl.Ljava_util_function_BinaryOperator$lambda$0$Type_2_classLit = createForClass('java.util.function', 'BinaryOperator/lambda$0$Type', 472, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_BinaryOperator$lambda$1$Type = function $clinit_BinaryOperator$lambda$1$Type(){
  juf.$clinit_BinaryOperator$lambda$1$Type = emptyMethod;
}
;
defineClass(473, 1, {1:1});
cggl.Ljava_util_function_BinaryOperator$lambda$1$Type_2_classLit = createForClass('java.util.function', 'BinaryOperator/lambda$1$Type', 473, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Consumer$lambda$0$Type = function $clinit_Consumer$lambda$0$Type(){
  juf.$clinit_Consumer$lambda$0$Type = emptyMethod;
}
;
defineClass(342, 1, {1:1});
cggl.Ljava_util_function_Consumer$lambda$0$Type_2_classLit = createForClass('java.util.function', 'Consumer/lambda$0$Type', 342, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_DoubleConsumer$lambda$0$Type = function $clinit_DoubleConsumer$lambda$0$Type(){
  juf.$clinit_DoubleConsumer$lambda$0$Type = emptyMethod;
}
;
defineClass(310, 1, {1:1});
cggl.Ljava_util_function_DoubleConsumer$lambda$0$Type_2_classLit = createForClass('java.util.function', 'DoubleConsumer/lambda$0$Type', 310, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Function = function $clinit_Function(){
  juf.$clinit_Function = emptyMethod;
}
;
juf.identity_0 = function identity_0(){
  juf.$clinit_Function();
  return new juf.Function$lambda$0$Type;
}
;
juf.lambda$0_0 = function lambda$0_0(t_0){
  juf.$clinit_Function();
  return t_0;
}
;
cggl.Ljava_util_function_Function_2_classLit = createForInterface('java.util.function', 'Function');
juf.$clinit_Function$lambda$0$Type = function $clinit_Function$lambda$0$Type(){
  juf.$clinit_Function$lambda$0$Type = emptyMethod;
}
;
juf.Function$lambda$0$Type = function Function$lambda$0$Type(){
  juf.$clinit_Function$lambda$0$Type();
}
;
defineClass(217, 1, {1:1}, juf.Function$lambda$0$Type);
_.apply_1 = function apply_1(t){
  return juf.lambda$0_0(t);
}
;
cggl.Ljava_util_function_Function$lambda$0$Type_2_classLit = createForClass('java.util.function', 'Function/lambda$0$Type', 217, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Function$lambda$1$Type = function $clinit_Function$lambda$1$Type(){
  juf.$clinit_Function$lambda$1$Type = emptyMethod;
}
;
defineClass(386, 1, {1:1});
cggl.Ljava_util_function_Function$lambda$1$Type_2_classLit = createForClass('java.util.function', 'Function/lambda$1$Type', 386, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Function$lambda$2$Type = function $clinit_Function$lambda$2$Type(){
  juf.$clinit_Function$lambda$2$Type = emptyMethod;
}
;
defineClass(387, 1, {1:1});
cggl.Ljava_util_function_Function$lambda$2$Type_2_classLit = createForClass('java.util.function', 'Function/lambda$2$Type', 387, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_IntConsumer$lambda$0$Type = function $clinit_IntConsumer$lambda$0$Type(){
  juf.$clinit_IntConsumer$lambda$0$Type = emptyMethod;
}
;
defineClass(311, 1, {1:1, 17:1});
cggl.Ljava_util_function_IntConsumer$lambda$0$Type_2_classLit = createForClass('java.util.function', 'IntConsumer/lambda$0$Type', 311, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_IntFunction = function $clinit_IntFunction(){
  juf.$clinit_IntFunction = emptyMethod;
}
;
cggl.Ljava_util_function_IntFunction_2_classLit = createForInterface('java.util.function', 'IntFunction');
juf.$clinit_IntPredicate = function $clinit_IntPredicate(){
  juf.$clinit_IntPredicate = emptyMethod;
}
;
cggl.Ljava_util_function_IntPredicate_2_classLit = createForInterface('java.util.function', 'IntPredicate');
juf.$clinit_IntPredicate$lambda$0$Type = function $clinit_IntPredicate$lambda$0$Type(){
  juf.$clinit_IntPredicate$lambda$0$Type = emptyMethod;
}
;
defineClass(516, 1, {1:1});
cggl.Ljava_util_function_IntPredicate$lambda$0$Type_2_classLit = createForClass('java.util.function', 'IntPredicate/lambda$0$Type', 516, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_IntPredicate$lambda$1$Type = function $clinit_IntPredicate$lambda$1$Type(){
  juf.$clinit_IntPredicate$lambda$1$Type = emptyMethod;
}
;
defineClass(517, 1, {1:1});
cggl.Ljava_util_function_IntPredicate$lambda$1$Type_2_classLit = createForClass('java.util.function', 'IntPredicate/lambda$1$Type', 517, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_IntPredicate$lambda$2$Type = function $clinit_IntPredicate$lambda$2$Type(){
  juf.$clinit_IntPredicate$lambda$2$Type = emptyMethod;
}
;
defineClass(518, 1, {1:1});
cggl.Ljava_util_function_IntPredicate$lambda$2$Type_2_classLit = createForClass('java.util.function', 'IntPredicate/lambda$2$Type', 518, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_IntToDoubleFunction = function $clinit_IntToDoubleFunction(){
  juf.$clinit_IntToDoubleFunction = emptyMethod;
}
;
cggl.Ljava_util_function_IntToDoubleFunction_2_classLit = createForInterface('java.util.function', 'IntToDoubleFunction');
juf.$clinit_IntToLongFunction = function $clinit_IntToLongFunction(){
  juf.$clinit_IntToLongFunction = emptyMethod;
}
;
cggl.Ljava_util_function_IntToLongFunction_2_classLit = createForInterface('java.util.function', 'IntToLongFunction');
juf.$clinit_LongConsumer$lambda$0$Type = function $clinit_LongConsumer$lambda$0$Type(){
  juf.$clinit_LongConsumer$lambda$0$Type = emptyMethod;
}
;
defineClass(312, 1, {1:1});
cggl.Ljava_util_function_LongConsumer$lambda$0$Type_2_classLit = createForClass('java.util.function', 'LongConsumer/lambda$0$Type', 312, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_ObjIntConsumer = function $clinit_ObjIntConsumer(){
  juf.$clinit_ObjIntConsumer = emptyMethod;
}
;
cggl.Ljava_util_function_ObjIntConsumer_2_classLit = createForInterface('java.util.function', 'ObjIntConsumer');
juf.$clinit_Predicate = function $clinit_Predicate(){
  juf.$clinit_Predicate = emptyMethod;
}
;
cggl.Ljava_util_function_Predicate_2_classLit = createForInterface('java.util.function', 'Predicate');
juf.$clinit_Predicate$0methodref$isNull$Type = function $clinit_Predicate$0methodref$isNull$Type(){
  juf.$clinit_Predicate$0methodref$isNull$Type = emptyMethod;
}
;
defineClass(475, 1, {1:1});
cggl.Ljava_util_function_Predicate$0methodref$isNull$Type_2_classLit = createForClass('java.util.function', 'Predicate/0methodref$isNull$Type', 475, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Predicate$1methodref$equals$Type = function $clinit_Predicate$1methodref$equals$Type(){
  juf.$clinit_Predicate$1methodref$equals$Type = emptyMethod;
}
;
defineClass(476, 1, {1:1});
cggl.Ljava_util_function_Predicate$1methodref$equals$Type_2_classLit = createForClass('java.util.function', 'Predicate/1methodref$equals$Type', 476, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Predicate$lambda$0$Type = function $clinit_Predicate$lambda$0$Type(){
  juf.$clinit_Predicate$lambda$0$Type = emptyMethod;
}
;
defineClass(477, 1, {1:1});
cggl.Ljava_util_function_Predicate$lambda$0$Type_2_classLit = createForClass('java.util.function', 'Predicate/lambda$0$Type', 477, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Predicate$lambda$1$Type = function $clinit_Predicate$lambda$1$Type(){
  juf.$clinit_Predicate$lambda$1$Type = emptyMethod;
}
;
defineClass(478, 1, {1:1});
cggl.Ljava_util_function_Predicate$lambda$1$Type_2_classLit = createForClass('java.util.function', 'Predicate/lambda$1$Type', 478, cggl.Ljava_lang_Object_2_classLit);
juf.$clinit_Predicate$lambda$2$Type = function $clinit_Predicate$lambda$2$Type(){
  juf.$clinit_Predicate$lambda$2$Type = emptyMethod;
}
;
defineClass(479, 1, {1:1});
cggl.Ljava_util_function_Predicate$lambda$2$Type_2_classLit = createForClass('java.util.function', 'Predicate/lambda$2$Type', 479, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_BaseStream = function $clinit_BaseStream(){
  jus.$clinit_BaseStream = emptyMethod;
}
;
cggl.Ljava_util_stream_BaseStream_2_classLit = createForInterface('java.util.stream', 'BaseStream');
jus.$clinit_Collector = function $clinit_Collector(){
  jus.$clinit_Collector = emptyMethod;
}
;
jus.of_0 = function of_0(supplier, accumulator, combiner, characteristics){
  jus.$clinit_Collector();
  ji2.checkNotNull_0(supplier);
  ji2.checkNotNull_0(accumulator);
  ji2.checkNotNull_0(combiner);
  ji2.checkNotNull_0(characteristics);
  return new jus.CollectorImpl(supplier, accumulator, combiner, juf.identity_0(), characteristics);
}
;
cggl.Ljava_util_stream_Collector_2_classLit = createForInterface('java.util.stream', 'Collector');
jus.$clinit_Collector$Characteristics = function $clinit_Collector$Characteristics(){
  jus.$clinit_Collector$Characteristics = emptyMethod;
  jl.$clinit_Enum();
  jus.CONCURRENT_0 = new jus.Collector$Characteristics('CONCURRENT', 0);
  jus.IDENTITY_FINISH = new jus.Collector$Characteristics('IDENTITY_FINISH', 1);
  jus.UNORDERED = new jus.Collector$Characteristics('UNORDERED', 2);
}
;
jus.Collector$Characteristics = function Collector$Characteristics(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
  this.$init_243();
}
;
jus.valueOf_22 = function valueOf_22(name_0){
  jus.$clinit_Collector$Characteristics();
  return valueOf((jus.$clinit_Collector$Characteristics$Map() , jus.$MAP_2), name_0);
}
;
jus.values_5 = function values_5(){
  jus.$clinit_Collector$Characteristics();
  return stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_util_stream_Collector$Characteristics_2_classLit, 1), {4:1, 1:1, 8:1}, 71, 0, [jus.CONCURRENT_0, jus.IDENTITY_FINISH, jus.UNORDERED]);
}
;
defineClass(71, 37, {4:1, 20:1, 37:1, 1:1, 71:1}, jus.Collector$Characteristics);
_.$init_243 = function $init_243(){
}
;
cggl.Ljava_util_stream_Collector$Characteristics_2_classLit = createForEnum('java.util.stream', 'Collector/Characteristics', 71, cggl.Ljava_lang_Enum_2_classLit, jus.values_5, jus.valueOf_22);
jus.$clinit_Collector$Characteristics$Map = function $clinit_Collector$Characteristics$Map(){
  jus.$clinit_Collector$Characteristics$Map = emptyMethod;
  jus.$MAP_2 = createValueOfMap(jus.values_5());
}
;
defineClass(569, 1, {1:1});
cggl.Ljava_util_stream_Collector$Characteristics$Map_2_classLit = createForClass('java.util.stream', 'Collector/Characteristics/Map', 569, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_CollectorImpl = function $clinit_CollectorImpl(){
  jus.$clinit_CollectorImpl = emptyMethod;
  jl.$clinit_Object();
}
;
jus.CollectorImpl = function CollectorImpl(supplier, accumulator, combiner, finisher, characteristics){
  jus.$clinit_CollectorImpl();
  Object_0.call(this);
  this.$init_244();
  this.supplier = supplier;
  this.accumulator = accumulator;
  this.characteristics = ju.emptySet();
  this.combiner = combiner;
  this.finisher = finisher;
}
;
defineClass(299, 1, {1:1}, jus.CollectorImpl);
_.$init_244 = function $init_244(){
}
;
_.accumulator_0 = function accumulator_0(){
  return this.accumulator;
}
;
_.combiner_0 = function combiner_0(){
  return this.combiner;
}
;
_.finisher_0 = function finisher_0(){
  return this.finisher;
}
;
_.supplier_0 = function supplier_0(){
  return this.supplier;
}
;
cggl.Ljava_util_stream_CollectorImpl_2_classLit = createForClass('java.util.stream', 'CollectorImpl', 299, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors = function $clinit_Collectors(){
  jus.$clinit_Collectors = emptyMethod;
  jl.$clinit_Object();
}
;
jus.addAll_7 = function addAll_7(collection, items){
  collection.addAll(items);
  return collection;
}
;
jus.lambda$21 = function lambda$21(c1_0, c2_1){
  jus.$clinit_Collectors();
  return jus.addAll_7(c1_0, c2_1);
}
;
jus.toCollection = function toCollection(collectionFactory){
  return jus.of_0(collectionFactory, new jus.Collectors$20methodref$add$Type, new jus.Collectors$lambda$21$Type, stampJavaTypeInfo(getClassLiteralForArray(cggl.Ljava_util_stream_Collector$Characteristics_2_classLit, 1), {4:1, 1:1, 8:1}, 71, 0, [(jus.$clinit_Collector$Characteristics() , jus.IDENTITY_FINISH)]));
}
;
jus.toList = function toList(){
  jus.$clinit_Collectors();
  return jus.toCollection(new jus.Collectors$21methodref$ctor$Type);
}
;
defineClass(519, 1, {1:1});
cggl.Ljava_util_stream_Collectors_2_classLit = createForClass('java.util.stream', 'Collectors', 519, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$0methodref$getAverage$Type = function $clinit_Collectors$0methodref$getAverage$Type(){
  jus.$clinit_Collectors$0methodref$getAverage$Type = emptyMethod;
}
;
defineClass(520, 1, {1:1});
cggl.Ljava_util_stream_Collectors$0methodref$getAverage$Type_2_classLit = createForClass('java.util.stream', 'Collectors/0methodref$getAverage$Type', 520, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$10methodref$merge$Type = function $clinit_Collectors$10methodref$merge$Type(){
  jus.$clinit_Collectors$10methodref$merge$Type = emptyMethod;
}
;
defineClass(537, 1, {1:1});
cggl.Ljava_util_stream_Collectors$10methodref$merge$Type_2_classLit = createForClass('java.util.stream', 'Collectors/10methodref$merge$Type', 537, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$11methodref$toString$Type = function $clinit_Collectors$11methodref$toString$Type(){
  jus.$clinit_Collectors$11methodref$toString$Type = emptyMethod;
}
;
defineClass(538, 1, {1:1});
cggl.Ljava_util_stream_Collectors$11methodref$toString$Type_2_classLit = createForClass('java.util.stream', 'Collectors/11methodref$toString$Type', 538, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$12methodref$test$Type = function $clinit_Collectors$12methodref$test$Type(){
  jus.$clinit_Collectors$12methodref$test$Type = emptyMethod;
}
;
defineClass(540, 1, {1:1});
cggl.Ljava_util_stream_Collectors$12methodref$test$Type_2_classLit = createForClass('java.util.stream', 'Collectors/12methodref$test$Type', 540, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$13methodref$ctor$Type = function $clinit_Collectors$13methodref$ctor$Type(){
  jus.$clinit_Collectors$13methodref$ctor$Type = emptyMethod;
}
;
defineClass(541, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$13methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/13methodref$ctor$Type', 541, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$14methodref$of$Type = function $clinit_Collectors$14methodref$of$Type(){
  jus.$clinit_Collectors$14methodref$of$Type = emptyMethod;
}
;
defineClass(543, 1, {1:1});
cggl.Ljava_util_stream_Collectors$14methodref$of$Type_2_classLit = createForClass('java.util.stream', 'Collectors/14methodref$of$Type', 543, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$15methodref$ctor$Type = function $clinit_Collectors$15methodref$ctor$Type(){
  jus.$clinit_Collectors$15methodref$ctor$Type = emptyMethod;
}
;
defineClass(549, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$15methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/15methodref$ctor$Type', 549, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$16methodref$ctor$Type = function $clinit_Collectors$16methodref$ctor$Type(){
  jus.$clinit_Collectors$16methodref$ctor$Type = emptyMethod;
}
;
defineClass(552, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$16methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/16methodref$ctor$Type', 552, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$17methodref$ctor$Type = function $clinit_Collectors$17methodref$ctor$Type(){
  jus.$clinit_Collectors$17methodref$ctor$Type = emptyMethod;
}
;
defineClass(555, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$17methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/17methodref$ctor$Type', 555, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$18methodref$getSum$Type = function $clinit_Collectors$18methodref$getSum$Type(){
  jus.$clinit_Collectors$18methodref$getSum$Type = emptyMethod;
}
;
defineClass(558, 1, {1:1});
cggl.Ljava_util_stream_Collectors$18methodref$getSum$Type_2_classLit = createForClass('java.util.stream', 'Collectors/18methodref$getSum$Type', 558, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$19methodref$getSum$Type = function $clinit_Collectors$19methodref$getSum$Type(){
  jus.$clinit_Collectors$19methodref$getSum$Type = emptyMethod;
}
;
defineClass(560, 1, {1:1});
cggl.Ljava_util_stream_Collectors$19methodref$getSum$Type_2_classLit = createForClass('java.util.stream', 'Collectors/19methodref$getSum$Type', 560, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$1methodref$getAverage$Type = function $clinit_Collectors$1methodref$getAverage$Type(){
  jus.$clinit_Collectors$1methodref$getAverage$Type = emptyMethod;
}
;
defineClass(521, 1, {1:1});
cggl.Ljava_util_stream_Collectors$1methodref$getAverage$Type_2_classLit = createForClass('java.util.stream', 'Collectors/1methodref$getAverage$Type', 521, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$20methodref$add$Type = function $clinit_Collectors$20methodref$add$Type(){
  jus.$clinit_Collectors$20methodref$add$Type = emptyMethod;
}
;
jus.Collectors$20methodref$add$Type = function Collectors$20methodref$add$Type(){
  jus.$clinit_Collectors$20methodref$add$Type();
}
;
defineClass(293, 1, {1:1}, jus.Collectors$20methodref$add$Type);
_.accept_1 = function accept_4(arg0, arg1){
  castTo(arg0, 22).add(arg1);
}
;
cggl.Ljava_util_stream_Collectors$20methodref$add$Type_2_classLit = createForClass('java.util.stream', 'Collectors/20methodref$add$Type', 293, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$21methodref$ctor$Type = function $clinit_Collectors$21methodref$ctor$Type(){
  jus.$clinit_Collectors$21methodref$ctor$Type = emptyMethod;
}
;
jus.Collectors$21methodref$ctor$Type = function Collectors$21methodref$ctor$Type(){
  jus.$clinit_Collectors$21methodref$ctor$Type();
}
;
defineClass(295, 1, {1:1, 36:1}, jus.Collectors$21methodref$ctor$Type);
_.get_0 = function get_14(){
  return new ju.ArrayList;
}
;
cggl.Ljava_util_stream_Collectors$21methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/21methodref$ctor$Type', 295, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$22methodref$ctor$Type = function $clinit_Collectors$22methodref$ctor$Type(){
  jus.$clinit_Collectors$22methodref$ctor$Type = emptyMethod;
}
;
defineClass(562, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$22methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/22methodref$ctor$Type', 562, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$23methodref$ctor$Type = function $clinit_Collectors$23methodref$ctor$Type(){
  jus.$clinit_Collectors$23methodref$ctor$Type = emptyMethod;
}
;
defineClass(565, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$23methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/23methodref$ctor$Type', 565, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$24methodref$add$Type = function $clinit_Collectors$24methodref$add$Type(){
  jus.$clinit_Collectors$24methodref$add$Type = emptyMethod;
}
;
defineClass(566, 1, {1:1});
cggl.Ljava_util_stream_Collectors$24methodref$add$Type_2_classLit = createForClass('java.util.stream', 'Collectors/24methodref$add$Type', 566, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$2methodref$getAverage$Type = function $clinit_Collectors$2methodref$getAverage$Type(){
  jus.$clinit_Collectors$2methodref$getAverage$Type = emptyMethod;
}
;
defineClass(522, 1, {1:1});
cggl.Ljava_util_stream_Collectors$2methodref$getAverage$Type_2_classLit = createForClass('java.util.stream', 'Collectors/2methodref$getAverage$Type', 522, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$3methodref$ctor$Type = function $clinit_Collectors$3methodref$ctor$Type(){
  jus.$clinit_Collectors$3methodref$ctor$Type = emptyMethod;
}
;
defineClass(525, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$3methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/3methodref$ctor$Type', 525, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$4methodref$addAll$Type = function $clinit_Collectors$4methodref$addAll$Type(){
  jus.$clinit_Collectors$4methodref$addAll$Type = emptyMethod;
}
;
defineClass(528, 1, {1:1});
cggl.Ljava_util_stream_Collectors$4methodref$addAll$Type_2_classLit = createForClass('java.util.stream', 'Collectors/4methodref$addAll$Type', 528, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$5methodref$ctor$Type = function $clinit_Collectors$5methodref$ctor$Type(){
  jus.$clinit_Collectors$5methodref$ctor$Type = emptyMethod;
}
;
defineClass(531, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$5methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/5methodref$ctor$Type', 531, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$6methodref$append$Type = function $clinit_Collectors$6methodref$append$Type(){
  jus.$clinit_Collectors$6methodref$append$Type = emptyMethod;
}
;
defineClass(532, 1, {1:1});
cggl.Ljava_util_stream_Collectors$6methodref$append$Type_2_classLit = createForClass('java.util.stream', 'Collectors/6methodref$append$Type', 532, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$7methodref$append$Type = function $clinit_Collectors$7methodref$append$Type(){
  jus.$clinit_Collectors$7methodref$append$Type = emptyMethod;
}
;
defineClass(533, 1, {1:1});
cggl.Ljava_util_stream_Collectors$7methodref$append$Type_2_classLit = createForClass('java.util.stream', 'Collectors/7methodref$append$Type', 533, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$8methodref$toString$Type = function $clinit_Collectors$8methodref$toString$Type(){
  jus.$clinit_Collectors$8methodref$toString$Type = emptyMethod;
}
;
defineClass(534, 1, {1:1});
cggl.Ljava_util_stream_Collectors$8methodref$toString$Type_2_classLit = createForClass('java.util.stream', 'Collectors/8methodref$toString$Type', 534, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$9methodref$add$Type = function $clinit_Collectors$9methodref$add$Type(){
  jus.$clinit_Collectors$9methodref$add$Type = emptyMethod;
}
;
defineClass(536, 1, {1:1});
cggl.Ljava_util_stream_Collectors$9methodref$add$Type_2_classLit = createForClass('java.util.stream', 'Collectors/9methodref$add$Type', 536, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$0$Type = function $clinit_Collectors$lambda$0$Type(){
  jus.$clinit_Collectors$lambda$0$Type = emptyMethod;
}
;
defineClass(523, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$0$Type', 523, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$1$Type = function $clinit_Collectors$lambda$1$Type(){
  jus.$clinit_Collectors$lambda$1$Type = emptyMethod;
}
;
defineClass(524, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$1$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$1$Type', 524, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$10$Type = function $clinit_Collectors$lambda$10$Type(){
  jus.$clinit_Collectors$lambda$10$Type = emptyMethod;
}
;
defineClass(545, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$lambda$10$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$10$Type', 545, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$11$Type = function $clinit_Collectors$lambda$11$Type(){
  jus.$clinit_Collectors$lambda$11$Type = emptyMethod;
}
;
defineClass(546, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$11$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$11$Type', 546, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$12$Type = function $clinit_Collectors$lambda$12$Type(){
  jus.$clinit_Collectors$lambda$12$Type = emptyMethod;
}
;
defineClass(547, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$12$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$12$Type', 547, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$13$Type = function $clinit_Collectors$lambda$13$Type(){
  jus.$clinit_Collectors$lambda$13$Type = emptyMethod;
}
;
defineClass(548, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$13$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$13$Type', 548, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$14$Type = function $clinit_Collectors$lambda$14$Type(){
  jus.$clinit_Collectors$lambda$14$Type = emptyMethod;
}
;
defineClass(550, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$14$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$14$Type', 550, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$15$Type = function $clinit_Collectors$lambda$15$Type(){
  jus.$clinit_Collectors$lambda$15$Type = emptyMethod;
}
;
defineClass(551, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$15$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$15$Type', 551, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$16$Type = function $clinit_Collectors$lambda$16$Type(){
  jus.$clinit_Collectors$lambda$16$Type = emptyMethod;
}
;
defineClass(553, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$16$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$16$Type', 553, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$17$Type = function $clinit_Collectors$lambda$17$Type(){
  jus.$clinit_Collectors$lambda$17$Type = emptyMethod;
}
;
defineClass(554, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$17$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$17$Type', 554, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$18$Type = function $clinit_Collectors$lambda$18$Type(){
  jus.$clinit_Collectors$lambda$18$Type = emptyMethod;
}
;
defineClass(556, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$18$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$18$Type', 556, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$19$Type = function $clinit_Collectors$lambda$19$Type(){
  jus.$clinit_Collectors$lambda$19$Type = emptyMethod;
}
;
defineClass(557, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$19$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$19$Type', 557, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$2$Type = function $clinit_Collectors$lambda$2$Type(){
  jus.$clinit_Collectors$lambda$2$Type = emptyMethod;
}
;
defineClass(526, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$lambda$2$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$2$Type', 526, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$20$Type = function $clinit_Collectors$lambda$20$Type(){
  jus.$clinit_Collectors$lambda$20$Type = emptyMethod;
}
;
defineClass(559, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$20$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$20$Type', 559, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$21$Type = function $clinit_Collectors$lambda$21$Type(){
  jus.$clinit_Collectors$lambda$21$Type = emptyMethod;
}
;
jus.Collectors$lambda$21$Type = function Collectors$lambda$21$Type(){
  jus.$clinit_Collectors$lambda$21$Type();
}
;
defineClass(294, 1, {1:1}, jus.Collectors$lambda$21$Type);
_.apply_0 = function apply_2(arg0, arg1){
  return jus.lambda$21(arg0, arg1);
}
;
cggl.Ljava_util_stream_Collectors$lambda$21$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$21$Type', 294, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$22$Type = function $clinit_Collectors$lambda$22$Type(){
  jus.$clinit_Collectors$lambda$22$Type = emptyMethod;
}
;
defineClass(561, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$22$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$22$Type', 561, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$23$Type = function $clinit_Collectors$lambda$23$Type(){
  jus.$clinit_Collectors$lambda$23$Type = emptyMethod;
}
;
defineClass(563, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$23$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$23$Type', 563, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$24$Type = function $clinit_Collectors$lambda$24$Type(){
  jus.$clinit_Collectors$lambda$24$Type = emptyMethod;
}
;
defineClass(564, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$24$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$24$Type', 564, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$25$Type = function $clinit_Collectors$lambda$25$Type(){
  jus.$clinit_Collectors$lambda$25$Type = emptyMethod;
}
;
defineClass(567, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$25$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$25$Type', 567, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$26$Type = function $clinit_Collectors$lambda$26$Type(){
  jus.$clinit_Collectors$lambda$26$Type = emptyMethod;
}
;
defineClass(568, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$26$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$26$Type', 568, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$3$Type = function $clinit_Collectors$lambda$3$Type(){
  jus.$clinit_Collectors$lambda$3$Type = emptyMethod;
}
;
defineClass(527, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$3$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$3$Type', 527, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$4$Type = function $clinit_Collectors$lambda$4$Type(){
  jus.$clinit_Collectors$lambda$4$Type = emptyMethod;
}
;
defineClass(529, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$4$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$4$Type', 529, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$5$Type = function $clinit_Collectors$lambda$5$Type(){
  jus.$clinit_Collectors$lambda$5$Type = emptyMethod;
}
;
defineClass(530, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$5$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$5$Type', 530, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$6$Type = function $clinit_Collectors$lambda$6$Type(){
  jus.$clinit_Collectors$lambda$6$Type = emptyMethod;
}
;
defineClass(535, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$lambda$6$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$6$Type', 535, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$7$Type = function $clinit_Collectors$lambda$7$Type(){
  jus.$clinit_Collectors$lambda$7$Type = emptyMethod;
}
;
defineClass(539, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$7$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$7$Type', 539, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$8$Type = function $clinit_Collectors$lambda$8$Type(){
  jus.$clinit_Collectors$lambda$8$Type = emptyMethod;
}
;
defineClass(542, 1, {1:1, 36:1});
cggl.Ljava_util_stream_Collectors$lambda$8$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$8$Type', 542, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Collectors$lambda$9$Type = function $clinit_Collectors$lambda$9$Type(){
  jus.$clinit_Collectors$lambda$9$Type = emptyMethod;
}
;
defineClass(544, 1, {1:1});
cggl.Ljava_util_stream_Collectors$lambda$9$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$9$Type', 544, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStream = function $clinit_IntStream(){
  jus.$clinit_IntStream = emptyMethod;
}
;
jus.$iterator = function $iterator(this$static){
  return this$static.iterator_1();
}
;
jus.$spliterator_4 = function $spliterator_4(this$static){
  return this$static.spliterator_1();
}
;
cggl.Ljava_util_stream_IntStream_2_classLit = createForInterface('java.util.stream', 'IntStream');
jus.$clinit_IntStream$0methodref$close$Type = function $clinit_IntStream$0methodref$close$Type(){
  jus.$clinit_IntStream$0methodref$close$Type = emptyMethod;
}
;
defineClass(316, 1, {1:1});
cggl.Ljava_util_stream_IntStream$0methodref$close$Type_2_classLit = createForClass('java.util.stream', 'IntStream/0methodref$close$Type', 316, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStream$Builder = function $clinit_IntStream$Builder(){
  jus.$clinit_IntStream$Builder = emptyMethod;
}
;
cggl.Ljava_util_stream_IntStream$Builder_2_classLit = createForInterface('java.util.stream', 'IntStream/Builder');
jus.$clinit_IntStream$1 = function $clinit_IntStream$1(){
  jus.$clinit_IntStream$1 = emptyMethod;
}
;
defineClass(313, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStream$1_2_classLit = createForClass('java.util.stream', 'IntStream/1', 313, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStream$1methodref$close$Type = function $clinit_IntStream$1methodref$close$Type(){
  jus.$clinit_IntStream$1methodref$close$Type = emptyMethod;
}
;
defineClass(317, 1, {1:1});
cggl.Ljava_util_stream_IntStream$1methodref$close$Type_2_classLit = createForClass('java.util.stream', 'IntStream/1methodref$close$Type', 317, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStream$2 = function $clinit_IntStream$2(){
  jus.$clinit_IntStream$2 = emptyMethod;
}
;
defineClass(314, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStream$2_2_classLit = createForClass('java.util.stream', 'IntStream/2', 314, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStream$2$lambda$0$Type = function $clinit_IntStream$2$lambda$0$Type(){
  jus.$clinit_IntStream$2$lambda$0$Type = emptyMethod;
}
;
defineClass(315, 1, {1:1});
cggl.Ljava_util_stream_IntStream$2$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStream/2/lambda$0$Type', 315, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStream$3 = function $clinit_IntStream$3(){
  jus.$clinit_IntStream$3 = emptyMethod;
}
;
defineClass(318, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStream$3_2_classLit = createForClass('java.util.stream', 'IntStream/3', 318, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStream$4 = function $clinit_IntStream$4(){
  jus.$clinit_IntStream$4 = emptyMethod;
}
;
defineClass(319, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStream$4_2_classLit = createForClass('java.util.stream', 'IntStream/4', 319, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStream$5 = function $clinit_IntStream$5(){
  jus.$clinit_IntStream$5 = emptyMethod;
}
;
defineClass(320, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStream$5_2_classLit = createForClass('java.util.stream', 'IntStream/5', 320, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_TerminatableStream = function $clinit_TerminatableStream(){
  jus.$clinit_TerminatableStream = emptyMethod;
  jl.$clinit_Object();
}
;
jus.TerminatableStream = function TerminatableStream(previous){
  jus.$clinit_TerminatableStream();
  Object_0.call(this);
  this.$init_245();
  if (isNull(previous)) {
    this.root = null;
    this.onClose = new ju.ArrayList;
  }
   else {
    this.root = previous;
    this.onClose = null;
  }
}
;
jus.lambda$0_1 = function lambda$0_1(throwables_0, runnable_1){
  jus.$clinit_TerminatableStream();
  var e;
  {
    try {
      runnable_1.run();
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        e = $e0;
        throwables_0.add(e);
      }
       else 
        throw toJs($e0);
    }
  }
}
;
defineClass(104, 1, {1:1});
_.$init_245 = function $init_245(){
  this.terminated = false;
}
;
_.close_0 = function close_5(){
  if (isNull(this.root)) {
    this.terminated = true;
    this.runClosers();
  }
   else {
    this.root.close_0();
  }
}
;
_.runClosers = function runClosers(){
  var e, i, size_0, suppressed, throwables;
  throwables = new ju.ArrayList;
  this.onClose.forEach(new jus.TerminatableStream$lambda$0$Type(throwables));
  this.onClose.clear();
  if (!throwables.isEmpty()) {
    e = castTo(throwables.getAtIndex(0), 13);
    for (i = 1 , size_0 = throwables.size(); i < size_0; ++i) {
      suppressed = castTo(throwables.getAtIndex(i), 13);
      if (jsNotEquals(suppressed, e)) {
        e.addSuppressed(suppressed);
      }
    }
    if (instanceOf(e, 16)) {
      throw toJs(castTo(e, 16));
    }
    if (instanceOf(e, 50)) {
      throw toJs(castTo(e, 50));
    }
  }
}
;
_.terminate = function terminate(){
  if (isNull(this.root)) {
    this.throwIfTerminated();
    this.terminated = true;
  }
   else {
    this.root.terminate();
  }
}
;
_.throwIfTerminated = function throwIfTerminated(){
  if (isNotNull(this.root)) {
    this.root.throwIfTerminated();
  }
   else if (this.terminated) {
    throw toJs(new jl.IllegalStateException_0("Stream already terminated, can't be modified or used"));
  }
}
;
_.terminated = false;
cggl.Ljava_util_stream_TerminatableStream_2_classLit = createForClass('java.util.stream', 'TerminatableStream', 104, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl = function $clinit_IntStreamImpl(){
  jus.$clinit_IntStreamImpl = emptyMethod;
  jus.$clinit_TerminatableStream();
}
;
jus.IntStreamImpl = function IntStreamImpl(previous, spliterator){
  jus.$clinit_IntStreamImpl();
  jus.TerminatableStream.call(this, previous);
  this.$init_246();
  this.spliterator = spliterator;
}
;
defineClass(163, 104, {1:1}, jus.IntStreamImpl);
_.$init_246 = function $init_246(){
}
;
_.close_0 = function close_6(){
  getClassPrototype(104).close_0.call(this);
}
;
_.iterator = function iterator_19(){
  return this.iterator_1();
}
;
_.spliterator_0 = function spliterator_14(){
  return this.spliterator_1();
}
;
_.iterator_1 = function iterator_20(){
  return ju.iterator_15(this.spliterator_1());
}
;
_.spliterator_1 = function spliterator_13(){
  this.terminate();
  return this.spliterator;
}
;
cggl.Ljava_util_stream_IntStreamImpl_2_classLit = createForClass('java.util.stream', 'IntStreamImpl', 163, cggl.Ljava_util_stream_TerminatableStream_2_classLit);
jus.$clinit_IntStreamImpl$0methodref$ctor$Type = function $clinit_IntStreamImpl$0methodref$ctor$Type(){
  jus.$clinit_IntStreamImpl$0methodref$ctor$Type = emptyMethod;
}
;
defineClass(499, 1, {1:1, 36:1});
cggl.Ljava_util_stream_IntStreamImpl$0methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/0methodref$ctor$Type', 499, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$1 = function $clinit_IntStreamImpl$1(){
  jus.$clinit_IntStreamImpl$1 = emptyMethod;
}
;
defineClass(506, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStreamImpl$1_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/1', 506, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$1$lambda$0$Type = function $clinit_IntStreamImpl$1$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$1$lambda$0$Type = emptyMethod;
}
;
defineClass(507, 1, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$1$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/1/lambda$0$Type', 507, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$1methodref$combine$Type = function $clinit_IntStreamImpl$1methodref$combine$Type(){
  jus.$clinit_IntStreamImpl$1methodref$combine$Type = emptyMethod;
}
;
defineClass(501, 1, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$1methodref$combine$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/1methodref$combine$Type', 501, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$2 = function $clinit_IntStreamImpl$2(){
  jus.$clinit_IntStreamImpl$2 = emptyMethod;
}
;
defineClass(509, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStreamImpl$2_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/2', 509, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$2$lambda$0$Type = function $clinit_IntStreamImpl$2$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$2$lambda$0$Type = emptyMethod;
}
;
defineClass(510, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$2$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/2/lambda$0$Type', 510, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$2methodref$add$Type = function $clinit_IntStreamImpl$2methodref$add$Type(){
  jus.$clinit_IntStreamImpl$2methodref$add$Type = emptyMethod;
}
;
defineClass(508, 1, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$2methodref$add$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/2methodref$add$Type', 508, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$3 = function $clinit_IntStreamImpl$3(){
  jus.$clinit_IntStreamImpl$3 = emptyMethod;
}
;
defineClass(511, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStreamImpl$3_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/3', 511, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$3methodref$valueOf$Type = function $clinit_IntStreamImpl$3methodref$valueOf$Type(){
  jus.$clinit_IntStreamImpl$3methodref$valueOf$Type = emptyMethod;
}
;
defineClass(514, 1, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$3methodref$valueOf$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/3methodref$valueOf$Type', 514, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$Empty = function $clinit_IntStreamImpl$Empty(){
  jus.$clinit_IntStreamImpl$Empty = emptyMethod;
}
;
defineClass(484, 104, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$Empty_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/Empty', 484, cggl.Ljava_util_stream_TerminatableStream_2_classLit);
jus.$clinit_IntStreamImpl$FilterSpliterator = function $clinit_IntStreamImpl$FilterSpliterator(){
  jus.$clinit_IntStreamImpl$FilterSpliterator = emptyMethod;
}
;
defineClass(489, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStreamImpl$FilterSpliterator_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/FilterSpliterator', 489, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$FilterSpliterator$lambda$0$Type = function $clinit_IntStreamImpl$FilterSpliterator$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$FilterSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(497, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$FilterSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/FilterSpliterator/lambda$0$Type', 497, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$LimitSpliterator = function $clinit_IntStreamImpl$LimitSpliterator(){
  jus.$clinit_IntStreamImpl$LimitSpliterator = emptyMethod;
}
;
defineClass(491, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStreamImpl$LimitSpliterator_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/LimitSpliterator', 491, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$MapToDoubleSpliterator = function $clinit_IntStreamImpl$MapToDoubleSpliterator(){
  jus.$clinit_IntStreamImpl$MapToDoubleSpliterator = emptyMethod;
}
;
defineClass(488, 322, {1:1, 15:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToDoubleSpliterator_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToDoubleSpliterator', 488, cggl.Ljava_util_Spliterators$AbstractDoubleSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$MapToDoubleSpliterator$lambda$0$Type = function $clinit_IntStreamImpl$MapToDoubleSpliterator$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$MapToDoubleSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(496, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToDoubleSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToDoubleSpliterator/lambda$0$Type', 496, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$MapToIntSpliterator = function $clinit_IntStreamImpl$MapToIntSpliterator(){
  jus.$clinit_IntStreamImpl$MapToIntSpliterator = emptyMethod;
}
;
defineClass(485, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToIntSpliterator_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToIntSpliterator', 485, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$MapToIntSpliterator$lambda$0$Type = function $clinit_IntStreamImpl$MapToIntSpliterator$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$MapToIntSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(493, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToIntSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToIntSpliterator/lambda$0$Type', 493, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$MapToLongSpliterator = function $clinit_IntStreamImpl$MapToLongSpliterator(){
  jus.$clinit_IntStreamImpl$MapToLongSpliterator = emptyMethod;
}
;
defineClass(487, 323, {1:1, 15:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToLongSpliterator_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToLongSpliterator', 487, cggl.Ljava_util_Spliterators$AbstractLongSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$MapToLongSpliterator$lambda$0$Type = function $clinit_IntStreamImpl$MapToLongSpliterator$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$MapToLongSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(495, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToLongSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToLongSpliterator/lambda$0$Type', 495, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$MapToObjSpliterator = function $clinit_IntStreamImpl$MapToObjSpliterator(){
  jus.$clinit_IntStreamImpl$MapToObjSpliterator = emptyMethod;
}
;
defineClass(486, 180, {1:1, 15:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToObjSpliterator_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToObjSpliterator', 486, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$MapToObjSpliterator$lambda$0$Type = function $clinit_IntStreamImpl$MapToObjSpliterator$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$MapToObjSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(494, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$MapToObjSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/MapToObjSpliterator/lambda$0$Type', 494, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$SkipSpliterator = function $clinit_IntStreamImpl$SkipSpliterator(){
  jus.$clinit_IntStreamImpl$SkipSpliterator = emptyMethod;
}
;
defineClass(490, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_IntStreamImpl$SkipSpliterator_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/SkipSpliterator', 490, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_IntStreamImpl$SkipSpliterator$lambda$0$Type = function $clinit_IntStreamImpl$SkipSpliterator$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$SkipSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(498, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$SkipSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/SkipSpliterator/lambda$0$Type', 498, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$ValueConsumer = function $clinit_IntStreamImpl$ValueConsumer(){
  jus.$clinit_IntStreamImpl$ValueConsumer = emptyMethod;
}
;
defineClass(492, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$ValueConsumer_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/ValueConsumer', 492, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$lambda$0$Type = function $clinit_IntStreamImpl$lambda$0$Type(){
  jus.$clinit_IntStreamImpl$lambda$0$Type = emptyMethod;
}
;
defineClass(500, 1, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/lambda$0$Type', 500, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$lambda$1$Type = function $clinit_IntStreamImpl$lambda$1$Type(){
  jus.$clinit_IntStreamImpl$lambda$1$Type = emptyMethod;
}
;
defineClass(502, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$lambda$1$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/lambda$1$Type', 502, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$lambda$2$Type = function $clinit_IntStreamImpl$lambda$2$Type(){
  jus.$clinit_IntStreamImpl$lambda$2$Type = emptyMethod;
}
;
defineClass(503, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$lambda$2$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/lambda$2$Type', 503, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$lambda$3$Type = function $clinit_IntStreamImpl$lambda$3$Type(){
  jus.$clinit_IntStreamImpl$lambda$3$Type = emptyMethod;
}
;
defineClass(504, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$lambda$3$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/lambda$3$Type', 504, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$lambda$4$Type = function $clinit_IntStreamImpl$lambda$4$Type(){
  jus.$clinit_IntStreamImpl$lambda$4$Type = emptyMethod;
}
;
defineClass(505, 1, {1:1, 17:1});
cggl.Ljava_util_stream_IntStreamImpl$lambda$4$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/lambda$4$Type', 505, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$lambda$5$Type = function $clinit_IntStreamImpl$lambda$5$Type(){
  jus.$clinit_IntStreamImpl$lambda$5$Type = emptyMethod;
}
;
defineClass(512, 1, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$lambda$5$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/lambda$5$Type', 512, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_IntStreamImpl$lambda$6$Type = function $clinit_IntStreamImpl$lambda$6$Type(){
  jus.$clinit_IntStreamImpl$lambda$6$Type = emptyMethod;
}
;
defineClass(513, 1, {1:1});
cggl.Ljava_util_stream_IntStreamImpl$lambda$6$Type_2_classLit = createForClass('java.util.stream', 'IntStreamImpl/lambda$6$Type', 513, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Stream = function $clinit_Stream(){
  jus.$clinit_Stream = emptyMethod;
}
;
jus.of_1 = function of_1(t){
  jus.$clinit_Stream();
  return ju.singleton(t).stream();
}
;
cggl.Ljava_util_stream_Stream_2_classLit = createForInterface('java.util.stream', 'Stream');
jus.$clinit_Stream$0methodref$close$Type = function $clinit_Stream$0methodref$close$Type(){
  jus.$clinit_Stream$0methodref$close$Type = emptyMethod;
}
;
defineClass(408, 1, {1:1});
cggl.Ljava_util_stream_Stream$0methodref$close$Type_2_classLit = createForClass('java.util.stream', 'Stream/0methodref$close$Type', 408, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Stream$Builder = function $clinit_Stream$Builder(){
  jus.$clinit_Stream$Builder = emptyMethod;
}
;
cggl.Ljava_util_stream_Stream$Builder_2_classLit = createForInterface('java.util.stream', 'Stream/Builder');
jus.$clinit_Stream$1 = function $clinit_Stream$1(){
  jus.$clinit_Stream$1 = emptyMethod;
}
;
defineClass(405, 1, {1:1});
cggl.Ljava_util_stream_Stream$1_2_classLit = createForClass('java.util.stream', 'Stream/1', 405, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Stream$1methodref$close$Type = function $clinit_Stream$1methodref$close$Type(){
  jus.$clinit_Stream$1methodref$close$Type = emptyMethod;
}
;
defineClass(409, 1, {1:1});
cggl.Ljava_util_stream_Stream$1methodref$close$Type_2_classLit = createForClass('java.util.stream', 'Stream/1methodref$close$Type', 409, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Stream$2 = function $clinit_Stream$2(){
  jus.$clinit_Stream$2 = emptyMethod;
}
;
defineClass(406, 180, {1:1, 15:1});
cggl.Ljava_util_stream_Stream$2_2_classLit = createForClass('java.util.stream', 'Stream/2', 406, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_Stream$2$lambda$0$Type = function $clinit_Stream$2$lambda$0$Type(){
  jus.$clinit_Stream$2$lambda$0$Type = emptyMethod;
}
;
defineClass(407, 1, {1:1});
cggl.Ljava_util_stream_Stream$2$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'Stream/2/lambda$0$Type', 407, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_Stream$3 = function $clinit_Stream$3(){
  jus.$clinit_Stream$3 = emptyMethod;
}
;
defineClass(410, 180, {1:1, 15:1});
cggl.Ljava_util_stream_Stream$3_2_classLit = createForClass('java.util.stream', 'Stream/3', 410, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_Stream$4 = function $clinit_Stream$4(){
  jus.$clinit_Stream$4 = emptyMethod;
}
;
defineClass(411, 180, {1:1, 15:1});
cggl.Ljava_util_stream_Stream$4_2_classLit = createForClass('java.util.stream', 'Stream/4', 411, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl = function $clinit_StreamImpl(){
  jus.$clinit_StreamImpl = emptyMethod;
  jus.$clinit_TerminatableStream();
  jus.NULL_CONSUMER = new jus.StreamImpl$lambda$0$Type;
}
;
jus.StreamImpl = function StreamImpl(prev, spliterator){
  jus.$clinit_StreamImpl();
  jus.TerminatableStream.call(this, prev);
  this.$init_247();
  this.spliterator = spliterator;
}
;
jus.lambda$0_2 = function lambda$0_2(value_0){
  jus.$clinit_StreamImpl();
  {
  }
}
;
jus.lambda$2 = function lambda$2(arg0){
  jus.$clinit_StreamImpl();
  return initUnidimensionalArray(cggl.Ljava_lang_Object_2_classLit, {4:1, 1:1, 8:1}, 1, arg0, 5, 1);
}
;
jus.lambda$4 = function lambda$4(collector_0, a_1, t_2){
  jus.$clinit_StreamImpl();
  {
    collector_0.accumulator_0().accept_1(a_1, t_2);
    return a_1;
  }
}
;
jus.lambda$5 = function lambda$5(consumer_0, accumulator_1, item_2){
  jus.$clinit_StreamImpl();
  {
    consumer_0.accept_0(accumulator_1.apply_0(consumer_0.value_0, item_2));
  }
}
;
defineClass(160, 104, {1:1}, jus.StreamImpl);
_.$init_247 = function $init_247(){
}
;
_.close_0 = function close_7(){
  getClassPrototype(104).close_0.call(this);
}
;
_.collect_0 = function collect_1(collector){
  return collector.finisher_0().apply_1(this.reduce(collector.supplier_0().get_0(), new jus.StreamImpl$lambda$4$Type(collector), collector.combiner_0()));
}
;
_.flatMapToInt = function flatMapToInt(mapper){
  var flatMapSpliterator, spliteratorOfStreams;
  this.throwIfTerminated();
  spliteratorOfStreams = new jus.StreamImpl$MapToObjSpliterator(mapper, this.spliterator);
  flatMapSpliterator = new jus.StreamImpl$2(this, {l:4194303, m:4194303, h:524287}, 0, spliteratorOfStreams);
  return new jus.IntStreamImpl(this, flatMapSpliterator);
}
;
_.forEach = function forEach_6(action){
  this.forEachOrdered(action);
}
;
_.forEachOrdered = function forEachOrdered(action){
  this.terminate();
  this.spliterator.forEachRemaining_0(action);
}
;
_.iterator = function iterator_21(){
  return ju.iterator_16(this.spliterator_0());
}
;
_.map_1 = function map_1(mapper){
  this.throwIfTerminated();
  return new jus.StreamImpl(this, new jus.StreamImpl$MapToObjSpliterator(mapper, this.spliterator));
}
;
_.reduce = function reduce(identity, accumulator, combiner){
  var consumer;
  this.terminate();
  consumer = new jus.StreamImpl$ValueConsumer;
  consumer.value_0 = identity;
  this.spliterator.forEachRemaining_0(new jus.StreamImpl$lambda$5$Type(consumer, accumulator));
  return consumer.value_0;
}
;
_.spliterator_0 = function spliterator_15(){
  this.terminate();
  return this.spliterator;
}
;
_.toArray_2 = function toArray_9(){
  return this.toArray_3(new jus.StreamImpl$0methodref$lambda$2$Type);
}
;
_.toArray_3 = function toArray_10(generator){
  var collected;
  collected = castTo(this.collect_0(jus.toList()), 44);
  return collected.toArray_1(castToArray(generator.apply_2(collected.size())));
}
;
cggl.Ljava_util_stream_StreamImpl_2_classLit = createForClass('java.util.stream', 'StreamImpl', 160, cggl.Ljava_util_stream_TerminatableStream_2_classLit);
jus.$clinit_StreamImpl$0methodref$lambda$2$Type = function $clinit_StreamImpl$0methodref$lambda$2$Type(){
  jus.$clinit_StreamImpl$0methodref$lambda$2$Type = emptyMethod;
}
;
jus.StreamImpl$0methodref$lambda$2$Type = function StreamImpl$0methodref$lambda$2$Type(){
  jus.$clinit_StreamImpl$0methodref$lambda$2$Type();
}
;
defineClass(275, 1, {1:1}, jus.StreamImpl$0methodref$lambda$2$Type);
_.apply_2 = function apply_3(arg0){
  return jus.lambda$2(arg0);
}
;
cggl.Ljava_util_stream_StreamImpl$0methodref$lambda$2$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/0methodref$lambda$2$Type', 275, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$1 = function $clinit_StreamImpl$1(){
  jus.$clinit_StreamImpl$1 = emptyMethod;
}
;
defineClass(461, 180, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$1_2_classLit = createForClass('java.util.stream', 'StreamImpl/1', 461, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl$1$lambda$0$Type = function $clinit_StreamImpl$1$lambda$0$Type(){
  jus.$clinit_StreamImpl$1$lambda$0$Type = emptyMethod;
}
;
defineClass(462, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$1$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/1/lambda$0$Type', 462, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$1methodref$add$Type = function $clinit_StreamImpl$1methodref$add$Type(){
  jus.$clinit_StreamImpl$1methodref$add$Type = emptyMethod;
}
;
defineClass(467, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$1methodref$add$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/1methodref$add$Type', 467, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$2 = function $clinit_StreamImpl$2(){
  jus.$clinit_StreamImpl$2 = emptyMethod;
  ju.$clinit_Spliterators$AbstractIntSpliterator();
}
;
jus.StreamImpl$2 = function StreamImpl$2(this$0, $anonymous0, $anonymous1, val$spliteratorOfStreams){
  jus.$clinit_StreamImpl$2();
  this.this$01 = this$0;
  this.val$spliteratorOfStreams5 = val$spliteratorOfStreams;
  ju.Spliterators$AbstractIntSpliterator.call(this, $anonymous0, $anonymous1);
  this.$init_248();
}
;
defineClass(278, 134, {1:1, 15:1, 34:1}, jus.StreamImpl$2);
_.$init_248 = function $init_248(){
}
;
_.lambda$0 = function lambda$0_3(n_0){
  jus.$clinit_StreamImpl$2();
  {
    if (isNotNull(n_0)) {
      this.nextStream = n_0;
      this.next_0 = n_0.spliterator_1();
    }
  }
}
;
_.tryAdvance_0 = function tryAdvance_3(action){
  return this.tryAdvance_1(castTo(action, 17));
}
;
_.advanceToNextSpliterator = function advanceToNextSpliterator(){
  while (isNull(this.next_0)) {
    if (!this.val$spliteratorOfStreams5.tryAdvance(new jus.StreamImpl$2$lambda$0$Type(this))) {
      return false;
    }
  }
  return true;
}
;
_.tryAdvance_1 = function tryAdvance_4(action){
  while (this.advanceToNextSpliterator()) {
    if (this.next_0.tryAdvance_0(action)) {
      return true;
    }
     else {
      this.nextStream.close_0();
      this.nextStream = null;
      this.next_0 = null;
    }
  }
  return false;
}
;
cggl.Ljava_util_stream_StreamImpl$2_2_classLit = createForClass('java.util.stream', 'StreamImpl/2', 278, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_StreamImpl$2$lambda$0$Type = function $clinit_StreamImpl$2$lambda$0$Type(){
  jus.$clinit_StreamImpl$2$lambda$0$Type = emptyMethod;
}
;
jus.StreamImpl$2$lambda$0$Type = function StreamImpl$2$lambda$0$Type($$outer_0){
  jus.$clinit_StreamImpl$2$lambda$0$Type();
  this.$$outer_0 = $$outer_0;
}
;
defineClass(279, 1, {1:1}, jus.StreamImpl$2$lambda$0$Type);
_.accept_0 = function accept_5(arg0){
  this.$$outer_0.lambda$0(arg0);
}
;
cggl.Ljava_util_stream_StreamImpl$2$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/2/lambda$0$Type', 279, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$3 = function $clinit_StreamImpl$3(){
  jus.$clinit_StreamImpl$3 = emptyMethod;
}
;
defineClass(463, 323, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$3_2_classLit = createForClass('java.util.stream', 'StreamImpl/3', 463, cggl.Ljava_util_Spliterators$AbstractLongSpliterator_2_classLit);
jus.$clinit_StreamImpl$3$lambda$0$Type = function $clinit_StreamImpl$3$lambda$0$Type(){
  jus.$clinit_StreamImpl$3$lambda$0$Type = emptyMethod;
}
;
defineClass(464, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$3$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/3/lambda$0$Type', 464, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$4 = function $clinit_StreamImpl$4(){
  jus.$clinit_StreamImpl$4 = emptyMethod;
}
;
defineClass(465, 322, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$4_2_classLit = createForClass('java.util.stream', 'StreamImpl/4', 465, cggl.Ljava_util_Spliterators$AbstractDoubleSpliterator_2_classLit);
jus.$clinit_StreamImpl$4$lambda$0$Type = function $clinit_StreamImpl$4$lambda$0$Type(){
  jus.$clinit_StreamImpl$4$lambda$0$Type = emptyMethod;
}
;
defineClass(466, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$4$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/4/lambda$0$Type', 466, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$5 = function $clinit_StreamImpl$5(){
  jus.$clinit_StreamImpl$5 = emptyMethod;
}
;
defineClass(468, 180, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$5_2_classLit = createForClass('java.util.stream', 'StreamImpl/5', 468, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl$5$2methodref$add$Type = function $clinit_StreamImpl$5$2methodref$add$Type(){
  jus.$clinit_StreamImpl$5$2methodref$add$Type = emptyMethod;
}
;
defineClass(469, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$5$2methodref$add$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/5/2methodref$add$Type', 469, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$6 = function $clinit_StreamImpl$6(){
  jus.$clinit_StreamImpl$6 = emptyMethod;
}
;
defineClass(470, 180, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$6_2_classLit = createForClass('java.util.stream', 'StreamImpl/6', 470, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl$6$lambda$0$Type = function $clinit_StreamImpl$6$lambda$0$Type(){
  jus.$clinit_StreamImpl$6$lambda$0$Type = emptyMethod;
}
;
defineClass(471, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$6$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/6/lambda$0$Type', 471, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$Empty = function $clinit_StreamImpl$Empty(){
  jus.$clinit_StreamImpl$Empty = emptyMethod;
}
;
defineClass(447, 104, {1:1});
cggl.Ljava_util_stream_StreamImpl$Empty_2_classLit = createForClass('java.util.stream', 'StreamImpl/Empty', 447, cggl.Ljava_util_stream_TerminatableStream_2_classLit);
jus.$clinit_StreamImpl$FilterSpliterator = function $clinit_StreamImpl$FilterSpliterator(){
  jus.$clinit_StreamImpl$FilterSpliterator = emptyMethod;
}
;
defineClass(451, 180, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$FilterSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/FilterSpliterator', 451, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl$FilterSpliterator$lambda$0$Type = function $clinit_StreamImpl$FilterSpliterator$lambda$0$Type(){
  jus.$clinit_StreamImpl$FilterSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(457, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$FilterSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/FilterSpliterator/lambda$0$Type', 457, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$LimitSpliterator = function $clinit_StreamImpl$LimitSpliterator(){
  jus.$clinit_StreamImpl$LimitSpliterator = emptyMethod;
}
;
defineClass(453, 180, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$LimitSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/LimitSpliterator', 453, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl$MapToDoubleSpliterator = function $clinit_StreamImpl$MapToDoubleSpliterator(){
  jus.$clinit_StreamImpl$MapToDoubleSpliterator = emptyMethod;
}
;
defineClass(450, 322, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$MapToDoubleSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToDoubleSpliterator', 450, cggl.Ljava_util_Spliterators$AbstractDoubleSpliterator_2_classLit);
jus.$clinit_StreamImpl$MapToDoubleSpliterator$lambda$0$Type = function $clinit_StreamImpl$MapToDoubleSpliterator$lambda$0$Type(){
  jus.$clinit_StreamImpl$MapToDoubleSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(456, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$MapToDoubleSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToDoubleSpliterator/lambda$0$Type', 456, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$MapToIntSpliterator = function $clinit_StreamImpl$MapToIntSpliterator(){
  jus.$clinit_StreamImpl$MapToIntSpliterator = emptyMethod;
}
;
defineClass(448, 134, {1:1, 15:1, 34:1});
cggl.Ljava_util_stream_StreamImpl$MapToIntSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToIntSpliterator', 448, cggl.Ljava_util_Spliterators$AbstractIntSpliterator_2_classLit);
jus.$clinit_StreamImpl$MapToIntSpliterator$lambda$0$Type = function $clinit_StreamImpl$MapToIntSpliterator$lambda$0$Type(){
  jus.$clinit_StreamImpl$MapToIntSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(454, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$MapToIntSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToIntSpliterator/lambda$0$Type', 454, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$MapToLongSpliterator = function $clinit_StreamImpl$MapToLongSpliterator(){
  jus.$clinit_StreamImpl$MapToLongSpliterator = emptyMethod;
}
;
defineClass(449, 323, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$MapToLongSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToLongSpliterator', 449, cggl.Ljava_util_Spliterators$AbstractLongSpliterator_2_classLit);
jus.$clinit_StreamImpl$MapToLongSpliterator$lambda$0$Type = function $clinit_StreamImpl$MapToLongSpliterator$lambda$0$Type(){
  jus.$clinit_StreamImpl$MapToLongSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(455, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$MapToLongSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToLongSpliterator/lambda$0$Type', 455, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$MapToObjSpliterator = function $clinit_StreamImpl$MapToObjSpliterator(){
  jus.$clinit_StreamImpl$MapToObjSpliterator = emptyMethod;
  ju.$clinit_Spliterators$AbstractSpliterator();
}
;
jus.StreamImpl$MapToObjSpliterator = function StreamImpl$MapToObjSpliterator(map_0, original){
  jus.$clinit_StreamImpl$MapToObjSpliterator();
  ju.Spliterators$AbstractSpliterator.call(this, original.estimateSize_0(), original.characteristics_0() & ~(4 | 1));
  this.$init_249();
  ji2.checkNotNull_0(map_0);
  this.map_0 = map_0;
  this.original = original;
}
;
defineClass(161, 180, {1:1, 15:1}, jus.StreamImpl$MapToObjSpliterator);
_.$init_249 = function $init_249(){
}
;
_.lambda$0_0 = function lambda$0_4(action_1, u_1){
  jus.$clinit_StreamImpl$MapToObjSpliterator();
  action_1.accept_0(this.map_0.apply_1(u_1));
}
;
_.tryAdvance = function tryAdvance_5(action){
  return this.original.tryAdvance(new jus.StreamImpl$MapToObjSpliterator$lambda$0$Type(this, action));
}
;
cggl.Ljava_util_stream_StreamImpl$MapToObjSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToObjSpliterator', 161, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl$MapToObjSpliterator$lambda$0$Type = function $clinit_StreamImpl$MapToObjSpliterator$lambda$0$Type(){
  jus.$clinit_StreamImpl$MapToObjSpliterator$lambda$0$Type = emptyMethod;
}
;
jus.StreamImpl$MapToObjSpliterator$lambda$0$Type = function StreamImpl$MapToObjSpliterator$lambda$0$Type($$outer_0, action_1){
  jus.$clinit_StreamImpl$MapToObjSpliterator$lambda$0$Type();
  this.$$outer_0 = $$outer_0;
  this.action_1 = action_1;
}
;
defineClass(273, 1, {1:1}, jus.StreamImpl$MapToObjSpliterator$lambda$0$Type);
_.accept_0 = function accept_6(arg0){
  this.$$outer_0.lambda$0_0(this.action_1, arg0);
}
;
cggl.Ljava_util_stream_StreamImpl$MapToObjSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToObjSpliterator/lambda$0$Type', 273, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$SkipSpliterator = function $clinit_StreamImpl$SkipSpliterator(){
  jus.$clinit_StreamImpl$SkipSpliterator = emptyMethod;
}
;
defineClass(452, 180, {1:1, 15:1});
cggl.Ljava_util_stream_StreamImpl$SkipSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/SkipSpliterator', 452, cggl.Ljava_util_Spliterators$AbstractSpliterator_2_classLit);
jus.$clinit_StreamImpl$SkipSpliterator$lambda$0$Type = function $clinit_StreamImpl$SkipSpliterator$lambda$0$Type(){
  jus.$clinit_StreamImpl$SkipSpliterator$lambda$0$Type = emptyMethod;
}
;
defineClass(458, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$SkipSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/SkipSpliterator/lambda$0$Type', 458, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$ValueConsumer = function $clinit_StreamImpl$ValueConsumer(){
  jus.$clinit_StreamImpl$ValueConsumer = emptyMethod;
  jl.$clinit_Object();
  juf.$clinit_Consumer();
}
;
jus.StreamImpl$ValueConsumer = function StreamImpl$ValueConsumer(){
  jus.$clinit_StreamImpl$ValueConsumer();
  Object_0.call(this);
  this.$init_250();
}
;
defineClass(272, 1, {1:1}, jus.StreamImpl$ValueConsumer);
_.$init_250 = function $init_250(){
}
;
_.accept_0 = function accept_7(value_0){
  this.value_0 = value_0;
}
;
cggl.Ljava_util_stream_StreamImpl$ValueConsumer_2_classLit = createForClass('java.util.stream', 'StreamImpl/ValueConsumer', 272, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$lambda$0$Type = function $clinit_StreamImpl$lambda$0$Type(){
  jus.$clinit_StreamImpl$lambda$0$Type = emptyMethod;
}
;
jus.StreamImpl$lambda$0$Type = function StreamImpl$lambda$0$Type(){
  jus.$clinit_StreamImpl$lambda$0$Type();
}
;
defineClass(274, 1, {1:1}, jus.StreamImpl$lambda$0$Type);
_.accept_0 = function accept_8(arg0){
  jus.lambda$0_2(arg0);
}
;
cggl.Ljava_util_stream_StreamImpl$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/lambda$0$Type', 274, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$lambda$1$Type = function $clinit_StreamImpl$lambda$1$Type(){
  jus.$clinit_StreamImpl$lambda$1$Type = emptyMethod;
}
;
defineClass(459, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$lambda$1$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/lambda$1$Type', 459, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$lambda$3$Type = function $clinit_StreamImpl$lambda$3$Type(){
  jus.$clinit_StreamImpl$lambda$3$Type = emptyMethod;
}
;
defineClass(460, 1, {1:1});
cggl.Ljava_util_stream_StreamImpl$lambda$3$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/lambda$3$Type', 460, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$lambda$4$Type = function $clinit_StreamImpl$lambda$4$Type(){
  jus.$clinit_StreamImpl$lambda$4$Type = emptyMethod;
}
;
jus.StreamImpl$lambda$4$Type = function StreamImpl$lambda$4$Type(collector_0){
  jus.$clinit_StreamImpl$lambda$4$Type();
  this.collector_0 = collector_0;
}
;
defineClass(276, 1, {1:1}, jus.StreamImpl$lambda$4$Type);
_.apply_0 = function apply_4(arg0, arg1){
  return jus.lambda$4(this.collector_0, arg0, arg1);
}
;
cggl.Ljava_util_stream_StreamImpl$lambda$4$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/lambda$4$Type', 276, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamImpl$lambda$5$Type = function $clinit_StreamImpl$lambda$5$Type(){
  jus.$clinit_StreamImpl$lambda$5$Type = emptyMethod;
}
;
jus.StreamImpl$lambda$5$Type = function StreamImpl$lambda$5$Type(consumer_0, accumulator_1){
  jus.$clinit_StreamImpl$lambda$5$Type();
  this.consumer_0 = consumer_0;
  this.accumulator_1 = accumulator_1;
}
;
defineClass(277, 1, {1:1}, jus.StreamImpl$lambda$5$Type);
_.accept_0 = function accept_9(arg0){
  jus.lambda$5(this.consumer_0, this.accumulator_1, arg0);
}
;
cggl.Ljava_util_stream_StreamImpl$lambda$5$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/lambda$5$Type', 277, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport = function $clinit_StreamSupport(){
  jus.$clinit_StreamSupport = emptyMethod;
  jl.$clinit_Object();
}
;
jus.intStream = function intStream(spliterator, parallel){
  return new jus.IntStreamImpl(null, spliterator);
}
;
jus.intStream_0 = function intStream_0(supplier, characteristics, parallel){
  jus.$clinit_StreamSupport();
  return jus.of_1(supplier).map_1(new jus.StreamSupport$1methodref$get$Type).flatMapToInt(new jus.StreamSupport$lambda$1$Type(parallel));
}
;
jus.lambda$1 = function lambda$1(parallel_0, intSpliterator_1){
  jus.$clinit_StreamSupport();
  {
    return jus.intStream(intSpliterator_1, parallel_0);
  }
}
;
jus.stream_1 = function stream_1(spliterator, parallel){
  jus.$clinit_StreamSupport();
  return new jus.StreamImpl(null, spliterator);
}
;
defineClass(379, 1, {1:1});
cggl.Ljava_util_stream_StreamSupport_2_classLit = createForClass('java.util.stream', 'StreamSupport', 379, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$0methodref$get$Type = function $clinit_StreamSupport$0methodref$get$Type(){
  jus.$clinit_StreamSupport$0methodref$get$Type = emptyMethod;
}
;
defineClass(380, 1, {1:1});
cggl.Ljava_util_stream_StreamSupport$0methodref$get$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/0methodref$get$Type', 380, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$1methodref$get$Type = function $clinit_StreamSupport$1methodref$get$Type(){
  jus.$clinit_StreamSupport$1methodref$get$Type = emptyMethod;
}
;
jus.StreamSupport$1methodref$get$Type = function StreamSupport$1methodref$get$Type(){
  jus.$clinit_StreamSupport$1methodref$get$Type();
}
;
defineClass(215, 1, {1:1}, jus.StreamSupport$1methodref$get$Type);
_.apply_1 = function apply_5(arg0){
  return castTo(arg0, 36).get_0();
}
;
cggl.Ljava_util_stream_StreamSupport$1methodref$get$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/1methodref$get$Type', 215, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$2methodref$get$Type = function $clinit_StreamSupport$2methodref$get$Type(){
  jus.$clinit_StreamSupport$2methodref$get$Type = emptyMethod;
}
;
defineClass(382, 1, {1:1});
cggl.Ljava_util_stream_StreamSupport$2methodref$get$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/2methodref$get$Type', 382, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$3methodref$get$Type = function $clinit_StreamSupport$3methodref$get$Type(){
  jus.$clinit_StreamSupport$3methodref$get$Type = emptyMethod;
}
;
defineClass(384, 1, {1:1});
cggl.Ljava_util_stream_StreamSupport$3methodref$get$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/3methodref$get$Type', 384, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$lambda$0$Type = function $clinit_StreamSupport$lambda$0$Type(){
  jus.$clinit_StreamSupport$lambda$0$Type = emptyMethod;
}
;
defineClass(381, 1, {1:1});
cggl.Ljava_util_stream_StreamSupport$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/lambda$0$Type', 381, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$lambda$1$Type = function $clinit_StreamSupport$lambda$1$Type(){
  jus.$clinit_StreamSupport$lambda$1$Type = emptyMethod;
}
;
jus.StreamSupport$lambda$1$Type = function StreamSupport$lambda$1$Type(parallel_0){
  jus.$clinit_StreamSupport$lambda$1$Type();
  this.parallel_0 = parallel_0;
}
;
defineClass(216, 1, {1:1}, jus.StreamSupport$lambda$1$Type);
_.apply_1 = function apply_6(arg0){
  return jus.lambda$1(this.parallel_0, arg0);
}
;
_.parallel_0 = false;
cggl.Ljava_util_stream_StreamSupport$lambda$1$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/lambda$1$Type', 216, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$lambda$2$Type = function $clinit_StreamSupport$lambda$2$Type(){
  jus.$clinit_StreamSupport$lambda$2$Type = emptyMethod;
}
;
defineClass(383, 1, {1:1});
cggl.Ljava_util_stream_StreamSupport$lambda$2$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/lambda$2$Type', 383, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_StreamSupport$lambda$3$Type = function $clinit_StreamSupport$lambda$3$Type(){
  jus.$clinit_StreamSupport$lambda$3$Type = emptyMethod;
}
;
defineClass(385, 1, {1:1});
cggl.Ljava_util_stream_StreamSupport$lambda$3$Type_2_classLit = createForClass('java.util.stream', 'StreamSupport/lambda$3$Type', 385, cggl.Ljava_lang_Object_2_classLit);
jus.$clinit_TerminatableStream$lambda$0$Type = function $clinit_TerminatableStream$lambda$0$Type(){
  jus.$clinit_TerminatableStream$lambda$0$Type = emptyMethod;
}
;
jus.TerminatableStream$lambda$0$Type = function TerminatableStream$lambda$0$Type(throwables_0){
  jus.$clinit_TerminatableStream$lambda$0$Type();
  this.throwables_0 = throwables_0;
}
;
defineClass(280, 1, {1:1}, jus.TerminatableStream$lambda$0$Type);
_.accept_0 = function accept_10(arg0){
  jus.lambda$0_1(this.throwables_0, arg0);
}
;
cggl.Ljava_util_stream_TerminatableStream$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'TerminatableStream/lambda$0$Type', 280, cggl.Ljava_lang_Object_2_classLit);
ji2.$clinit_ArrayHelper = function $clinit_ArrayHelper(){
  ji2.$clinit_ArrayHelper = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.asNativeArray = function asNativeArray(array){
  ji2.$clinit_ArrayHelper();
  return ji2.uncheckedCast(array);
}
;
ji2.clone = function clone(array, fromIndex, toIndex){
  ji2.$clinit_ArrayHelper();
  var result;
  result = ji2.unsafeClone(array, fromIndex, toIndex);
  return ji2.stampJavaTypeInfo_1(result, array);
}
;
ji2.copy_1 = function copy_1(array, srcOfs, dest, destOfs, len){
  ji2.$clinit_ArrayHelper();
  ji2.copy_2(array, srcOfs, dest, destOfs, len, true);
}
;
ji2.copy_2 = function copy_2(src_0, srcOfs, dest, destOfs, len, overwrite){
  var batchEnd, batchStart, destArray, end, spliceArgs;
  if (maskUndefined(src_0) === maskUndefined(dest)) {
    src_0 = ji2.unsafeClone(src_0, srcOfs, srcOfs + len);
    srcOfs = 0;
  }
  destArray = ji2.asNativeArray(dest);
  for (batchStart = srcOfs , end = srcOfs + len; batchStart < end;) {
    batchEnd = $wnd.Math.min(batchStart + 10000, end);
    len = batchEnd - batchStart;
    spliceArgs = ji2.unsafeClone(src_0, batchStart, batchEnd);
    ji2.asNativeArray(spliceArgs).splice(0, 0, destOfs, overwrite?len:0);
    Array.prototype.splice.apply(destArray, spliceArgs);
    batchStart = batchEnd;
    destOfs += len;
  }
}
;
ji2.createFrom = function createFrom(array, length_0){
  ji2.$clinit_ArrayHelper();
  return ji2.stampJavaTypeInfo_1(new Array(length_0), array);
}
;
ji2.getLength_0 = function getLength_0(array){
  ji2.$clinit_ArrayHelper();
  return ji2.asNativeArray(array).length;
}
;
ji2.insertTo = function insertTo(array, index_0, value_0){
  ji2.$clinit_ArrayHelper();
  ji2.asNativeArray(array).splice(index_0, 0, value_0);
}
;
ji2.insertTo_0 = function insertTo_0(array, index_0, values){
  ji2.$clinit_ArrayHelper();
  ji2.copy_2(values, 0, array, index_0, values.length, false);
}
;
ji2.removeFrom = function removeFrom(array, index_0, deleteCount){
  ji2.$clinit_ArrayHelper();
  ji2.asNativeArray(array).splice(index_0, deleteCount);
}
;
ji2.setLength_0 = function setLength_0(array, length_0){
  ji2.$clinit_ArrayHelper();
  ji2.asNativeArray(array).length = length_0;
}
;
ji2.unsafeClone = function unsafeClone(array, fromIndex, toIndex){
  ji2.$clinit_ArrayHelper();
  return ji2.asNativeArray(array).slice(fromIndex, toIndex);
}
;
defineClass(390, 1, {1:1});
ji2.ARRAY_PROCESS_BATCH_SIZE = 10000;
cggl.Ljavaemul_internal_ArrayHelper_2_classLit = createForClass('javaemul.internal', 'ArrayHelper', 390, cggl.Ljava_lang_Object_2_classLit);
ji2.$clinit_ArrayHelper$NativeFunction = function $clinit_ArrayHelper$NativeFunction(){
  ji2.$clinit_ArrayHelper$NativeFunction = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.$clinit_ArrayStamper = function $clinit_ArrayStamper(){
  ji2.$clinit_ArrayStamper = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.stampJavaTypeInfo_1 = function stampJavaTypeInfo_1(array, referenceType){
  ji2.$clinit_ArrayStamper();
  return cggl.stampJavaTypeInfo_0(array, referenceType);
}
;
defineClass(480, 1, {1:1});
cggl.Ljavaemul_internal_ArrayStamper_2_classLit = createForClass('javaemul.internal', 'ArrayStamper', 480, cggl.Ljava_lang_Object_2_classLit);
ji2.$clinit_EmulatedCharset = function $clinit_EmulatedCharset(){
  ji2.$clinit_EmulatedCharset = emptyMethod;
  jnc.$clinit_Charset();
  ji2.UTF_8 = new ji2.EmulatedCharset$UtfCharset('UTF-8');
  ji2.ISO_LATIN_1 = new ji2.EmulatedCharset$LatinCharset('ISO-LATIN-1');
  ji2.ISO_8859_1 = new ji2.EmulatedCharset$LatinCharset('ISO-8859-1');
}
;
ji2.EmulatedCharset = function EmulatedCharset(name_0){
  ji2.$clinit_EmulatedCharset();
  jnc.Charset.call(this, name_0, null);
  this.$init_251();
}
;
defineClass(57, 51, {20:1, 1:1, 51:1, 57:1});
_.$init_251 = function $init_251(){
}
;
cggl.Ljavaemul_internal_EmulatedCharset_2_classLit = createForClass('javaemul.internal', 'EmulatedCharset', 57, cggl.Ljava_nio_charset_Charset_2_classLit);
ji2.$clinit_EmulatedCharset$LatinCharset = function $clinit_EmulatedCharset$LatinCharset(){
  ji2.$clinit_EmulatedCharset$LatinCharset = emptyMethod;
  ji2.$clinit_EmulatedCharset();
}
;
ji2.EmulatedCharset$LatinCharset = function EmulatedCharset$LatinCharset(name_0){
  ji2.$clinit_EmulatedCharset$LatinCharset();
  ji2.EmulatedCharset.call(this, name_0);
  this.$init_252();
}
;
defineClass(145, 57, {20:1, 1:1, 51:1, 57:1}, ji2.EmulatedCharset$LatinCharset);
_.$init_252 = function $init_252(){
}
;
_.decodeString = function decodeString(bytes, ofs, len){
  var chars, i;
  chars = initUnidimensionalArray(cggl.C_classLit, {4:1, 1:1}, 5, len, 15, 1);
  for (i = 0; i < len; ++i) {
    chars[i] = narrow_char(bytes[ofs + i] & 255);
  }
  return chars;
}
;
_.getBytes = function getBytes(str){
  var bytes, i, n;
  n = jl.length__I__devirtual$_0(str);
  bytes = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, n, 15, 1);
  for (i = 0; i < n; ++i) {
    bytes[i] = narrow_byte(jl.charAt_I_C__devirtual$_0(str, i) & 255);
  }
  return bytes;
}
;
cggl.Ljavaemul_internal_EmulatedCharset$LatinCharset_2_classLit = createForClass('javaemul.internal', 'EmulatedCharset/LatinCharset', 145, cggl.Ljavaemul_internal_EmulatedCharset_2_classLit);
ji2.$clinit_EmulatedCharset$UtfCharset = function $clinit_EmulatedCharset$UtfCharset(){
  ji2.$clinit_EmulatedCharset$UtfCharset = emptyMethod;
  ji2.$clinit_EmulatedCharset();
}
;
ji2.EmulatedCharset$UtfCharset = function EmulatedCharset$UtfCharset(name_0){
  ji2.$clinit_EmulatedCharset$UtfCharset();
  ji2.EmulatedCharset.call(this, name_0);
  this.$init_253();
}
;
defineClass(218, 57, {20:1, 1:1, 51:1, 57:1}, ji2.EmulatedCharset$UtfCharset);
_.$init_253 = function $init_253(){
}
;
_.decodeString = function decodeString_0(bytes, ofs, len){
  var b, ch_0, charCount, chars, count, i, i0, outIdx;
  charCount = 0;
  for (i0 = 0; i0 < len;) {
    ++charCount;
    ch_0 = bytes[ofs + i0];
    if ((ch_0 & 192) == 128) {
      throw toJs(new jl.IllegalArgumentException_0('Invalid UTF8 sequence'));
    }
     else if ((ch_0 & 128) == 0) {
      ++i0;
    }
     else if ((ch_0 & 224) == 192) {
      i0 += 2;
    }
     else if ((ch_0 & 240) == 224) {
      i0 += 3;
    }
     else if ((ch_0 & 248) == 240) {
      i0 += 4;
    }
     else {
      throw toJs(new jl.IllegalArgumentException_0('Invalid UTF8 sequence'));
    }
    if (i0 > len) {
      throw toJs(new jl.IndexOutOfBoundsException_0('Invalid UTF8 sequence'));
    }
  }
  chars = initUnidimensionalArray(cggl.C_classLit, {4:1, 1:1}, 5, charCount, 15, 1);
  outIdx = 0;
  count = 0;
  for (i = 0; i < len;) {
    ch_0 = bytes[ofs + i++];
    if ((ch_0 & 128) == 0) {
      count = 1;
      ch_0 &= 127;
    }
     else if ((ch_0 & 224) == 192) {
      count = 2;
      ch_0 &= 31;
    }
     else if ((ch_0 & 240) == 224) {
      count = 3;
      ch_0 &= 15;
    }
     else if ((ch_0 & 248) == 240) {
      count = 4;
      ch_0 &= 7;
    }
     else if ((ch_0 & 252) == 248) {
      count = 5;
      ch_0 &= 3;
    }
    while (--count > 0) {
      b = bytes[ofs + i++];
      if ((b & 192) != 128) {
        throw toJs(new jl.IllegalArgumentException_0('Invalid UTF8 sequence at ' + (ofs + i - 1) + ', byte=' + toHexString(b)));
      }
      ch_0 = ch_0 << 6 | b & 63;
    }
    outIdx += toChars(ch_0, chars, outIdx);
  }
  return chars;
}
;
_.encodeUtf8 = function encodeUtf8(bytes, ofs, codePoint){
  if (codePoint < 1 << 7) {
    bytes[ofs] = narrow_byte(codePoint & 127);
    return 1;
  }
   else if (codePoint < 1 << 11) {
    bytes[ofs++] = narrow_byte(codePoint >> 6 & 31 | 192);
    bytes[ofs] = narrow_byte(codePoint & 63 | 128);
    return 2;
  }
   else if (codePoint < 1 << 16) {
    bytes[ofs++] = narrow_byte(codePoint >> 12 & 15 | 224);
    bytes[ofs++] = narrow_byte(codePoint >> 6 & 63 | 128);
    bytes[ofs] = narrow_byte(codePoint & 63 | 128);
    return 3;
  }
   else if (codePoint < 1 << 21) {
    bytes[ofs++] = narrow_byte(codePoint >> 18 & 7 | 240);
    bytes[ofs++] = narrow_byte(codePoint >> 12 & 63 | 128);
    bytes[ofs++] = narrow_byte(codePoint >> 6 & 63 | 128);
    bytes[ofs] = narrow_byte(codePoint & 63 | 128);
    return 4;
  }
   else if (codePoint < 1 << 26) {
    bytes[ofs++] = narrow_byte(codePoint >> 24 & 3 | 248);
    bytes[ofs++] = narrow_byte(codePoint >> 18 & 63 | 128);
    bytes[ofs++] = narrow_byte(codePoint >> 12 & 63 | 128);
    bytes[ofs++] = narrow_byte(codePoint >> 6 & 63 | 128);
    bytes[ofs] = narrow_byte(codePoint & 63 | 128);
    return 5;
  }
  throw toJs(new jl.IllegalArgumentException_0('Character out of range: ' + codePoint));
}
;
_.getBytes = function getBytes_0(str){
  var byteCount, bytes, ch_0, i, i0, n, out;
  n = jl.length__I__devirtual$_0(str);
  byteCount = 0;
  for (i0 = 0; i0 < n;) {
    ch_0 = jl.codePointAt_I_I__devirtual$(str, i0);
    i0 += charCount_0(ch_0);
    if (ch_0 < 1 << 7) {
      byteCount++;
    }
     else if (ch_0 < 1 << 11) {
      byteCount += 2;
    }
     else if (ch_0 < 1 << 16) {
      byteCount += 3;
    }
     else if (ch_0 < 1 << 21) {
      byteCount += 4;
    }
     else if (ch_0 < 1 << 26) {
      byteCount += 5;
    }
  }
  bytes = initUnidimensionalArray(cggl.B_classLit, {9:1, 4:1, 1:1}, 5, byteCount, 15, 1);
  out = 0;
  for (i = 0; i < n;) {
    ch_0 = jl.codePointAt_I_I__devirtual$(str, i);
    i += charCount_0(ch_0);
    out += this.encodeUtf8(bytes, out, ch_0);
  }
  return bytes;
}
;
cggl.Ljavaemul_internal_EmulatedCharset$UtfCharset_2_classLit = createForClass('javaemul.internal', 'EmulatedCharset/UtfCharset', 218, cggl.Ljavaemul_internal_EmulatedCharset_2_classLit);
ji2.$clinit_NativeArray = function $clinit_NativeArray(){
  ji2.$clinit_NativeArray = emptyMethod;
  jl.$clinit_Object();
}
;
ji2.$clinit_NativeRegExp$Match = function $clinit_NativeRegExp$Match(){
  ji2.$clinit_NativeRegExp$Match = emptyMethod;
}
;
ji2.$asArray = function $asArray(this$static){
  ji2.$clinit_NativeRegExp$Match();
  return ji2.uncheckedCast(this$static);
}
;
cggl.Z_classLit = createForPrimitive('boolean', 'Z');
cggl.B_classLit = createForPrimitive('byte', 'B');
cggl.C_classLit = createForPrimitive('char', 'C');
cggl.D_classLit = createForPrimitive('double', 'D');
cggl.F_classLit = createForPrimitive('float', 'F');
cggl.I_classLit = createForPrimitive('int', 'I');
cggl.J_classLit = createForPrimitive('long', 'J');
cggl.S_classLit = createForPrimitive('short', 'S');
cggl.V_classLit = createForPrimitive('void', 'V');
cargm.$clinit_JSMolecule();
_ = provide('OCL.Molecule', cargm.JSMolecule_0);
_.CANONIZER_ASSIGN_PARITIES_TO_TETRAHEDRAL_N = cargm.CANONIZER_ASSIGN_PARITIES_TO_TETRAHEDRAL_N;
_.CANONIZER_CONSIDER_DIASTEREOTOPICITY = cargm.CANONIZER_CONSIDER_DIASTEREOTOPICITY;
_.CANONIZER_CONSIDER_ENANTIOTOPICITY = cargm.CANONIZER_CONSIDER_ENANTIOTOPICITY;
_.CANONIZER_CONSIDER_STEREOHETEROTOPICITY = cargm.CANONIZER_CONSIDER_STEREOHETEROTOPICITY;
_.CANONIZER_COORDS_ARE_3D = cargm.CANONIZER_COORDS_ARE_3D;
_.CANONIZER_CREATE_PSEUDO_STEREO_GROUPS = cargm.CANONIZER_CREATE_PSEUDO_STEREO_GROUPS;
_.CANONIZER_CREATE_SYMMETRY_RANK = cargm.CANONIZER_CREATE_SYMMETRY_RANK;
_.CANONIZER_DISTINGUISH_RACEMIC_OR_GROUPS = cargm.CANONIZER_DISTINGUISH_RACEMIC_OR_GROUPS;
_.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS = cargm.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS;
_.CANONIZER_ENCODE_ATOM_SELECTION = cargm.CANONIZER_ENCODE_ATOM_SELECTION;
_.FISCHER_PROJECTION_LIMIT = cargm.FISCHER_PROJECTION_LIMIT_0;
_.STEREO_ANGLE_LIMIT = cargm.STEREO_ANGLE_LIMIT_0;
_.VALIDATION_ERRORS_STEREO = cargm.VALIDATION_ERRORS_STEREO_0;
_.VALIDATION_ERROR_AMBIGUOUS_CONFIGURATION = cargm.VALIDATION_ERROR_AMBIGUOUS_CONFIGURATION_0;
_.VALIDATION_ERROR_ESR_CENTER_UNKNOWN = cargm.VALIDATION_ERROR_ESR_CENTER_UNKNOWN_0;
_.VALIDATION_ERROR_OVER_UNDER_SPECIFIED = cargm.VALIDATION_ERROR_OVER_UNDER_SPECIFIED_0;
_.cAtomCIPParityNone = cargm.cAtomCIPParityNone_0;
_.cAtomCIPParityProblem = cargm.cAtomCIPParityProblem_0;
_.cAtomCIPParityRorM = cargm.cAtomCIPParityRorM_0;
_.cAtomCIPParitySorP = cargm.cAtomCIPParitySorP_0;
_.cAtomColorBlue = cargm.cAtomColorBlue_0;
_.cAtomColorDarkGreen = cargm.cAtomColorDarkGreen_0;
_.cAtomColorDarkRed = cargm.cAtomColorDarkRed_0;
_.cAtomColorGreen = cargm.cAtomColorGreen_0;
_.cAtomColorMagenta = cargm.cAtomColorMagenta_0;
_.cAtomColorNone = cargm.cAtomColorNone_0;
_.cAtomColorOrange = cargm.cAtomColorOrange_0;
_.cAtomColorRed = cargm.cAtomColorRed_0;
_.cAtomLabel = cargm.cAtomLabel_0;
_.cAtomParity1 = cargm.cAtomParity1_0;
_.cAtomParity2 = cargm.cAtomParity2_0;
_.cAtomParityIsPseudo = cargm.cAtomParityIsPseudo_0;
_.cAtomParityNone = cargm.cAtomParityNone_0;
_.cAtomParityUnknown = cargm.cAtomParityUnknown_0;
_.cAtomQFAny = cargm.cAtomQFAny_0;
_.cAtomQFAromState = cargm.cAtomQFAromState_0;
_.cAtomQFAromStateBits = cargm.cAtomQFAromStateBits_0;
_.cAtomQFAromStateShift = cargm.cAtomQFAromStateShift_0;
_.cAtomQFAromatic = cargm.cAtomQFAromatic_0;
_.cAtomQFCharge = cargm.cAtomQFCharge_0;
_.cAtomQFChargeBits = cargm.cAtomQFChargeBits_0;
_.cAtomQFChargeShift = cargm.cAtomQFChargeShift_0;
_.cAtomQFExcludeGroup = cargm.cAtomQFExcludeGroup_0;
_.cAtomQFFlatNitrogen = cargm.cAtomQFFlatNitrogen_0;
_.cAtomQFHydrogen = cargm.cAtomQFHydrogen_0;
_.cAtomQFHydrogenBits = cargm.cAtomQFHydrogenBits_0;
_.cAtomQFHydrogenShift = cargm.cAtomQFHydrogenShift_0;
_.cAtomQFMatchStereo = cargm.cAtomQFMatchStereo_0;
_.cAtomQFMoreNeighbours = cargm.cAtomQFMoreNeighbours_0;
_.cAtomQFNarrowing = cargm.cAtomQFNarrowing_0;
_.cAtomQFNeighbourBits = cargm.cAtomQFNeighbourBits_0;
_.cAtomQFNeighbourShift = cargm.cAtomQFNeighbourShift_0;
_.cAtomQFNeighbours = cargm.cAtomQFNeighbours_0;
_.cAtomQFNoMoreNeighbours = cargm.cAtomQFNoMoreNeighbours_0;
_.cAtomQFNoOfBits = cargm.cAtomQFNoOfBits_0;
_.cAtomQFNot0Hydrogen = cargm.cAtomQFNot0Hydrogen_0;
_.cAtomQFNot0Neighbours = cargm.cAtomQFNot0Neighbours_0;
_.cAtomQFNot0PiElectrons = cargm.cAtomQFNot0PiElectrons_0;
_.cAtomQFNot1Hydrogen = cargm.cAtomQFNot1Hydrogen_0;
_.cAtomQFNot1Neighbour = cargm.cAtomQFNot1Neighbour_0;
_.cAtomQFNot1PiElectron = cargm.cAtomQFNot1PiElectron_0;
_.cAtomQFNot2Hydrogen = cargm.cAtomQFNot2Hydrogen_0;
_.cAtomQFNot2Neighbours = cargm.cAtomQFNot2Neighbours_0;
_.cAtomQFNot2PiElectrons = cargm.cAtomQFNot2PiElectrons_0;
_.cAtomQFNot2RingBonds = cargm.cAtomQFNot2RingBonds_0;
_.cAtomQFNot3Hydrogen = cargm.cAtomQFNot3Hydrogen_0;
_.cAtomQFNot3Neighbours = cargm.cAtomQFNot3Neighbours_0;
_.cAtomQFNot3RingBonds = cargm.cAtomQFNot3RingBonds_0;
_.cAtomQFNot4Neighbours = cargm.cAtomQFNot4Neighbours_0;
_.cAtomQFNot4RingBonds = cargm.cAtomQFNot4RingBonds_0;
_.cAtomQFNotAromatic = cargm.cAtomQFNotAromatic_0;
_.cAtomQFNotChain = cargm.cAtomQFNotChain_0;
_.cAtomQFNotCharge0 = cargm.cAtomQFNotCharge0_0;
_.cAtomQFNotChargeNeg = cargm.cAtomQFNotChargeNeg_0;
_.cAtomQFNotChargePos = cargm.cAtomQFNotChargePos_0;
_.cAtomQFPiElectronBits = cargm.cAtomQFPiElectronBits_0;
_.cAtomQFPiElectronShift = cargm.cAtomQFPiElectronShift_0;
_.cAtomQFPiElectrons = cargm.cAtomQFPiElectrons_0;
_.cAtomQFRingSize = cargm.cAtomQFRingSize_0;
_.cAtomQFRingSizeBits = cargm.cAtomQFRingSizeBits_0;
_.cAtomQFRingSizeShift = cargm.cAtomQFRingSizeShift_0;
_.cAtomQFRingState = cargm.cAtomQFRingState_0;
_.cAtomQFRingStateBits = cargm.cAtomQFRingStateBits_0;
_.cAtomQFRingStateShift = cargm.cAtomQFRingStateShift_0;
_.cAtomQFSimpleFeatures = cargm.cAtomQFSimpleFeatures_0;
_.cAtomRadicalState = cargm.cAtomRadicalState_0;
_.cAtomRadicalStateD = cargm.cAtomRadicalStateD_0;
_.cAtomRadicalStateNone = cargm.cAtomRadicalStateNone_0;
_.cAtomRadicalStateS = cargm.cAtomRadicalStateS_0;
_.cAtomRadicalStateShift = cargm.cAtomRadicalStateShift_0;
_.cAtomRadicalStateT = cargm.cAtomRadicalStateT_0;
_.cBondCIPParityEorP = cargm.cBondCIPParityEorP_0;
_.cBondCIPParityNone = cargm.cBondCIPParityNone_0;
_.cBondCIPParityProblem = cargm.cBondCIPParityProblem_0;
_.cBondCIPParityZorM = cargm.cBondCIPParityZorM_0;
_.cBondParityEor1 = cargm.cBondParityEor1_0;
_.cBondParityNone = cargm.cBondParityNone_0;
_.cBondParityUnknown = cargm.cBondParityUnknown_0;
_.cBondParityZor2 = cargm.cBondParityZor2_0;
_.cBondQFAllFeatures = cargm.cBondQFAllFeatures_0;
_.cBondQFAromState = cargm.cBondQFAromState_0;
_.cBondQFAromStateBits = cargm.cBondQFAromStateBits_0;
_.cBondQFAromStateShift = cargm.cBondQFAromStateShift_0;
_.cBondQFAromatic = cargm.cBondQFAromatic_0;
_.cBondQFBondTypes = cargm.cBondQFBondTypes_0;
_.cBondQFBondTypesBits = cargm.cBondQFBondTypesBits_0;
_.cBondQFBondTypesShift = cargm.cBondQFBondTypesShift_0;
_.cBondQFBridge = cargm.cBondQFBridge_0;
_.cBondQFBridgeBits = cargm.cBondQFBridgeBits_0;
_.cBondQFBridgeMin = cargm.cBondQFBridgeMin_0;
_.cBondQFBridgeMinBits = cargm.cBondQFBridgeMinBits_0;
_.cBondQFBridgeMinShift = cargm.cBondQFBridgeMinShift_0;
_.cBondQFBridgeShift = cargm.cBondQFBridgeShift_0;
_.cBondQFBridgeSpan = cargm.cBondQFBridgeSpan_0;
_.cBondQFBridgeSpanBits = cargm.cBondQFBridgeSpanBits_0;
_.cBondQFBridgeSpanShift = cargm.cBondQFBridgeSpanShift_0;
_.cBondQFDelocalized = cargm.cBondQFDelocalized_0;
_.cBondQFDouble = cargm.cBondQFDouble_0;
_.cBondQFMatchStereo = cargm.cBondQFMatchStereo_0;
_.cBondQFMetalLigand = cargm.cBondQFMetalLigand_0;
_.cBondQFNarrowing = cargm.cBondQFNarrowing_0;
_.cBondQFNoOfBits = cargm.cBondQFNoOfBits_0;
_.cBondQFNotAromatic = cargm.cBondQFNotAromatic_0;
_.cBondQFNotRing = cargm.cBondQFNotRing_0;
_.cBondQFRing = cargm.cBondQFRing_0;
_.cBondQFRingSize = cargm.cBondQFRingSize_0;
_.cBondQFRingSizeBits = cargm.cBondQFRingSizeBits_0;
_.cBondQFRingSizeShift = cargm.cBondQFRingSizeShift_0;
_.cBondQFRingState = cargm.cBondQFRingState_0;
_.cBondQFRingStateBits = cargm.cBondQFRingStateBits_0;
_.cBondQFRingStateShift = cargm.cBondQFRingStateShift_0;
_.cBondQFSimpleFeatures = cargm.cBondQFSimpleFeatures_0;
_.cBondQFSingle = cargm.cBondQFSingle_0;
_.cBondQFTriple = cargm.cBondQFTriple_0;
_.cBondTypeCross = cargm.cBondTypeCross_0;
_.cBondTypeDeleted = cargm.cBondTypeDeleted_0;
_.cBondTypeDelocalized = cargm.cBondTypeDelocalized_0;
_.cBondTypeDouble = cargm.cBondTypeDouble_0;
_.cBondTypeDown = cargm.cBondTypeDown_0;
_.cBondTypeIncreaseOrder = cargm.cBondTypeIncreaseOrder_0;
_.cBondTypeMetalLigand = cargm.cBondTypeMetalLigand_0;
_.cBondTypeSingle = cargm.cBondTypeSingle_0;
_.cBondTypeTriple = cargm.cBondTypeTriple_0;
_.cBondTypeUp = cargm.cBondTypeUp_0;
_.cChiralityDiastereomers = cargm.cChiralityDiastereomers_0;
_.cChiralityEpimers = cargm.cChiralityEpimers_0;
_.cChiralityIsomerCountMask = cargm.cChiralityIsomerCountMask_0;
_.cChiralityKnownEnantiomer = cargm.cChiralityKnownEnantiomer_0;
_.cChiralityMeso = cargm.cChiralityMeso_0;
_.cChiralityNotChiral = cargm.cChiralityNotChiral_0;
_.cChiralityRacemic = cargm.cChiralityRacemic_0;
_.cChiralityUnknown = cargm.cChiralityUnknown_0;
_.cChiralityUnknownEnantiomer = cargm.cChiralityUnknownEnantiomer_0;
_.cDefaultAtomValence = cargm.cDefaultAtomValence_0;
_.cESRGroupBits = cargm.cESRGroupBits_0;
_.cESRMaxGroups = cargm.cESRMaxGroups_0;
_.cESRTypeAbs = cargm.cESRTypeAbs_0;
_.cESRTypeAnd = cargm.cESRTypeAnd_0;
_.cESRTypeOr = cargm.cESRTypeOr_0;
_.cHelperBitCIP = cargm.cHelperBitCIP_0;
_.cHelperBitIncludeNitrogenParities = cargm.cHelperBitIncludeNitrogenParities_0;
_.cHelperBitNeighbours = cargm.cHelperBitNeighbours_0;
_.cHelperBitParities = cargm.cHelperBitParities_0;
_.cHelperBitRings = cargm.cHelperBitRings_0;
_.cHelperBitSymmetryDiastereotopic = cargm.cHelperBitSymmetryDiastereotopic_0;
_.cHelperBitSymmetryEnantiotopic = cargm.cHelperBitSymmetryEnantiotopic_0;
_.cHelperBitSymmetrySimple = cargm.cHelperBitSymmetrySimple_0;
_.cHelperBitsStereo = cargm.cHelperBitsStereo_0;
_.cHelperCIP = cargm.cHelperCIP_0;
_.cHelperNeighbours = cargm.cHelperNeighbours_0;
_.cHelperNone = cargm.cHelperNone_0;
_.cHelperParities = cargm.cHelperParities_0;
_.cHelperRings = cargm.cHelperRings_0;
_.cHelperSymmetryDiastereotopic = cargm.cHelperSymmetryDiastereotopic_0;
_.cHelperSymmetryEnantiotopic = cargm.cHelperSymmetryEnantiotopic_0;
_.cHelperSymmetrySimple = cargm.cHelperSymmetrySimple_0;
_.cMaxAtomicNo = cargm.cMaxAtomicNo_0;
_.cMaxConnAtoms = cargm.cMaxConnAtoms_0;
_.cMoleculeColorDefault = cargm.cMoleculeColorDefault_0;
_.cMoleculeColorNeutral = cargm.cMoleculeColorNeutral_0;
_.cRoundedMass = cargm.cRoundedMass_0;
_.fromIDCode = cargm.fromIDCode;
_.fromMolfile = cargm.fromMolfile;
_.fromMolfileWithAtomMap = cargm.fromMolfileWithAtomMap;
_.fromSmiles = cargm.fromSmiles;
_.getAngle = cargm.getAngle_1;
_.getAngleDif = cargm.getAngleDif_1;
_.getAtomicNoFromLabel = cargm.getAtomicNoFromLabel_0;
_.getDefaultAverageBondLength = cargm.getDefaultAverageBondLength_0;
_.isAtomicNoElectronegative = cargm.isAtomicNoElectronegative_0;
_.isAtomicNoElectropositive = cargm.isAtomicNoElectropositive_0;
_.setDefaultAverageBondLength = cargm.setDefaultAverageBondLength_0;
_ = provide('OCL.RingCollection');
_.MAX_SMALL_RING_SIZE = cargm.MAX_SMALL_RING_SIZE_0;
_.MODE_SMALL_AND_LARGE_RINGS = cargm.MODE_SMALL_AND_LARGE_RINGS_0;
_.MODE_SMALL_AND_LARGE_RINGS_AND_AROMATICITY = cargm.MODE_SMALL_AND_LARGE_RINGS_AND_AROMATICITY_0;
_.MODE_SMALL_RINGS_AND_AROMATICITY = cargm.MODE_SMALL_RINGS_AND_AROMATICITY_0;
_.MODE_SMALL_RINGS_ONLY = cargm.MODE_SMALL_RINGS_ONLY_0;
cargm.$clinit_JSSDFileParser();
_ = provide('OCL.SDFileParser', cargm.JSSDFileParser);
cargm.$clinit_JSSSSearcher();
_ = provide('OCL.SSSearcher', cargm.JSSSSearcher);
cargm.$clinit_JSSSSearcherWithIndex();
_ = provide('OCL.SSSearcherWithIndex', cargm.JSSSSearcherWithIndex);
_.bitCount = cargm.bitCount;
_.getHexStringFromIndex = cargm.getHexStringFromIndex_0;
_.getIndexFromHexString = cargm.getIndexFromHexString_0;
_.getKeyIDCode = cargm.getKeyIDCode;
_.getSimilarityAngleCosine = cargm.getSimilarityAngleCosine_0;
_.getSimilarityTanimoto = cargm.getSimilarityTanimoto_0;
cargm.$clinit_JSUtil();
_ = provide('OCL.Util', cargm.JSUtil);
_.getHoseCodesFromDiastereotopicID = cargm.getHoseCodesFromDiastereotopicID;
jl.$clinit_Boolean();
_ = provide('java.lang.Boolean');
_.$isInstance = $isInstance;
jl.$clinit_CharSequence();
_ = provide('java.lang.CharSequence');
_.$isInstance = $isInstance_1;
jl.$clinit_Comparable();
_ = provide('java.lang.Comparable');
_.$isInstance = $isInstance_2;
jl.$clinit_Double();
_ = provide('java.lang.Double');
_.$isInstance = $isInstance_3;
jl.$clinit_Number();
_ = provide('java.lang.Number');
_.$isInstance = jl.$isInstance_0;
jl.$clinit_String();
_ = provide('java.lang.String');
_.$isInstance = $isInstance_4;
jl.$clinit_Throwable();
_ = provide('java.lang.Throwable');
_.of = of;
var $entry = registerEntry_0();
var gwtOnLoad = gwtOnLoad = gwtOnLoad_0;
addInitFunctions(init_4);
setGwtProperty('permProps', [[['locale', 'default'], ['user.agent', 'safari']]]);
$sendStats('moduleStartup', 'moduleEvalEnd');
gwtOnLoad(__gwtModuleFunction.__errFn, __gwtModuleFunction.__moduleName, __gwtModuleFunction.__moduleBase, __gwtModuleFunction.__softPermutationId,__gwtModuleFunction.__computePropValue);
$sendStats('moduleStartup', 'end');
$gwt && $gwt.permProps && __gwtModuleFunction.__moduleStartupDone($gwt.permProps);



        // End GWT code

        var toReturn = $wnd["OCL"];

        toReturn.version = '5.6.1';

        return toReturn;
    }

    var isBrowser, globalEnv;

    if (typeof self !== 'undefined') { // Usual Browser Window or Web Worker
        isBrowser = true;
        globalEnv = self;
    } else if (typeof global !== 'undefined') { // Node.js
        isBrowser = false;
        globalEnv = global;
    } else { // Other environment (example: CouchDB)
        isBrowser = false;
        globalEnv = root;
    }

    var document = globalEnv.document || {};

    if (!document.compatMode) {
        document.compatMode = 'CSS1Compat';
    }

    var fakeWindow;
    if (isBrowser && !true) {
        fakeWindow = globalEnv;
    } else {
        fakeWindow = {};
        fakeWindow.setTimeout = globalEnv.setTimeout ? globalEnv.setTimeout.bind(globalEnv) : noop;
        fakeWindow.clearTimeout = globalEnv.clearTimeout ? globalEnv.clearTimeout.bind(globalEnv) : noop;
        fakeWindow.setInterval = globalEnv.setInterval ? globalEnv.setInterval.bind(globalEnv) : noop;
        fakeWindow.clearInterval = globalEnv.clearInterval ? globalEnv.clearInterval.bind(globalEnv) : noop;
        // required since GWT 2.8.0
        fakeWindow.Error = globalEnv.Error;
        fakeWindow.Math = globalEnv.Math;
        fakeWindow.RegExp = globalEnv.RegExp;
        fakeWindow.TypeError = globalEnv.TypeError;
    }

    if (!fakeWindow.document) {
        fakeWindow.document = document;
    }

    var exportedApi = getExports(fakeWindow);

    if (typeof exports !== 'undefined') { // NodeJS
        fillExports(exportedApi, exports);
    } else if (typeof define === 'function' && define.amd) { // AMD
        define(function () {
            var exportsObj = {};
            fillExports(exportedApi, exportsObj);
            return exportsObj;
        });
    } else { // Global
        var path = ["OCL"];
        var l = path.length - 1;
        var obj = globalEnv;
        for (var i = 0; i < l; i++) {
            obj = obj[path[i]] || (obj[path[i]] = {});
        }
        obj[path[l]] = {};
        fillExports(exportedApi, obj[path[l]]);
    }

    function fillExports(obj, exports) {
        var keys = Object.keys(obj);
        for (var i = 0; i < keys.length; i++) {
            exports[keys[i]] = obj[keys[i]];
        }
    }

    function noop() {}

})(this);
